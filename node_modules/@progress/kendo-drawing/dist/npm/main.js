'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _progress_pakoEsm = require('@progress/pako-esm');

var Class = function Class () {};

var Observable = (function (Class$$1) {
    function Observable() {
        Class$$1.call(this);

        this._events = {};
    }

    if ( Class$$1 ) Observable.__proto__ = Class$$1;
    Observable.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Observable.prototype.constructor = Observable;

    Observable.prototype.bind = function bind (eventName, handlers, one) {
        var arguments$1 = arguments;
        var this$1 = this;

        var eventNames = getArray(eventName);
        var handlersIsFunction = isFunction(handlers);
        var length = eventNames.length;

        if (handlers === undefined) {
            for (var field in eventName) {
                this$1.bind(field, eventName[field]);
            }
            return this;
        }

        var loop = function ( idx ) {
            var eventName$1 = eventNames[idx];

            var handler = handlersIsFunction ? handlers : handlers[eventName$1];

            if (handler) {
                if (one) {
                    var original = handler;
                    handler = function () { // eslint-disable-line no-loop-func
                        this$1.unbind(eventName$1, handler);
                        original.apply(this$1, arguments$1);
                    };
                    handler.original = original;
                }
                var events = this$1._events[eventName$1] = this$1._events[eventName$1] || [];
                events.push(handler);
            }
        };

        for (var idx = 0; idx < length; idx++) loop( idx );

        return this;
    };

    Observable.prototype.one = function one (eventNames, handlers) {
        return this.bind(eventNames, handlers, true);
    };

    Observable.prototype.first = function first (eventName, handlers) {
        var this$1 = this;

        var eventNames = getArray(eventName);
        var handlersIsFunction = isFunction(handlers);

        for (var idx = 0, length = eventNames.length; idx < length; idx++) {
            var eventName$1 = eventNames[idx];

            var handler = handlersIsFunction ? handlers : handlers[eventName$1];

            if (handler) {
                var events = this$1._events[eventName$1] = this$1._events[eventName$1] || [];
                events.unshift(handler);
            }
        }

        return this;
    };

    Observable.prototype.trigger = function trigger (eventName, e) {
        var this$1 = this;
        if ( e === void 0 ) e = {};

        var events = this._events[eventName];

        if (events) {
            var length = events.length;

            e.sender = this;
            e._defaultPrevented = false;
            e.preventDefault = preventDefault;
            e.isDefaultPrevented = isDefaultPrevented;

            events = events.slice();

            for (var idx = 0; idx < length; idx++) {
                events[idx].call(this$1, e);
            }

            return e._defaultPrevented === true;
        }

        return false;
    };

    Observable.prototype.unbind = function unbind (eventName, handler) {
        var events = this._events[eventName];

        if (eventName === undefined) {
            this._events = {};
        } else if (events) {
            if (handler) {
                for (var idx = events.length - 1; idx >= 0; idx--) {
                    if (events[idx] === handler || events[idx].original === handler) {
                        events.splice(idx, 1);
                    }
                }
            } else {
                this._events[eventName] = [];
            }
        }

        return this;
    };

    return Observable;
}(Class));

function isFunction(value) {
    return typeof value === "function";
}

function getArray(value) {
    return typeof value === "string" ? [ value ] : value;
}

function preventDefault() {
    this._defaultPrevented = true;
}

function isDefaultPrevented() {
    return this._defaultPrevented === true;
}

var animationFrameProxy = function (callback) {
    var wnd = typeof window !== "undefined" ? window : {};
    var animationFrame = wnd.requestAnimationFrame ||
                        wnd.webkitRequestAnimationFrame ||
                        wnd.mozRequestAnimationFrame ||
                        wnd.oRequestAnimationFrame ||
                        wnd.msRequestAnimationFrame ||
                        function(callback) { setTimeout(callback, 1000 / 60); };

    animationFrameProxy = function (callback) { return animationFrame.call(wnd, callback); };
    animationFrameProxy(callback);
};

var animationFrame = animationFrameProxy;

var ampRegExp = /&/g;
var ltRegExp = /</g;
var quoteRegExp = /"/g;
var aposRegExp = /'/g;
var gtRegExp = />/g;

function htmlEncode(value) {
    return String(value).replace(ampRegExp, "&amp;").replace(ltRegExp, "&lt;").replace(gtRegExp, "&gt;").replace(quoteRegExp, "&quot;").replace(aposRegExp, "&#39;");
}

/* eslint-disable no-console */

function logToConsole(message) {
    var console = window.console;

    if (typeof(console) != "undefined" && console.log) {
        console.log(message);
    }
}

// XXX: the following will not work with IE9 (requires server proxy).
function saveAs(options) {
    var dataURI = options.dataURI;
    var fileName = options.fileName;
    var data = dataURI;

    if (typeof data == "string" && window.Blob) {
        var parts = data.split(";base64,");
        var contentType = parts[0];
        var base64 = atob(parts[1]);
        var array = new Uint8Array(base64.length);
        for (var idx = 0; idx < base64.length; idx++) {
            array[idx] = base64.charCodeAt(idx);
        }
        data = new Blob([ array.buffer ], { type: contentType });
    }
    if (navigator.msSaveBlob) {
        navigator.msSaveBlob(data, fileName);
    } else {
        var link = document.createElement("a");
        link.download = fileName;
        data = link.href = URL.createObjectURL(data);
        var e = document.createEvent("MouseEvents");
        e.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
        link.dispatchEvent(e);
        setTimeout(function() {
            URL.revokeObjectURL(data);
        });
    }
}

function matchUserAgent(userAgent) {
    var browserRxs = {
        edge: /(edge)[ \/]([\w.]+)/i,
        webkit: /(chrome)[ \/]([\w.]+)/i,
        safari: /(webkit)[ \/]([\w.]+)/i,
        opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i,
        msie: /(msie\s|trident.*? rv:)([\w.]+)/i,
        mozilla: /(mozilla)(?:.*? rv:([\w.]+))/i
    };

    var browser = {};

    for (var agent in browserRxs) {
        if (browserRxs.hasOwnProperty(agent)) {
            var match = userAgent.match(browserRxs[agent]);
            if (match) {
                browser[agent] = true;
                browser[match[1].toLowerCase().split(" ")[0].split("/")[0]] = true;
                browser.version = parseInt(document.documentMode || match[2], 10);

                break;
            }
        }
    }

    return browser;
}

var browser = null;

var support = {
    get browser() {
        if (typeof window === 'undefined' || browser) {
            return browser;
        }

        browser = matchUserAgent(window.navigator.userAgent);
        return browser;
    }
};

function template$1() {
    throw new Error("Template implementation missing.");
}

var now = Date.now || function() {
    return new Date().getTime();
};

function throttle(fn, delay) {
    var lastExecTime = 0;
    var timeout;

    if (!delay || delay <= 0) {
        return fn;
    }

    var throttled = function() {
        var elapsed = now() - lastExecTime;
        var args = arguments;

        var exec = function() {
            fn.apply(null, args);
            lastExecTime = now();
        };

        // first execution
        if (!lastExecTime) {
            return exec();
        }

        if (timeout) {
            clearTimeout(timeout);
        }

        if (elapsed > delay) {
            exec();
        } else {
            timeout = setTimeout(exec, delay - elapsed);
        }
    };

    throttled.cancel = function() {
        clearTimeout(timeout);
    };

    return throttled;
}

var namedColors = {
    aliceblue: "f0f8ff", antiquewhite: "faebd7", aqua: "00ffff",
    aquamarine: "7fffd4", azure: "f0ffff", beige: "f5f5dc",
    bisque: "ffe4c4", black: "000000", blanchedalmond: "ffebcd",
    blue: "0000ff", blueviolet: "8a2be2", brown: "a52a2a",
    burlywood: "deb887", cadetblue: "5f9ea0", chartreuse: "7fff00",
    chocolate: "d2691e", coral: "ff7f50", cornflowerblue: "6495ed",
    cornsilk: "fff8dc", crimson: "dc143c", cyan: "00ffff",
    darkblue: "00008b", darkcyan: "008b8b", darkgoldenrod: "b8860b",
    darkgray: "a9a9a9", darkgrey: "a9a9a9", darkgreen: "006400",
    darkkhaki: "bdb76b", darkmagenta: "8b008b", darkolivegreen: "556b2f",
    darkorange: "ff8c00", darkorchid: "9932cc", darkred: "8b0000",
    darksalmon: "e9967a", darkseagreen: "8fbc8f", darkslateblue: "483d8b",
    darkslategray: "2f4f4f", darkslategrey: "2f4f4f", darkturquoise: "00ced1",
    darkviolet: "9400d3", deeppink: "ff1493", deepskyblue: "00bfff",
    dimgray: "696969", dimgrey: "696969", dodgerblue: "1e90ff",
    firebrick: "b22222", floralwhite: "fffaf0", forestgreen: "228b22",
    fuchsia: "ff00ff", gainsboro: "dcdcdc", ghostwhite: "f8f8ff",
    gold: "ffd700", goldenrod: "daa520", gray: "808080",
    grey: "808080", green: "008000", greenyellow: "adff2f",
    honeydew: "f0fff0", hotpink: "ff69b4", indianred: "cd5c5c",
    indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c",
    lavender: "e6e6fa", lavenderblush: "fff0f5", lawngreen: "7cfc00",
    lemonchiffon: "fffacd", lightblue: "add8e6", lightcoral: "f08080",
    lightcyan: "e0ffff", lightgoldenrodyellow: "fafad2", lightgray: "d3d3d3",
    lightgrey: "d3d3d3", lightgreen: "90ee90", lightpink: "ffb6c1",
    lightsalmon: "ffa07a", lightseagreen: "20b2aa", lightskyblue: "87cefa",
    lightslategray: "778899", lightslategrey: "778899", lightsteelblue: "b0c4de",
    lightyellow: "ffffe0", lime: "00ff00", limegreen: "32cd32",
    linen: "faf0e6", magenta: "ff00ff", maroon: "800000",
    mediumaquamarine: "66cdaa", mediumblue: "0000cd", mediumorchid: "ba55d3",
    mediumpurple: "9370d8", mediumseagreen: "3cb371", mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a", mediumturquoise: "48d1cc", mediumvioletred: "c71585",
    midnightblue: "191970", mintcream: "f5fffa", mistyrose: "ffe4e1",
    moccasin: "ffe4b5", navajowhite: "ffdead", navy: "000080",
    oldlace: "fdf5e6", olive: "808000", olivedrab: "6b8e23",
    orange: "ffa500", orangered: "ff4500", orchid: "da70d6",
    palegoldenrod: "eee8aa", palegreen: "98fb98", paleturquoise: "afeeee",
    palevioletred: "d87093", papayawhip: "ffefd5", peachpuff: "ffdab9",
    peru: "cd853f", pink: "ffc0cb", plum: "dda0dd",
    powderblue: "b0e0e6", purple: "800080", red: "ff0000",
    rosybrown: "bc8f8f", royalblue: "4169e1", saddlebrown: "8b4513",
    salmon: "fa8072", sandybrown: "f4a460", seagreen: "2e8b57",
    seashell: "fff5ee", sienna: "a0522d", silver: "c0c0c0",
    skyblue: "87ceeb", slateblue: "6a5acd", slategray: "708090",
    slategrey: "708090", snow: "fffafa", springgreen: "00ff7f",
    steelblue: "4682b4", tan: "d2b48c", teal: "008080",
    thistle: "d8bfd8", tomato: "ff6347", turquoise: "40e0d0",
    violet: "ee82ee", wheat: "f5deb3", white: "ffffff",
    whitesmoke: "f5f5f5", yellow: "ffff00", yellowgreen: "9acd32"
};

var browser$1 = support.browser;

var matchNamedColor = function (color) {
    var colorNames = Object.keys(namedColors);
    colorNames.push("transparent");

    var regexp = new RegExp("^(" + colorNames.join("|") + ")(\\W|$)", "i");
    matchNamedColor = function (color) { return regexp.exec(color); };

    return regexp.exec(color);
};

var BaseColor = (function (Class$$1) {
    function BaseColor() { Class$$1.call(this); }

    if ( Class$$1 ) BaseColor.__proto__ = Class$$1;
    BaseColor.prototype = Object.create( Class$$1 && Class$$1.prototype );
    BaseColor.prototype.constructor = BaseColor;
    BaseColor.prototype.toHSV = function toHSV () { return this; };

    BaseColor.prototype.toRGB = function toRGB () { return this; };

    BaseColor.prototype.toHex = function toHex (options) { return this.toBytes().toHex(options); };

    BaseColor.prototype.toBytes = function toBytes () { return this; };

    BaseColor.prototype.toCss = function toCss (options) { return "#" + this.toHex(options); };

    BaseColor.prototype.toCssRgba = function toCssRgba () {
        var rgb = this.toBytes();
        return ("rgba(" + (rgb.r) + ", " + (rgb.g) + ", " + (rgb.b) + ", " + (parseFloat((Number(this.a)).toFixed(3))) + ")");
    };

    BaseColor.prototype.toDisplay = function toDisplay () {
        if (browser$1.msie && browser$1.version < 9) {
            return this.toCss(); // no RGBA support; does it support any opacity in colors?
        }
        return this.toCssRgba();
    };

    BaseColor.prototype.equals = function equals (c) {
        return c === this || ((c !== null && c !== undefined) && this.toCssRgba() === parseColor(c).toCssRgba());
    };

    BaseColor.prototype.diff = function diff (other) {
        if (other === null) {
            return NaN;
        }

        var c1 = this.toBytes();
        var c2 = other.toBytes();

        return Math.sqrt(Math.pow((c1.r - c2.r) * 0.30, 2) +
                         Math.pow((c1.g - c2.g) * 0.59, 2) +
                         Math.pow((c1.b - c2.b) * 0.11, 2));
    };

    BaseColor.prototype.clone = function clone () {
        var c = this.toBytes();
        if (c === this) {
            c = new Bytes(c.r, c.g, c.b, c.a);
        }

        return c;
    };

    return BaseColor;
}(Class));

var RGB = (function (BaseColor) {
    function RGB(r, g, b, a) {
        BaseColor.call(this);

        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }

    if ( BaseColor ) RGB.__proto__ = BaseColor;
    RGB.prototype = Object.create( BaseColor && BaseColor.prototype );
    RGB.prototype.constructor = RGB;

    RGB.prototype.toHSV = function toHSV () {
        var ref = this;
        var r = ref.r;
        var g = ref.g;
        var b = ref.b;
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var delta = max - min;
        var v = max;
        var h, s;

        if (delta === 0) {
            return new HSV(0, 0, v, this.a);
        }

        if (max !== 0) {
            s = delta / max;
            if (r === max) {
                h = (g - b) / delta;
            } else if (g === max) {
                h = 2 + (b - r) / delta;
            } else {
                h = 4 + (r - g) / delta;
            }

            h *= 60;
            if (h < 0) {
                h += 360;
            }
        } else {
            s = 0;
            h = -1;
        }

        return new HSV(h, s, v, this.a);
    };

    RGB.prototype.toHSL = function toHSL () {
        var ref = this;
        var r = ref.r;
        var g = ref.g;
        var b = ref.b;
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var h, s, l = (max + min) / 2;

        if (max === min) {
            h = s = 0;
        } else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
            default: break;
            }
        }

        return new HSL(h * 60, s * 100, l * 100, this.a);
    };

    RGB.prototype.toBytes = function toBytes () {
        return new Bytes(this.r * 255, this.g * 255, this.b * 255, this.a);
    };

    return RGB;
}(BaseColor));

var Bytes = (function (RGB) {
    function Bytes(r, g, b, a) {
        RGB.call(this, Math.round(r), Math.round(g), Math.round(b), a);
    }

    if ( RGB ) Bytes.__proto__ = RGB;
    Bytes.prototype = Object.create( RGB && RGB.prototype );
    Bytes.prototype.constructor = Bytes;

    Bytes.prototype.toRGB = function toRGB () {
        return new RGB(this.r / 255, this.g / 255, this.b / 255, this.a);
    };

    Bytes.prototype.toHSV = function toHSV () {
        return this.toRGB().toHSV();
    };

    Bytes.prototype.toHSL = function toHSL () {
        return this.toRGB().toHSL();
    };

    Bytes.prototype.toHex = function toHex (options) {
        var value = hex(this.r, 2) + hex(this.g, 2) + hex(this.b, 2);

        if (options && options.alpha) {
            value += hex(Math.round(this.a * 255), 2);
        }

        return value;
    };

    Bytes.prototype.toBytes = function toBytes () {
        return this;
    };

    return Bytes;
}(RGB));

function hex(n, width, pad) {
    if ( pad === void 0 ) pad = "0";

    var result = n.toString(16);
    while (width > result.length) {
        result = pad + result;
    }

    return result;
}

var HSV = (function (BaseColor) {
    function HSV(h, s, v, a) {
        BaseColor.call(this);

        this.h = h;
        this.s = s;
        this.v = v;
        this.a = a;
    }

    if ( BaseColor ) HSV.__proto__ = BaseColor;
    HSV.prototype = Object.create( BaseColor && BaseColor.prototype );
    HSV.prototype.constructor = HSV;

    HSV.prototype.toRGB = function toRGB () {
        var ref = this;
        var h = ref.h;
        var s = ref.s;
        var v = ref.v;
        var r, g, b;

        if (s === 0) {
            r = g = b = v;
        } else {
            h /= 60;

            var i = Math.floor(h);
            var f = h - i;
            var p = v * (1 - s);
            var q = v * (1 - s * f);
            var t = v * (1 - s * (1 - f));

            switch (i) {
            case 0: r = v; g = t; b = p; break;
            case 1: r = q; g = v; b = p; break;
            case 2: r = p; g = v; b = t; break;
            case 3: r = p; g = q; b = v; break;
            case 4: r = t; g = p; b = v; break;
            default: r = v; g = p; b = q; break;
            }
        }

        return new RGB(r, g, b, this.a);
    };

    HSV.prototype.toHSL = function toHSL () {
        return this.toRGB().toHSL();
    };

    HSV.prototype.toBytes = function toBytes () {
        return this.toRGB().toBytes();
    };

    return HSV;
}(BaseColor));

var HSL = (function (BaseColor) {
    function HSL(h, s, l, a) {
        BaseColor.call(this);

        this.h = h;
        this.s = s;
        this.l = l;
        this.a = a;
    }

    if ( BaseColor ) HSL.__proto__ = BaseColor;
    HSL.prototype = Object.create( BaseColor && BaseColor.prototype );
    HSL.prototype.constructor = HSL;

    HSL.prototype.toRGB = function toRGB () {
        var h = this.h / 360;
        var s = this.s / 100;
        var l = this.l / 100;
        var r, g, b;

        if (s === 0) {
            r = g = b = l; // achromatic
        } else {
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }

        return new RGB(r, g, b, this.a);
    };

    HSL.prototype.toHSV = function toHSV () {
        return this.toRGB().toHSV();
    };

    HSL.prototype.toBytes = function toBytes () {
        return this.toRGB().toBytes();
    };

    return HSL;
}(BaseColor));

function hue2rgb(p, q, s) {
    var t = s;

    if (t < 0) {
        t += 1;
    }

    if (t > 1) {
        t -= 1;
    }

    if (t < 1 / 6) {
        return p + (q - p) * 6 * t;
    }

    if (t < 1 / 2) {
        return q;
    }

    if (t < 2 / 3) {
        return p + (q - p) * (2 / 3 - t) * 6;
    }

    return p;
}

function alphaFromHex(a) {
    return parseFloat(parseFloat(parseInt(a, 16) / 255 ).toFixed(3));
}

function parseColor(value, safe) {
    var m, ret;

    if (value == null || value === "none") {
        return null;
    }

    if (value instanceof BaseColor) {
        return value;
    }

    var color = value.toLowerCase();
    if ((m = matchNamedColor(color))) {
        if (m[1] === "transparent") {
            color = new RGB(1, 1, 1, 0);
        } else {
            color = parseColor(namedColors[m[1]], safe);
        }
        color.match = [ m[1] ];
        return color;
    }
    if ((m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\b/i.exec(color))) {
        ret = new Bytes(parseInt(m[1], 16),
            parseInt(m[2], 16),
            parseInt(m[3], 16), 1);
    } else if ((m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])\b/i.exec(color))) {
        ret = new Bytes(parseInt(m[1] + m[1], 16),
            parseInt(m[2] + m[2], 16),
            parseInt(m[3] + m[3], 16), 1);
    } else if ((m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])\b/i.exec(color))) { // Parse 4 digit hex color
        ret = new Bytes(parseInt(m[1] + m[1], 16),
            parseInt(m[2] + m[2], 16),
            parseInt(m[3] + m[3], 16),
            alphaFromHex(m[4] + m[4]));
    } else if ((m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\b/i.exec(color))) { // Parse 8 digit hex color
        ret = new Bytes(parseInt(m[1], 16),
            parseInt(m[2], 16),
            parseInt(m[3], 16),
            alphaFromHex(m[4]));
    } else if ((m = /^rgb\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)/.exec(color))) {
        ret = new Bytes(parseInt(m[1], 10),
            parseInt(m[2], 10),
            parseInt(m[3], 10), 1);
    } else if ((m = /^rgba\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9.]+)\s*\)/.exec(color))) {
        ret = new Bytes(parseInt(m[1], 10),
            parseInt(m[2], 10),
            parseInt(m[3], 10), parseFloat(m[4]));
    } else if ((m = /^rgb\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*\)/.exec(color))) {
        ret = new RGB(parseFloat(m[1]) / 100,
            parseFloat(m[2]) / 100,
            parseFloat(m[3]) / 100, 1);
    } else if ((m = /^rgba\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9.]+)\s*\)/.exec(color))) {
        ret = new RGB(parseFloat(m[1]) / 100,
            parseFloat(m[2]) / 100,
            parseFloat(m[3]) / 100, parseFloat(m[4]));
    }

    if (ret) {
        ret.match = m;
    } else if (!safe) {
        throw new Error("Cannot parse color: " + color);
    }

    return ret;
}

var DARK_TRESHOLD = 180;

var Color = (function (Class$$1) {
    function Color(value) {
        var this$1 = this;

        Class$$1.call(this);

        if (arguments.length === 1) {
            var formats = Color.formats;
            var resolvedColor = this.resolveColor(value);

            for (var idx = 0; idx < formats.length; idx++) {
                var formatRegex = formats[idx].re;
                var processor = formats[idx].process;
                var parts = formatRegex.exec(resolvedColor);

                if (parts) {
                    var channels = processor(parts);
                    this$1.r = channels[0];
                    this$1.g = channels[1];
                    this$1.b = channels[2];
                }
            }
        } else {
            this.r = arguments[0];
            this.g = arguments[1];
            this.b = arguments[2];
        }

        this.r = this.normalizeByte(this.r);
        this.g = this.normalizeByte(this.g);
        this.b = this.normalizeByte(this.b);
    }

    if ( Class$$1 ) Color.__proto__ = Class$$1;
    Color.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Color.prototype.constructor = Color;

    Color.prototype.toHex = function toHex () {
        var pad = this.padDigit;
        var r = this.r.toString(16);
        var g = this.g.toString(16);
        var b = this.b.toString(16);

        return "#" + pad(r) + pad(g) + pad(b);
    };

    Color.prototype.resolveColor = function resolveColor (value) {
        var color = value || "black";

        if (color.charAt(0) === "#") {
            color = color.substr(1, 6);
        }

        color = color.replace(/ /g, "");
        color = color.toLowerCase();
        color = Color.namedColors[color] || color;

        return color;
    };

    Color.prototype.normalizeByte = function normalizeByte (value) {
        if (value < 0 || isNaN(value)) {
            return 0;
        }

        return value > 255 ? 255 : value;
    };

    Color.prototype.padDigit = function padDigit (value) {
        return (value.length === 1) ? "0" + value : value;
    };

    Color.prototype.brightness = function brightness (value) {
        var round = Math.round;

        this.r = round(this.normalizeByte(this.r * value));
        this.g = round(this.normalizeByte(this.g * value));
        this.b = round(this.normalizeByte(this.b * value));

        return this;
    };

    Color.prototype.percBrightness = function percBrightness () {
        return Math.sqrt(0.241 * this.r * this.r + 0.691 * this.g * this.g + 0.068 * this.b * this.b);
    };

    Color.prototype.isDark = function isDark () {
        return this.percBrightness() < DARK_TRESHOLD;
    };

    Color.fromBytes = function fromBytes (r, g, b, a) {
        return new Bytes(r, g, b, a != null ? a : 1);
    };

    Color.fromRGB = function fromRGB (r, g, b, a) {
        return new RGB(r, g, b, a != null ? a : 1);
    };

    Color.fromHSV = function fromHSV (h, s, v, a) {
        return new HSV(h, s, v, a != null ? a : 1);
    };

    Color.fromHSL = function fromHSL (h, s, l, a) {
        return new HSL(h, s, l, a != null ? a : 1);
    };

    return Color;
}(Class));

Color.formats = [ {
    re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
    process: function(parts) {
        return [
            parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)
        ];
    }
}, {
    re: /^(\w{2})(\w{2})(\w{2})$/,
    process: function(parts) {
        return [
            parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)
        ];
    }
}, {
    re: /^(\w{1})(\w{1})(\w{1})$/,
    process: function(parts) {
        return [
            parseInt(parts[1] + parts[1], 16),
            parseInt(parts[2] + parts[2], 16),
            parseInt(parts[3] + parts[3], 16)
        ];
    }
} ];

Color.namedColors = namedColors;

var HasObservers = (function (Class$$1) {
    function HasObservers () {
        Class$$1.apply(this, arguments);
    }

    if ( Class$$1 ) HasObservers.__proto__ = Class$$1;
    HasObservers.prototype = Object.create( Class$$1 && Class$$1.prototype );
    HasObservers.prototype.constructor = HasObservers;

    HasObservers.prototype.observers = function observers () {
        this._observers = this._observers || [];
        return this._observers;
    };

    HasObservers.prototype.addObserver = function addObserver (element) {
        if (!this._observers) {
            this._observers = [ element ];
        } else {
            this._observers.push(element);
        }
        return this;
    };

    HasObservers.prototype.removeObserver = function removeObserver (element) {
        var observers = this.observers();
        var index = observers.indexOf(element);
        if (index !== -1) {
            observers.splice(index, 1);
        }
        return this;
    };

    HasObservers.prototype.trigger = function trigger (methodName, event) {
        var observers = this._observers;

        if (observers && !this._suspended) {
            for (var idx = 0; idx < observers.length; idx++) {
                var observer = observers[idx];
                if (observer[methodName]) {
                    observer[methodName](event);
                }
            }
        }
        return this;
    };

    HasObservers.prototype.optionsChange = function optionsChange (e) {
        if ( e === void 0 ) e = {};

        e.element = this;
        this.trigger("optionsChange", e);
    };

    HasObservers.prototype.geometryChange = function geometryChange () {
        this.trigger("geometryChange", {
            element: this
        });
    };

    HasObservers.prototype.suspend = function suspend () {
        this._suspended = (this._suspended || 0) + 1;
        return this;
    };

    HasObservers.prototype.resume = function resume () {
        this._suspended = Math.max((this._suspended || 0) - 1, 0);
        return this;
    };

    HasObservers.prototype._observerField = function _observerField (field, value) {
        if (this[field]) {
            this[field].removeObserver(this);
        }
        this[field] = value;
        value.addObserver(this);
    };

    return HasObservers;
}(Class));

function append$1$1(first, second) {
    first.push.apply(first, second);
    return first;
}

/* eslint-disable key-spacing,no-multi-spaces,no-param-reassign */

var literals = {
    1    : "i",       10   : "x",       100  : "c",
    2    : "ii",      20   : "xx",      200  : "cc",
    3    : "iii",     30   : "xxx",     300  : "ccc",
    4    : "iv",      40   : "xl",      400  : "cd",
    5    : "v",       50   : "l",       500  : "d",
    6    : "vi",      60   : "lx",      600  : "dc",
    7    : "vii",     70   : "lxx",     700  : "dcc",
    8    : "viii",    80   : "lxxx",    800  : "dccc",
    9    : "ix",      90   : "xc",      900  : "cm",
    1000 : "m"
};

function arabicToRoman(n) {
    var values = [ 1000,
        900 , 800, 700, 600, 500, 400, 300, 200, 100,
        90  , 80 , 70 , 60 , 50 , 40 , 30 , 20 , 10 ,
        9   , 8  , 7  , 6  , 5  , 4  , 3  , 2  , 1 ];

    var roman = "";
    while (n > 0) {
        if (n < values[0]) {
            values.shift();
        } else {
            roman += literals[values[0]];
            n -= values[0];
        }
    }
    return roman;
}

function createPromise() {
    var resolveFn, rejectFn;
    var promise = new Promise(function (resolve, reject) {
        resolveFn = function (data) {
            promise._state = "resolved";
            resolve(data);
            return promise;
        };
        rejectFn = function (data) {
            promise._state = "rejected";
            reject(data);

            return promise;
        };
    });
    promise._state = "pending";
    promise.resolve = resolveFn;
    promise.reject = rejectFn;
    promise.state = function () { return promise._state; };

    return promise;
}

var UNDEFINED = "undefined";

function defined(value) {
    return typeof value !== UNDEFINED;
}

var defId = 1;

function definitionId() {
    return "kdef" + defId++;
}

var DEG_TO_RAD = Math.PI / 180;
var MAX_NUM = Number.MAX_VALUE;
var MIN_NUM = -Number.MAX_VALUE;

function deg(radians) {
    return radians / DEG_TO_RAD;
}

var fromCharCode = String.fromCharCode;

var BOM = '\xfe\xff';

// Encodes a string as UTF-8
function encodeUTF8(input) {
    var output = "";

    for (var i = 0; i < input.length; i++) {
        var code = input.charCodeAt(i);

        if (0xD800 <= code && code <= 0xDBFF) {
            var hi = code;
            var low = input.charCodeAt(++i);

            if (!isNaN(low)) {
                // Combine high and low surrogate
                // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt
                code = (hi - 0xD800) * 0x400 +
                       (low - 0xDC00) + 0x10000;
            }
        }

        if (code < 0x80) {
            // One byte
            output += fromCharCode(code);
        } else if (code < 0x800) {
            // Two bytes
            output += fromCharCode(0xC0 | (code >>> 6));
            output += fromCharCode(0x80 | (code & 0x3f));
        } else if (code < 0x10000) {
            // Three bytes
            output += fromCharCode(0xE0 | (code >>> 12));
            output += fromCharCode(0x80 | (code >>> 6 & 0x3f));
            output += fromCharCode(0x80 | (code & 0x3f));
        } else if (code < 0x10FFFF) {
            // Four bytes
            output += fromCharCode(0xF0 | (code >>> 18));
            output += fromCharCode(0x80 | (code >>> 12 & 0x3f));
            output += fromCharCode(0x80 | (code >>> 6 & 0x3f));
            output += fromCharCode(0x80 | (code & 0x3f));
        }
    }

    return output;
}

function encodeUnit(codeUnit) {
    return fromCharCode(codeUnit >> 8) + fromCharCode(codeUnit & 0x00ff);
}

// Encodes a string as UTF-16 big-endian
function encodeUTF16BE(input) {
    var output = '';

    for (var i = 0; i < input.length; i++) {
        var c = input.charCodeAt(i);

        if (c < 0xFFFF) {
            output += encodeUnit(c);
        } else {
            var lead = ((c - 0x10000) >> 10) + 0xD800;
            var trail = ((c - 0x10000) & 0x3FF) + 0xDC00;
            output += encodeUnit(lead);
            output += encodeUnit(trail);
        }
    }

    return output;
}

var KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

function encodeBase64(input) {
    var output = "";
    var i = 0;

    var utfInput = encodeUTF8(input);

    while (i < utfInput.length) {
        var chr1 = utfInput.charCodeAt(i++);
        var chr2 = utfInput.charCodeAt(i++);
        var chr3 = utfInput.charCodeAt(i++);

        var enc1 = chr1 >> 2;
        var enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        var enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        var enc4 = chr3 & 63;

        if (isNaN(chr2)) {
            enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
            enc4 = 64;
        }

        output = output +
            KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) +
            KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);
    }

    return output;
}

function eventCoordinates(e) {
    if (defined((e.x || {}).location)) {
        return {
            x: e.x.location,
            y: e.y.location
        };
    }

    return {
        x: e.pageX || e.clientX || 0,
        y: e.pageY || e.clientY || 0
    };
}

function eventElement(e) {
    if ( e === void 0 ) e = {};

    return e.touch ? e.touch.initialTouch : e.target;
}

function isTransparent(color) {
    return color === "" || color === null || color === "none" || color === "transparent" || !defined(color);
}

function last(array) {
    if (array) {
        return array[array.length - 1];
    }
}

function limitValue(value, min, max) {
    return Math.max(Math.min(value, max), min);
}

/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
/* eslint-disable no-param-reassign, no-var, block-scoped-var */

// mergeSort is stable.
function mergeSort(a, cmp) {
    if (a.length < 2) {
        return a.slice();
    }
    function merge(a, b) {
        var r = [], ai = 0, bi = 0, i = 0;
        while (ai < a.length && bi < b.length) {
            if (cmp(a[ai], b[bi]) <= 0) {
                r[i++] = a[ai++];
            } else {
                r[i++] = b[bi++];
            }
        }
        if (ai < a.length) {
            r.push.apply(r, a.slice(ai));
        }
        if (bi < b.length) {
            r.push.apply(r, b.slice(bi));
        }
        return r;
    }
    return (function sort(a) {
        if (a.length <= 1) {
            return a;
        }
        var m = Math.floor(a.length / 2);
        var left = a.slice(0, m);
        var right = a.slice(m);
        left = sort(left);
        right = sort(right);
        return merge(left, right);
    })(a);
}

function promiseAll(promises) {
    return Promise.all(promises);
}

function rad(degrees) {
    return degrees * DEG_TO_RAD;
}

function pow(p) {
    if (p) {
        return Math.pow(10, p);
    }

    return 1;
}

function round(value, precision) {
    var power = pow(precision);
    return Math.round(value * power) / power;
}

function valueOrDefault(value, defaultValue) {
    return defined(value) ? value : defaultValue;
}

function bindEvents(element, events) {
    for (var eventName in events) {
        var eventNames = eventName.trim().split(" ");
        for (var idx = 0; idx < eventNames.length; idx++) {
            element.addEventListener(eventNames[idx], events[eventName], false);
        }
    }
}

function elementOffset(element) {
    var box = element.getBoundingClientRect();

    var documentElement = document.documentElement;

    return {
        top: box.top + (window.pageYOffset || documentElement.scrollTop) - (documentElement.clientTop || 0),
        left: box.left + (window.pageXOffset || documentElement.scrollLeft) - (documentElement.clientLeft || 0)
    };
}

function elementStyles(element, styles) {
    var result = {};
    var style = window.getComputedStyle(element) || {};
    var stylesArray = Array.isArray(styles) ? styles : [ styles ];

    for (var idx = 0; idx < stylesArray.length; idx++) {
        var field = stylesArray[idx];
        result[field] = style[field];
    }

    return result;
}

function getPixels(value) {
    if (isNaN(value)) {
        return value;
    }
    return value + "px";
}

function elementSize(element, size) {
    if (size) {
        var width = size.width;
        var height = size.height;

        if (defined(width)) {
            element.style.width = getPixels(width);
        }

        if (defined(height)) {
            element.style.height = getPixels(height);
        }

    } else {
        var size$1 = elementStyles(element, [ 'width', 'height' ]);

        return {
            width: parseInt(size$1.width, 10),
            height: parseInt(size$1.height, 10)
        };
    }
}

function unbindEvents(element, events) {
    if ( events === void 0 ) events = {};

    for (var name in events) {
        var eventNames = name.trim().split(" ");
        for (var idx = 0; idx < eventNames.length; idx++) {
            element.removeEventListener(eventNames[idx], events[name], false);
        }
    }
}

function elementPadding(element) {
    var ref = elementStyles(element, [ "paddingLeft", "paddingTop" ]);
    var paddingLeft = ref.paddingLeft;
    var paddingTop = ref.paddingTop;
    return {
        top: parseFloat(paddingTop),
        left: parseFloat(paddingLeft)
    };
}

var Matrix = (function (Class$$1) {
    function Matrix(a, b, c, d, e, f) {
        if ( a === void 0 ) a = 0;
        if ( b === void 0 ) b = 0;
        if ( c === void 0 ) c = 0;
        if ( d === void 0 ) d = 0;
        if ( e === void 0 ) e = 0;
        if ( f === void 0 ) f = 0;

        Class$$1.call(this);

        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.f = f;
    }

    if ( Class$$1 ) Matrix.__proto__ = Class$$1;
    Matrix.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Matrix.prototype.constructor = Matrix;

    Matrix.prototype.multiplyCopy = function multiplyCopy (matrix) {
        return new Matrix(
            this.a * matrix.a + this.c * matrix.b,
            this.b * matrix.a + this.d * matrix.b,
            this.a * matrix.c + this.c * matrix.d,
            this.b * matrix.c + this.d * matrix.d,
            this.a * matrix.e + this.c * matrix.f + this.e,
            this.b * matrix.e + this.d * matrix.f + this.f
        );
    };

    Matrix.prototype.invert = function invert () {
        var ref = this;
        var a = ref.a;
        var b = ref.b;
        var d = ref.c;
        var e = ref.d;
        var g = ref.e;
        var h = ref.f;
        var det = a * e - b * d;

        if (det === 0) {
            return null;
        }

        return new Matrix(e / det, -b / det, -d / det, a / det,
            (d * h - e * g) / det, (b * g - a * h) / det);
    };

    Matrix.prototype.clone = function clone () {
        return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);
    };

    Matrix.prototype.equals = function equals (other) {
        if (!other) {
            return false;
        }

        return this.a === other.a && this.b === other.b &&
            this.c === other.c && this.d === other.d &&
            this.e === other.e && this.f === other.f;
    };

    Matrix.prototype.round = function round$1 (precision) {
        this.a = round(this.a, precision);
        this.b = round(this.b, precision);
        this.c = round(this.c, precision);
        this.d = round(this.d, precision);
        this.e = round(this.e, precision);
        this.f = round(this.f, precision);

        return this;
    };

    Matrix.prototype.toArray = function toArray (precision) {
        var result = [ this.a, this.b, this.c, this.d, this.e, this.f ];

        if (defined(precision)) {
            for (var i = 0; i < result.length; i++) {
                result[i] = round(result[i], precision);
            }
        }

        return result;
    };

    Matrix.prototype.toString = function toString (precision, separator) {
        if ( separator === void 0 ) separator = ",";

        return this.toArray(precision).join(separator);
    };

    Matrix.translate = function translate (x, y) {
        return new Matrix(1, 0, 0, 1, x, y);
    };

    Matrix.unit = function unit () {
        return new Matrix(1, 0, 0, 1, 0, 0);
    };

    Matrix.rotate = function rotate (angle, x, y) {
        var matrix = new Matrix();
        matrix.a = Math.cos(rad(angle));
        matrix.b = Math.sin(rad(angle));
        matrix.c = -matrix.b;
        matrix.d = matrix.a;
        matrix.e = (x - x * matrix.a + y * matrix.b) || 0;
        matrix.f = (y - y * matrix.a - x * matrix.b) || 0;

        return matrix;
    };

    Matrix.scale = function scale (scaleX, scaleY) {
        return new Matrix(scaleX, 0, 0, scaleY, 0, 0);
    };

    return Matrix;
}(Class));

Matrix.IDENTITY = Matrix.unit();

var matrixRegexp = /matrix\((.*)\)/;

function parseMatrix(matrixString) {
    var match = matrixString.match(matrixRegexp);
    if (match === null || match.length !== 2) {
        return Matrix.unit();
    }

    var members = match[1].split(',').map(function (x) { return parseFloat(x); });
    return new (Function.prototype.bind.apply( Matrix, [ null ].concat( members) ));
}

function transformMatrix(element) {
    var transform = getComputedStyle(element).transform;

    if (transform === 'none') {
        return Matrix.unit();
    }

    return parseMatrix(transform);
}

function elementScale(element) {
    if (!element) {
        return Matrix.unit();
    }

    var matrix = transformMatrix(element);
    var parent = element.parentElement;
    while (parent) {
        var parentMatrix = transformMatrix(parent);
        matrix = matrix.multiplyCopy(parentMatrix);
        parent = parent.parentElement;
    }

    matrix.b = matrix.c = matrix.e = matrix.f = 0;
    return matrix;
}

var LRUCache = (function (Class$$1) {
    function LRUCache(size) {
        Class$$1.call(this);

        this._size = size;
        this._length = 0;
        this._map = {};
    }

    if ( Class$$1 ) LRUCache.__proto__ = Class$$1;
    LRUCache.prototype = Object.create( Class$$1 && Class$$1.prototype );
    LRUCache.prototype.constructor = LRUCache;

    LRUCache.prototype.put = function put (key, value) {
        var map = this._map;
        var entry = { key: key, value: value };

        map[key] = entry;

        if (!this._head) {
            this._head = this._tail = entry;
        } else {
            this._tail.newer = entry;
            entry.older = this._tail;
            this._tail = entry;
        }

        if (this._length >= this._size) {
            map[this._head.key] = null;
            this._head = this._head.newer;
            this._head.older = null;
        } else {
            this._length++;
        }
    };

    LRUCache.prototype.get = function get (key) {
        var entry = this._map[key];

        if (entry) {
            if (entry === this._head && entry !== this._tail) {
                this._head = entry.newer;
                this._head.older = null;
            }

            if (entry !== this._tail) {
                if (entry.older) {
                    entry.older.newer = entry.newer;
                    entry.newer.older = entry.older;
                }

                entry.older = this._tail;
                entry.newer = null;

                this._tail.newer = entry;
                this._tail = entry;
            }

            return entry.value;
        }
    };

    return LRUCache;
}(Class));

var REPLACE_REGEX = /\r?\n|\r|\t/g;
var SPACE = ' ';

function normalizeText(text) {
    return String(text).replace(REPLACE_REGEX, SPACE);
}

function objectKey(object) {
    var parts = [];
    for (var key in object) {
        parts.push(key + object[key]);
    }

    return parts.sort().join("");
}

// Computes FNV-1 hash
// See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
function hashKey(str) {
    // 32-bit FNV-1 offset basis
    // See http://isthe.com/chongo/tech/comp/fnv/#FNV-param
    var hash = 0x811C9DC5;

    for (var i = 0; i < str.length; ++i) {
        hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);
        hash ^= str.charCodeAt(i);
    }

    return hash >>> 0;
}

function zeroSize() {
    return { width: 0, height: 0, baseline: 0 };
}

var DEFAULT_OPTIONS = {
    baselineMarkerSize: 1
};

var defaultMeasureBox;

if (typeof document !== "undefined") {
    defaultMeasureBox = document.createElement("div");
    defaultMeasureBox.style.cssText = "position: absolute !important; top: -4000px !important; width: auto !important; height: auto !important;" +
              "padding: 0 !important; margin: 0 !important; border: 0 !important;" +
              "line-height: normal !important; visibility: hidden !important; white-space: pre!important;";
}

var TextMetrics = (function (Class$$1) {
    function TextMetrics(options) {
        Class$$1.call(this);

        this._cache = new LRUCache(1000);
        this.options = Object.assign({}, DEFAULT_OPTIONS, options);
    }

    if ( Class$$1 ) TextMetrics.__proto__ = Class$$1;
    TextMetrics.prototype = Object.create( Class$$1 && Class$$1.prototype );
    TextMetrics.prototype.constructor = TextMetrics;

    TextMetrics.prototype.measure = function measure (text, style, options) {
        if ( options === void 0 ) options = {};

        if (typeof text === 'undefined' || text === null) {
            return zeroSize();
        }

        var styleKey = objectKey(style);
        var cacheKey = hashKey(text + styleKey);
        var cachedResult = this._cache.get(cacheKey);

        if (cachedResult) {
            return cachedResult;
        }

        var size = zeroSize();
        var measureBox = options.box || defaultMeasureBox;
        var baselineMarker = this._baselineMarker().cloneNode(false);

        for (var key in style) {
            var value = style[key];
            if (typeof value !== "undefined") {
                measureBox.style[key] = value;
            }
        }

        var textStr = options.normalizeText !== false ? normalizeText(text) : String(text);

        measureBox.textContent = textStr;
        measureBox.appendChild(baselineMarker);
        document.body.appendChild(measureBox);

        if (textStr.length) {
            size.width = measureBox.offsetWidth - this.options.baselineMarkerSize;
            size.height = measureBox.offsetHeight;
            size.baseline = baselineMarker.offsetTop + this.options.baselineMarkerSize;
        }

        if (size.width > 0 && size.height > 0) {
            this._cache.put(cacheKey, size);
        }

        measureBox.parentNode.removeChild(measureBox);

        return size;
    };

    TextMetrics.prototype._baselineMarker = function _baselineMarker () {
        var marker = document.createElement("div");
        marker.style.cssText = "display: inline-block; vertical-align: baseline;width: " +
            this.options.baselineMarkerSize + "px; height: " + this.options.baselineMarkerSize + "px;overflow: hidden;";

        return marker;
    };

    return TextMetrics;
}(Class));

TextMetrics.current = new TextMetrics();

function measureText(text, style, measureBox) {
    return TextMetrics.current.measure(text, style, measureBox);
}



var util = Object.freeze({
	append: append$1$1,
	arabicToRoman: arabicToRoman,
	createPromise: createPromise,
	defined: defined,
	definitionId: definitionId,
	deg: deg,
	encodeBase64: encodeBase64,
	eventCoordinates: eventCoordinates,
	eventElement: eventElement,
	isTransparent: isTransparent,
	last: last,
	limitValue: limitValue,
	mergeSort: mergeSort,
	now: now,
	promiseAll: promiseAll,
	rad: rad,
	round: round,
	valueOrDefault: valueOrDefault,
	bindEvents: bindEvents,
	elementOffset: elementOffset,
	elementSize: elementSize,
	elementStyles: elementStyles,
	unbindEvents: unbindEvents,
	elementPadding: elementPadding,
	elementScale: elementScale,
	DEG_TO_RAD: DEG_TO_RAD,
	MAX_NUM: MAX_NUM,
	MIN_NUM: MIN_NUM,
	LRUCache: LRUCache,
	TextMetrics: TextMetrics,
	measureText: measureText,
	objectKey: objectKey,
	hashKey: hashKey,
	normalizeText: normalizeText
});

var toString$1 = {}.toString;

var OptionsStore = (function (HasObservers$$1) {
    function OptionsStore(options, prefix) {
        var this$1 = this;
        if ( prefix === void 0 ) prefix = "";

        HasObservers$$1.call(this);

        this.prefix = prefix;

        for (var field in options) {
            var member = options[field];
            member = this$1._wrap(member, field);
            this$1[field] = member;
        }
    }

    if ( HasObservers$$1 ) OptionsStore.__proto__ = HasObservers$$1;
    OptionsStore.prototype = Object.create( HasObservers$$1 && HasObservers$$1.prototype );
    OptionsStore.prototype.constructor = OptionsStore;

    OptionsStore.prototype.get = function get (field) {
        var parts = field.split(".");
        var result = this;

        while (parts.length && result) {
            var part = parts.shift();
            result = result[part];
        }

        return result;
    };

    OptionsStore.prototype.set = function set (field, value) {
        var current = this.get(field);

        if (current !== value) {
            this._set(field, this._wrap(value, field));
            this.optionsChange({
                field: this.prefix + field,
                value: value
            });
        }
    };

    OptionsStore.prototype._set = function _set (field, value) {
        var this$1 = this;

        var composite = field.indexOf(".") >= 0;
        var parentObj = this;
        var fieldName = field;

        if (composite) {
            var parts = fieldName.split(".");
            var prefix = this.prefix;

            while (parts.length > 1) {
                fieldName = parts.shift();
                prefix += fieldName + ".";

                var obj = parentObj[fieldName];

                if (!obj) {
                    obj = new OptionsStore({}, prefix);
                    obj.addObserver(this$1);
                    parentObj[fieldName] = obj;
                }
                parentObj = obj;
            }
            fieldName = parts[0];
        }

        parentObj._clear(fieldName);
        parentObj[fieldName] = value;
    };

    OptionsStore.prototype._clear = function _clear (field) {
        var current = this[field];
        if (current && current.removeObserver) {
            current.removeObserver(this);
        }
    };

    OptionsStore.prototype._wrap = function _wrap (object, field) {
        var type = toString$1.call(object);
        var wrapped = object;

        if (wrapped !== null && defined(wrapped) && type === "[object Object]") {
            if (!(object instanceof OptionsStore) && !(object instanceof Class)) {
                wrapped = new OptionsStore(wrapped, this.prefix + field + ".");
            }

            wrapped.addObserver(this);
        }

        return wrapped;
    };

    return OptionsStore;
}(HasObservers));

function setAccessor(field) {
    return function(value) {
        if (this[field] !== value) {
            this[field] = value;
            this.geometryChange();
        }

        return this;
    };
}

function getAccessor(field) {
    return function() {
        return this[field];
    };
}

function defineAccessors(fn, fields) {
    for (var i = 0; i < fields.length; i++) {
        var name = fields[i];
        var capitalized = name.charAt(0).toUpperCase() +
                          name.substring(1, name.length);

        fn["set" + capitalized] = setAccessor(name);
        fn["get" + capitalized] = getAccessor(name);
    }
}

var withAccessors = function (TBase, names) {
    var result = (function (TBase) {
        function result () {
            TBase.apply(this, arguments);
        }if ( TBase ) result.__proto__ = TBase;
        result.prototype = Object.create( TBase && TBase.prototype );
        result.prototype.constructor = result;

        

        return result;
    }(TBase));
    defineAccessors(result.prototype, names);

    return result;
};

function toMatrix(transformation) {
    if (transformation && typeof transformation.matrix === "function") {
        return transformation.matrix();
    }

    return transformation;
}

var Point = (function (superclass) {
    function Point(x, y) {
        superclass.call(this);

        this.x = x || 0;
        this.y = y || 0;
    }

    if ( superclass ) Point.__proto__ = superclass;
    Point.prototype = Object.create( superclass && superclass.prototype );
    Point.prototype.constructor = Point;

    var staticAccessors = { ZERO: {} };

    Point.prototype.equals = function equals (other) {
        return other && other.x === this.x && other.y === this.y;
    };

    Point.prototype.clone = function clone () {
        return new Point(this.x, this.y);
    };

    Point.prototype.rotate = function rotate (angle, origin) {
        var originPoint = Point.create(origin) || Point.ZERO;

        return this.transform(Matrix.rotate(angle, originPoint.x, originPoint.y));
    };

    Point.prototype.translate = function translate (x, y) {
        this.x += x;
        this.y += y;

        this.geometryChange();

        return this;
    };

    Point.prototype.translateWith = function translateWith (point) {
        return this.translate(point.x, point.y);
    };

    Point.prototype.move = function move (x, y) {
        this.x = this.y = 0;
        return this.translate(x, y);
    };

    Point.prototype.scale = function scale (scaleX, scaleY) {
        if ( scaleY === void 0 ) scaleY = scaleX;

        this.x *= scaleX;
        this.y *= scaleY;

        this.geometryChange();

        return this;
    };

    Point.prototype.scaleCopy = function scaleCopy (scaleX, scaleY) {
        return this.clone().scale(scaleX, scaleY);
    };

    Point.prototype.transform = function transform (transformation) {
        var matrix = toMatrix(transformation);
        var ref = this;
        var x = ref.x;
        var y = ref.y;

        this.x = matrix.a * x + matrix.c * y + matrix.e;
        this.y = matrix.b * x + matrix.d * y + matrix.f;

        this.geometryChange();

        return this;
    };

    Point.prototype.transformCopy = function transformCopy (transformation) {
        var point = this.clone();

        if (transformation) {
            point.transform(transformation);
        }

        return point;
    };

    Point.prototype.distanceTo = function distanceTo (point) {
        var dx = this.x - point.x;
        var dy = this.y - point.y;

        return Math.sqrt(dx * dx + dy * dy);
    };

    Point.prototype.round = function round$1 (digits) {
        this.x = round(this.x, digits);
        this.y = round(this.y, digits);

        this.geometryChange();

        return this;
    };

    Point.prototype.toArray = function toArray (digits) {
        var doRound = defined(digits);
        var x = doRound ? round(this.x, digits) : this.x;
        var y = doRound ? round(this.y, digits) : this.y;

        return [ x, y ];
    };

    Point.prototype.toString = function toString (digits, separator) {
        if ( separator === void 0 ) separator = " ";

        var ref = this;
        var x = ref.x;
        var y = ref.y;

        if (defined(digits)) {
            x = round(x, digits);
            y = round(y, digits);
        }

        return x + separator + y;
    };

    Point.create = function create (arg0, arg1) {
        if (defined(arg0)) {
            if (arg0 instanceof Point) {
                return arg0;
            } else if (arguments.length === 1 && arg0.length === 2) {
                return new Point(arg0[0], arg0[1]);
            }

            return new Point(arg0, arg1);
        }
    };

    Point.min = function min () {
        var arguments$1 = arguments;

        var minX = MAX_NUM;
        var minY = MAX_NUM;

        for (var i = 0; i < arguments.length; i++) {
            var point = arguments$1[i];
            minX = Math.min(point.x, minX);
            minY = Math.min(point.y, minY);
        }

        return new Point(minX, minY);
    };

    Point.max = function max () {
        var arguments$1 = arguments;

        var maxX = MIN_NUM;
        var maxY = MIN_NUM;

        for (var i = 0; i < arguments.length; i++) {
            var point = arguments$1[i];
            maxX = Math.max(point.x, maxX);
            maxY = Math.max(point.y, maxY);
        }

        return new Point(maxX, maxY);
    };

    Point.minPoint = function minPoint () {
        return new Point(MIN_NUM, MIN_NUM);
    };

    Point.maxPoint = function maxPoint () {
        return new Point(MAX_NUM, MAX_NUM);
    };

    staticAccessors.ZERO.get = function () {
        return new Point(0, 0);
    };

    Object.defineProperties( Point, staticAccessors );

    return Point;
}(withAccessors(HasObservers, [ "x", "y" ])));

var Size = (function (superclass) {
    function Size(width, height) {
        superclass.call(this);

        this.width = width || 0;
        this.height = height || 0;
    }

    if ( superclass ) Size.__proto__ = superclass;
    Size.prototype = Object.create( superclass && superclass.prototype );
    Size.prototype.constructor = Size;

    var staticAccessors = { ZERO: {} };

    Size.prototype.equals = function equals (other) {
        return other && other.width === this.width && other.height === this.height;
    };

    Size.prototype.clone = function clone () {
        return new Size(this.width, this.height);
    };

    Size.prototype.toArray = function toArray (digits) {
        var doRound = defined(digits);
        var width = doRound ? round(this.width, digits) : this.width;
        var height = doRound ? round(this.height, digits) : this.height;

        return [ width, height ];
    };

    Size.create = function create (arg0, arg1) {
        if (defined(arg0)) {
            if (arg0 instanceof Size) {
                return arg0;
            } else if (arguments.length === 1 && arg0.length === 2) {
                return new Size(arg0[0], arg0[1]);
            }

            return new Size(arg0, arg1);
        }
    };

    staticAccessors.ZERO.get = function () {
        return new Size(0, 0);
    };

    Object.defineProperties( Size, staticAccessors );

    return Size;
}(withAccessors(HasObservers, [ "width", "height" ])));

var Rect = (function (HasObservers$$1) {
    function Rect(origin, size, cornerRadius) {
        if ( origin === void 0 ) origin = new Point();
        if ( size === void 0 ) size = new Size();
        if ( cornerRadius === void 0 ) cornerRadius = 0;

        HasObservers$$1.call(this);

        this.setOrigin(origin);
        this.setSize(size);
        this.setCornerRadius(cornerRadius);
    }

    if ( HasObservers$$1 ) Rect.__proto__ = HasObservers$$1;
    Rect.prototype = Object.create( HasObservers$$1 && HasObservers$$1.prototype );
    Rect.prototype.constructor = Rect;

    Rect.prototype.clone = function clone () {
        return new Rect(
            this.origin.clone(),
            this.size.clone()
        );
    };

    Rect.prototype.equals = function equals (other) {
        return other &&
               other.origin.equals(this.origin) &&
               other.size.equals(this.size);
    };

    Rect.prototype.setOrigin = function setOrigin (value) {
        this._observerField("origin", Point.create(value));
        this.geometryChange();
        return this;
    };

    Rect.prototype.getOrigin = function getOrigin () {
        return this.origin;
    };

    Rect.prototype.setCornerRadius = function setCornerRadius (radius) {
        this.cornerRadius = Array.isArray(radius) ? radius : [ radius, radius ];

        this.geometryChange();
        return this;
    };

    Rect.prototype.getCornerRadius = function getCornerRadius () {
        return this.cornerRadius;
    };

    Rect.prototype.setSize = function setSize (value) {
        this._observerField("size", Size.create(value));
        this.geometryChange();
        return this;
    };

    Rect.prototype.getSize = function getSize () {
        return this.size;
    };

    Rect.prototype.width = function width () {
        return this.size.width;
    };

    Rect.prototype.height = function height () {
        return this.size.height;
    };

    Rect.prototype.topLeft = function topLeft () {
        return this.origin.clone();
    };

    Rect.prototype.bottomRight = function bottomRight () {
        return this.origin.clone().translate(this.width(), this.height());
    };

    Rect.prototype.topRight = function topRight () {
        return this.origin.clone().translate(this.width(), 0);
    };

    Rect.prototype.bottomLeft = function bottomLeft () {
        return this.origin.clone().translate(0, this.height());
    };

    Rect.prototype.center = function center () {
        return this.origin.clone().translate(this.width() / 2, this.height() / 2);
    };

    Rect.prototype.bbox = function bbox (matrix) {
        var tl = this.topLeft().transformCopy(matrix);
        var tr = this.topRight().transformCopy(matrix);
        var br = this.bottomRight().transformCopy(matrix);
        var bl = this.bottomLeft().transformCopy(matrix);

        return Rect.fromPoints(tl, tr, br, bl);
    };

    Rect.prototype.transformCopy = function transformCopy (m) {
        return Rect.fromPoints(
            this.topLeft().transform(m),
            this.bottomRight().transform(m)
        );
    };

    Rect.prototype.expand = function expand (x, y) {
        if ( y === void 0 ) y = x;


        this.size.width += 2 * x;
        this.size.height += 2 * y;

        this.origin.translate(-x, -y);

        return this;
    };

    Rect.prototype.expandCopy = function expandCopy (x, y) {
        return this.clone().expand(x, y);
    };

    Rect.prototype.containsPoint = function containsPoint (point) {
        var origin = this.origin;
        var bottomRight = this.bottomRight();
        return !(point.x < origin.x || point.y < origin.y || bottomRight.x < point.x || bottomRight.y < point.y);
    };

    Rect.prototype._isOnPath = function _isOnPath (point, width) {
        var rectOuter = this.expandCopy(width, width);
        var rectInner = this.expandCopy(-width, -width);

        return rectOuter.containsPoint(point) && !rectInner.containsPoint(point);
    };

    Rect.fromPoints = function fromPoints () {
        var topLeft = Point.min.apply(null, arguments);
        var bottomRight = Point.max.apply(null, arguments);
        var size = new Size(
            bottomRight.x - topLeft.x,
            bottomRight.y - topLeft.y
        );

        return new Rect(topLeft, size);
    };

    Rect.union = function union (a, b) {
        return Rect.fromPoints(
            Point.min(a.topLeft(), b.topLeft()),
            Point.max(a.bottomRight(), b.bottomRight())
        );
    };

    Rect.intersect = function intersect (a, b) {
        var rect1 = {
            left: a.topLeft().x,
            top: a.topLeft().y,
            right: a.bottomRight().x,
            bottom: a.bottomRight().y
        };

        var rect2 = {
            left: b.topLeft().x,
            top: b.topLeft().y,
            right: b.bottomRight().x,
            bottom: b.bottomRight().y
        };

        if (rect1.left <= rect2.right &&
            rect2.left <= rect1.right &&
            rect1.top <= rect2.bottom &&
            rect2.top <= rect1.bottom) {
            return Rect.fromPoints(
                new Point(Math.max(rect1.left, rect2.left), Math.max(rect1.top, rect2.top)),
                new Point(Math.min(rect1.right, rect2.right), Math.min(rect1.bottom, rect2.bottom))
            );
        }
    };

    return Rect;
}(HasObservers));

var Transformation = (function (HasObservers$$1) {
    function Transformation(matrix) {
        if ( matrix === void 0 ) matrix = Matrix.unit();

        HasObservers$$1.call(this);

        this._matrix = matrix;
    }

    if ( HasObservers$$1 ) Transformation.__proto__ = HasObservers$$1;
    Transformation.prototype = Object.create( HasObservers$$1 && HasObservers$$1.prototype );
    Transformation.prototype.constructor = Transformation;

    Transformation.prototype.clone = function clone () {
        return new Transformation(
            this._matrix.clone()
        );
    };

    Transformation.prototype.equals = function equals (other) {
        return other &&
               other._matrix.equals(this._matrix);
    };

    Transformation.prototype.translate = function translate (x, y) {
        this._matrix = this._matrix.multiplyCopy(Matrix.translate(x, y));

        this._optionsChange();
        return this;
    };

    Transformation.prototype.scale = function scale (scaleX, scaleY, origin) {
        if ( scaleY === void 0 ) scaleY = scaleX;
        if ( origin === void 0 ) origin = null;

        var originPoint = origin;

        if (originPoint) {
            originPoint = Point.create(originPoint);
            this._matrix = this._matrix.multiplyCopy(Matrix.translate(originPoint.x, originPoint.y));
        }

        this._matrix = this._matrix.multiplyCopy(Matrix.scale(scaleX, scaleY));

        if (originPoint) {
            this._matrix = this._matrix.multiplyCopy(Matrix.translate(-originPoint.x, -originPoint.y));
        }

        this._optionsChange();
        return this;
    };

    Transformation.prototype.rotate = function rotate (angle, origin) {
        var originPoint = Point.create(origin) || Point.ZERO;

        this._matrix = this._matrix.multiplyCopy(Matrix.rotate(angle, originPoint.x, originPoint.y));

        this._optionsChange();
        return this;
    };

    Transformation.prototype.multiply = function multiply (transformation) {
        var matrix = toMatrix(transformation);

        this._matrix = this._matrix.multiplyCopy(matrix);

        this._optionsChange();
        return this;
    };

    Transformation.prototype.matrix = function matrix (value) {
        if (value) {
            this._matrix = value;
            this._optionsChange();
            return this;
        }

        return this._matrix;
    };

    Transformation.prototype._optionsChange = function _optionsChange () {
        this.optionsChange({
            field: "transform",
            value: this
        });
    };

    return Transformation;
}(HasObservers));

function transform$1(matrix) {
    if (matrix === null) {
        return null;
    }

    if (matrix instanceof Transformation) {
        return matrix;
    }

    return new Transformation(matrix);
}

var Element$1 = (function (HasObservers$$1) {
    function Element(options) {
        HasObservers$$1.call(this);

        this._initOptions(options);
    }

    if ( HasObservers$$1 ) Element.__proto__ = HasObservers$$1;
    Element.prototype = Object.create( HasObservers$$1 && HasObservers$$1.prototype );
    Element.prototype.constructor = Element;

    var prototypeAccessors = { nodeType: {} };

    prototypeAccessors.nodeType.get = function () {
        return "Rect";
    };

    Element.prototype._initOptions = function _initOptions (options) {
        if ( options === void 0 ) options = {};

        var clip = options.clip;
        var transform = options.transform;

        if (transform) {
            options.transform = transform$1(transform);
        }

        if (clip && !clip.id) {
            clip.id = definitionId();
        }

        this.options = new OptionsStore(options);
        this.options.addObserver(this);
    };

    Element.prototype.transform = function transform (value) {
        if (defined(value)) {
            this.options.set("transform", transform$1(value));
        } else {
            return this.options.get("transform");
        }
    };

    Element.prototype.parentTransform = function parentTransform () {
        var element = this;
        var parentMatrix;

        while (element.parent) {
            element = element.parent;
            var transformation = element.transform();
            if (transformation) {
                parentMatrix = transformation.matrix().multiplyCopy(parentMatrix || Matrix.unit());
            }
        }

        if (parentMatrix) {
            return transform$1(parentMatrix);
        }
    };

    Element.prototype.currentTransform = function currentTransform (parentTransform) {
        if ( parentTransform === void 0 ) parentTransform = this.parentTransform();

        var elementTransform = this.transform();
        var elementMatrix = toMatrix(elementTransform);

        var parentMatrix = toMatrix(parentTransform);
        var combinedMatrix;

        if (elementMatrix && parentMatrix) {
            combinedMatrix = parentMatrix.multiplyCopy(elementMatrix);
        } else {
            combinedMatrix = elementMatrix || parentMatrix;
        }

        if (combinedMatrix) {
            return transform$1(combinedMatrix);
        }
    };

    Element.prototype.visible = function visible (value) {
        if (defined(value)) {
            this.options.set("visible", value);
            return this;
        }

        return this.options.get("visible") !== false;
    };

    Element.prototype.clip = function clip (value) {
        var options = this.options;
        if (defined(value)) {
            if (value && !value.id) {
                value.id = definitionId();
            }
            options.set("clip", value);
            return this;
        }

        return options.get("clip");
    };

    Element.prototype.opacity = function opacity (value) {
        if (defined(value)) {
            this.options.set("opacity", value);
            return this;
        }

        return valueOrDefault(this.options.get("opacity"), 1);
    };

    Element.prototype.clippedBBox = function clippedBBox (transformation) {
        var bbox = this._clippedBBox(transformation);
        if (bbox) {
            var clip = this.clip();
            return clip ? Rect.intersect(bbox, clip.bbox(transformation)) : bbox;
        }
    };

    Element.prototype.containsPoint = function containsPoint (point, parentTransform) {
        if (this.visible()) {
            var transform = this.currentTransform(parentTransform);
            var transformedPoint = point;
            if (transform) {
                transformedPoint = point.transformCopy(transform.matrix().invert());
            }
            return (this._hasFill() && this._containsPoint(transformedPoint)) || (this._isOnPath && this._hasStroke() && this._isOnPath(transformedPoint));
        }
        return false;
    };

    Element.prototype._hasFill = function _hasFill () {
        var fill = this.options.fill;
        return fill && !isTransparent(fill.color);
    };

    Element.prototype._hasStroke = function _hasStroke () {
        var stroke = this.options.stroke;
        return stroke && stroke.width > 0 && !isTransparent(stroke.color);
    };

    Element.prototype._clippedBBox = function _clippedBBox (transformation) {
        return this.bbox(transformation);
    };

    Object.defineProperties( Element.prototype, prototypeAccessors );

    return Element;
}(HasObservers));

function ellipseExtremeAngles(center, rx, ry, matrix) {
    var extremeX = 0;
    var extremeY = 0;

    if (matrix) {
        extremeX = Math.atan2(matrix.c * ry, matrix.a * rx);
        if (matrix.b !== 0) {
            extremeY = Math.atan2(matrix.d * ry, matrix.b * rx);
        }
    }

    return {
        x: extremeX,
        y: extremeY
    };
}

var PI_DIV_2 = Math.PI / 2;

var Circle$2 = (function (superclass) {
    function Circle(center, radius) {
        if ( center === void 0 ) center = new Point();
        if ( radius === void 0 ) radius = 0;

        superclass.call(this);

        this.setCenter(center);
        this.setRadius(radius);
    }

    if ( superclass ) Circle.__proto__ = superclass;
    Circle.prototype = Object.create( superclass && superclass.prototype );
    Circle.prototype.constructor = Circle;

    Circle.prototype.setCenter = function setCenter (value) {
        this._observerField("center", Point.create(value));
        this.geometryChange();
        return this;
    };

    Circle.prototype.getCenter = function getCenter () {
        return this.center;
    };

    Circle.prototype.equals = function equals (other) {
        return other &&
               other.center.equals(this.center) &&
               other.radius === this.radius;
    };

    Circle.prototype.clone = function clone () {
        return new Circle(this.center.clone(), this.radius);
    };

    Circle.prototype.pointAt = function pointAt (angle) {
        return this._pointAt(rad(angle));
    };

    Circle.prototype.bbox = function bbox (matrix) {
        var this$1 = this;

        var extremeAngles = ellipseExtremeAngles(this.center, this.radius, this.radius, matrix);
        var minPoint = Point.maxPoint();
        var maxPoint = Point.minPoint();

        for (var i = 0; i < 4; i++) {
            var currentPointX = this$1._pointAt(extremeAngles.x + i * PI_DIV_2).transformCopy(matrix);
            var currentPointY = this$1._pointAt(extremeAngles.y + i * PI_DIV_2).transformCopy(matrix);
            var currentPoint = new Point(currentPointX.x, currentPointY.y);

            minPoint = Point.min(minPoint, currentPoint);
            maxPoint = Point.max(maxPoint, currentPoint);
        }

        return Rect.fromPoints(minPoint, maxPoint);
    };

    Circle.prototype._pointAt = function _pointAt (angle) {
        var ref = this;
        var center = ref.center;
        var radius = ref.radius;

        return new Point(
            center.x + radius * Math.cos(angle),
            center.y + radius * Math.sin(angle)
        );
    };

    Circle.prototype.containsPoint = function containsPoint (point) {
        var ref = this;
        var center = ref.center;
        var radius = ref.radius;
        var inCircle = Math.pow(point.x - center.x, 2) +
            Math.pow(point.y - center.y, 2) <= Math.pow(radius, 2);
        return inCircle;
    };

    Circle.prototype._isOnPath = function _isOnPath (point, width) {
        var ref = this;
        var center = ref.center;
        var radius = ref.radius;
        var pointDistance = center.distanceTo(point);

        return radius - width <= pointDistance && pointDistance <= radius + width;
    };

    return Circle;
}(withAccessors(HasObservers, [ "radius" ])));

var GRADIENT = "Gradient";

var paintable = function (TBase) { return (
    (function (TBase) {
        function anonymous () {
            TBase.apply(this, arguments);
        }

        if ( TBase ) anonymous.__proto__ = TBase;
        anonymous.prototype = Object.create( TBase && TBase.prototype );
        anonymous.prototype.constructor = anonymous;

        anonymous.prototype.fill = function fill (color, opacity) {
            var options = this.options;

            if (defined(color)) {
                if (color && color.nodeType !== GRADIENT) {
                    var newFill = {
                        color: color
                    };
                    if (defined(opacity)) {
                        newFill.opacity = opacity;
                    }
                    options.set("fill", newFill);
                } else {
                    options.set("fill", color);
                }

                return this;
            }

            return options.get("fill");
        };

        anonymous.prototype.stroke = function stroke (color, width, opacity) {
            if (defined(color)) {
                this.options.set("stroke.color", color);

                if (defined(width)) {
                    this.options.set("stroke.width", width);
                }

                if (defined(opacity)) {
                    this.options.set("stroke.opacity", opacity);
                }

                return this;
            }

            return this.options.get("stroke");
        };

        return anonymous;
    }(TBase))
); };

var IDENTITY_MATRIX_HASH = Matrix.IDENTITY.toString();

var measurable = function (TBase) { return (
    (function (TBase) {
        function anonymous () {
            TBase.apply(this, arguments);
        }

        if ( TBase ) anonymous.__proto__ = TBase;
        anonymous.prototype = Object.create( TBase && TBase.prototype );
        anonymous.prototype.constructor = anonymous;

        anonymous.prototype.bbox = function bbox (transformation) {
            var combinedMatrix = toMatrix(this.currentTransform(transformation));
            var matrixHash = combinedMatrix ? combinedMatrix.toString() : IDENTITY_MATRIX_HASH;
            var bbox;

            if (this._bboxCache && this._matrixHash === matrixHash) {
                bbox = this._bboxCache.clone();
            } else {
                bbox = this._bbox(combinedMatrix);
                this._bboxCache = bbox ? bbox.clone() : null;
                this._matrixHash = matrixHash;
            }

            var strokeWidth = this.options.get("stroke.width");
            if (strokeWidth && bbox) {
                bbox.expand(strokeWidth / 2);
            }

            return bbox;
        };

        anonymous.prototype.geometryChange = function geometryChange () {
            delete this._bboxCache;
            this.trigger("geometryChange", {
                element: this
            });
        };

        return anonymous;
    }(TBase))
); };

function geometryAccessor(name) {
    var fieldName = "_" + name;
    return function(value) {
        if (defined(value)) {
            this._observerField(fieldName, value);
            this.geometryChange();
            return this;
        }

        return this[fieldName];
    };
}

function defineGeometryAccessors(fn, names) {
    for (var i = 0; i < names.length; i++) {
        fn[names[i]] = geometryAccessor(names[i]);
    }
}

var withGeometry = function (TBase, names) {
    if ( names === void 0 ) names = [ "geometry" ];

    var result = (function (TBase) {
        function result () {
            TBase.apply(this, arguments);
        }if ( TBase ) result.__proto__ = TBase;
        result.prototype = Object.create( TBase && TBase.prototype );
        result.prototype.constructor = result;

        

        return result;
    }(TBase));
    defineGeometryAccessors(result.prototype, names);

    return result;
};

var DEFAULT_STROKE = "#000";

var Circle = (function (superclass) {
    function Circle(geometry, options) {
        if ( geometry === void 0 ) geometry = new Circle$2();
        if ( options === void 0 ) options = {};

        superclass.call(this, options);

        this.geometry(geometry);

        if (!defined(this.options.stroke)) {
            this.stroke(DEFAULT_STROKE);
        }
    }

    if ( superclass ) Circle.__proto__ = superclass;
    Circle.prototype = Object.create( superclass && superclass.prototype );
    Circle.prototype.constructor = Circle;

    var prototypeAccessors = { nodeType: {} };

    prototypeAccessors.nodeType.get = function () {
        return "Circle";
    };

    Circle.prototype.rawBBox = function rawBBox () {
        return this._geometry.bbox();
    };

    Circle.prototype._bbox = function _bbox (matrix) {
        return this._geometry.bbox(matrix);
    };

    Circle.prototype._containsPoint = function _containsPoint (point) {
        return this.geometry().containsPoint(point);
    };

    Circle.prototype._isOnPath = function _isOnPath (point) {
        return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
    };

    Object.defineProperties( Circle.prototype, prototypeAccessors );

    return Circle;
}(paintable(measurable(withGeometry(Element$1)))));

var PRECISION = 10;

function close$1(a, b, tolerance) {
    if ( tolerance === void 0 ) tolerance = PRECISION;

    return round(Math.abs(a - b), tolerance) === 0;
}

function closeOrLess(a, b, tolerance) {
    return a < b || close$1(a, b, tolerance);
}

function lineIntersection(p0, p1, p2, p3) {
    var s1x = p1.x - p0.x;
    var s2x = p3.x - p2.x;
    var s1y = p1.y - p0.y;
    var s2y = p3.y - p2.y;
    var nx = p0.x - p2.x;
    var ny = p0.y - p2.y;
    var d = s1x * s2y - s2x * s1y;
    var s = (s1x * ny - s1y * nx) / d;
    var t = (s2x * ny - s2y * nx) / d;

    if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {
        return new Point(p0.x + t * s1x, p0.y + t * s1y);
    }
}

var MAX_INTERVAL = 45;
var pow$1 = Math.pow;
var accessors = [ "radiusX", "radiusY", "startAngle", "endAngle", "anticlockwise" ];

var Arc$2 = (function (superclass) {
    function Arc(center, options) {
        if ( center === void 0 ) center = new Point();
        if ( options === void 0 ) options = {};

        superclass.call(this);

        this.setCenter(center);

        this.radiusX = options.radiusX;
        this.radiusY = options.radiusY || options.radiusX;
        this.startAngle = options.startAngle;
        this.endAngle = options.endAngle;
        this.anticlockwise = options.anticlockwise || false;
        this.xRotation = options.xRotation;
    }

    if ( superclass ) Arc.__proto__ = superclass;
    Arc.prototype = Object.create( superclass && superclass.prototype );
    Arc.prototype.constructor = Arc;

    Arc.prototype.clone = function clone () {
        return new Arc(this.center, {
            radiusX: this.radiusX,
            radiusY: this.radiusY,
            startAngle: this.startAngle,
            endAngle: this.endAngle,
            anticlockwise: this.anticlockwise
        });
    };

    Arc.prototype.setCenter = function setCenter (value) {
        this._observerField("center", Point.create(value));
        this.geometryChange();
        return this;
    };

    Arc.prototype.getCenter = function getCenter () {
        return this.center;
    };

    Arc.prototype.pointAt = function pointAt (angle) {
        var center = this.center;
        var radian = rad(angle);

        return new Point(
            center.x + this.radiusX * Math.cos(radian),
            center.y + this.radiusY * Math.sin(radian)
        );
    };

    Arc.prototype.curvePoints = function curvePoints () {
        var this$1 = this;

        var startAngle = this.startAngle;
        var dir = this.anticlockwise ? -1 : 1;
        var curvePoints = [ this.pointAt(startAngle) ];
        var interval = this._arcInterval();
        var intervalAngle = interval.endAngle - interval.startAngle;
        var subIntervalsCount = Math.ceil(intervalAngle / MAX_INTERVAL);
        var subIntervalAngle = intervalAngle / subIntervalsCount;
        var currentAngle = startAngle;
        var transformation;
        if (this.xRotation) {
            transformation = transform$1().rotate(this.xRotation, this.center);
        }

        for (var i = 1; i <= subIntervalsCount; i++) {
            var nextAngle = currentAngle + dir * subIntervalAngle;
            var points = this$1._intervalCurvePoints(currentAngle, nextAngle, transformation);

            curvePoints.push(points.cp1, points.cp2, points.p2);
            currentAngle = nextAngle;
        }

        return curvePoints;
    };

    Arc.prototype.bbox = function bbox (matrix) {
        var this$1 = this;

        var interval = this._arcInterval();
        var startAngle = interval.startAngle;
        var endAngle = interval.endAngle;
        var extremeAngles = ellipseExtremeAngles(this.center, this.radiusX, this.radiusY, matrix);
        var extremeX = deg(extremeAngles.x);
        var extremeY = deg(extremeAngles.y);
        var endPoint = this.pointAt(endAngle).transformCopy(matrix);
        var currentAngleX = bboxStartAngle(extremeX, startAngle);
        var currentAngleY = bboxStartAngle(extremeY, startAngle);
        var currentPoint = this.pointAt(startAngle).transformCopy(matrix);
        var minPoint = Point.min(currentPoint, endPoint);
        var maxPoint = Point.max(currentPoint, endPoint);

        while (currentAngleX < endAngle || currentAngleY < endAngle) {
            var currentPointX = (void 0);
            if (currentAngleX < endAngle) {
                currentPointX = this$1.pointAt(currentAngleX).transformCopy(matrix);
                currentAngleX += 90;
            }

            var currentPointY = (void 0);
            if (currentAngleY < endAngle) {
                currentPointY = this$1.pointAt(currentAngleY).transformCopy(matrix);
                currentAngleY += 90;
            }

            currentPoint = new Point(currentPointX.x, currentPointY.y);
            minPoint = Point.min(minPoint, currentPoint);
            maxPoint = Point.max(maxPoint, currentPoint);
        }

        return Rect.fromPoints(minPoint, maxPoint);
    };

    Arc.prototype._arcInterval = function _arcInterval () {
        var ref = this;
        var startAngle = ref.startAngle;
        var endAngle = ref.endAngle;
        var anticlockwise = ref.anticlockwise;

        if (anticlockwise) {
            var oldStart = startAngle;
            startAngle = endAngle;
            endAngle = oldStart;
        }

        if (startAngle > endAngle || (anticlockwise && startAngle === endAngle)) {
            endAngle += 360;
        }

        return {
            startAngle: startAngle,
            endAngle: endAngle
        };
    };

    Arc.prototype._intervalCurvePoints = function _intervalCurvePoints (startAngle, endAngle, transformation) {
        var p1 = this.pointAt(startAngle);
        var p2 = this.pointAt(endAngle);
        var p1Derivative = this._derivativeAt(startAngle);
        var p2Derivative = this._derivativeAt(endAngle);
        var t = (rad(endAngle) - rad(startAngle)) / 3;
        var cp1 = new Point(p1.x + t * p1Derivative.x, p1.y + t * p1Derivative.y);
        var cp2 = new Point(p2.x - t * p2Derivative.x, p2.y - t * p2Derivative.y);
        if (transformation) {
            p1.transform(transformation);
            p2.transform(transformation);
            cp1.transform(transformation);
            cp2.transform(transformation);
        }

        return {
            p1: p1,
            cp1: cp1,
            cp2: cp2,
            p2: p2
        };
    };

    Arc.prototype._derivativeAt = function _derivativeAt (angle) {
        var radian = rad(angle);

        return new Point(-this.radiusX * Math.sin(radian), this.radiusY * Math.cos(radian));
    };

    Arc.prototype.containsPoint = function containsPoint (point) {
        var interval = this._arcInterval();
        var intervalAngle = interval.endAngle - interval.startAngle;
        var ref = this;
        var center = ref.center;
        var radiusX = ref.radiusX;
        var radiusY = ref.radiusY;
        var distance = center.distanceTo(point);
        var angleRad = Math.atan2(point.y - center.y, point.x - center.x);
        var pointRadius = (radiusX * radiusY) /
            Math.sqrt(pow$1(radiusX, 2) * pow$1(Math.sin(angleRad), 2) + pow$1(radiusY, 2) * pow$1(Math.cos(angleRad), 2));
        var startPoint = this.pointAt(this.startAngle).round(PRECISION);
        var endPoint = this.pointAt(this.endAngle).round(PRECISION);
        var intersection = lineIntersection(center, point.round(PRECISION), startPoint, endPoint);
        var containsPoint;

        if (intervalAngle < 180) {
            containsPoint = intersection && closeOrLess(center.distanceTo(intersection), distance) && closeOrLess(distance, pointRadius);
        } else {
            var angle = calculateAngle(center.x, center.y, radiusX, radiusY, point.x, point.y);
            if (angle !== 360) {
                angle = (360 + angle) % 360;
            }

            var inAngleRange = interval.startAngle <= angle && angle <= interval.endAngle;
            containsPoint = (inAngleRange && closeOrLess(distance, pointRadius)) || (!inAngleRange && (!intersection || intersection.equals(point)));
        }
        return containsPoint;
    };

    Arc.prototype._isOnPath = function _isOnPath (point, width) {
        var interval = this._arcInterval();
        var center = this.center;
        var angle = calculateAngle(center.x, center.y, this.radiusX, this.radiusY, point.x, point.y);
        if (angle !== 360) {
            angle = (360 + angle) % 360;
        }

        var inAngleRange = interval.startAngle <= angle && angle <= interval.endAngle;

        return inAngleRange && this.pointAt(angle).distanceTo(point) <= width;
    };

    Arc.fromPoints = function fromPoints (start, end, rx, ry, largeArc, swipe, rotation) {// eslint-disable-line max-params
        var arcParameters = normalizeArcParameters({
            x1: start.x,
            y1: start.y,
            x2: end.x,
            y2: end.y,
            rx: rx,
            ry: ry,
            largeArc: largeArc,
            swipe: swipe,
            rotation: rotation
        });

        return new Arc(arcParameters.center, {
            startAngle: arcParameters.startAngle,
            endAngle: arcParameters.endAngle,
            radiusX: arcParameters.radiusX,
            radiusY: arcParameters.radiusY,
            xRotation: arcParameters.xRotation,
            anticlockwise: swipe === 0
        });
    };

    return Arc;
}(withAccessors(HasObservers, accessors)));

function calculateAngle(cx, cy, rx, ry, x, y) {
    var cos = round((x - cx) / rx, 3);
    var sin = round((y - cy) / ry, 3);

    return round(deg(Math.atan2(sin, cos)));
}

function normalizeArcParameters(parameters) {
    var x1 = parameters.x1;
    var y1 = parameters.y1;
    var x2 = parameters.x2;
    var y2 = parameters.y2;
    var rx = parameters.rx;
    var ry = parameters.ry;
    var largeArc = parameters.largeArc;
    var swipe = parameters.swipe;
    var rotation = parameters.rotation; if ( rotation === void 0 ) rotation = 0;

    var radians = rad(rotation);
    var cosine = Math.cos(radians);
    var sine = Math.sin(radians);

    var xT = cosine * (x1 - x2) / 2 + sine * (y1 - y2) / 2;
    var yT = -sine * (x1 - x2) / 2 + cosine * (y1 - y2) / 2;

    var sign = largeArc !== swipe ? 1 : -1;

    var xt2 = Math.pow(xT, 2);
    var yt2 = Math.pow(yT, 2);
    var rx2 = Math.pow(rx, 2);
    var ry2 = Math.pow(ry, 2);

    var delta = xt2 / rx2 + yt2 / ry2;

    if (delta > 1) {
        delta = Math.sqrt(xt2 / rx2 + yt2 / ry2);
        rx = delta * rx;
        rx2 = Math.pow(rx, 2);

        ry = delta * ry;
        ry2 = Math.pow(ry, 2);
    }

    var constT = sign * Math.sqrt((rx2 * ry2 - rx2 * yt2 - ry2 * xt2) / (rx2 * yt2 + ry2 * xt2));
    // due to rounding errors the value could become NaN even after radii correction
    if (isNaN(constT)) {
        constT = 0;
    }

    var cxT = constT * (rx * yT) / ry;
    var cyT = - constT * (ry * xT) / rx;

    var cx = cosine * cxT - sine * cyT + (x1 + x2) / 2;
    var cy = sine * cxT + cosine * cyT + (y1 + y2) / 2;


    var uX = (xT - cxT) / rx;
    var uY = (yT - cyT) / ry;
    var vX = -(xT + cxT) / rx;
    var vY = -(yT + cyT) / ry;

    var startAngle = (uY >= 0 ? 1 : -1) * deg(Math.acos(uX / Math.sqrt(uX * uX + uY * uY)));

    var angleCosine = round((uX * vX + uY * vY) / (Math.sqrt(uX * uX + uY * uY) * Math.sqrt(vX * vX + vY * vY)), 10);
    var angle = (uX * vY - uY * vX >= 0 ? 1 : -1) * deg(Math.acos(angleCosine));

    if (!swipe && angle > 0) {
        angle -= 360;
    }

    if (swipe && angle < 0) {
        angle += 360;
    }
    var endAngle = startAngle + angle;
    var signEndAngle = endAngle >= 0 ? 1 : -1;
    endAngle = (Math.abs(endAngle) % 360) * signEndAngle;

    return {
        center: new Point(cx, cy),
        startAngle: startAngle,
        endAngle: endAngle,
        radiusX: rx,
        radiusY: ry,
        xRotation: rotation
    };
}

function bboxStartAngle(angle, start) {
    var startAngle = angle;

    while (startAngle < start) {
        startAngle += 90;
    }

    return startAngle;
}

var push = [].push;
var pop = [].pop;
var splice = [].splice;
var shift = [].shift;
var slice = [].slice;
var unshift = [].unshift;

var ElementsArray = (function (HasObservers$$1) {
    function ElementsArray(array) {
        if ( array === void 0 ) array = [];

        HasObservers$$1.call(this);

        this.length = 0;
        this._splice(0, array.length, array);
    }

    if ( HasObservers$$1 ) ElementsArray.__proto__ = HasObservers$$1;
    ElementsArray.prototype = Object.create( HasObservers$$1 && HasObservers$$1.prototype );
    ElementsArray.prototype.constructor = ElementsArray;

    ElementsArray.prototype.elements = function elements (value) {
        if (value) {
            this._splice(0, this.length, value);

            this._change();
            return this;
        }

        return this.slice(0);
    };

    ElementsArray.prototype.push = function push$1 () {
        var elements = arguments;
        var result = push.apply(this, elements);

        this._add(elements);

        return result;
    };

    ElementsArray.prototype.slice = function slice$1 () {
        return slice.call(this);
    };

    ElementsArray.prototype.pop = function pop$1 () {
        var length = this.length;
        var result = pop.apply(this);

        if (length) {
            this._remove([ result ]);
        }

        return result;
    };

    ElementsArray.prototype.splice = function splice$1 (index, howMany) {
        var elements = slice.call(arguments, 2);
        var result = this._splice(index, howMany, elements);

        this._change();

        return result;
    };

    ElementsArray.prototype.shift = function shift$1 () {
        var length = this.length;
        var result = shift.apply(this);

        if (length) {
            this._remove([ result ]);
        }

        return result;
    };

    ElementsArray.prototype.unshift = function unshift$1 () {
        var elements = arguments;
        var result = unshift.apply(this, elements);

        this._add(elements);

        return result;
    };

    ElementsArray.prototype.indexOf = function indexOf (element) {
        var this$1 = this;

        var length = this.length;

        for (var idx = 0; idx < length; idx++) {
            if (this$1[idx] === element) {
                return idx;
            }
        }
        return -1;
    };

    ElementsArray.prototype._splice = function _splice (index, howMany, elements) {
        var result = splice.apply(this, [ index, howMany ].concat(elements));

        this._clearObserver(result);
        this._setObserver(elements);

        return result;
    };

    ElementsArray.prototype._add = function _add (elements) {
        this._setObserver(elements);
        this._change();
    };

    ElementsArray.prototype._remove = function _remove (elements) {
        this._clearObserver(elements);
        this._change();
    };

    ElementsArray.prototype._setObserver = function _setObserver (elements) {
        var this$1 = this;

        for (var idx = 0; idx < elements.length; idx++) {
            elements[idx].addObserver(this$1);
        }
    };

    ElementsArray.prototype._clearObserver = function _clearObserver (elements) {
        var this$1 = this;

        for (var idx = 0; idx < elements.length; idx++) {
            elements[idx].removeObserver(this$1);
        }
    };

    ElementsArray.prototype._change = function _change () {};

    return ElementsArray;
}(HasObservers));

var GeometryElementsArray = (function (ElementsArray$$1) {
    function GeometryElementsArray () {
        ElementsArray$$1.apply(this, arguments);
    }

    if ( ElementsArray$$1 ) GeometryElementsArray.__proto__ = ElementsArray$$1;
    GeometryElementsArray.prototype = Object.create( ElementsArray$$1 && ElementsArray$$1.prototype );
    GeometryElementsArray.prototype.constructor = GeometryElementsArray;

    GeometryElementsArray.prototype._change = function _change () {
        this.geometryChange();
    };

    return GeometryElementsArray;
}(ElementsArray));

function isOutOfEndPoint(endPoint, controlPoint, point) {
    var angle = deg(Math.atan2(controlPoint.y - endPoint.y, controlPoint.x - endPoint.x));
    var rotatedPoint = point.transformCopy(transform$1().rotate(-angle, endPoint));

    return rotatedPoint.x < endPoint.x;
}

function calculateCurveAt(t, field, points) {
    var t1 = 1 - t;
    return Math.pow(t1, 3) * points[0][field] +
        3 * Math.pow(t1, 2) * t * points[1][field] +
        3 * Math.pow(t, 2) * t1 * points[2][field] +
        Math.pow(t, 3) * points[3][field];
}

function toCubicPolynomial(points, field) {
    return [ -points[0][field] + 3 * points[1][field] - 3 * points[2][field] + points[3][field],
        3 * (points[0][field] - 2 * points[1][field] + points[2][field]),
        3 * (-points[0][field] + points[1][field]),
        points[0][field]
    ];
}

var ComplexNumber = (function (Class$$1) {
    function ComplexNumber(real, img) {
        if ( real === void 0 ) real = 0;
        if ( img === void 0 ) img = 0;

        Class$$1.call(this);

        this.real = real;
        this.img = img;
    }

    if ( Class$$1 ) ComplexNumber.__proto__ = Class$$1;
    ComplexNumber.prototype = Object.create( Class$$1 && Class$$1.prototype );
    ComplexNumber.prototype.constructor = ComplexNumber;

    ComplexNumber.prototype.add = function add (cNumber) {
        return new ComplexNumber(round(this.real + cNumber.real, PRECISION), round(this.img + cNumber.img, PRECISION));
    };

    ComplexNumber.prototype.addConstant = function addConstant (value) {
        return new ComplexNumber(this.real + value, this.img);
    };

    ComplexNumber.prototype.negate = function negate () {
        return new ComplexNumber(-this.real, -this.img);
    };

    ComplexNumber.prototype.multiply = function multiply (cNumber) {
        return new ComplexNumber(this.real * cNumber.real - this.img * cNumber.img,
            this.real * cNumber.img + this.img * cNumber.real);
    };

    ComplexNumber.prototype.multiplyConstant = function multiplyConstant (value) {
        return new ComplexNumber(this.real * value, this.img * value);
    };

    ComplexNumber.prototype.nthRoot = function nthRoot (n) {
        var rad$$1 = Math.atan2(this.img, this.real);
        var r = Math.sqrt(Math.pow(this.img, 2) + Math.pow(this.real, 2));
        var nthR = Math.pow(r, 1 / n);

        return new ComplexNumber(nthR * Math.cos(rad$$1 / n), nthR * Math.sin(rad$$1 / n)); //Moivre's formula
    };

    ComplexNumber.prototype.equals = function equals (cNumber) {
        return this.real === cNumber.real && this.img === cNumber.img;
    };

    ComplexNumber.prototype.isReal = function isReal () {
        return this.img === 0;
    };

    return ComplexNumber;
}(Class));

function numberSign$1(x) {
    return x < 0 ? -1 : 1;
}

function solveQuadraticEquation(a, b, c) {
    var squareRoot = Math.sqrt(Math.pow(b, 2) - 4 * a * c);
    return [
        (-b + squareRoot) / (2 * a),
        (-b - squareRoot) / (2 * a)
    ];
}

//Cardano's formula
function solveCubicEquation(a, b, c, d) {
    if (a === 0) {
        return solveQuadraticEquation(b, c, d);
    }

    var p = (3 * a * c - Math.pow(b, 2)) / (3 * Math.pow(a, 2));
    var q = (2 * Math.pow(b, 3) - 9 * a * b * c + 27 * Math.pow(a, 2) * d) / (27 * Math.pow(a, 3));
    var Q = Math.pow(p / 3, 3) + Math.pow(q / 2, 2);
    var i = new ComplexNumber(0,1);
    var b3a = -b / (3 * a);
    var x1, x2, y1, y2, y3, z1, z2;

    if (Q < 0) {
        x1 = new ComplexNumber(-q / 2, Math.sqrt(-Q)).nthRoot(3);
        x2 = new ComplexNumber(-q / 2, - Math.sqrt(-Q)).nthRoot(3);
    } else {
        x1 = -q / 2 + Math.sqrt(Q);
        x1 = new ComplexNumber(numberSign$1(x1) * Math.pow(Math.abs(x1), 1 / 3));
        x2 = -q / 2 - Math.sqrt(Q);
        x2 = new ComplexNumber(numberSign$1(x2) * Math.pow(Math.abs(x2), 1 / 3));
    }

    y1 = x1.add(x2);

    z1 = x1.add(x2).multiplyConstant(-1 / 2);
    z2 = x1.add(x2.negate()).multiplyConstant(Math.sqrt(3) / 2);

    y2 = z1.add(i.multiply(z2));
    y3 = z1.add(i.negate().multiply(z2));

    var result = [];

    if (y1.isReal()) {
        result.push(round(y1.real + b3a, PRECISION));
    }
    if (y2.isReal()) {
        result.push(round(y2.real + b3a, PRECISION));
    }
    if (y3.isReal()) {
        result.push(round(y3.real + b3a, PRECISION));
    }

    return result;
}

function hasRootsInRange(points, point, field, rootField, range) {
    var polynomial = toCubicPolynomial(points, rootField);
    var roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point[rootField]);
    var intersection;

    for (var idx = 0; idx < roots.length; idx++) {
        if (0 <= roots[idx] && roots[idx] <= 1) {
            intersection = calculateCurveAt(roots[idx], field, points);
            if (Math.abs(intersection - point[field]) <= range) {
                return true;
            }
        }
    }
}

function curveIntersectionsCount(points, point, bbox) {
    var polynomial = toCubicPolynomial(points, "x");
    var roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point.x);
    var rayIntersection, intersectsRay;
    var count = 0;
    for (var i = 0; i < roots.length; i++) {
        rayIntersection = calculateCurveAt(roots[i], "y", points);
        intersectsRay = close$1(rayIntersection, point.y) || rayIntersection > point.y;
        if (intersectsRay && (((roots[i] === 0 || roots[i] === 1) && bbox.bottomRight().x > point.x) || (0 < roots[i] && roots[i] < 1))) {
            count++;
        }
    }

    return count;
}

function lineIntersectionsCount(a, b, point) {
    var intersects;
    if (a.x !== b.x) {
        var minX = Math.min(a.x, b.x);
        var maxX = Math.max(a.x, b.x);
        var minY = Math.min(a.y, b.y);
        var maxY = Math.max(a.y, b.y);
        var inRange = minX <= point.x && point.x < maxX;

        if (minY === maxY) {
            intersects = point.y <= minY && inRange;
        } else {
            intersects = inRange && (((maxY - minY) * ((a.x - b.x) * (a.y - b.y) > 0 ? point.x - minX : maxX - point.x)) / (maxX - minX) + minY - point.y) >= 0;
        }
    }

    return intersects ? 1 : 0;
}

function pointAccessor(name) {
    var fieldName = "_" + name;
    return function(value) {
        if (defined(value)) {
            this._observerField(fieldName, Point.create(value));
            this.geometryChange();
            return this;
        }

        return this[fieldName];
    };
}

function definePointAccessors(fn, names) {
    for (var i = 0; i < names.length; i++) {
        fn[names[i]] = pointAccessor(names[i]);
    }
}

var withPoints = function (TBase, names) {
    var result = (function (TBase) {
        function result () {
            TBase.apply(this, arguments);
        }if ( TBase ) result.__proto__ = TBase;
        result.prototype = Object.create( TBase && TBase.prototype );
        result.prototype.constructor = result;

        

        return result;
    }(TBase));
    definePointAccessors(result.prototype, names);

    return result;
};

var points = [ "anchor", "controlIn", "controlOut" ];

var Segment = (function (superclass) {
    function Segment(anchor, controlIn, controlOut) {
        superclass.call(this);

        this.anchor(anchor || new Point());
        this.controlIn(controlIn);
        this.controlOut(controlOut);
    }

    if ( superclass ) Segment.__proto__ = superclass;
    Segment.prototype = Object.create( superclass && superclass.prototype );
    Segment.prototype.constructor = Segment;

    Segment.prototype.bboxTo = function bboxTo (toSegment, matrix) {
        var segmentAnchor = this.anchor().transformCopy(matrix);
        var toSegmentAnchor = toSegment.anchor().transformCopy(matrix);
        var rect;

        if (this.controlOut() && toSegment.controlIn()) {
            rect = this._curveBoundingBox(
                segmentAnchor, this.controlOut().transformCopy(matrix),
                toSegment.controlIn().transformCopy(matrix), toSegmentAnchor
            );
        } else {
            rect = this._lineBoundingBox(segmentAnchor, toSegmentAnchor);
        }

        return rect;
    };

    Segment.prototype._lineBoundingBox = function _lineBoundingBox (p1, p2) {
        return Rect.fromPoints(p1, p2);
    };

    Segment.prototype._curveBoundingBox = function _curveBoundingBox (p1, cp1, cp2, p2) {
        var points = [ p1, cp1, cp2, p2 ];
        var extremesX = this._curveExtremesFor(points, "x");
        var extremesY = this._curveExtremesFor(points, "y");
        var xLimits = arrayLimits([ extremesX.min, extremesX.max, p1.x, p2.x ]);
        var yLimits = arrayLimits([ extremesY.min, extremesY.max, p1.y, p2.y ]);

        return Rect.fromPoints(new Point(xLimits.min, yLimits.min), new Point(xLimits.max, yLimits.max));
    };

    Segment.prototype._curveExtremesFor = function _curveExtremesFor (points, field) {
        var extremes = this._curveExtremes(
            points[0][field], points[1][field],
            points[2][field], points[3][field]
        );

        return {
            min: calculateCurveAt(extremes.min, field, points),
            max: calculateCurveAt(extremes.max, field, points)
        };
    };

    Segment.prototype._curveExtremes = function _curveExtremes (x1, x2, x3, x4) {
        var a = x1 - 3 * x2 + 3 * x3 - x4;
        var b = - 2 * (x1 - 2 * x2 + x3);
        var c = x1 - x2;
        var sqrt = Math.sqrt(b * b - 4 * a * c);
        var t1 = 0;
        var t2 = 1;

        if (a === 0) {
            if (b !== 0) {
                t1 = t2 = -c / b;
            }
        } else if (!isNaN(sqrt)) {
            t1 = (- b + sqrt) / (2 * a);
            t2 = (- b - sqrt) / (2 * a);
        }

        var min = Math.max(Math.min(t1, t2), 0);
        if (min < 0 || min > 1) {
            min = 0;
        }

        var max = Math.min(Math.max(t1, t2), 1);
        if (max > 1 || max < 0) {
            max = 1;
        }

        return {
            min: min,
            max: max
        };
    };

    Segment.prototype._intersectionsTo = function _intersectionsTo (segment, point) {
        var intersectionsCount;
        if (this.controlOut() && segment.controlIn()) {
            intersectionsCount = curveIntersectionsCount([ this.anchor(), this.controlOut(), segment.controlIn(), segment.anchor() ], point, this.bboxTo(segment));
        } else {
            intersectionsCount = lineIntersectionsCount(this.anchor(), segment.anchor(), point);
        }
        return intersectionsCount;
    };

    Segment.prototype._isOnCurveTo = function _isOnCurveTo (segment, point, width, endSegment) {
        var bbox = this.bboxTo(segment).expand(width, width);
        if (bbox.containsPoint(point)) {
            var p1 = this.anchor();
            var p2 = this.controlOut();
            var p3 = segment.controlIn();
            var p4 = segment.anchor();

            if (endSegment === "start" && p1.distanceTo(point) <= width) {
                return !isOutOfEndPoint(p1, p2, point);
            } else if (endSegment === "end" && p4.distanceTo(point) <= width) {
                return !isOutOfEndPoint(p4, p3, point);
            }

            //the approach is not entirely correct but is close and the alternatives are solving a 6th degree polynomial or testing the segment points
            var points = [ p1, p2, p3, p4 ];
            if (hasRootsInRange(points, point, "x", "y", width) || hasRootsInRange(points, point, "y", "x", width)) {
                return true;
            }
            var rotation = transform$1().rotate(45, point);
            var rotatedPoints = [ p1.transformCopy(rotation), p2.transformCopy(rotation), p3.transformCopy(rotation), p4.transformCopy(rotation) ];
            return hasRootsInRange(rotatedPoints, point, "x", "y", width) || hasRootsInRange(rotatedPoints, point, "y", "x", width);
        }
    };

    Segment.prototype._isOnLineTo = function _isOnLineTo (segment, point, width) {
        var p1 = this.anchor();
        var p2 = segment.anchor();
        var angle = deg(Math.atan2(p2.y - p1.y, p2.x - p1.x));
        var rect = new Rect([ p1.x, p1.y - width / 2 ], [ p1.distanceTo(p2), width ]);
        return rect.containsPoint(point.transformCopy(transform$1().rotate(-angle, p1)));
    };

    Segment.prototype._isOnPathTo = function _isOnPathTo (segment, point, width, endSegment) {
        var isOnPath;
        if (this.controlOut() && segment.controlIn()) {
            isOnPath = this._isOnCurveTo(segment, point, width / 2, endSegment);
        } else {
            isOnPath = this._isOnLineTo(segment, point, width);
        }
        return isOnPath;
    };

    return Segment;
}(withPoints(HasObservers, points)));

function arrayLimits(arr) {
    var length = arr.length;
    var min = MAX_NUM;
    var max = MIN_NUM;

    for (var i = 0; i < length; i ++) {
        max = Math.max(max, arr[i]);
        min = Math.min(min, arr[i]);
    }

    return {
        min: min,
        max: max
    };
}



var geometry = Object.freeze({
	Circle: Circle$2,
	Arc: Arc$2,
	Rect: Rect,
	Point: Point,
	Segment: Segment,
	Matrix: Matrix,
	Size: Size,
	toMatrix: toMatrix,
	Transformation: Transformation,
	transform: transform$1
});

var WEIGHT = 0.333;
var EXTREMUM_ALLOWED_DEVIATION = 0.01;
var X = "x";
var Y = "y";

function pointsToCurve(pointsIn, closed) {
    var points = pointsIn.slice(0);
    var segments = [];
    var length = points.length;

    if (length > 2) {
        removeDuplicates(0, points);
        length = points.length;
    }

    if (length < 2 || (length === 2 && points[0].equals(points[1]))) {
        return segments;
    }

    var p0 = points[0];
    var p1 = points[1];
    var p2 = points[2];

    segments.push(new Segment(p0));

    while (p0.equals(points[length - 1])) {
        closed = true;
        points.pop();
        length--;
    }

    if (length === 2) {
        var tangent = getTangent(p0,p1, X, Y);

        last(segments).controlOut(
            firstControlPoint(tangent, p0, p1, X, Y)
        );

        segments.push(new Segment(
            p1,
            secondControlPoint(tangent, p0, p1, X, Y)
        ));

        return segments;
    }

    var initialControlPoint, lastControlPoint;

    if (closed) {
        p0 = points[length - 1]; p1 = points[0]; p2 = points[1];
        var controlPoints = getControlPoints(p0, p1, p2);
        initialControlPoint = controlPoints[1];
        lastControlPoint = controlPoints[0];
    } else {
        var tangent$1 = getTangent(p0, p1, X,Y);
        initialControlPoint = firstControlPoint(tangent$1, p0, p1, X, Y);
    }

    var cp0 = initialControlPoint;
    for (var idx = 0; idx <= length - 3; idx++) {
        removeDuplicates(idx, points);
        length = points.length;
        if (idx + 3 <= length) {
            p0 = points[idx]; p1 = points[idx + 1]; p2 = points[idx + 2];
            var controlPoints$1 = getControlPoints(p0,p1,p2);

            last(segments).controlOut(cp0);
            cp0 = controlPoints$1[1];

            var cp1 = controlPoints$1[0];
            segments.push(new Segment(p1, cp1));
        }
    }

    if (closed) {
        p0 = points[length - 2]; p1 = points[length - 1]; p2 = points[0];
        var controlPoints$2 = getControlPoints(p0, p1, p2);

        last(segments).controlOut(cp0);
        segments.push(new Segment(
            p1,
            controlPoints$2[0]
        ));

        last(segments).controlOut(controlPoints$2[1]);
        segments.push(new Segment(
            p2,
            lastControlPoint
        ));
    } else {
        var tangent$2 = getTangent(p1, p2, X, Y);

        last(segments).controlOut(cp0);
        segments.push(new Segment(
            p2,
            secondControlPoint(tangent$2, p1, p2, X, Y)
        ));
    }

    return segments;
}



function removeDuplicates(idx, points) {
    while (points[idx + 1] && (points[idx].equals(points[idx + 1]) || points[idx + 1].equals(points[idx + 2]))) {
        points.splice(idx + 1, 1);
    }
}

function invertAxis(p0, p1, p2) {
    var invertAxis = false;

    if (p0.x === p1.x) {
        invertAxis = true;
    } else if (p1.x === p2.x) {
        if ((p1.y < p2.y && p0.y <= p1.y) || (p2.y < p1.y && p1.y <= p0.y)) {
            invertAxis = true;
        }
    } else {
        var fn = lineFunction(p0,p1);
        var y2 = calculateFunction(fn, p2.x);
        if (!(p0.y <= p1.y && p2.y <= y2) &&
            !(p1.y <= p0.y && p2.y >= y2)) {
            invertAxis = true;
        }
    }

    return invertAxis;
}

function isLine(p0, p1, p2) {
    var fn = lineFunction(p0, p1);
    var y2 = calculateFunction(fn, p2.x);

    return (p0.x === p1.x && p1.x === p2.x) || round(y2, 1) === round(p2.y, 1);
}

function lineFunction(p1, p2) {
    var a = (p2.y - p1.y) / (p2.x - p1.x);
    var b = p1.y - a * p1.x;

    return [ b, a ];
}

function getControlPoints(p0, p1, p2) {
    var xField = X;
    var yField = Y;
    var restrict = false;
    var switchOrientation = false;
    var tangent;

    if (isLine(p0, p1, p2)) {
        tangent = getTangent(p0, p1, X, Y);
    } else {
        var monotonic = {
            x: isMonotonicByField(p0, p1, p2, X),
            y: isMonotonicByField(p0, p1, p2, Y)
        };

        if (monotonic.x && monotonic.y) {
            tangent = getTangent(p0, p2, X, Y);
            restrict = true;
        } else {
            if (invertAxis(p0, p1, p2)) {
                xField = Y;
                yField = X;
            }

            if (monotonic[xField]) {
                tangent = 0;
            } else {
                var sign;
                if ((p2[yField] < p0[yField] && p0[yField] <= p1[yField]) ||
                    (p0[yField] < p2[yField] && p1[yField] <= p0[yField])) {
                    sign = numberSign((p2[yField] - p0[yField]) * (p1[xField] - p0[xField]));
                } else {
                    sign = -numberSign((p2[xField] - p0[xField]) * (p1[yField] - p0[yField]));
                }

                tangent = EXTREMUM_ALLOWED_DEVIATION * sign;
                switchOrientation = true;
            }
        }
    }

    var secondCP = secondControlPoint(tangent, p0, p1, xField, yField);

    if (switchOrientation) {
        var oldXField = xField;
        xField = yField;
        yField = oldXField;
    }

    var firstCP = firstControlPoint(tangent, p1, p2, xField, yField);

    if (restrict) {
        restrictControlPoint(p0, p1, secondCP, tangent);
        restrictControlPoint(p1, p2, firstCP, tangent);
    }

    return [ secondCP, firstCP ];
}

function restrictControlPoint(p1, p2, cp, tangent) {
    if (p1.y < p2.y) {
        if (p2.y < cp.y) {
            cp.x = p1.x + (p2.y - p1.y) / tangent;
            cp.y = p2.y;
        } else if (cp.y < p1.y) {
            cp.x = p2.x - (p2.y - p1.y) / tangent;
            cp.y = p1.y;
        }
    } else {
        if (cp.y < p2.y) {
            cp.x = p1.x - (p1.y - p2.y) / tangent;
            cp.y = p2.y;
        } else if (p1.y < cp.y) {
            cp.x = p2.x + (p1.y - p2.y) / tangent;
            cp.y = p1.y;
        }
    }
}

function getTangent(p0, p1, xField, yField) {
    var x = p1[xField] - p0[xField];
    var y = p1[yField] - p0[yField];
    var tangent;

    if (x === 0) {
        tangent = 0;
    } else {
        tangent = y / x;
    }

    return tangent;
}

function isMonotonicByField(p0, p1, p2, field) {
    return (p2[field] > p1[field] && p1[field] > p0[field]) ||
                (p2[field] < p1[field] && p1[field] < p0[field]);
}

function firstControlPoint(tangent, p0, p3, xField, yField) {
    var t1 = p0[xField];
    var t2 = p3[xField];
    var distance = (t2 - t1) * WEIGHT;

    return point(t1 + distance, p0[yField] + distance * tangent, xField, yField);
}

function secondControlPoint(tangent, p0, p3, xField, yField) {
    var t1 = p0[xField];
    var t2 = p3[xField];
    var distance = (t2 - t1) * WEIGHT;

    return point(t2 - distance, p3[yField] - distance * tangent, xField, yField);
}

function point(xValue, yValue, xField, yField) {
    var controlPoint = new Point();
    controlPoint[xField] = xValue;
    controlPoint[yField] = yValue;

    return controlPoint;
}

function calculateFunction(fn, x) {
    var length = fn.length;
    var result = 0;

    for (var i = 0; i < length; i++) {
        result += Math.pow(x,i) * fn[i];
    }
    return result;
}

function numberSign(value) {
    return value <= 0 ? -1 : 1;
}

var ShapeMap = {
    l: function(path, options) {
        var parameters = options.parameters;
        var position = options.position;

        for (var i = 0; i < parameters.length; i += 2) {
            var point = new Point(parameters[i], parameters[i + 1]);

            if (options.isRelative) {
                point.translateWith(position);
            }

            path.lineTo(point.x, point.y);

            position.x = point.x;
            position.y = point.y;
        }
    },

    c: function(path, options) {
        var parameters = options.parameters;
        var position = options.position;

        for (var i = 0; i < parameters.length; i += 6) {
            var controlOut = new Point(parameters[i], parameters[i + 1]);
            var controlIn = new Point(parameters[i + 2], parameters[i + 3]);
            var point = new Point(parameters[i + 4], parameters[i + 5]);
            if (options.isRelative) {
                controlIn.translateWith(position);
                controlOut.translateWith(position);
                point.translateWith(position);
            }

            path.curveTo(controlOut, controlIn, point);

            position.x = point.x;
            position.y = point.y;
        }
    },

    v: function(path, options) {
        var value = options.isRelative ? 0 : options.position.x;

        toLineParamaters(options.parameters, true, value);
        this.l(path, options);
    },

    h: function(path, options) {
        var value = options.isRelative ? 0 : options.position.y;

        toLineParamaters(options.parameters, false, value);
        this.l(path, options);
    },

    a: function(path, options) {
        var parameters = options.parameters;
        var position = options.position;

        for (var i = 0; i < parameters.length; i += 7) {
            var radiusX = parameters[i];
            var radiusY = parameters[i + 1];
            var rotation = parameters[i + 2];
            var largeArc = parameters[i + 3];
            var swipe = parameters[i + 4];
            var endPoint = new Point(parameters[i + 5], parameters[i + 6]);

            if (options.isRelative) {
                endPoint.translateWith(position);
            }
            if (position.x !== endPoint.x || position.y !== endPoint.y) {
                path.arcTo(endPoint, radiusX, radiusY, largeArc, swipe, rotation);

                position.x = endPoint.x;
                position.y = endPoint.y;
            }
        }
    },

    s: function(path, options) {
        var parameters = options.parameters;
        var position = options.position;
        var previousCommand = options.previousCommand;
        var lastControlIn;

        if (previousCommand === "s" || previousCommand === "c") {
            lastControlIn = last(last(path.paths).segments).controlIn();
        }

        for (var i = 0; i < parameters.length; i += 4) {
            var controlIn = new Point(parameters[i], parameters[i + 1]);
            var endPoint = new Point(parameters[i + 2], parameters[i + 3]);
            var controlOut = (void 0);

            if (options.isRelative) {
                controlIn.translateWith(position);
                endPoint.translateWith(position);
            }

            if (lastControlIn) {
                controlOut = reflectionPoint(lastControlIn, position);
            } else {
                controlOut = position.clone();
            }

            lastControlIn = controlIn;

            path.curveTo(controlOut, controlIn, endPoint);

            position.x = endPoint.x;
            position.y = endPoint.y;
        }
    },

    q: function(path, options) {
        var parameters = options.parameters;
        var position = options.position;

        for (var i = 0; i < parameters.length; i += 4) {
            var controlPoint = new Point(parameters[i], parameters[i + 1]);
            var endPoint = new Point(parameters[i + 2], parameters[i + 3]);

            if (options.isRelative) {
                controlPoint.translateWith(position);
                endPoint.translateWith(position);
            }

            var cubicControlPoints = quadraticToCubicControlPoints(position, controlPoint, endPoint);

            path.curveTo(cubicControlPoints.controlOut, cubicControlPoints.controlIn, endPoint);

            position.x = endPoint.x;
            position.y = endPoint.y;
        }
    },

    t: function(path, options) {
        var parameters = options.parameters;
        var position = options.position;
        var previousCommand = options.previousCommand;
        var controlPoint;

        if (previousCommand === "q" || previousCommand === "t") {
            var lastSegment = last(last(path.paths).segments);
            controlPoint = lastSegment.controlIn().clone()
                .translateWith(position.scaleCopy(-1 / 3))
                .scale(3 / 2);
        }

        for (var i = 0; i < parameters.length; i += 2) {
            var endPoint = new Point(parameters[i], parameters[i + 1]);
            if (options.isRelative) {
                endPoint.translateWith(position);
            }

            if (controlPoint) {
                controlPoint = reflectionPoint(controlPoint, position);
            } else {
                controlPoint = position.clone();
            }

            var cubicControlPoints = quadraticToCubicControlPoints(position, controlPoint, endPoint);

            path.curveTo(cubicControlPoints.controlOut, cubicControlPoints.controlIn, endPoint);

            position.x = endPoint.x;
            position.y = endPoint.y;
        }
    }
};

function toLineParamaters(parameters, isVertical, value) {
    var insertPosition = isVertical ? 0 : 1;

    for (var i = 0; i < parameters.length; i += 2) {
        parameters.splice(i + insertPosition, 0, value);
    }
}

function reflectionPoint(point, center) {
    if (point && center) {
        return center.scaleCopy(2).translate(-point.x, -point.y);
    }
}

var third = 1 / 3;

function quadraticToCubicControlPoints(position, controlPoint, endPoint) {
    var scaledPoint = controlPoint.clone().scale(2 / 3);
    return {
        controlOut: scaledPoint.clone().translateWith(position.scaleCopy(third)),
        controlIn: scaledPoint.translateWith(endPoint.scaleCopy(third))
    };
}

var SEGMENT_REGEX = /([a-df-z]{1})([^a-df-z]*)(z)?/gi;
var SPLIT_REGEX = /[,\s]?([+\-]?(?:\d*\.\d+|\d+)(?:[eE][+\-]?\d+)?)/g;
var MOVE = "m";
var CLOSE = "z";

function parseParameters(str) {
    var parameters = [];
    str.replace(SPLIT_REGEX, function(match, number) {
        parameters.push(parseFloat(number));
    });
    return parameters;
}

function parsePath(pathInstance, str) {
    var position = new Point();
    var previousCommand;

    str.replace(SEGMENT_REGEX, function (match, element, params, closePath) {
        var command = element.toLowerCase();
        var isRelative = command === element;
        var parameters = parseParameters(params.trim());

        if (command === MOVE) {
            if (isRelative) {
                position.x += parameters[0];
                position.y += parameters[1];
            } else {
                position.x = parameters[0];
                position.y = parameters[1];
            }

            pathInstance.moveTo(position.x, position.y);

            if (parameters.length > 2) {
                command = "l";
                parameters.splice(0, 2);
            }
        }

        if (ShapeMap[command]) {
            ShapeMap[command](
                pathInstance, {
                    parameters: parameters,
                    position: position,
                    isRelative: isRelative,
                    previousCommand: previousCommand
                }
            );

            if (closePath && closePath.toLowerCase() === CLOSE) {
                pathInstance.close();
            }
        } else if (command !== MOVE) {
            throw new Error("Error while parsing SVG path. Unsupported command: " + command);
        }

        previousCommand = command;
    });

    return pathInstance;
}

function elementsBoundingBox(elements, applyTransform, transformation) {
    var boundingBox;

    for (var i = 0; i < elements.length; i++) {
        var element = elements[i];
        if (element.visible()) {
            var elementBoundingBox = applyTransform ? element.bbox(transformation) : element.rawBBox();
            if (elementBoundingBox) {
                if (boundingBox) {
                    boundingBox = Rect.union(boundingBox, elementBoundingBox);
                } else {
                    boundingBox = elementBoundingBox;
                }
            }
        }
    }

    return boundingBox;
}

function elementsClippedBoundingBox(elements, transformation) {
    var boundingBox;

    for (var i = 0; i < elements.length; i++) {
        var element = elements[i];
        if (element.visible()) {
            var elementBoundingBox = element.clippedBBox(transformation);
            if (elementBoundingBox) {
                if (boundingBox) {
                    boundingBox = Rect.union(boundingBox, elementBoundingBox);
                } else {
                    boundingBox = elementBoundingBox;
                }
            }
        }
    }

    return boundingBox;
}

var SPACE$1 = ' ';
var printPoints = function (precision) { return function () {
    var points = [], len = arguments.length;
    while ( len-- ) points[ len ] = arguments[ len ];

    return points.map(function (p) { return p.toString(precision); }).join(SPACE$1);
 }    };
var segmentType = function (segmentStart, segmentEnd) { return segmentStart.controlOut() && segmentEnd.controlIn() ? 'C' : 'L'; };

var Path = (function (superclass) {
    function Path(options) {
        superclass.call(this, options);
        this.segments = new GeometryElementsArray();
        this.segments.addObserver(this);

        if (!defined(this.options.stroke)) {
            this.stroke('#000');

            if (!defined(this.options.stroke.lineJoin)) {
                this.options.set('stroke.lineJoin', 'miter');
            }
        }
    }

    if ( superclass ) Path.__proto__ = superclass;
    Path.prototype = Object.create( superclass && superclass.prototype );
    Path.prototype.constructor = Path;

    var prototypeAccessors = { nodeType: {} };

    prototypeAccessors.nodeType.get = function () {
        return 'Path';
    };

    Path.prototype.moveTo = function moveTo (x, y) {
        this.suspend();
        this.segments.elements([]);
        this.resume();

        this.lineTo(x, y);

        return this;
    };

    Path.prototype.lineTo = function lineTo (x, y) {
        var point$$1 = defined(y) ? new Point(x, y) : x;
        var segment = new Segment(point$$1);

        this.segments.push(segment);

        return this;
    };

    Path.prototype.curveTo = function curveTo (controlOut, controlIn, point$$1) {
        if (this.segments.length > 0) {
            var lastSegment = last(this.segments);
            var segment = new Segment(point$$1, controlIn);
            this.suspend();
            lastSegment.controlOut(controlOut);
            this.resume();

            this.segments.push(segment);
        }

        return this;
    };

    Path.prototype.arc = function arc (startAngle, endAngle, radiusX, radiusY, anticlockwise) {
        if (this.segments.length > 0) {
            var lastSegment = last(this.segments);
            var anchor = lastSegment.anchor();
            var start = rad(startAngle);
            var center = new Point(anchor.x - radiusX * Math.cos(start),
                anchor.y - radiusY * Math.sin(start));
            var arc = new Arc$2(center, {
                startAngle: startAngle,
                endAngle: endAngle,
                radiusX: radiusX,
                radiusY: radiusY,
                anticlockwise: anticlockwise
            });

            this._addArcSegments(arc);
        }

        return this;
    };

    Path.prototype.arcTo = function arcTo (end, rx, ry, largeArc, swipe, rotation) {
        if (this.segments.length > 0) {
            var lastSegment = last(this.segments);
            var anchor = lastSegment.anchor();
            var arc = Arc$2.fromPoints(anchor, Point.create(end), rx, ry, largeArc, swipe, rotation);

            this._addArcSegments(arc);
        }
        return this;
    };

    Path.prototype._addArcSegments = function _addArcSegments (arc) {
        var this$1 = this;

        this.suspend();

        var curvePoints = arc.curvePoints();

        for (var i = 1; i < curvePoints.length; i += 3) {
            this$1.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);
        }

        this.resume();
        this.geometryChange();
    };

    Path.prototype.close = function close () {
        this.options.closed = true;
        this.geometryChange();

        return this;
    };

    Path.prototype.rawBBox = function rawBBox () {
        return this._bbox();
    };

    Path.prototype.toString = function toString (digits) {
        var output = '';

        var segments = this.segments;
        var length = segments.length;
        if (length > 0) {
            var parts = [];
            var print = printPoints(digits);
            var currentType;

            for (var i = 1; i < length; i++) {
                var type = segmentType(segments[i - 1], segments[i]);
                if (type !== currentType) {
                    currentType = type;
                    parts.push(type);
                }

                if (type === 'L') {
                    parts.push(print(segments[i].anchor()));
                } else {
                    parts.push(print(
                        segments[i - 1].controlOut(), segments[i].controlIn(), segments[i].anchor()
                    ));
                }
            }

            output = 'M' + print(segments[0].anchor()) + SPACE$1 + parts.join(SPACE$1);
            if (this.options.closed) {
                output += 'Z';
            }
        }

        return output;
    };

    Path.prototype._containsPoint = function _containsPoint (point$$1) {
        var segments = this.segments;
        var length = segments.length;
        var intersectionsCount = 0;
        var previous, current;

        for (var idx = 1; idx < length; idx++) {
            previous = segments[idx - 1];
            current = segments[idx];
            intersectionsCount += previous._intersectionsTo(current, point$$1);
        }

        if (this.options.closed || !segments[0].anchor().equals(segments[length - 1].anchor())) {
            intersectionsCount += lineIntersectionsCount(segments[0].anchor(), segments[length - 1].anchor(), point$$1);
        }

        return intersectionsCount % 2 !== 0;
    };

    Path.prototype._isOnPath = function _isOnPath (point$$1, width) {
        var segments = this.segments;
        var length = segments.length;
        var pathWidth = width || this.options.stroke.width;

        if (length > 1) {
            if (segments[0]._isOnPathTo(segments[1], point$$1, pathWidth, 'start')) {
                return true;
            }

            for (var idx = 2; idx <= length - 2; idx++) {
                if (segments[idx - 1]._isOnPathTo(segments[idx], point$$1, pathWidth)) {
                    return true;
                }
            }

            if (segments[length - 2]._isOnPathTo(segments[length - 1], point$$1, pathWidth, 'end')) {
                return true;
            }
        }
        return false;
    };

    Path.prototype._bbox = function _bbox (matrix) {
        var segments = this.segments;
        var length = segments.length;
        var boundingBox;

        if (length === 1) {
            var anchor = segments[0].anchor().transformCopy(matrix);
            boundingBox = new Rect(anchor, Size.ZERO);
        } else if (length > 0) {
            for (var i = 1; i < length; i++) {
                var segmentBox = segments[i - 1].bboxTo(segments[i], matrix);
                if (boundingBox) {
                    boundingBox = Rect.union(boundingBox, segmentBox);
                } else {
                    boundingBox = segmentBox;
                }
            }
        }

        return boundingBox;
    };

    Path.parse = function parse (str, options) {
        return MultiPath.parse(str, options);
    };

    Path.fromRect = function fromRect (rect, options) {
        var path = new Path(options);
        var ref = rect.cornerRadius;
        var rx = ref[0];
        var ry = ref[1];

        if (rx === 0 && ry === 0) {
            path.moveTo(rect.topLeft())
                .lineTo(rect.topRight())
                .lineTo(rect.bottomRight())
                .lineTo(rect.bottomLeft())
                .close();
        } else {
            var origin = rect.origin;
            var x = origin.x;
            var y = origin.y;
            var width = rect.width();
            var height = rect.height();
            rx = limitValue(rx, 0, width / 2);
            ry = limitValue(ry, 0, height / 2);

            path.moveTo(x + rx, y)
                .lineTo(x + width - rx, y)
                .arcTo([ x + width, y + ry ], rx, ry, false)
                .lineTo(x + width, y + height - ry)
                .arcTo([ x + width - rx, y + height ], rx, ry, false)
                .lineTo(x + rx, y + height)
                .arcTo([ x, y + height - ry ], rx, ry, false)
                .lineTo(x, y + ry)
                .arcTo([ x + rx, y ], rx, ry, false);
        }

        return path;
    };

    Path.fromPoints = function fromPoints (points, options) {
        if (points) {
            var path = new Path(options);

            for (var i = 0; i < points.length; i++) {
                var point$$1 = Point.create(points[i]);
                if (point$$1) {
                    if (i === 0) {
                        path.moveTo(point$$1);
                    } else {
                        path.lineTo(point$$1);
                    }
                }
            }

            return path;
        }
    };

    Path.curveFromPoints = function curveFromPoints (points, options) {
        if (points) {
            var segments = pointsToCurve(points);
            var path = new Path(options);
            path.segments.push.apply(path.segments, segments);

            return path;
        }
    };

    Path.fromArc = function fromArc (arc, options) {
        var path = new Path(options);
        var startAngle = arc.startAngle;
        var start = arc.pointAt(startAngle);
        path.moveTo(start.x, start.y);
        path.arc(startAngle, arc.endAngle, arc.radiusX, arc.radiusY, arc.anticlockwise);
        return path;
    };

    Object.defineProperties( Path.prototype, prototypeAccessors );

    return Path;
}(paintable(measurable(Element$1))));

var MultiPath = (function (superclass) {
    function MultiPath(options) {
        superclass.call(this, options);
        this.paths = new GeometryElementsArray();
        this.paths.addObserver(this);

        if (!defined(this.options.stroke)) {
            this.stroke('#000');
        }
    }

    if ( superclass ) MultiPath.__proto__ = superclass;
    MultiPath.prototype = Object.create( superclass && superclass.prototype );
    MultiPath.prototype.constructor = MultiPath;

    var prototypeAccessors$1 = { nodeType: {} };

    MultiPath.parse = function parse (str, options) {
        var instance = new MultiPath(options);
        return parsePath(instance, str);
    };

    MultiPath.prototype.toString = function toString (digits) {
        var paths = this.paths;
        var output = '';

        if (paths.length > 0) {
            var result = [];

            for (var i = 0; i < paths.length; i++) {
                result.push(paths[i].toString(digits));
            }

            output = result.join(SPACE$1);
        }

        return output;
    };

    prototypeAccessors$1.nodeType.get = function () {
        return 'MultiPath';
    };

    MultiPath.prototype.moveTo = function moveTo (x, y) {
        var path = new Path();
        path.moveTo(x, y);

        this.paths.push(path);

        return this;
    };

    MultiPath.prototype.lineTo = function lineTo (x, y) {
        if (this.paths.length > 0) {
            last(this.paths).lineTo(x, y);
        }

        return this;
    };

    MultiPath.prototype.curveTo = function curveTo (controlOut, controlIn, point$$1) {
        if (this.paths.length > 0) {
            last(this.paths).curveTo(controlOut, controlIn, point$$1);
        }

        return this;
    };

    MultiPath.prototype.arc = function arc (startAngle, endAngle, radiusX, radiusY, anticlockwise) {
        if (this.paths.length > 0) {
            last(this.paths).arc(startAngle, endAngle, radiusX, radiusY, anticlockwise);
        }

        return this;
    };

    MultiPath.prototype.arcTo = function arcTo (end, rx, ry, largeArc, swipe, rotation) {
        if (this.paths.length > 0) {
            last(this.paths).arcTo(end, rx, ry, largeArc, swipe, rotation);
        }

        return this;
    };

    MultiPath.prototype.close = function close () {
        if (this.paths.length > 0) {
            last(this.paths).close();
        }

        return this;
    };

    MultiPath.prototype._bbox = function _bbox (matrix) {
        return elementsBoundingBox(this.paths, true, matrix);
    };

    MultiPath.prototype.rawBBox = function rawBBox () {
        return elementsBoundingBox(this.paths, false);
    };

    MultiPath.prototype._containsPoint = function _containsPoint (point$$1) {
        var paths = this.paths;

        for (var idx = 0; idx < paths.length; idx++) {
            if (paths[idx]._containsPoint(point$$1)) {
                return true;
            }
        }
        return false;
    };

    MultiPath.prototype._isOnPath = function _isOnPath (point$$1) {
        var paths = this.paths;
        var width = this.options.stroke.width;

        for (var idx = 0; idx < paths.length; idx++) {
            if (paths[idx]._isOnPath(point$$1, width)) {
                return true;
            }
        }
        return false;
    };

    MultiPath.prototype._clippedBBox = function _clippedBBox (transformation) {
        return elementsClippedBoundingBox(this.paths, this.currentTransform(transformation));
    };

    Object.defineProperties( MultiPath.prototype, prototypeAccessors$1 );

    return MultiPath;
}(paintable(measurable(Element$1))));

var DEFAULT_STROKE$1 = "#000";

var Arc = (function (superclass) {
    function Arc(geometry, options) {
        if ( geometry === void 0 ) geometry = new Arc$2();
        if ( options === void 0 ) options = {};

        superclass.call(this, options);

        this.geometry(geometry);

        if (!defined(this.options.stroke)) {
            this.stroke(DEFAULT_STROKE$1);
        }
    }

    if ( superclass ) Arc.__proto__ = superclass;
    Arc.prototype = Object.create( superclass && superclass.prototype );
    Arc.prototype.constructor = Arc;

    var prototypeAccessors = { nodeType: {} };

    prototypeAccessors.nodeType.get = function () {
        return "Arc";
    };

    Arc.prototype._bbox = function _bbox (matrix) {
        return this._geometry.bbox(matrix);
    };

    Arc.prototype.rawBBox = function rawBBox () {
        return this.geometry().bbox();
    };

    Arc.prototype.toPath = function toPath () {
        var path = new Path();
        var curvePoints = this.geometry().curvePoints();

        if (curvePoints.length > 0) {
            path.moveTo(curvePoints[0].x, curvePoints[0].y);

            for (var i = 1; i < curvePoints.length; i += 3) {
                path.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);
            }
        }

        return path;
    };

    Arc.prototype._containsPoint = function _containsPoint (point) {
        return this.geometry().containsPoint(point);
    };

    Arc.prototype._isOnPath = function _isOnPath (point) {
        return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
    };

    Object.defineProperties( Arc.prototype, prototypeAccessors );

    return Arc;
}(paintable(measurable(withGeometry(Element$1)))));

var DEFAULT_FONT = "12px sans-serif";
var DEFAULT_FILL = "#000";

var Text = (function (superclass) {
    function Text(content, position, options) {
        if ( position === void 0 ) position = new Point();
        if ( options === void 0 ) options = {};

        superclass.call(this, options);

        this.content(content);
        this.position(position);

        if (!this.options.font) {
            this.options.font = DEFAULT_FONT;
        }

        if (!defined(this.options.fill)) {
            this.fill(DEFAULT_FILL);
        }
    }

    if ( superclass ) Text.__proto__ = superclass;
    Text.prototype = Object.create( superclass && superclass.prototype );
    Text.prototype.constructor = Text;

    var prototypeAccessors = { nodeType: {} };

    prototypeAccessors.nodeType.get = function () {
        return "Text";
    };

    Text.prototype.content = function content (value) {
        if (defined(value)) {
            this.options.set("content", value);
            return this;
        }

        return this.options.get("content");
    };

    Text.prototype.measure = function measure () {
        var metrics = measureText(this.content(), {
            font: this.options.get("font")
        });

        return metrics;
    };

    Text.prototype.rect = function rect () {
        var size = this.measure();
        var pos = this.position().clone();
        return new Rect(pos, [ size.width, size.height ]);
    };

    Text.prototype.bbox = function bbox (transformation) {
        var combinedMatrix = toMatrix(this.currentTransform(transformation));
        return this.rect().bbox(combinedMatrix);
    };

    Text.prototype.rawBBox = function rawBBox () {
        return this.rect().bbox();
    };

    Text.prototype._containsPoint = function _containsPoint (point) {
        return this.rect().containsPoint(point);
    };

    Object.defineProperties( Text.prototype, prototypeAccessors );

    return Text;
}(paintable(withPoints(Element$1, [ "position" ]))));

var Image$1 = (function (superclass) {
    function Image(src, rect, options) {
        if ( rect === void 0 ) rect = new Rect();
        if ( options === void 0 ) options = {};

        superclass.call(this, options);

        this.src(src);
        this.rect(rect);
    }

    if ( superclass ) Image.__proto__ = superclass;
    Image.prototype = Object.create( superclass && superclass.prototype );
    Image.prototype.constructor = Image;

    var prototypeAccessors = { nodeType: {} };

    prototypeAccessors.nodeType.get = function () {
        return "Image";
    };

    Image.prototype.src = function src (value) {
        if (defined(value)) {
            this.options.set("src", value);
            return this;
        }

        return this.options.get("src");
    };

    Image.prototype.bbox = function bbox (transformation) {
        var combinedMatrix = toMatrix(this.currentTransform(transformation));
        return this._rect.bbox(combinedMatrix);
    };

    Image.prototype.rawBBox = function rawBBox () {
        return this._rect.bbox();
    };

    Image.prototype._containsPoint = function _containsPoint (point) {
        return this._rect.containsPoint(point);
    };

    Image.prototype._hasFill = function _hasFill () {
        return this.src();
    };

    Object.defineProperties( Image.prototype, prototypeAccessors );

    return Image;
}(withGeometry(Element$1, [ "rect" ])));

var traversable = function (TBase, childrenField) { return (
    (function (TBase) {
        function anonymous () {
            TBase.apply(this, arguments);
        }

        if ( TBase ) anonymous.__proto__ = TBase;
        anonymous.prototype = Object.create( TBase && TBase.prototype );
        anonymous.prototype.constructor = anonymous;

        anonymous.prototype.traverse = function traverse (callback) {
            var children = this[childrenField];

            for (var i = 0; i < children.length; i++) {
                var child = children[i];

                if (child.traverse) {
                    child.traverse(callback);
                } else {
                    callback(child);
                }
            }

            return this;
        };

        return anonymous;
    }(TBase))
); };

var Group = (function (superclass) {
    function Group(options) {
        superclass.call(this, options);
        this.children = [];
    }

    if ( superclass ) Group.__proto__ = superclass;
    Group.prototype = Object.create( superclass && superclass.prototype );
    Group.prototype.constructor = Group;

    var prototypeAccessors = { nodeType: {} };

    prototypeAccessors.nodeType.get = function () {
        return "Group";
    };

    Group.prototype.childrenChange = function childrenChange (action, items, index) {
        this.trigger("childrenChange",{
            action: action,
            items: items,
            index: index
        });
    };

    Group.prototype.append = function append$1 () {
        append$1$1(this.children, arguments);
        this._reparent(arguments, this);

        this.childrenChange("add", arguments);

        return this;
    };

    Group.prototype.insert = function insert (index, element) {
        this.children.splice(index, 0, element);
        element.parent = this;

        this.childrenChange("add", [ element ], index);

        return this;
    };

    Group.prototype.insertAt = function insertAt (element, index) {
        return this.insert(index, element);
    };

    Group.prototype.remove = function remove (element) {
        var index = this.children.indexOf(element);
        if (index >= 0) {
            this.children.splice(index, 1);
            element.parent = null;
            this.childrenChange("remove", [ element ], index);
        }

        return this;
    };

    Group.prototype.removeAt = function removeAt (index) {
        if (0 <= index && index < this.children.length) {
            var element = this.children[index];
            this.children.splice(index, 1);
            element.parent = null;
            this.childrenChange("remove", [ element ], index);
        }

        return this;
    };

    Group.prototype.clear = function clear () {
        var items = this.children;
        this.children = [];
        this._reparent(items, null);

        this.childrenChange("remove", items, 0);

        return this;
    };

    Group.prototype.bbox = function bbox (transformation) {
        return elementsBoundingBox(this.children, true, this.currentTransform(transformation));
    };

    Group.prototype.rawBBox = function rawBBox () {
        return elementsBoundingBox(this.children, false);
    };

    Group.prototype._clippedBBox = function _clippedBBox (transformation) {
        return elementsClippedBoundingBox(this.children, this.currentTransform(transformation));
    };

    Group.prototype.currentTransform = function currentTransform (transformation) {
        return Element$1.prototype.currentTransform.call(this, transformation) || null;
    };

    Group.prototype.containsPoint = function containsPoint (point, parentTransform) {
        if (this.visible()) {
            var children = this.children;
            var transform = this.currentTransform(parentTransform);
            for (var idx = 0; idx < children.length; idx++) {
                if (children[idx].containsPoint(point, transform)) {
                    return true;
                }
            }
        }
        return false;
    };

    Group.prototype._reparent = function _reparent (elements, newParent) {
        var this$1 = this;

        for (var i = 0; i < elements.length; i++) {
            var child = elements[i];
            var parent = child.parent;
            if (parent && parent !== this$1 && parent.remove) {
                parent.remove(child);
            }

            child.parent = newParent;
        }
    };

    Object.defineProperties( Group.prototype, prototypeAccessors );

    return Group;
}(traversable(Element$1, "children")));

function translateToPoint(point, bbox, element) {
    var transofrm = element.transform() || transform$1();
    var matrix = transofrm.matrix();
    matrix.e += point.x - bbox.origin.x;
    matrix.f += point.y - bbox.origin.y;

    transofrm.matrix(matrix);
    element.transform(transofrm);
}

function alignStart(size, rect, align, axis, sizeField) {
    var start;
    if (align === "start") {
        start = rect.origin[axis];
    } else if (align === "end") {
        start = rect.origin[axis] + rect.size[sizeField] - size;
    } else {
        start = rect.origin[axis] + (rect.size[sizeField] - size) / 2;
    }

    return start;
}

function alignStartReverse(size, rect, align, axis, sizeField) {
    var start;
    if (align === "start") {
        start = rect.origin[axis] + rect.size[sizeField] - size;
    } else if (align === "end") {
        start = rect.origin[axis];
    } else {
        start = rect.origin[axis] + (rect.size[sizeField] - size) / 2;
    }

    return start;
}

var DEFAULT_OPTIONS$1 = {
    alignContent: "start",
    justifyContent: "start",
    alignItems: "start",
    spacing: 0,
    orientation: "horizontal",
    lineSpacing: 0,
    wrap: true,
    revers: false
};

var forEach = function (elements, callback) {
    elements.forEach(callback);
};

var forEachReverse = function (elements, callback) {
    var length = elements.length;

    for (var idx = length - 1; idx >= 0; idx--) {
        callback(elements[idx], idx);
    }
};

var Layout = (function (Group$$1) {
    function Layout(rect, options) {
        Group$$1.call(this, Object.assign({}, DEFAULT_OPTIONS$1, options));
        this._rect = rect;
        this._fieldMap = {};
    }

    if ( Group$$1 ) Layout.__proto__ = Group$$1;
    Layout.prototype = Object.create( Group$$1 && Group$$1.prototype );
    Layout.prototype.constructor = Layout;

    Layout.prototype.rect = function rect (value) {
        if (value) {
            this._rect = value;
            return this;
        }

        return this._rect;
    };

    Layout.prototype._initMap = function _initMap () {
        var options = this.options;
        var fieldMap = this._fieldMap;
        if (options.orientation === "horizontal") {
            fieldMap.sizeField = "width";
            fieldMap.groupsSizeField = "height";
            fieldMap.groupAxis = "x";
            fieldMap.groupsAxis = "y";
        } else {
            fieldMap.sizeField = "height";
            fieldMap.groupsSizeField = "width";
            fieldMap.groupAxis = "y";
            fieldMap.groupsAxis = "x";
        }

        if (options.reverse) {
            this.forEach = forEachReverse;
            this.justifyAlign = alignStartReverse;
        } else {
            this.forEach = forEach;
            this.justifyAlign = alignStart;
        }
    };

    Layout.prototype.reflow = function reflow () {
        var this$1 = this;

        if (!this._rect || this.children.length === 0) {
            return;
        }
        this._initMap();

        if (this.options.transform) {
            this.transform(null);
        }

        var options = this.options;
        var rect = this._rect;
        var ref = this._initGroups();
        var groups = ref.groups;
        var groupsSize = ref.groupsSize;
        var ref$1 = this._fieldMap;
        var sizeField = ref$1.sizeField;
        var groupsSizeField = ref$1.groupsSizeField;
        var groupAxis = ref$1.groupAxis;
        var groupsAxis = ref$1.groupsAxis;
        var groupOrigin = new Point();
        var elementOrigin = new Point();
        var size = new Size();
        var groupStart = alignStart(groupsSize, rect, options.alignContent, groupsAxis, groupsSizeField);
        var elementStart, group, groupBox;

        var arrangeElements = function (bbox, idx) {
            var element = group.elements[idx];

            elementOrigin[groupAxis] = elementStart;
            elementOrigin[groupsAxis] = alignStart(bbox.size[groupsSizeField], groupBox, options.alignItems, groupsAxis, groupsSizeField);
            translateToPoint(elementOrigin, bbox, element);
            elementStart += bbox.size[sizeField] + options.spacing;
        };

        for (var groupIdx = 0; groupIdx < groups.length; groupIdx++) {
            group = groups[groupIdx];
            groupOrigin[groupAxis] = elementStart = this$1.justifyAlign(group.size, rect, options.justifyContent, groupAxis, sizeField);
            groupOrigin[groupsAxis] = groupStart;
            size[sizeField] = group.size;
            size[groupsSizeField] = group.lineSize;
            groupBox = new Rect(groupOrigin, size);
            this$1.forEach(group.bboxes, arrangeElements);

            groupStart += group.lineSize + options.lineSpacing;
        }

        if (!options.wrap && group.size > rect.size[sizeField]) {
            var scale = rect.size[sizeField] / groupBox.size[sizeField];
            var scaledStart = groupBox.topLeft().scale(scale, scale);
            var scaledSize = groupBox.size[groupsSizeField] * scale;
            var newStart = alignStart(scaledSize, rect, options.alignContent, groupsAxis, groupsSizeField);
            var transform = transform$1();
            if (groupAxis === "x") {
                transform.translate(rect.origin.x - scaledStart.x, newStart - scaledStart.y);
            } else {
                transform.translate(newStart - scaledStart.x, rect.origin.y - scaledStart.y);
            }
            transform.scale(scale, scale);

            this.transform(transform);
        }
    };

    Layout.prototype._initGroups = function _initGroups () {
        var this$1 = this;

        var ref = this;
        var options = ref.options;
        var children = ref.children;
        var lineSpacing = options.lineSpacing;
        var wrap = options.wrap;
        var spacing = options.spacing;
        var sizeField = this._fieldMap.sizeField;
        var group = this._newGroup();
        var groups = [];
        var addGroup = function() {
            groups.push(group);
            groupsSize += group.lineSize + lineSpacing;
        };
        var groupsSize = -lineSpacing;

        for (var idx = 0; idx < children.length; idx++) {
            var element = children[idx];
            var bbox = children[idx].clippedBBox();
            if (element.visible() && bbox) {
                if (wrap && group.size + bbox.size[sizeField] + spacing > this$1._rect.size[sizeField]) {
                    if (group.bboxes.length === 0) {
                        this$1._addToGroup(group, bbox, element);
                        addGroup();
                        group = this$1._newGroup();
                    } else {
                        addGroup();
                        group = this$1._newGroup();
                        this$1._addToGroup(group, bbox, element);
                    }
                } else {
                    this$1._addToGroup(group, bbox, element);
                }
            }
        }

        if (group.bboxes.length) {
            addGroup();
        }

        return {
            groups: groups,
            groupsSize: groupsSize
        };
    };

    Layout.prototype._addToGroup = function _addToGroup (group, bbox, element) {
        group.size += bbox.size[this._fieldMap.sizeField] + this.options.spacing;
        group.lineSize = Math.max(bbox.size[this._fieldMap.groupsSizeField], group.lineSize);
        group.bboxes.push(bbox);
        group.elements.push(element);
    };

    Layout.prototype._newGroup = function _newGroup () {
        return {
            lineSize: 0,
            size: -this.options.spacing,
            bboxes: [],
            elements: []
        };
    };

    return Layout;
}(Group));

var Rect$2 = (function (superclass) {
    function Rect$$1(geometry, options) {
        if ( geometry === void 0 ) geometry = new Rect();
        if ( options === void 0 ) options = {};

        superclass.call(this, options);

        this.geometry(geometry);

        if (!defined(this.options.stroke)) {
            this.stroke("#000");
        }
    }

    if ( superclass ) Rect$$1.__proto__ = superclass;
    Rect$$1.prototype = Object.create( superclass && superclass.prototype );
    Rect$$1.prototype.constructor = Rect$$1;

    var prototypeAccessors = { nodeType: {} };

    prototypeAccessors.nodeType.get = function () {
        return "Rect";
    };

    Rect$$1.prototype._bbox = function _bbox (matrix) {
        return this._geometry.bbox(matrix);
    };

    Rect$$1.prototype.rawBBox = function rawBBox () {
        return this._geometry.bbox();
    };

    Rect$$1.prototype._containsPoint = function _containsPoint (point) {
        return this._geometry.containsPoint(point);
    };

    Rect$$1.prototype._isOnPath = function _isOnPath (point) {
        return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
    };

    Object.defineProperties( Rect$$1.prototype, prototypeAccessors );

    return Rect$$1;
}(paintable(measurable(withGeometry(Element$1)))));

function alignElements(elements, rect, alignment, axis, sizeField) {
    for (var idx = 0; idx < elements.length; idx++) {
        var bbox = elements[idx].clippedBBox();
        if (bbox) {
            var point = bbox.origin.clone();
            point[axis] = alignStart(bbox.size[sizeField], rect, alignment || "start", axis, sizeField);
            translateToPoint(point, bbox, elements[idx]);
        }
    }
}

function align(elements, rect, alignment) {
    alignElements(elements, rect, alignment, "x", "width");
}

function vAlign(elements, rect, alignment) {
    alignElements(elements, rect, alignment, "y", "height");
}

function stackElements(elements, stackAxis, otherAxis, sizeField) {
    if (elements.length > 1) {
        var origin = new Point();
        var previousBBox = elements[0].bbox;

        for (var idx = 1; idx < elements.length; idx++) {
            var element = elements[idx].element;
            var bbox = elements[idx].bbox;
            origin[stackAxis] = previousBBox.origin[stackAxis] + previousBBox.size[sizeField];
            origin[otherAxis] = bbox.origin[otherAxis];
            translateToPoint(origin, bbox, element);
            bbox.origin[stackAxis] = origin[stackAxis];
            previousBBox = bbox;
        }
    }
}

function createStackElements(elements) {
    var stackElements = [];

    for (var idx = 0; idx < elements.length; idx++) {
        var element = elements[idx];
        var bbox = element.clippedBBox();
        if (bbox) {
            stackElements.push({
                element: element,
                bbox: bbox
            });
        }
    }

    return stackElements;
}

function stack(elements) {
    stackElements(createStackElements(elements), "x", "y", "width");
}

function vStack(elements) {
    stackElements(createStackElements(elements), "y", "x", "height");
}

function getStacks(elements, rect, sizeField) {
    var maxSize = rect.size[sizeField];
    var stacks = [];
    var stack = [];
    var stackSize = 0;
    var element, bbox;

    var addElementToStack = function() {
        stack.push({
            element: element,
            bbox: bbox
        });
    };

    for (var idx = 0; idx < elements.length; idx++) {
        element = elements[idx];

        bbox = element.clippedBBox();
        if (bbox) {
            var size = bbox.size[sizeField];
            if (stackSize + size > maxSize) {
                if (stack.length) {
                    stacks.push(stack);
                    stack = [];
                    addElementToStack();
                    stackSize = size;
                } else {
                    addElementToStack();
                    stacks.push(stack);
                    stack = [];
                    stackSize = 0;
                }
            } else {
                addElementToStack();
                stackSize += size;
            }
        }
    }

    if (stack.length) {
        stacks.push(stack);
    }

    return stacks;
}

function wrapElements(elements, rect, axis, otherAxis, sizeField) {
    var stacks = getStacks(elements, rect, sizeField);
    var origin = rect.origin.clone();
    var result = [];

    for (var idx = 0; idx < stacks.length; idx++) {
        var stack = stacks[idx];
        var startElement = stack[0];
        origin[otherAxis] = startElement.bbox.origin[otherAxis];
        translateToPoint(origin, startElement.bbox, startElement.element);
        startElement.bbox.origin[axis] = origin[axis];
        stackElements(stack, axis, otherAxis, sizeField);
        result.push([]);
        for (var elementIdx = 0; elementIdx < stack.length; elementIdx++) {
            result[idx].push(stack[elementIdx].element);
        }
    }
    return result;
}

function wrap(elements, rect) {
    return wrapElements(elements, rect, "x", "y", "width");
}

function vWrap(elements, rect) {
    return wrapElements(elements, rect, "y", "x", "height");
}

function fit(element, rect) {
    var bbox = element.clippedBBox();
    if (bbox) {
        var elementSize = bbox.size;
        var rectSize = rect.size;
        if (rectSize.width < elementSize.width || rectSize.height < elementSize.height) {
            var scale = Math.min(rectSize.width / elementSize.width, rectSize.height / elementSize.height);
            var transform = element.transform() || transform$1();
            transform.scale(scale, scale);
            element.transform(transform);
        }
    }
}

var StopsArray = (function (ElementsArray$$1) {
    function StopsArray () {
        ElementsArray$$1.apply(this, arguments);
    }

    if ( ElementsArray$$1 ) StopsArray.__proto__ = ElementsArray$$1;
    StopsArray.prototype = Object.create( ElementsArray$$1 && ElementsArray$$1.prototype );
    StopsArray.prototype.constructor = StopsArray;

    StopsArray.prototype._change = function _change () {
        this.optionsChange({
            field: "stops"
        });
    };

    return StopsArray;
}(ElementsArray));

function optionsAccessor(name) {
    return function(value) {
        if (defined(value)) {
            this.options.set(name, value);
            return this;
        }

        return this.options.get(name);
    };
}

function defineOptionsAccessors(fn, names) {
    for (var i = 0; i < names.length; i++) {
        fn[names[i]] = optionsAccessor(names[i]);
    }
}

var withOptions = function (TBase, names) {
    var result = (function (TBase) {
        function result () {
            TBase.apply(this, arguments);
        }if ( TBase ) result.__proto__ = TBase;
        result.prototype = Object.create( TBase && TBase.prototype );
        result.prototype.constructor = result;

        

        return result;
    }(TBase));
    defineOptionsAccessors(result.prototype, names);

    return result;
};

var options = [ "offset", "color", "opacity" ];

var GradientStop = (function (superclass) {
    function GradientStop(offset, color, opacity) {
        superclass.call(this);

        this.options = new OptionsStore({
            offset: offset,
            color: color,
            opacity: defined(opacity) ? opacity : 1
        });

        this.options.addObserver(this);
    }

    if ( superclass ) GradientStop.__proto__ = superclass;
    GradientStop.prototype = Object.create( superclass && superclass.prototype );
    GradientStop.prototype.constructor = GradientStop;

    GradientStop.create = function create (arg) {
        if (defined(arg)) {
            var stop;
            if (arg instanceof GradientStop) {
                stop = arg;
            } else if (arg.length > 1) {
                stop = new GradientStop(arg[0], arg[1], arg[2]);
            } else {
                stop = new GradientStop(arg.offset, arg.color, arg.opacity);
            }

            return stop;
        }
    };

    return GradientStop;
}(withOptions(HasObservers, options)));

var Gradient = (function (HasObservers$$1) {
    function Gradient(options) {
        if ( options === void 0 ) options = {};

        HasObservers$$1.call(this);

        this.stops = new StopsArray(this._createStops(options.stops));
        this.stops.addObserver(this);
        this._userSpace = options.userSpace;
        this.id = definitionId();
    }

    if ( HasObservers$$1 ) Gradient.__proto__ = HasObservers$$1;
    Gradient.prototype = Object.create( HasObservers$$1 && HasObservers$$1.prototype );
    Gradient.prototype.constructor = Gradient;

    var prototypeAccessors = { nodeType: {} };

    prototypeAccessors.nodeType.get = function () {
        return "Gradient";
    };

    Gradient.prototype.userSpace = function userSpace (value) {
        if (defined(value)) {
            this._userSpace = value;
            this.optionsChange();
            return this;
        }

        return this._userSpace;
    };

    Gradient.prototype._createStops = function _createStops (stops) {
        if ( stops === void 0 ) stops = [];

        var result = [];
        for (var idx = 0; idx < stops.length; idx++) {
            result.push(GradientStop.create(stops[idx]));
        }

        return result;
    };

    Gradient.prototype.addStop = function addStop (offset, color, opacity) {
        this.stops.push(new GradientStop(offset, color, opacity));
    };

    Gradient.prototype.removeStop = function removeStop (stop) {
        var index = this.stops.indexOf(stop);
        if (index >= 0) {
            this.stops.splice(index, 1);
        }
    };

    Gradient.prototype.optionsChange = function optionsChange (e) {
        this.trigger("optionsChange", {
            field: "gradient" + (e ? "." + e.field : ""),
            value: this
        });
    };

    Gradient.prototype.geometryChange = function geometryChange () {
        this.optionsChange();
    };

    Object.defineProperties( Gradient.prototype, prototypeAccessors );

    return Gradient;
}(HasObservers));

var points$1 = [ "start", "end" ];

var LinearGradient = (function (superclass) {
    function LinearGradient(options) {
        if ( options === void 0 ) options = {};

        superclass.call(this, options);

        this.start(options.start || new Point());
        this.end(options.end || new Point(1, 0));
    }

    if ( superclass ) LinearGradient.__proto__ = superclass;
    LinearGradient.prototype = Object.create( superclass && superclass.prototype );
    LinearGradient.prototype.constructor = LinearGradient;

    return LinearGradient;
}(withPoints(Gradient, points$1)));

var RadialGradient = (function (superclass) {
    function RadialGradient(options) {
        if ( options === void 0 ) options = {};

        superclass.call(this, options);

        this.center(options.center || new Point());
        this._radius = defined(options.radius) ? options.radius : 1;
        this._fallbackFill = options.fallbackFill;
    }

    if ( superclass ) RadialGradient.__proto__ = superclass;
    RadialGradient.prototype = Object.create( superclass && superclass.prototype );
    RadialGradient.prototype.constructor = RadialGradient;

    RadialGradient.prototype.radius = function radius (value) {
        if (defined(value)) {
            this._radius = value;
            this.geometryChange();
            return this;
        }

        return this._radius;
    };

    RadialGradient.prototype.fallbackFill = function fallbackFill (value) {
        if (defined(value)) {
            this._fallbackFill = value;
            this.optionsChange();
            return this;
        }

        return this._fallbackFill;
    };

    return RadialGradient;
}(withPoints(Gradient, [ "center" ])));

function swing(position) {
    return 0.5 - Math.cos(position * Math.PI) / 2;
}

function linear(position) {
    return position;
}

function easeOutElastic(position, time, start, diff) {
    var s = 1.70158,
        p = 0,
        a = diff;

    if (position === 0) {
        return start;
    }

    if (position === 1) {
        return start + diff;
    }

    if (!p) {
        p = 0.5;
    }

    if (a < Math.abs(diff)) {
        a = diff;
        s = p / 4;
    } else {
        s = p / (2 * Math.PI) * Math.asin(diff / a);
    }

    return a * Math.pow(2, -10 * position) *
           Math.sin((Number(position) - s) * (1.1 * Math.PI) / p) + diff + start;
}


var easingFunctions = Object.freeze({
	swing: swing,
	linear: linear,
	easeOutElastic: easeOutElastic
});

var instance;

var AnimationFactory = (function (Class$$1) {
    function AnimationFactory() {
        Class$$1.call(this);

        this._items = [];
    }

    if ( Class$$1 ) AnimationFactory.__proto__ = Class$$1;
    AnimationFactory.prototype = Object.create( Class$$1 && Class$$1.prototype );
    AnimationFactory.prototype.constructor = AnimationFactory;

    var staticAccessors = { current: {} };

    staticAccessors.current.get = function () {
        if (!instance) {
            instance = new AnimationFactory();
        }

        return instance;
    };

    AnimationFactory.prototype.register = function register (name, type) {
        this._items.push({
            name: name,
            type: type
        });
    };

    AnimationFactory.prototype.create = function create (element, options) {
        var items = this._items;
        var match;

        if (options && options.type) {
            var type = options.type.toLowerCase();
            for (var i = 0; i < items.length; i++) {
                if (items[i].name.toLowerCase() === type) {
                    match = items[i];
                    break;
                }
            }
        }

        if (match) {
            return new match.type(element, options);
        }
    };

    Object.defineProperties( AnimationFactory, staticAccessors );

    return AnimationFactory;
}(Class));

var Animation = (function (Class$$1) {
    function Animation(element, options) {
        Class$$1.call(this);

        this.options = Object.assign({}, this.options, options);
        this.element = element;
    }

    if ( Class$$1 ) Animation.__proto__ = Class$$1;
    Animation.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Animation.prototype.constructor = Animation;

    var prototypeAccessors = { options: {} };

    Animation.create = function create (type, element, options) {
        return AnimationFactory.current.create(type, element, options);
    };

    prototypeAccessors.options.get = function () {
        return this._options || {
            duration: 500,
            easing: "swing"
        };
    };

    prototypeAccessors.options.set = function (value) {
        this._options = value;
    };

    Animation.prototype.setup = function setup () {};
    Animation.prototype.step = function step () {};

    Animation.prototype.play = function play () {
        var this$1 = this;

        var options = this.options;
        var duration = options.duration;
        var delay = options.delay; if ( delay === void 0 ) delay = 0;
        var easing = easingFunctions[options.easing];
        var start = now() + delay;
        var finish = start + duration;

        if (duration === 0) {
            this.step(1);
            this.abort();
        } else {
            setTimeout(function () {
                var loop = function () {
                    if (this$1._stopped) {
                        return;
                    }

                    var wallTime = now();

                    var time = limitValue(wallTime - start, 0, duration);
                    var position = time / duration;
                    var easingPosition = easing(position, time, 0, 1, duration);

                    this$1.step(easingPosition);

                    if (wallTime < finish) {
                        animationFrame(loop);
                    } else {
                        this$1.abort();
                    }
                };

                loop();
            }, delay);
        }
    };

    Animation.prototype.abort = function abort () {
        this._stopped = true;
    };

    Animation.prototype.destroy = function destroy () {
        this.abort();
    };

    Object.defineProperties( Animation.prototype, prototypeAccessors );

    return Animation;
}(Class));

var instance$1;

var PathParser = (function (Class$$1) {
    function PathParser () {
        Class$$1.apply(this, arguments);
    }

    if ( Class$$1 ) PathParser.__proto__ = Class$$1;
    PathParser.prototype = Object.create( Class$$1 && Class$$1.prototype );
    PathParser.prototype.constructor = PathParser;

    var staticAccessors = { current: {} };

    staticAccessors.current.get = function () {
        if (!instance$1) {
            instance$1 = new PathParser();
        }

        return instance$1;
    };

    PathParser.prototype.parse = function parse (str, options) {
        var multiPath = new MultiPath(options);
        return parsePath(multiPath, str);
    };

    Object.defineProperties( PathParser, staticAccessors );

    return PathParser;
}(Class));

var BaseNode = (function (Class$$1) {
    function BaseNode(srcElement) {
        Class$$1.call(this);

        this.childNodes = [];
        this.parent = null;

        if (srcElement) {
            this.srcElement = srcElement;
            this.observe();
        }
    }

    if ( Class$$1 ) BaseNode.__proto__ = Class$$1;
    BaseNode.prototype = Object.create( Class$$1 && Class$$1.prototype );
    BaseNode.prototype.constructor = BaseNode;

    BaseNode.prototype.destroy = function destroy () {
        var this$1 = this;

        if (this.srcElement) {
            this.srcElement.removeObserver(this);
        }

        var children = this.childNodes;
        for (var i = 0; i < children.length; i++) {
            this$1.childNodes[i].destroy();
        }

        this.parent = null;
    };

    BaseNode.prototype.load = function load () {};

    BaseNode.prototype.observe = function observe () {
        if (this.srcElement) {
            this.srcElement.addObserver(this);
        }
    };

    BaseNode.prototype.append = function append (node) {
        this.childNodes.push(node);
        node.parent = this;
    };

    BaseNode.prototype.insertAt = function insertAt (node, pos) {
        this.childNodes.splice(pos, 0, node);
        node.parent = this;
    };

    BaseNode.prototype.remove = function remove (index, count) {
        var this$1 = this;

        var end = index + count;
        for (var i = index; i < end; i++) {
            this$1.childNodes[i].removeSelf();
        }
        this.childNodes.splice(index, count);
    };

    BaseNode.prototype.removeSelf = function removeSelf () {
        this.clear();
        this.destroy();
    };

    BaseNode.prototype.clear = function clear () {
        this.remove(0, this.childNodes.length);
    };

    BaseNode.prototype.invalidate = function invalidate () {
        if (this.parent) {
            this.parent.invalidate();
        }
    };

    BaseNode.prototype.geometryChange = function geometryChange () {
        this.invalidate();
    };

    BaseNode.prototype.optionsChange = function optionsChange () {
        this.invalidate();
    };

    BaseNode.prototype.childrenChange = function childrenChange (e) {
        if (e.action === "add") {
            this.load(e.items, e.index);
        } else if (e.action === "remove") {
            this.remove(e.index, e.items.length);
        }

        this.invalidate();
    };

    return BaseNode;
}(Class));

var events = [
    "click",
    "mouseenter",
    "mouseleave",
    "mousemove",
    "resize"
];

var Surface$2 = (function (Observable$$1) {
    function Surface(element, options) {
        Observable$$1.call(this);

        this.options = Object.assign({}, options);
        this.element = element;
        this.element._kendoExportVisual = this.exportVisual.bind(this);

        this._click = this._handler("click");
        this._mouseenter = this._handler("mouseenter");
        this._mouseleave = this._handler("mouseleave");
        this._mousemove = this._handler("mousemove");

        this._visual = new Group();

        elementSize(element, this.options);

        this.bind(events, this.options);

        this._enableTracking();
    }

    if ( Observable$$1 ) Surface.__proto__ = Observable$$1;
    Surface.prototype = Object.create( Observable$$1 && Observable$$1.prototype );
    Surface.prototype.constructor = Surface;

    Surface.prototype.draw = function draw (element) {
        this._visual.children.push(element);
    };

    Surface.prototype.clear = function clear () {
        this._visual.children = [];
    };

    Surface.prototype.destroy = function destroy () {
        this._visual = null;
        this.element._kendoExportVisual = null;
        this.unbind();
    };

    Surface.prototype.eventTarget = function eventTarget (e) {
        var this$1 = this;

        var domNode = eventElement(e);
        var node;

        while (!node && domNode) {
            node = domNode._kendoNode;
            if (domNode === this$1.element) {
                break;
            }

            domNode = domNode.parentElement;
        }

        if (node) {
            return node.srcElement;
        }
    };

    Surface.prototype.exportVisual = function exportVisual () {
        return this._visual;
    };

    Surface.prototype.getSize = function getSize () {
        return elementSize(this.element);
    };

    Surface.prototype.currentSize = function currentSize (size) {
        if (size) {
            this._size = size;
        } else {
            return this._size;
        }
    };

    Surface.prototype.setSize = function setSize (size) {
        elementSize(this.element, size);

        this.currentSize(size);
        this._resize();
    };

    Surface.prototype.resize = function resize (force) {
        var size = this.getSize();
        var currentSize = this.currentSize();

        if (force || (size.width > 0 || size.height > 0) && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {
            this.currentSize(size);
            this._resize(size, force);
            this.trigger("resize", size);
        }
    };

    Surface.prototype.size = function size (value) {
        if (!value) {
            return this.getSize();
        }

        this.setSize(value);
    };

    Surface.prototype.suspendTracking = function suspendTracking () {
        this._suspendedTracking = true;
    };

    Surface.prototype.resumeTracking = function resumeTracking () {
        this._suspendedTracking = false;
    };

    Surface.prototype._enableTracking = function _enableTracking () {};

    Surface.prototype._resize = function _resize () {};

    Surface.prototype._handler = function _handler (eventName) {
        var this$1 = this;

        return function (e) {
            var node = this$1.eventTarget(e);
            if (node && !this$1._suspendedTracking) {
                this$1.trigger(eventName, {
                    element: node,
                    originalEvent: e,
                    type: eventName
                });
            }
        };
    };

    Surface.prototype._elementOffset = function _elementOffset () {
        var element = this.element;
        var padding = elementPadding(element);
        var ref = elementOffset(element);
        var left = ref.left;
        var top = ref.top;

        return {
            left: left + padding.left,
            top: top + padding.top
        };
    };

    Surface.prototype._surfacePoint = function _surfacePoint (e) {
        var offset = this._elementOffset();
        var coord = eventCoordinates(e);
        var x = coord.x - offset.left;
        var y = coord.y - offset.top;

        var inverseTransform = elementScale(this.element).invert();
        var point = new Point(
            x,
            y
        ).transform(inverseTransform);

        return point;
    };

    return Surface;
}(Observable));

function renderAttr(name, value) {
    return (defined(value) && value !== null) ? (" " + name + "=\"" + value + "\" ") : "";
}

function renderAllAttr(attrs) {
    var output = "";
    for (var i = 0; i < attrs.length; i++) {
        output += renderAttr(attrs[i][0], attrs[i][1]);
    }

    return output;
}

function renderStyle(attrs) {
    var output = "";
    for (var i = 0; i < attrs.length; i++) {
        var value = attrs[i][1];
        if (defined(value)) {
            output += attrs[i][0] + ":" + value + ";";
        }
    }

    if (output !== "") {
        return output;
    }
}

var NODE_MAP = {};

var SVG_NS = "http://www.w3.org/2000/svg";
var NONE = "none";
var POINT_DIGITS = 3;

var applyStyle = function (styleString, element) { return styleString.split(';').filter(function (s) { return s !== ''; }).forEach(function (s) {
        var parts = s.split(':');
        element.style[parts[0].trim()] = parts[1].trim();
    }); };

var styleAttr = 'data-style';
var replaceStyleAttr = function (html) { return html.replace(/\sstyle=/g, ' ' + styleAttr + '='); };
var restoreStyleAttr = function (container) {
    Array.from(container.querySelectorAll('[' + styleAttr +']')).forEach(function (element) {
        var styleString = element.getAttribute(styleAttr);
        element.removeAttribute(styleAttr);
        applyStyle(styleString, element);
    });
};

var renderSVG = function(container, svg) {
    container.innerHTML = replaceStyleAttr(svg);
    restoreStyleAttr(container);
};

if (typeof document !== "undefined") {
    var testFragment = "<svg xmlns='" + SVG_NS + "'></svg>";
    var testContainer = document.createElement("div");
    var hasParser = typeof DOMParser !== "undefined";

    testContainer.innerHTML = testFragment;

    if (hasParser && testContainer.firstChild.namespaceURI !== SVG_NS) {
        renderSVG = function(container, svg) {
            var parser = new DOMParser();
            var chartDoc = parser.parseFromString(replaceStyleAttr(svg), "text/xml");
            restoreStyleAttr(chartDoc);
            var importedDoc = document.adoptNode(chartDoc.documentElement);

            container.innerHTML = "";
            container.appendChild(importedDoc);
        };
    }
}

var renderSVG$1 = renderSVG;

var TRANSFORM = "transform";
var DefinitionMap = {
    clip: "clip-path",
    fill: "fill"
};

function isDefinition(type, value) {
    return type === "clip" || (type === "fill" && (!value || value.nodeType === "Gradient"));
}

function baseUrl() {
    var base = document.getElementsByTagName("base")[0];
    var href = document.location.href;
    var url = "";

    if (base && !(support.browser || {}).msie) {
        var hashIndex = href.indexOf("#");
        if (hashIndex !== -1) {
            href = href.substring(0, hashIndex);
        }

        url = href;
    }

    return url;
}

var Node = (function (BaseNode$$1) {
    function Node(srcElement, options) {
        BaseNode$$1.call(this, srcElement);
        this.definitions = {};

        this.options = options;
    }

    if ( BaseNode$$1 ) Node.__proto__ = BaseNode$$1;
    Node.prototype = Object.create( BaseNode$$1 && BaseNode$$1.prototype );
    Node.prototype.constructor = Node;

    Node.prototype.destroy = function destroy () {
        if (this.element) {
            this.element._kendoNode = null;
            this.element = null;
        }

        this.clearDefinitions();
        BaseNode$$1.prototype.destroy.call(this);
    };

    Node.prototype.load = function load (elements, pos) {
        var this$1 = this;

        for (var i = 0; i < elements.length; i++) {
            var srcElement = elements[i];
            var children = srcElement.children;

            var childNode = new NODE_MAP[srcElement.nodeType](srcElement, this$1.options);

            if (defined(pos)) {
                this$1.insertAt(childNode, pos);
            } else {
                this$1.append(childNode);
            }

            childNode.createDefinitions();

            if (children && children.length > 0) {
                childNode.load(children);
            }

            var element = this$1.element;
            if (element) {
                childNode.attachTo(element, pos);
            }
        }
    };

    Node.prototype.root = function root () {
        var root = this;

        while (root.parent) {
            root = root.parent;
        }

        return root;
    };

    Node.prototype.attachTo = function attachTo (domElement, pos) {
        var container = document.createElement("div");
        renderSVG$1(container,
            "<svg xmlns='" + SVG_NS + "' version='1.1'>" +
                this.render() +
            "</svg>"
        );

        var element = container.firstChild.firstChild;
        if (element) {
            if (defined(pos)) {
                domElement.insertBefore(element, domElement.childNodes[pos] || null);
            } else {
                domElement.appendChild(element);
            }
            this.setElement(element);
        }
    };

    Node.prototype.setElement = function setElement (element) {
        if (this.element) {
            this.element._kendoNode = null;
        }

        this.element = element;
        this.element._kendoNode = this;

        var nodes = this.childNodes;
        for (var i = 0; i < nodes.length; i++) {
            var childElement = element.childNodes[i];
            nodes[i].setElement(childElement);
        }
    };

    Node.prototype.clear = function clear () {
        this.clearDefinitions();

        if (this.element) {
            this.element.innerHTML = "";
        }

        var children = this.childNodes;
        for (var i = 0; i < children.length; i++) {
            children[i].destroy();
        }

        this.childNodes = [];
    };

    Node.prototype.removeSelf = function removeSelf () {
        if (this.element) {
            var parentNode = this.element.parentNode;
            if (parentNode) {
                parentNode.removeChild(this.element);
            }
            this.element = null;
        }

        BaseNode$$1.prototype.removeSelf.call(this);
    };

    Node.prototype.template = function template () {
        return this.renderChildren();
    };

    Node.prototype.render = function render () {
        return this.template();
    };

    Node.prototype.renderChildren = function renderChildren () {
        var nodes = this.childNodes;
        var output = "";

        for (var i = 0; i < nodes.length; i++) {
            output += nodes[i].render();
        }

        return output;
    };

    Node.prototype.optionsChange = function optionsChange (e) {
        var field = e.field;
        var value = e.value;

        if (field === "visible") {
            this.css("display", value ? "" : NONE);
        } else if (DefinitionMap[field] && isDefinition(field, value)) {
            this.updateDefinition(field, value);
        } else if (field === "opacity") {
            this.attr("opacity", value);
        } else if (field === "cursor") {
            this.css("cursor", value);
        } else if (field === "id") {
            if (value) {
                this.attr("id", value);
            } else {
                this.removeAttr("id");
            }
        }

        BaseNode$$1.prototype.optionsChange.call(this, e);
    };

    Node.prototype.attr = function attr (name, value) {
        if (this.element) {
            this.element.setAttribute(name, value);
        }
    };

    Node.prototype.allAttr = function allAttr (attrs) {
        var this$1 = this;

        for (var i = 0; i < attrs.length; i++) {
            this$1.attr(attrs[i][0], attrs[i][1]);
        }
    };

    Node.prototype.css = function css (name, value) {
        if (this.element) {
            this.element.style[name] = value;
        }
    };

    Node.prototype.allCss = function allCss (styles) {
        var this$1 = this;

        for (var i = 0; i < styles.length; i++) {
            this$1.css(styles[i][0], styles[i][1]);
        }
    };

    Node.prototype.removeAttr = function removeAttr (name) {
        if (this.element) {
            this.element.removeAttribute(name);
        }
    };

    Node.prototype.mapTransform = function mapTransform (transform) {
        var attrs = [];
        if (transform) {
            attrs.push([
                TRANSFORM,
                "matrix(" + transform.matrix().toString(6) + ")"
            ]);
        }

        return attrs;
    };

    Node.prototype.renderTransform = function renderTransform () {
        return renderAllAttr(
            this.mapTransform(this.srcElement.transform())
        );
    };

    Node.prototype.transformChange = function transformChange (value) {
        if (value) {
            this.allAttr(this.mapTransform(value));
        } else {
            this.removeAttr(TRANSFORM);
        }
    };

    Node.prototype.mapStyle = function mapStyle () {
        var options = this.srcElement.options;
        var style = [ [ "cursor", options.cursor ] ];

        if (options.visible === false) {
            style.push([ "display", NONE ]);
        }

        return style;
    };

    Node.prototype.renderStyle = function renderStyle$1 () {
        return renderAttr("style", renderStyle(this.mapStyle(true)));
    };

    Node.prototype.renderOpacity = function renderOpacity () {
        return renderAttr("opacity", this.srcElement.options.opacity);
    };

    Node.prototype.renderId = function renderId () {
        return renderAttr("id", this.srcElement.options.id);
    };

    Node.prototype.createDefinitions = function createDefinitions () {
        var srcElement = this.srcElement;
        var definitions = this.definitions;
        if (srcElement) {
            var options = srcElement.options;
            var hasDefinitions;

            for (var field in DefinitionMap) {
                var definition = options.get(field);
                if (definition && isDefinition(field, definition)) {
                    definitions[field] = definition;
                    hasDefinitions = true;
                }
            }
            if (hasDefinitions) {
                this.definitionChange({
                    action: "add",
                    definitions: definitions
                });
            }
        }
    };

    Node.prototype.definitionChange = function definitionChange (e) {
        if (this.parent) {
            this.parent.definitionChange(e);
        }
    };

    Node.prototype.updateDefinition = function updateDefinition (type, value) {
        var definitions = this.definitions;
        var current = definitions[type];
        var attr = DefinitionMap[type];
        var definition = {};
        if (current) {
            definition[type] = current;
            this.definitionChange({
                action: "remove",
                definitions: definition
            });
            delete definitions[type];
        }

        if (!value) {
            if (current) {
                this.removeAttr(attr);
            }
        } else {
            definition[type] = value;
            this.definitionChange({
                action: "add",
                definitions: definition
            });
            definitions[type] = value;
            this.attr(attr, this.refUrl(value.id));
        }
    };

    Node.prototype.clearDefinitions = function clearDefinitions () {
        var definitions = this.definitions;

        this.definitionChange({
            action: "remove",
            definitions: definitions
        });
        this.definitions = {};
    };

    Node.prototype.renderDefinitions = function renderDefinitions () {
        return renderAllAttr(this.mapDefinitions());
    };

    Node.prototype.mapDefinitions = function mapDefinitions () {
        var this$1 = this;

        var definitions = this.definitions;
        var attrs = [];

        for (var field in definitions) {
            attrs.push([ DefinitionMap[field], this$1.refUrl(definitions[field].id) ]);
        }

        return attrs;
    };

    Node.prototype.refUrl = function refUrl (id) {
        var skipBaseHref = (this.options || {}).skipBaseHref;
        var baseHref = this.baseUrl().replace(/'/g, "\\'");
        var base = skipBaseHref ? '' : baseHref;
        return ("url(" + base + "#" + id + ")");
    };

    Node.prototype.baseUrl = function baseUrl$1 () {
        return baseUrl();
    };

    return Node;
}(BaseNode));

var GradientStopNode = (function (Node$$1) {
    function GradientStopNode () {
        Node$$1.apply(this, arguments);
    }

    if ( Node$$1 ) GradientStopNode.__proto__ = Node$$1;
    GradientStopNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    GradientStopNode.prototype.constructor = GradientStopNode;

    GradientStopNode.prototype.template = function template () {
        return ("<stop " + (this.renderOffset()) + " " + (this.renderStyle()) + " />");
    };

    GradientStopNode.prototype.renderOffset = function renderOffset () {
        return renderAttr("offset", this.srcElement.offset());
    };

    GradientStopNode.prototype.mapStyle = function mapStyle () {
        var srcElement = this.srcElement;
        return [
            [ "stop-color", srcElement.color() ],
            [ "stop-opacity", srcElement.opacity() ]
        ];
    };

    GradientStopNode.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "offset") {
            this.attr(e.field, e.value);
        } else if (e.field === "color" || e.field === "opacity") {
            this.css("stop-" + e.field, e.value);
        }
    };

    return GradientStopNode;
}(Node));

var GradientNode = (function (Node$$1) {
    function GradientNode(srcElement) {
        Node$$1.call(this, srcElement);

        this.id = srcElement.id;

        this.loadStops();
    }

    if ( Node$$1 ) GradientNode.__proto__ = Node$$1;
    GradientNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    GradientNode.prototype.constructor = GradientNode;

    GradientNode.prototype.loadStops = function loadStops () {
        var this$1 = this;

        var stops = this.srcElement.stops;
        var element = this.element;

        for (var idx = 0; idx < stops.length; idx++) {
            var stopNode = new GradientStopNode(stops[idx]);
            this$1.append(stopNode);
            if (element) {
                stopNode.attachTo(element);
            }
        }
    };

    GradientNode.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "gradient.stops") {
            BaseNode.prototype.clear.call(this);
            this.loadStops();
        } else if (e.field === "gradient") {
            this.allAttr(this.mapCoordinates());
        }
    };

    GradientNode.prototype.renderCoordinates = function renderCoordinates () {
        return renderAllAttr(this.mapCoordinates());
    };

    GradientNode.prototype.mapSpace = function mapSpace () {
        return [ "gradientUnits", this.srcElement.userSpace() ? "userSpaceOnUse" : "objectBoundingBox" ];
    };

    return GradientNode;
}(Node));

var LinearGradientNode = (function (GradientNode$$1) {
    function LinearGradientNode () {
        GradientNode$$1.apply(this, arguments);
    }

    if ( GradientNode$$1 ) LinearGradientNode.__proto__ = GradientNode$$1;
    LinearGradientNode.prototype = Object.create( GradientNode$$1 && GradientNode$$1.prototype );
    LinearGradientNode.prototype.constructor = LinearGradientNode;

    LinearGradientNode.prototype.template = function template () {
        return ("<linearGradient id='" + (this.id) + "' " + (this.renderCoordinates()) + ">" + (this.renderChildren()) + "</linearGradient>");
    };

    LinearGradientNode.prototype.mapCoordinates = function mapCoordinates () {
        var srcElement = this.srcElement;
        var start = srcElement.start();
        var end = srcElement.end();
        var attrs = [
            [ "x1", start.x ],
            [ "y1", start.y ],
            [ "x2", end.x ],
            [ "y2", end.y ],
            this.mapSpace()
        ];

        return attrs;
    };

    return LinearGradientNode;
}(GradientNode));

var RadialGradientNode = (function (GradientNode$$1) {
    function RadialGradientNode () {
        GradientNode$$1.apply(this, arguments);
    }

    if ( GradientNode$$1 ) RadialGradientNode.__proto__ = GradientNode$$1;
    RadialGradientNode.prototype = Object.create( GradientNode$$1 && GradientNode$$1.prototype );
    RadialGradientNode.prototype.constructor = RadialGradientNode;

    RadialGradientNode.prototype.template = function template () {
        return ("<radialGradient id='" + (this.id) + "' " + (this.renderCoordinates()) + ">" + (this.renderChildren()) + "</radialGradient>");
    };

    RadialGradientNode.prototype.mapCoordinates = function mapCoordinates () {
        var srcElement = this.srcElement;
        var center = srcElement.center();
        var radius = srcElement.radius();
        var attrs = [
            [ "cx", center.x ],
            [ "cy", center.y ],
            [ "r", radius ],
            this.mapSpace()
        ];
        return attrs;
    };

    return RadialGradientNode;
}(GradientNode));

var ClipNode = (function (Node$$1) {
    function ClipNode(srcElement) {
        Node$$1.call(this);

        this.srcElement = srcElement;
        this.id = srcElement.id;

        this.load([ srcElement ]);
    }

    if ( Node$$1 ) ClipNode.__proto__ = Node$$1;
    ClipNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    ClipNode.prototype.constructor = ClipNode;

    ClipNode.prototype.template = function template () {
        return ("<clipPath id='" + (this.id) + "'>" + (this.renderChildren()) + "</clipPath>");
    };

    return ClipNode;
}(Node));

var DefinitionNode = (function (Node$$1) {
    function DefinitionNode() {
        Node$$1.call(this);
        this.definitionMap = {};
    }

    if ( Node$$1 ) DefinitionNode.__proto__ = Node$$1;
    DefinitionNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    DefinitionNode.prototype.constructor = DefinitionNode;

    DefinitionNode.prototype.attachTo = function attachTo (domElement) {
        this.element = domElement;
    };

    DefinitionNode.prototype.template = function template () {
        return ("<defs>" + (this.renderChildren()) + "</defs>");
    };

    DefinitionNode.prototype.definitionChange = function definitionChange (e) {
        var definitions = e.definitions;
        var action = e.action;

        if (action === "add") {
            this.addDefinitions(definitions);
        } else if (action === "remove") {
            this.removeDefinitions(definitions);
        }
    };

    DefinitionNode.prototype.createDefinition = function createDefinition (type, item) {
        var nodeType;
        if (type === "clip") {
            nodeType = ClipNode;
        } else if (type === "fill") {
            if (item instanceof LinearGradient) {
                nodeType = LinearGradientNode;
            } else if (item instanceof RadialGradient) {
                nodeType = RadialGradientNode;
            }
        }
        return new nodeType(item);
    };

    DefinitionNode.prototype.addDefinitions = function addDefinitions (definitions) {
        var this$1 = this;

        for (var field in definitions) {
            this$1.addDefinition(field, definitions[field]);
        }
    };

    DefinitionNode.prototype.addDefinition = function addDefinition (type, srcElement) {
        var ref = this;
        var element = ref.element;
        var definitionMap = ref.definitionMap;
        var id = srcElement.id;
        var mapItem = definitionMap[id];
        if (!mapItem) {
            var node = this.createDefinition(type, srcElement);
            definitionMap[id] = {
                element: node,
                count: 1
            };
            this.append(node);
            if (element) {
                node.attachTo(this.element);
            }
        } else {
            mapItem.count++;
        }
    };

    DefinitionNode.prototype.removeDefinitions = function removeDefinitions (definitions) {
        var this$1 = this;

        for (var field in definitions) {
            this$1.removeDefinition(definitions[field]);
        }
    };

    DefinitionNode.prototype.removeDefinition = function removeDefinition (srcElement) {
        var definitionMap = this.definitionMap;
        var id = srcElement.id;
        var mapItem = definitionMap[id];

        if (mapItem) {
            mapItem.count--;
            if (mapItem.count === 0) {
                this.remove(this.childNodes.indexOf(mapItem.element), 1);
                delete definitionMap[id];
            }
        }
    };

    return DefinitionNode;
}(Node));

var RootNode = (function (Node$$1) {
    function RootNode(options) {
        Node$$1.call(this);
        this.options = options;
        this.defs = new DefinitionNode();
    }

    if ( Node$$1 ) RootNode.__proto__ = Node$$1;
    RootNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    RootNode.prototype.constructor = RootNode;

    RootNode.prototype.attachTo = function attachTo (domElement) {
        this.element = domElement;
        this.defs.attachTo(domElement.firstElementChild);
    };

    RootNode.prototype.clear = function clear () {
        BaseNode.prototype.clear.call(this);
    };

    RootNode.prototype.template = function template () {
        return this.defs.render() + this.renderChildren();
    };

    RootNode.prototype.definitionChange = function definitionChange (e) {
        this.defs.definitionChange(e);
    };

    return RootNode;
}(Node));

var DASH_ARRAYS = {
    dot: [ 1.5, 3.5 ],
    dash: [ 4, 3.5 ],
    longdash: [ 8, 3.5 ],
    dashdot: [ 3.5, 3.5, 1.5, 3.5 ],
    longdashdot: [ 8, 3.5, 1.5, 3.5 ],
    longdashdotdot: [ 8, 3.5, 1.5, 3.5, 1.5, 3.5 ]
};

var SOLID = "solid";
var BUTT = "butt";

var ATTRIBUTE_MAP = {
    "fill.opacity": "fill-opacity",
    "stroke.color": "stroke",
    "stroke.width": "stroke-width",
    "stroke.opacity": "stroke-opacity"
};

var PathNode = (function (Node$$1) {
    function PathNode () {
        Node$$1.apply(this, arguments);
    }

    if ( Node$$1 ) PathNode.__proto__ = Node$$1;
    PathNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    PathNode.prototype.constructor = PathNode;

    PathNode.prototype.geometryChange = function geometryChange () {
        this.attr("d", this.renderData());
        this.invalidate();
    };

    PathNode.prototype.optionsChange = function optionsChange (e) {
        switch (e.field) {
        case "fill":
            if (e.value) {
                this.allAttr(this.mapFill(e.value));
            } else {
                this.removeAttr("fill");
            }
            break;

        case "fill.color":
            this.allAttr(this.mapFill({ color: e.value }));
            break;

        case "stroke":
            if (e.value) {
                this.allAttr(this.mapStroke(e.value));
            } else {
                this.removeAttr("stroke");
            }
            break;

        case "transform":
            this.transformChange(e.value);
            break;

        default:
            var name = ATTRIBUTE_MAP[e.field];
            if (name) {
                this.attr(name, e.value);
            }
            break;
        }

        Node$$1.prototype.optionsChange.call(this, e);
    };

    PathNode.prototype.content = function content () {
        if (this.element) {
            this.element.textContent = this.srcElement.content();
        }
    };

    PathNode.prototype.renderData = function renderData () {
        return this.srcElement.toString(POINT_DIGITS) || undefined;
    };

    PathNode.prototype.mapStroke = function mapStroke (stroke) {
        var attrs = [];

        if (stroke && !isTransparent(stroke.color)) {
            attrs.push([ "stroke", stroke.color ]);
            attrs.push([ "stroke-width", stroke.width ]);
            attrs.push([ "stroke-linecap", this.renderLinecap(stroke) ]);
            attrs.push([ "stroke-linejoin", stroke.lineJoin ]);

            if (defined(stroke.opacity)) {
                attrs.push([ "stroke-opacity", stroke.opacity ]);
            }

            if (defined(stroke.dashType)) {
                attrs.push([ "stroke-dasharray", this.renderDashType(stroke) ]);
            }
        } else {
            attrs.push([ "stroke", NONE ]);
        }

        return attrs;
    };

    PathNode.prototype.renderStroke = function renderStroke () {
        return renderAllAttr(
            this.mapStroke(this.srcElement.options.stroke)
        );
    };

    PathNode.prototype.renderDashType = function renderDashType (stroke) {
        var dashType = stroke.dashType;
        var width = stroke.width; if ( width === void 0 ) width = 1;

        if (dashType && dashType !== SOLID) {
            var dashArray = DASH_ARRAYS[dashType.toLowerCase()];
            var result = [];

            for (var i = 0; i < dashArray.length; i++) {
                result.push(dashArray[i] * width);
            }

            return result.join(" ");
        }
    };

    PathNode.prototype.renderLinecap = function renderLinecap (stroke) {
        var dashType = stroke.dashType;
        var lineCap = stroke.lineCap;

        return (dashType && dashType !== "solid") ? BUTT : lineCap;
    };

    PathNode.prototype.mapFill = function mapFill (fill) {
        var attrs = [];
        if (!(fill && fill.nodeType === "Gradient")) {
            if (fill && !isTransparent(fill.color)) {
                attrs.push([ "fill", fill.color ]);

                if (defined(fill.opacity)) {
                    attrs.push([ "fill-opacity", fill.opacity ]);
                }
            } else {
                attrs.push([ "fill", NONE ]);
            }
        }

        return attrs;
    };

    PathNode.prototype.renderFill = function renderFill () {
        return renderAllAttr(
            this.mapFill(this.srcElement.options.fill)
        );
    };

    PathNode.prototype.template = function template () {
        return "<path " + (this.renderId()) + " " + (this.renderStyle()) + " " + (this.renderOpacity()) + " " + (renderAttr('d', this.renderData())) +
                "" + (this.renderStroke()) + (this.renderFill()) + (this.renderDefinitions()) + (this.renderTransform()) + "></path>";
    };

    return PathNode;
}(Node));

var ArcNode = (function (PathNode$$1) {
    function ArcNode () {
        PathNode$$1.apply(this, arguments);
    }

    if ( PathNode$$1 ) ArcNode.__proto__ = PathNode$$1;
    ArcNode.prototype = Object.create( PathNode$$1 && PathNode$$1.prototype );
    ArcNode.prototype.constructor = ArcNode;

    ArcNode.prototype.renderData = function renderData () {
        return this.srcElement.toPath().toString(POINT_DIGITS);
    };

    return ArcNode;
}(PathNode));

var CircleNode = (function (PathNode$$1) {
    function CircleNode () {
        PathNode$$1.apply(this, arguments);
    }

    if ( PathNode$$1 ) CircleNode.__proto__ = PathNode$$1;
    CircleNode.prototype = Object.create( PathNode$$1 && PathNode$$1.prototype );
    CircleNode.prototype.constructor = CircleNode;

    CircleNode.prototype.geometryChange = function geometryChange () {
        var center = this.center();
        this.attr("cx", center.x);
        this.attr("cy", center.y);
        this.attr("r", this.radius());
        this.invalidate();
    };

    CircleNode.prototype.center = function center () {
        return this.srcElement.geometry().center;
    };

    CircleNode.prototype.radius = function radius () {
        return this.srcElement.geometry().radius;
    };

    CircleNode.prototype.template = function template () {
        return "<circle " + (this.renderId()) + " " + (this.renderStyle()) + " " + (this.renderOpacity()) +
                    "cx='" + (this.center().x) + "' cy='" + (this.center().y) + "' r='" + (this.radius()) + "'" +
                    (this.renderStroke()) + " " + (this.renderFill()) + " " + (this.renderDefinitions()) +
                    (this.renderTransform()) + " ></circle>";
    };

    return CircleNode;
}(PathNode));

var GroupNode = (function (Node$$1) {
    function GroupNode () {
        Node$$1.apply(this, arguments);
    }

    if ( Node$$1 ) GroupNode.__proto__ = Node$$1;
    GroupNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    GroupNode.prototype.constructor = GroupNode;

    GroupNode.prototype.template = function template () {
        return ("<g" + (this.renderId() + this.renderTransform() + this.renderStyle() + this.renderOpacity() + this.renderDefinitions()) + ">" + (this.renderChildren()) + "</g>");
    };

    GroupNode.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "transform") {
            this.transformChange(e.value);
        }

        Node$$1.prototype.optionsChange.call(this, e);
    };

    return GroupNode;
}(Node));

var ImageNode = (function (PathNode$$1) {
    function ImageNode () {
        PathNode$$1.apply(this, arguments);
    }

    if ( PathNode$$1 ) ImageNode.__proto__ = PathNode$$1;
    ImageNode.prototype = Object.create( PathNode$$1 && PathNode$$1.prototype );
    ImageNode.prototype.constructor = ImageNode;

    ImageNode.prototype.geometryChange = function geometryChange () {
        this.allAttr(this.mapPosition());
        this.invalidate();
    };

    ImageNode.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "src") {
            this.allAttr(this.mapSource());
        }

        PathNode$$1.prototype.optionsChange.call(this, e);
    };

    ImageNode.prototype.mapPosition = function mapPosition () {
        var rect = this.srcElement.rect();
        var tl = rect.topLeft();

        return [
            [ "x", tl.x ],
            [ "y", tl.y ],
            [ "width", rect.width() + "px" ],
            [ "height", rect.height() + "px" ]
        ];
    };

    ImageNode.prototype.renderPosition = function renderPosition () {
        return renderAllAttr(this.mapPosition());
    };

    ImageNode.prototype.mapSource = function mapSource (encode) {
        var src = this.srcElement.src();

        if (encode) {
            src = htmlEncode(src);
        }

        return [ [ "xlink:href", src ] ];
    };

    ImageNode.prototype.renderSource = function renderSource () {
        return renderAllAttr(this.mapSource(true));
    };

    ImageNode.prototype.template = function template () {
        return "<image preserveAspectRatio='none' " + (this.renderId()) + " " + (this.renderStyle()) + " " + (this.renderTransform()) + " " + (this.renderOpacity()) +
               (this.renderPosition()) + " " + (this.renderSource()) + " " + (this.renderDefinitions()) + ">" +
               "</image>";
    };

    return ImageNode;
}(PathNode));

var MultiPathNode = (function (PathNode$$1) {
    function MultiPathNode () {
        PathNode$$1.apply(this, arguments);
    }

    if ( PathNode$$1 ) MultiPathNode.__proto__ = PathNode$$1;
    MultiPathNode.prototype = Object.create( PathNode$$1 && PathNode$$1.prototype );
    MultiPathNode.prototype.constructor = MultiPathNode;

    MultiPathNode.prototype.renderData = function renderData () {
        return this.srcElement.toString(POINT_DIGITS) || 'undefined';
    };

    return MultiPathNode;
}(PathNode));

var RectNode = (function (PathNode$$1) {
    function RectNode () {
        PathNode$$1.apply(this, arguments);
    }

    if ( PathNode$$1 ) RectNode.__proto__ = PathNode$$1;
    RectNode.prototype = Object.create( PathNode$$1 && PathNode$$1.prototype );
    RectNode.prototype.constructor = RectNode;

    RectNode.prototype.geometryChange = function geometryChange () {
        var geometry = this.srcElement.geometry();
        this.attr("x", geometry.origin.x);
        this.attr("y", geometry.origin.y);
        this.attr("width", geometry.size.width);
        this.attr("height", geometry.size.height);
        this.attr("rx", geometry.cornerRadius[0]);
        this.attr("ry", geometry.cornerRadius[1]);
        this.invalidate();
    };

    RectNode.prototype.size = function size () {
        return this.srcElement.geometry().size;
    };

    RectNode.prototype.origin = function origin () {
        return this.srcElement.geometry().origin;
    };

    RectNode.prototype.rx = function rx () {
        return this.srcElement.geometry().cornerRadius[0];
    };

    RectNode.prototype.ry = function ry () {
        return this.srcElement.geometry().cornerRadius[1];
    };

    RectNode.prototype.template = function template () {
        return "<rect " + (this.renderId()) + " " + (this.renderStyle()) + " " + (this.renderOpacity()) + " x='" + (this.origin().x) + "' y='" + (this.origin().y) + "' " +
                    "rx='" + (this.rx()) + "' ry='" + (this.ry()) + "' " +
                    "width='" + (this.size().width) + "' height='" + (this.size().height) + "' " + (this.renderStroke()) + " " +
                    (this.renderFill()) + " " + (this.renderDefinitions()) + " " + (this.renderTransform()) + " />";
    };

    return RectNode;
}(PathNode));

var ENTITY_REGEX = /&(?:[a-zA-Z]+|#\d+);/g;

function decodeEntities(text) {
    if (!text || typeof text !== "string" || !ENTITY_REGEX.test(text)) {
        return text;
    }

    var element = decodeEntities._element;
    ENTITY_REGEX.lastIndex = 0;

    return text.replace(ENTITY_REGEX, function (match) {
        element.innerHTML = match;

        return element.textContent || element.innerText;
    });
}

if (typeof document !== "undefined") {
    decodeEntities._element = document.createElement("span");
}

var TextNode = (function (PathNode$$1) {
    function TextNode () {
        PathNode$$1.apply(this, arguments);
    }

    if ( PathNode$$1 ) TextNode.__proto__ = PathNode$$1;
    TextNode.prototype = Object.create( PathNode$$1 && PathNode$$1.prototype );
    TextNode.prototype.constructor = TextNode;

    TextNode.prototype.geometryChange = function geometryChange () {
        var pos = this.pos();
        this.attr("x", pos.x);
        this.attr("y", pos.y);
        this.invalidate();
    };

    TextNode.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "font") {
            this.attr("style", renderStyle(this.mapStyle()));
            this.geometryChange();
        } else if (e.field === "content") {
            PathNode$$1.prototype.content.call(this, this.srcElement.content());
        }

        PathNode$$1.prototype.optionsChange.call(this, e);
    };

    TextNode.prototype.mapStyle = function mapStyle (encode) {
        var style = PathNode$$1.prototype.mapStyle.call(this, encode);
        var font = this.srcElement.options.font;

        if (encode) {
            font = htmlEncode(font);
        }

        style.push([ "font", font ], [ "white-space", "pre" ]);

        return style;
    };

    TextNode.prototype.pos = function pos () {
        var pos = this.srcElement.position();
        var size = this.srcElement.measure();
        return pos.clone().setY(pos.y + size.baseline);
    };

    TextNode.prototype.renderContent = function renderContent () {
        var content = this.srcElement.content();
        content = decodeEntities(content);
        content = htmlEncode(content);

        return normalizeText(content);
    };

    TextNode.prototype.renderTextAnchor = function renderTextAnchor () {
        var anchor;

        if ((this.options || {}).rtl && !(support.browser.msie || support.browser.edge)) {
            anchor = 'end';
        }

        return renderAttr("text-anchor", anchor);
    };

    TextNode.prototype.template = function template () {
        return "<text " + (this.renderId()) + " " + (this.renderTextAnchor()) + " " + (this.renderStyle()) + " " + (this.renderOpacity()) +
                    "x='" + (this.pos().x) + "' y='" + (this.pos().y) + "' " + (this.renderStroke()) + " " + (this.renderTransform()) + " " + (this.renderDefinitions()) +
                    (this.renderFill()) + ">" + (this.renderContent()) + "</text>";
    };

    return TextNode;
}(PathNode));

NODE_MAP.Arc = ArcNode;
NODE_MAP.Circle = CircleNode;
NODE_MAP.Group = GroupNode;
NODE_MAP.Image = ImageNode;
NODE_MAP.MultiPath = MultiPathNode;
NODE_MAP.Path = PathNode;
NODE_MAP.Rect = RectNode;
NODE_MAP.Text = TextNode;

var RTL = 'rtl';

function alignToScreen(element) {
    var ctm;

    try {
        ctm = element.getScreenCTM ? element.getScreenCTM() : null;
    } catch (e) { } // eslint-disable-line no-empty

    if (ctm) {
        var left = - ctm.e % 1;
        var top = - ctm.f % 1;
        var style = element.style;

        if (left !== 0 || top !== 0) {
            style.left = left + "px";
            style.top = top + "px";
        }
    }
}

var Surface$3 = (function (BaseSurface) {
    function Surface(element, options) {
        BaseSurface.call(this, element, options);

        this._root = new RootNode(Object.assign({
            rtl: elementStyles(element, 'direction').direction === RTL
        }, this.options));

        renderSVG$1(this.element, this._template(''));

        this._rootElement = this.element.firstElementChild;
        this._rootElement.style.width = '100%';
        this._rootElement.style.height = '100%';
        this._rootElement.style.overflow = 'hidden';

        alignToScreen(this._rootElement);

        this._root.attachTo(this._rootElement);

        bindEvents(this.element, {
            click: this._click,
            mouseover: this._mouseenter,
            mouseout: this._mouseleave,
            mousemove: this._mousemove
        });

        this.resize();
    }

    if ( BaseSurface ) Surface.__proto__ = BaseSurface;
    Surface.prototype = Object.create( BaseSurface && BaseSurface.prototype );
    Surface.prototype.constructor = Surface;

    var prototypeAccessors = { type: {} };

    prototypeAccessors.type.get = function () {
        return "svg";
    };

    Surface.prototype.destroy = function destroy () {
        if (this._root) {
            this._root.destroy();
            this._root = null;
            this._rootElement = null;
            unbindEvents(this.element, {
                click: this._click,
                mouseover: this._mouseenter,
                mouseout: this._mouseleave,
                mousemove: this._mousemove
            });
        }

        BaseSurface.prototype.destroy.call(this);
    };

    Surface.prototype.translate = function translate (offset) {
        var viewBox = (Math.round(offset.x)) + " " + (Math.round(offset.y)) + " " + (this._size.width) + " " + (this._size.height);

        this._offset = offset;
        this._rootElement.setAttribute("viewBox", viewBox);
    };

    Surface.prototype.draw = function draw (element) {
        BaseSurface.prototype.draw.call(this, element);
        this._root.load([ element ]);
    };

    Surface.prototype.clear = function clear () {
        BaseSurface.prototype.clear.call(this);
        this._root.clear();
    };

    Surface.prototype.svg = function svg () {
        return "<?xml version='1.0' ?>" + this._template();
    };

    Surface.prototype.exportVisual = function exportVisual () {
        var ref = this;
        var visual = ref._visual;
        var offset = ref._offset;

        if (offset) {
            var wrap = new Group();
            wrap.children.push(visual);

            wrap.transform(
                transform$1().translate(-offset.x, -offset.y)
            );

            visual = wrap;
        }

        return visual;
    };

    Surface.prototype._resize = function _resize () {
        if (this._offset) {
            this.translate(this._offset);
        }
    };

    Surface.prototype._template = function _template (svgStyles) {
        var styles = typeof svgStyles === 'string' ? svgStyles :
            "style='width: 100%; height: 100%; overflow: hidden;' ";
        return ("<svg " + styles + "xmlns='" + SVG_NS + "' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>" + (this._root.render()) + "</svg>");
    };

    Object.defineProperties( Surface.prototype, prototypeAccessors );

    return Surface;
}(Surface$2));

var NODE_MAP$2 = {};

function renderPath(ctx, path) {
    var segments = path.segments;

    if (segments.length === 0) {
        return;
    }

    var segment = segments[0];
    var anchor = segment.anchor();
    ctx.moveTo(anchor.x, anchor.y);

    for (var i = 1; i < segments.length; i++) {
        segment = segments[i];
        anchor = segment.anchor();

        var prevSeg = segments[i - 1];
        var prevOut = prevSeg.controlOut();
        var controlIn = segment.controlIn();

        if (prevOut && controlIn) {
            ctx.bezierCurveTo(prevOut.x, prevOut.y,
                controlIn.x, controlIn.y,
                anchor.x, anchor.y);
        } else {
            ctx.lineTo(anchor.x, anchor.y);
        }
    }

    if (path.options.closed) {
        ctx.closePath();
    }
}

var Node$2 = (function (BaseNode$$1) {
    function Node(srcElement) {
        BaseNode$$1.call(this, srcElement);
        if (srcElement) {
            this.initClip();
        }
    }

    if ( BaseNode$$1 ) Node.__proto__ = BaseNode$$1;
    Node.prototype = Object.create( BaseNode$$1 && BaseNode$$1.prototype );
    Node.prototype.constructor = Node;

    Node.prototype.initClip = function initClip () {
        var clip = this.srcElement.clip();
        if (clip) {
            this.clip = clip;
            clip.addObserver(this);
        }
    };

    Node.prototype.clear = function clear () {
        if (this.srcElement) {
            this.srcElement.removeObserver(this);
        }

        this.clearClip();

        BaseNode$$1.prototype.clear.call(this);
    };

    Node.prototype.clearClip = function clearClip () {
        if (this.clip) {
            this.clip.removeObserver(this);
            delete this.clip;
        }
    };

    Node.prototype.setClip = function setClip (ctx) {
        if (this.clip) {
            ctx.beginPath();
            renderPath(ctx, this.clip);
            ctx.clip();
        }
    };

    Node.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "clip") {
            this.clearClip();
            this.initClip();
        }

        BaseNode$$1.prototype.optionsChange.call(this, e);
    };

    Node.prototype.setTransform = function setTransform (ctx) {
        if (this.srcElement) {
            var transform = this.srcElement.transform();
            if (transform) {
                ctx.transform.apply(ctx, transform.matrix().toArray(6));
            }
        }
    };

    Node.prototype.loadElements = function loadElements (elements, pos, cors) {
        var this$1 = this;

        for (var i = 0; i < elements.length; i++) {
            var srcElement = elements[i];
            var children = srcElement.children;

            var childNode = new NODE_MAP$2[srcElement.nodeType](srcElement, cors);

            if (children && children.length > 0) {
                childNode.load(children, pos, cors);
            }

            if (defined(pos)) {
                this$1.insertAt(childNode, pos);
            } else {
                this$1.append(childNode);
            }
        }
    };

    Node.prototype.load = function load (elements, pos, cors) {
        this.loadElements(elements, pos, cors);

        this.invalidate();
    };

    Node.prototype.setOpacity = function setOpacity (ctx) {
        if (this.srcElement) {
            var opacity = this.srcElement.opacity();
            if (defined(opacity)) {
                this.globalAlpha(ctx, opacity);
            }
        }
    };

    Node.prototype.globalAlpha = function globalAlpha (ctx, value) {
        var opactity = value;
        if (opactity && ctx.globalAlpha) {
            opactity *= ctx.globalAlpha;
        }
        ctx.globalAlpha = opactity;
    };

    Node.prototype.visible = function visible () {
        var src = this.srcElement;
        return !src || (src && src.options.visible !== false);
    };

    return Node;
}(BaseNode));

var GroupNode$2 = (function (superclass) {
    function GroupNode () {
        superclass.apply(this, arguments);
    }

    if ( superclass ) GroupNode.__proto__ = superclass;
    GroupNode.prototype = Object.create( superclass && superclass.prototype );
    GroupNode.prototype.constructor = GroupNode;

    GroupNode.prototype.renderTo = function renderTo (ctx) {
        if (!this.visible()) {
            return;
        }

        ctx.save();

        this.setTransform(ctx);
        this.setClip(ctx);
        this.setOpacity(ctx);

        var childNodes = this.childNodes;
        for (var i = 0; i < childNodes.length; i++) {
            var child = childNodes[i];
            if (child.visible()) {
                child.renderTo(ctx);
            }
        }

        ctx.restore();
    };

    return GroupNode;
}(traversable(Node$2, "childNodes")));

var FRAME_DELAY = 1000 / 60;

var RootNode$2 = (function (superclass) {
    function RootNode(canvas, size) {
        superclass.call(this);

        this.canvas = canvas;
        this.size = size;
        this.ctx = canvas.getContext("2d");

        var invalidateHandler = this._invalidate.bind(this);
        this.invalidate = throttle(function () {
            animationFrame(invalidateHandler);
        }, FRAME_DELAY);
    }

    if ( superclass ) RootNode.__proto__ = superclass;
    RootNode.prototype = Object.create( superclass && superclass.prototype );
    RootNode.prototype.constructor = RootNode;

    RootNode.prototype.destroy = function destroy () {
        superclass.prototype.destroy.call(this);
        this.canvas = null;
        this.ctx = null;
    };

    RootNode.prototype.load = function load (elements, pos, cors) {
        this.loadElements(elements, pos, cors);
        this._invalidate();
    };

    RootNode.prototype._rescale = function _rescale (scale) {
        var ref = this;
        var canvas = ref.canvas;
        var size = ref.size;
        canvas.width = size.width * scale;
        canvas.height = size.height * scale;
        this.ctx.scale(scale, scale);
    };

    RootNode.prototype._devicePixelRatio = function _devicePixelRatio () {
        if (typeof window.devicePixelRatio === 'number') {
            return window.devicePixelRatio;
        }

        return 1;
    };

    RootNode.prototype._invalidate = function _invalidate (options) {
        if (!this.ctx) {
            return;
        }

        var fixedScale = options && options.fixedScale;
        var scale = fixedScale ? 1 : this._devicePixelRatio();
        this._rescale(scale);

        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.renderTo(this.ctx);
    };

    return RootNode;
}(traversable(GroupNode$2, "childNodes")));

var QuadRoot = (function (Class$$1) {
    function QuadRoot() {
        Class$$1.call(this);

        this.shapes = [];
    }

    if ( Class$$1 ) QuadRoot.__proto__ = Class$$1;
    QuadRoot.prototype = Object.create( Class$$1 && Class$$1.prototype );
    QuadRoot.prototype.constructor = QuadRoot;

    QuadRoot.prototype._add = function _add (shape, bbox) {
        this.shapes.push({
            bbox: bbox,
            shape: shape
        });
        shape._quadNode = this;
    };

    QuadRoot.prototype.pointShapes = function pointShapes (point) {
        var shapes = this.shapes;
        var length = shapes.length;
        var result = [];
        for (var idx = 0; idx < length; idx++) {
            if (shapes[idx].bbox.containsPoint(point)) {
                result.push(shapes[idx].shape);
            }
        }
        return result;
    };

    QuadRoot.prototype.insert = function insert (shape, bbox) {
        this._add(shape, bbox);
    };

    QuadRoot.prototype.remove = function remove (shape) {
        var shapes = this.shapes;
        var length = shapes.length;

        for (var idx = 0; idx < length; idx++) {
            if (shapes[idx].shape === shape) {
                shapes.splice(idx, 1);
                break;
            }
        }
    };

    return QuadRoot;
}(Class));

var QuadNode = (function (QuadRoot$$1) {
    function QuadNode(rect) {
        QuadRoot$$1.call(this);
        this.children = [];
        this.rect = rect;
    }

    if ( QuadRoot$$1 ) QuadNode.__proto__ = QuadRoot$$1;
    QuadNode.prototype = Object.create( QuadRoot$$1 && QuadRoot$$1.prototype );
    QuadNode.prototype.constructor = QuadNode;

    QuadNode.prototype.inBounds = function inBounds (rect) {
        var nodeRect = this.rect;
        var nodeBottomRight = nodeRect.bottomRight();
        var bottomRight = rect.bottomRight();
        var inBounds = nodeRect.origin.x <= rect.origin.x && nodeRect.origin.y <= rect.origin.y && bottomRight.x <= nodeBottomRight.x &&
            bottomRight.y <= nodeBottomRight.y;
        return inBounds;
    };

    QuadNode.prototype.pointShapes = function pointShapes (point) {
        var children = this.children;
        var length = children.length;
        var result = QuadRoot$$1.prototype.pointShapes.call(this, point);
        for (var idx = 0; idx < length; idx++) {
            append$1$1(result, children[idx].pointShapes(point));
        }
        return result;
    };

    QuadNode.prototype.insert = function insert (shape, bbox) {
        var children = this.children;
        var inserted = false;

        if (this.inBounds(bbox)) {
            if (this.shapes.length < 4) {
                this._add(shape, bbox);
            } else {
                if (!children.length) {
                    this._initChildren();
                }

                for (var idx = 0; idx < children.length; idx++) {
                    if (children[idx].insert(shape, bbox)) {
                        inserted = true;
                        break;
                    }
                }

                if (!inserted) {
                    this._add(shape, bbox);
                }
            }
            inserted = true;
        }

        return inserted;
    };

    QuadNode.prototype._initChildren = function _initChildren () {
        var ref = this;
        var rect = ref.rect;
        var children = ref.children;
        var center = rect.center();
        var halfWidth = rect.width() / 2;
        var halfHeight = rect.height() / 2;

        children.push(
            new QuadNode(new Rect([ rect.origin.x, rect.origin.y ], [ halfWidth, halfHeight ])),
            new QuadNode(new Rect([ center.x, rect.origin.y ], [ halfWidth, halfHeight ])),
            new QuadNode(new Rect([ rect.origin.x, center.y ], [ halfWidth, halfHeight ])),
            new QuadNode(new Rect([ center.x, center.y ], [ halfWidth, halfHeight ]))
        );
    };

    return QuadNode;
}(QuadRoot));

var ROOT_SIZE = 3000;
var LEVEL_STEP = 10000;
var MAX_LEVEL = 75;

var ShapesQuadTree = (function (Class$$1) {
    function ShapesQuadTree() {
        Class$$1.call(this);

        this.initRoots();
    }

    if ( Class$$1 ) ShapesQuadTree.__proto__ = Class$$1;
    ShapesQuadTree.prototype = Object.create( Class$$1 && Class$$1.prototype );
    ShapesQuadTree.prototype.constructor = ShapesQuadTree;

    ShapesQuadTree.prototype.initRoots = function initRoots () {
        this.rootMap = {};
        this.root = new QuadRoot();
        this.rootElements = [];
    };

    ShapesQuadTree.prototype.clear = function clear () {
        var this$1 = this;

        var rootElements = this.rootElements;
        for (var idx = 0; idx < rootElements.length; idx++) {
            this$1.remove(rootElements[idx]);
        }
        this.initRoots();
    };

    ShapesQuadTree.prototype.pointShape = function pointShape (point) {
        var sectorRoot = ( this.rootMap[ Math.floor( point.x / ROOT_SIZE ) ] || {} )[ Math.floor( point.y / ROOT_SIZE ) ];
        var result = this.root.pointShapes(point);

        if (sectorRoot) {
            result = result.concat(sectorRoot.pointShapes(point));
        }

        this.assignZindex(result);

        result.sort(zIndexComparer);
        for (var idx = 0; idx < result.length; idx++) {
            if (result[idx].containsPoint(point)) {
                return result[idx];
            }
        }
    };

    ShapesQuadTree.prototype.assignZindex = function assignZindex (elements) {
        var this$1 = this;

        for (var idx = 0; idx < elements.length; idx++) {
            var element = elements[idx];
            var zIndex = 0;
            var levelWeight = Math.pow(LEVEL_STEP, MAX_LEVEL);
            var parents = [];

            while (element) {
                parents.push(element);
                element = element.parent;
            }

            while (parents.length) {
                element = parents.pop();
                zIndex += ((element.parent ? element.parent.children : this$1.rootElements).indexOf(element) + 1) * levelWeight;
                levelWeight /= LEVEL_STEP;
            }

            elements[idx]._zIndex = zIndex;
        }
    };

    ShapesQuadTree.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "transform" || e.field === "stroke.width") {
            this.bboxChange(e.element);
        }
    };

    ShapesQuadTree.prototype.geometryChange = function geometryChange (e) {
        this.bboxChange(e.element);
    };

    ShapesQuadTree.prototype.bboxChange = function bboxChange (element) {
        var this$1 = this;

        if (element.nodeType === "Group") {
            for (var idx = 0; idx < element.children.length; idx++) {
                this$1.bboxChange(element.children[idx]);
            }
        } else {
            if (element._quadNode) {
                element._quadNode.remove(element);
            }
            this._insertShape(element);
        }
    };

    ShapesQuadTree.prototype.add = function add (elements) {
        var elementsArray = Array.isArray(elements) ? elements.slice(0) : [ elements ];

        append$1$1(this.rootElements, elementsArray);
        this._insert(elementsArray);
    };

    ShapesQuadTree.prototype.childrenChange = function childrenChange (e) {
        var this$1 = this;

        if (e.action === "remove") {
            for (var idx = 0; idx < e.items.length; idx++) {
                this$1.remove(e.items[idx]);
            }
        } else {
            this._insert(Array.prototype.slice.call(e.items, 0));
        }
    };

    ShapesQuadTree.prototype._insert = function _insert (elements) {
        var this$1 = this;

        var element;

        while (elements.length > 0) {
            element = elements.pop();
            element.addObserver(this$1);
            if (element.nodeType === "Group") {
                append$1$1(elements, element.children);
            } else {
                this$1._insertShape(element);
            }
        }
    };

    ShapesQuadTree.prototype._insertShape = function _insertShape (shape) {
        var bbox = shape.bbox();
        if (bbox) {
            var sectors = this.getSectors(bbox);
            var x = sectors[0][0];
            var y = sectors[1][0];

            if (this.inRoot(sectors)) {
                this.root.insert(shape, bbox);
            } else {
                var rootMap = this.rootMap;
                if (!rootMap[x]) {
                    rootMap[x] = {};
                }

                if (!rootMap[x][y]) {
                    rootMap[x][y] = new QuadNode(
                        new Rect([ x * ROOT_SIZE, y * ROOT_SIZE ], [ ROOT_SIZE, ROOT_SIZE ])
                    );
                }

                rootMap[x][y].insert(shape, bbox);
            }
        }
    };

    ShapesQuadTree.prototype.remove = function remove (element) {
        var this$1 = this;

        element.removeObserver(this);

        if (element.nodeType === "Group") {
            var children = element.children;
            for (var idx = 0; idx < children.length; idx++) {
                this$1.remove(children[idx]);
            }
        } else if (element._quadNode) {
            element._quadNode.remove(element);
            delete element._quadNode;
        }
    };

    ShapesQuadTree.prototype.inRoot = function inRoot (sectors) {
        return sectors[0].length > 1 || sectors[1].length > 1;
    };

    ShapesQuadTree.prototype.getSectors = function getSectors (rect) {
        var bottomRight = rect.bottomRight();
        var bottomX = Math.floor(bottomRight.x / ROOT_SIZE);
        var bottomY = Math.floor(bottomRight.y / ROOT_SIZE);
        var sectors = [ [], [] ];
        for (var x = Math.floor(rect.origin.x / ROOT_SIZE); x <= bottomX; x++) {
            sectors[0].push(x);
        }
        for (var y = Math.floor(rect.origin.y / ROOT_SIZE); y <= bottomY; y++) {
            sectors[1].push(y);
        }
        return sectors;
    };

    return ShapesQuadTree;
}(Class));

function zIndexComparer(x1, x2) {
    if (x1._zIndex < x2._zIndex) {
        return 1;
    }
    if (x1._zIndex > x2._zIndex) {
        return -1;
    }

    return 0;
}

var SurfaceCursor = function SurfaceCursor(surface) {
    surface.bind("mouseenter", this._mouseenter.bind(this));
    surface.bind("mouseleave", this._mouseleave.bind(this));

    this.element = surface.element;
};

SurfaceCursor.prototype.clear = function clear () {
    this._resetCursor();
};

SurfaceCursor.prototype.destroy = function destroy () {
    this._resetCursor();
    delete this.element;
};

SurfaceCursor.prototype._mouseenter = function _mouseenter (e) {
    var cursor = this._shapeCursor(e);

    if (!cursor) {
        this._resetCursor();
    } else {
        if (!this._current) {
            this._defaultCursor = this._getCursor();
        }

        this._setCursor(cursor);
    }
};

SurfaceCursor.prototype._mouseleave = function _mouseleave () {
    this._resetCursor();
};

SurfaceCursor.prototype._shapeCursor = function _shapeCursor (e) {
    var shape = e.element;

    while (shape && !defined(shape.options.cursor)) {
        shape = shape.parent;
    }

    if (shape) {
        return shape.options.cursor;
    }
};

SurfaceCursor.prototype._getCursor = function _getCursor () {
    if (this.element) {
        return this.element.style.cursor;
    }
};

SurfaceCursor.prototype._setCursor = function _setCursor (cursor) {
    if (this.element) {
        this.element.style.cursor = cursor;
        this._current = cursor;
    }
};

SurfaceCursor.prototype._resetCursor = function _resetCursor () {
    if (this._current) {
        this._setCursor(this._defaultCursor || "");
        delete this._current;
    }
};

function addGradientStops(gradient, stops) {
    for (var idx = 0; idx < stops.length; idx++) {
        var stop = stops[idx];
        var color = parseColor(stop.color());

        color.a *= stop.opacity();

        gradient.addColorStop(stop.offset(), color.toCssRgba());
    }
}

var PathNode$2 = (function (Node) {
    function PathNode () {
        Node.apply(this, arguments);
    }

    if ( Node ) PathNode.__proto__ = Node;
    PathNode.prototype = Object.create( Node && Node.prototype );
    PathNode.prototype.constructor = PathNode;

    PathNode.prototype.renderTo = function renderTo (ctx) {
        ctx.save();

        this.setTransform(ctx);
        this.setClip(ctx);
        this.setOpacity(ctx);

        ctx.beginPath();

        this.renderPoints(ctx, this.srcElement);

        this.setLineDash(ctx);
        this.setLineCap(ctx);
        this.setLineJoin(ctx);

        this.setFill(ctx);
        this.setStroke(ctx);

        ctx.restore();
    };

    PathNode.prototype.setFill = function setFill (ctx) {
        var fill = this.srcElement.options.fill;
        var hasFill = false;

        if (fill) {
            if (fill.nodeType === "Gradient") {
                this.setGradientFill(ctx, fill);
                hasFill = true;
            } else if (!isTransparent(fill.color)) {
                ctx.fillStyle = fill.color;

                ctx.save();
                this.globalAlpha(ctx, fill.opacity);
                ctx.fill();
                ctx.restore();

                hasFill = true;
            }
        }

        return hasFill;
    };

    PathNode.prototype.setGradientFill = function setGradientFill (ctx, fill) {
        var bbox = this.srcElement.rawBBox();
        var gradient;

        if (fill instanceof LinearGradient) {
            var start = fill.start();
            var end = fill.end();
            gradient = ctx.createLinearGradient(start.x, start.y, end.x, end.y);
        } else if (fill instanceof RadialGradient) {
            var center = fill.center();
            gradient = ctx.createRadialGradient(center.x, center.y, 0, center.x, center.y, fill.radius());
        }

        addGradientStops(gradient, fill.stops);

        ctx.save();

        if (!fill.userSpace()) {
            ctx.transform(bbox.width(), 0, 0, bbox.height(), bbox.origin.x, bbox.origin.y);
        }
        ctx.fillStyle = gradient;
        ctx.fill();

        ctx.restore();
    };

    PathNode.prototype.setStroke = function setStroke (ctx) {
        var stroke = this.srcElement.options.stroke;
        if (stroke && !isTransparent(stroke.color) && stroke.width > 0) {
            ctx.strokeStyle = stroke.color;
            ctx.lineWidth = valueOrDefault(stroke.width, 1);

            ctx.save();
            this.globalAlpha(ctx, stroke.opacity);
            ctx.stroke();
            ctx.restore();

            return true;
        }
    };

    PathNode.prototype.dashType = function dashType () {
        var stroke = this.srcElement.options.stroke;
        if (stroke && stroke.dashType) {
            return stroke.dashType.toLowerCase();
        }
    };

    PathNode.prototype.setLineDash = function setLineDash (ctx) {
        var dashType = this.dashType();
        if (dashType && dashType !== SOLID) {
            var dashArray = DASH_ARRAYS[dashType];
            if (ctx.setLineDash) {
                ctx.setLineDash(dashArray);
            } else {
                ctx.mozDash = dashArray;
                ctx.webkitLineDash = dashArray;
            }
        }
    };

    PathNode.prototype.setLineCap = function setLineCap (ctx) {
        var dashType = this.dashType();
        var stroke = this.srcElement.options.stroke;
        if (dashType && dashType !== SOLID) {
            ctx.lineCap = BUTT;
        } else if (stroke && stroke.lineCap) {
            ctx.lineCap = stroke.lineCap;
        }
    };

    PathNode.prototype.setLineJoin = function setLineJoin (ctx) {
        var stroke = this.srcElement.options.stroke;
        if (stroke && stroke.lineJoin) {
            ctx.lineJoin = stroke.lineJoin;
        }
    };

    PathNode.prototype.renderPoints = function renderPoints (ctx, path) {
        renderPath(ctx, path);
    };

    return PathNode;
}(Node$2));

var ArcNode$2 = (function (PathNode) {
    function ArcNode () {
        PathNode.apply(this, arguments);
    }

    if ( PathNode ) ArcNode.__proto__ = PathNode;
    ArcNode.prototype = Object.create( PathNode && PathNode.prototype );
    ArcNode.prototype.constructor = ArcNode;

    ArcNode.prototype.renderPoints = function renderPoints (ctx) {
        var path = this.srcElement.toPath();
        renderPath(ctx, path);
    };

    return ArcNode;
}(PathNode$2));

var CircleNode$2 = (function (PathNode) {
    function CircleNode () {
        PathNode.apply(this, arguments);
    }

    if ( PathNode ) CircleNode.__proto__ = PathNode;
    CircleNode.prototype = Object.create( PathNode && PathNode.prototype );
    CircleNode.prototype.constructor = CircleNode;

    CircleNode.prototype.renderPoints = function renderPoints (ctx) {
        var ref = this.srcElement.geometry();
        var center = ref.center;
        var radius = ref.radius;

        ctx.arc(center.x, center.y, radius, 0, Math.PI * 2);
    };

    return CircleNode;
}(PathNode$2));

var ImageNode$2 = (function (PathNode) {
    function ImageNode(srcElement, cors) {
        PathNode.call(this, srcElement);

        this.onLoad = this.onLoad.bind(this);
        this.onError = this.onError.bind(this);

        this.loading = createPromise();

        var img = this.img = new Image();
        var src = srcElement.src();

        if (cors && !(/^data:/i.test(src))) {
            img.crossOrigin = cors;
        }

        if (src) {
            img.src = src;
        }

        if (img.complete) {
            this.onLoad();
        } else {
            img.onload = this.onLoad;
            img.onerror = this.onError;
        }
    }

    if ( PathNode ) ImageNode.__proto__ = PathNode;
    ImageNode.prototype = Object.create( PathNode && PathNode.prototype );
    ImageNode.prototype.constructor = ImageNode;

    ImageNode.prototype.renderTo = function renderTo (ctx) {
        if (this.loading.state() === "resolved") {
            ctx.save();

            this.setTransform(ctx);
            this.setClip(ctx);

            this.drawImage(ctx);

            ctx.restore();
        }
    };

    ImageNode.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "src") {
            this.loading = createPromise();
            this.img.src = this.srcElement.src();
        } else {
            PathNode.prototype.optionsChange.call(this, e);
        }
    };

    ImageNode.prototype.onLoad = function onLoad () {
        this.loading.resolve();
        this.invalidate();
    };

    ImageNode.prototype.onError = function onError () {
        this.loading.reject(new Error(
            "Unable to load image '" + this.img.src +
            "'. Check for connectivity and verify CORS headers."
        ));
    };

    ImageNode.prototype.drawImage = function drawImage (ctx) {
        var rect = this.srcElement.rect();
        var topLeft = rect.topLeft();

        ctx.drawImage(
            this.img, topLeft.x, topLeft.y, rect.width(), rect.height()
        );
    };

    return ImageNode;
}(PathNode$2));

var MultiPathNode$2 = (function (PathNode) {
    function MultiPathNode () {
        PathNode.apply(this, arguments);
    }

    if ( PathNode ) MultiPathNode.__proto__ = PathNode;
    MultiPathNode.prototype = Object.create( PathNode && PathNode.prototype );
    MultiPathNode.prototype.constructor = MultiPathNode;

    MultiPathNode.prototype.renderPoints = function renderPoints (ctx) {
        var paths = this.srcElement.paths;
        for (var i = 0; i < paths.length; i++) {
            renderPath(ctx, paths[i]);
        }
    };

    return MultiPathNode;
}(PathNode$2));

var RectNode$2 = (function (PathNode) {
    function RectNode () {
        PathNode.apply(this, arguments);
    }

    if ( PathNode ) RectNode.__proto__ = PathNode;
    RectNode.prototype = Object.create( PathNode && PathNode.prototype );
    RectNode.prototype.constructor = RectNode;

    RectNode.prototype.renderPoints = function renderPoints (ctx) {
        var geometry = this.srcElement.geometry();
        var ref = geometry.cornerRadius;
        var rx = ref[0];
        var ry = ref[1];

        if (rx === 0 && ry === 0) {
            var origin = geometry.origin;
            var size = geometry.size;
            ctx.rect(origin.x, origin.y, size.width, size.height);
        } else {
            PathNode.prototype.renderPoints.call(this, ctx, Path.fromRect(geometry));
        }
    };

    return RectNode;
}(PathNode$2));

var TextNode$2 = (function (PathNode) {
    function TextNode () {
        PathNode.apply(this, arguments);
    }

    if ( PathNode ) TextNode.__proto__ = PathNode;
    TextNode.prototype = Object.create( PathNode && PathNode.prototype );
    TextNode.prototype.constructor = TextNode;

    TextNode.prototype.renderTo = function renderTo (ctx) {
        var text = this.srcElement;
        var pos = text.position();
        var size = text.measure();

        ctx.save();

        this.setTransform(ctx);
        this.setClip(ctx);
        this.setOpacity(ctx);

        ctx.beginPath();

        ctx.font = text.options.font;
        ctx.textAlign = 'left';

        if (this.setFill(ctx)) {
            ctx.fillText(text.content(), pos.x, pos.y + size.baseline);
        }

        if (this.setStroke(ctx)) {
            this.setLineDash(ctx);
            ctx.strokeText(text.content(), pos.x, pos.y + size.baseline);
        }

        ctx.restore();
    };

    return TextNode;
}(PathNode$2));

NODE_MAP$2.Arc = ArcNode$2;
NODE_MAP$2.Circle = CircleNode$2;
NODE_MAP$2.Group = GroupNode$2;
NODE_MAP$2.Image = ImageNode$2;
NODE_MAP$2.MultiPath = MultiPathNode$2;
NODE_MAP$2.Path = PathNode$2;
NODE_MAP$2.Rect = RectNode$2;
NODE_MAP$2.Text = TextNode$2;


var Surface$4 = (function (BaseSurface) {
    function Surface(element, options) {
        BaseSurface.call(this, element, options);

        this.element.innerHTML = this._template(this);

        var canvas = this.element.firstElementChild;
        canvas.style.width = '100%';
        canvas.style.height = '100%';

        var size = elementSize(element);

        canvas.width = size.width;
        canvas.height = size.height;

        this._rootElement = canvas;

        this._root = new RootNode$2(canvas, size);

        this._mouseTrackHandler = this._trackMouse.bind(this);

        bindEvents(this.element, {
            click: this._mouseTrackHandler,
            mousemove: this._mouseTrackHandler
        });
    }

    if ( BaseSurface ) Surface.__proto__ = BaseSurface;
    Surface.prototype = Object.create( BaseSurface && BaseSurface.prototype );
    Surface.prototype.constructor = Surface;

    var prototypeAccessors = { type: {} };

    prototypeAccessors.type.get = function () {
        return "canvas";
    };

    Surface.prototype.destroy = function destroy () {
        BaseSurface.prototype.destroy.call(this);

        if (this._root) {
            this._root.destroy();
            this._root = null;
        }

        if (this._searchTree) {
            this._searchTree.clear();
            delete this._searchTree;
        }

        if (this._cursor) {
            this._cursor.destroy();
            delete this._cursor;
        }

        unbindEvents(this.element, {
            click: this._mouseTrackHandler,
            mousemove: this._mouseTrackHandler
        });
    };

    Surface.prototype.draw = function draw (element) {
        BaseSurface.prototype.draw.call(this, element);
        this._root.load([ element ], undefined, this.options.cors);

        if (this._searchTree) {
            this._searchTree.add([ element ]);
        }
    };

    Surface.prototype.clear = function clear () {
        BaseSurface.prototype.clear.call(this);
        this._root.clear();

        if (this._searchTree) {
            this._searchTree.clear();
        }

        if (this._cursor) {
            this._cursor.clear();
        }
    };

    Surface.prototype.eventTarget = function eventTarget (e) {
        if (this._searchTree) {
            var point = this._surfacePoint(e);
            var shape = this._searchTree.pointShape(point);
            return shape;
        }
    };

    Surface.prototype.image = function image () {
        var ref = this;
        var root = ref._root;
        var rootElement = ref._rootElement;
        var loadingStates = [];

        root.traverse(function (childNode) {
            if (childNode.loading) {
                loadingStates.push(childNode.loading);
            }
        });

        var promise = createPromise();
        var resolveDataURL = function () {
            root._invalidate({ fixedScale: true });

            try {
                var data = rootElement.toDataURL();
                promise.resolve(data);
            } catch (e) {
                promise.reject(e);
            }
        };

        promiseAll(loadingStates).then(resolveDataURL, resolveDataURL);

        return promise;
    };

    Surface.prototype.suspendTracking = function suspendTracking () {
        BaseSurface.prototype.suspendTracking.call(this);
        if (this._searchTree) {
            this._searchTree.clear();
            delete this._searchTree;
        }
    };

    Surface.prototype.resumeTracking = function resumeTracking () {
        BaseSurface.prototype.resumeTracking.call(this);
        if (!this._searchTree) {
            this._searchTree = new ShapesQuadTree();

            var childNodes = this._root.childNodes;
            var rootElements = [];
            for (var idx = 0; idx < childNodes.length; idx++) {
                rootElements.push(childNodes[idx].srcElement);
            }
            this._searchTree.add(rootElements);
        }
    };

    Surface.prototype._resize = function _resize () {
        this._rootElement.width = this._size.width;
        this._rootElement.height = this._size.height;

        this._root.size = this._size;
        this._root.invalidate();
    };

    Surface.prototype._template = function _template () {
        return "<canvas></canvas>";
    };

    Surface.prototype._enableTracking = function _enableTracking () {
        this._searchTree = new ShapesQuadTree();
        this._cursor = new SurfaceCursor(this);

        BaseSurface.prototype._enableTracking.call(this);
    };

    Surface.prototype._trackMouse = function _trackMouse (e) {
        if (this._suspendedTracking) {
            return;
        }

        var shape = this.eventTarget(e);

        if (e.type !== "click") {
            var currentShape = this._currentShape;
            if (currentShape && currentShape !== shape) {
                this.trigger("mouseleave", {
                    element: currentShape,
                    originalEvent: e,
                    type: "mouseleave"
                });
            }

            if (shape && currentShape !== shape) {
                this.trigger("mouseenter", {
                    element: shape,
                    originalEvent: e,
                    type: "mouseenter"
                });
            }

            this.trigger("mousemove", {
                element: shape,
                originalEvent: e,
                type: "mousemove"
            });

            this._currentShape = shape;
        } else if (shape) {
            this.trigger("click", {
                element: shape,
                originalEvent: e,
                type: "click"
            });
        }
    };

    Object.defineProperties( Surface.prototype, prototypeAccessors );

    return Surface;
}(Surface$2));

var instance$2;
var support$2;

var hasDocument = function () { return typeof document !== "undefined"; };

var supportsCanvas = function () { return hasDocument() &&
    document.createElement("canvas").getContext; };

var supportsSVG = function () { return hasDocument() &&
    document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1"); };

var SurfaceFactory = (function (Class$$1) {
    function SurfaceFactory() {
        Class$$1.call(this);

        this._items = [ {
            name: "svg",
            type: Surface$3
        }, {
            name: "canvas",
            type: Surface$4
        } ];
    }

    if ( Class$$1 ) SurfaceFactory.__proto__ = Class$$1;
    SurfaceFactory.prototype = Object.create( Class$$1 && Class$$1.prototype );
    SurfaceFactory.prototype.constructor = SurfaceFactory;

    var staticAccessors = { support: {},current: {} };

    staticAccessors.support.get = function () {
        if (!support$2) {
            support$2 = {
                canvas: supportsCanvas(),
                svg: supportsSVG()
            };
        }

        return support$2;
    };

    staticAccessors.current.get = function () {
        if (!instance$2) {
            instance$2 = new SurfaceFactory();
        }

        return instance$2;
    };

    SurfaceFactory.prototype.create = function create (element, options) {
        var items = this._items;
        var match = items[0];

        if (options && options.type) {
            var preferred = options.type.toLowerCase();
            for (var i = 0; i < items.length; i++) {
                if (items[i].name === preferred) {
                    match = items[i];
                    break;
                }
            }
        }

        if (match) {
            return new match.type(element, options);
        }

        logToConsole(
            "Warning: Unable to create Kendo UI Drawing Surface. Possible causes:\n" +
            "- The browser does not support SVG and Canvas. User agent: " + (navigator.userAgent));
    };

    Object.defineProperties( SurfaceFactory, staticAccessors );

    return SurfaceFactory;
}(Class));

var Surface = (function (BaseSurface) {
    function Surface () {
        BaseSurface.apply(this, arguments);
    }

    if ( BaseSurface ) Surface.__proto__ = BaseSurface;
    Surface.prototype = Object.create( BaseSurface && BaseSurface.prototype );
    Surface.prototype.constructor = Surface;

    var staticAccessors = { support: {} };

    staticAccessors.support.get = function () {
        return SurfaceFactory.support;
    };

    Surface.create = function create (element, options) {
        return SurfaceFactory.current.create(element, options);
    };

    Object.defineProperties( Surface, staticAccessors );

    return Surface;
}(Surface$2));

function exportGroup(group) {
    var root = new RootNode({
        skipBaseHref: true
    });
    var bbox = group.clippedBBox();
    var rootGroup = group;

    if (bbox) {
        var origin = bbox.getOrigin();
        var exportRoot = new Group();
        exportRoot.transform(transform$1().translate(-origin.x, -origin.y));
        exportRoot.children.push(group);
        rootGroup = exportRoot;
    }

    root.load([ rootGroup ]);

    var svg = "<?xml version='1.0' ?><svg xmlns='" + SVG_NS + "' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>" + (root.render()) + "</svg>";

    root.destroy();

    return svg;
}



var svg$1 = Object.freeze({
	Surface: Surface$3,
	RootNode: RootNode,
	Node: Node,
	GroupNode: GroupNode,
	ArcNode: ArcNode,
	CircleNode: CircleNode,
	RectNode: RectNode,
	ImageNode: ImageNode,
	TextNode: TextNode,
	PathNode: PathNode,
	MultiPathNode: MultiPathNode,
	DefinitionNode: DefinitionNode,
	ClipNode: ClipNode,
	GradientStopNode: GradientStopNode,
	LinearGradientNode: LinearGradientNode,
	RadialGradientNode: RadialGradientNode,
	exportGroup: exportGroup
});



var canvas = Object.freeze({
	Surface: Surface$4,
	RootNode: RootNode$2,
	Node: Node$2,
	GroupNode: GroupNode$2,
	ArcNode: ArcNode$2,
	CircleNode: CircleNode$2,
	RectNode: RectNode$2,
	ImageNode: ImageNode$2,
	TextNode: TextNode$2,
	PathNode: PathNode$2,
	MultiPathNode: MultiPathNode$2
});

function exportImage(group, options) {
    var defaults = {
        width: "800px", height: "600px",
        cors: "Anonymous"
    };

    var exportRoot = group;
    var bbox = group.clippedBBox();


    if (bbox) {
        var origin = bbox.getOrigin();
        exportRoot = new Group();
        exportRoot.transform(transform$1().translate(-origin.x, -origin.y));
        exportRoot.children.push(group);

        var size = bbox.getSize();
        defaults.width = size.width + "px";
        defaults.height = size.height + "px";
    }

    var surfaceOptions = Object.assign(defaults, options);

    var container = document.createElement("div");
    var style = container.style;

    style.display = "none";
    style.width = surfaceOptions.width;
    style.height = surfaceOptions.height;
    document.body.appendChild(container);

    var surface = new Surface$4(container, surfaceOptions);
    surface.suspendTracking();
    surface.draw(exportRoot);

    var promise = surface.image();
    var destroy = function () {
        surface.destroy();
        document.body.removeChild(container);
    };
    promise.then(destroy, destroy);

    return promise;
}

function exportSVG(group, options) {
    var svg = exportGroup(group);

    if (!options || !options.raw) {
        svg = "data:image/svg+xml;base64," + encodeBase64(svg);
    }

    return createPromise().resolve(svg);
}



var drawing = Object.freeze({
	svg: svg$1,
	canvas: canvas,
	util: util,
	HasObservers: HasObservers,
	PathParser: PathParser,
	parsePath: parsePath,
	BaseNode: BaseNode,
	OptionsStore: OptionsStore,
	Surface: Surface,
	SurfaceFactory: SurfaceFactory,
	exportImage: exportImage,
	exportSVG: exportSVG,
	QuadNode: QuadNode,
	ShapesQuadTree: ShapesQuadTree,
	Element: Element$1,
	Circle: Circle,
	Arc: Arc,
	Path: Path,
	MultiPath: MultiPath,
	Text: Text,
	Image: Image$1,
	Group: Group,
	Layout: Layout,
	Rect: Rect$2,
	align: align,
	vAlign: vAlign,
	stack: stack,
	vStack: vStack,
	wrap: wrap,
	vWrap: vWrap,
	fit: fit,
	LinearGradient: LinearGradient,
	RadialGradient: RadialGradient,
	GradientStop: GradientStop,
	Gradient: Gradient,
	Animation: Animation,
	AnimationFactory: AnimationFactory
});

/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
/* eslint-disable no-param-reassign, no-var, block-scoped-var */

// XXX: remove this junk (assume `true`) when we no longer have to support IE < 10
// IE 9 (at least compatibility) reports having Uint8Array but the request response does not contain ArrayBuffer which results in missing table head error
var HAS_TYPED_ARRAYS = typeof Uint8Array !== 'undefined' && support.browser && (!support.browser.msie || support.browser.version > 9);

var BASE64 = (function(){
    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    return {
        decode: function(str) {
            var input = str.replace(/[^A-Za-z0-9\+\/\=]/g, ""), i = 0, n = input.length, output = [];

            while (i < n) {
                var enc1 = keyStr.indexOf(input.charAt(i++));
                var enc2 = keyStr.indexOf(input.charAt(i++));
                var enc3 = keyStr.indexOf(input.charAt(i++));
                var enc4 = keyStr.indexOf(input.charAt(i++));

                var chr1 = (enc1 << 2) | (enc2 >>> 4);
                var chr2 = ((enc2 & 15) << 4) | (enc3 >>> 2);
                var chr3 = ((enc3 & 3) << 6) | enc4;

                output.push(chr1);
                if (enc3 != 64) {
                    output.push(chr2);
                }
                if (enc4 != 64) {
                    output.push(chr3);
                }
            }

            return output;
        },
        encode: function(bytes) {
            var i = 0, n = bytes.length;
            var output = "";

            while (i < n) {
                var chr1 = bytes[i++];
                var chr2 = bytes[i++];
                var chr3 = bytes[i++];

                var enc1 = chr1 >>> 2;
                var enc2 = ((chr1 & 3) << 4) | (chr2 >>> 4);
                var enc3 = ((chr2 & 15) << 2) | (chr3 >>> 6);
                var enc4 = chr3 & 63;

                if (i - n == 2) {
                    enc3 = enc4 = 64;
                } else if (i - n == 1) {
                    enc4 = 64;
                }

                output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
            }
            return output;
        }
    };
}());

function BinaryStream(data) {
    var offset = 0, length = 0;
    if (data == null) {
        data = HAS_TYPED_ARRAYS ? new Uint8Array(256) : [];
    } else {
        length = data.length;
    }

    var ensure = HAS_TYPED_ARRAYS ? function(len) {
        if (len >= data.length) {
            var tmp = new Uint8Array(Math.max(len + 256, data.length * 2));
            tmp.set(data, 0);
            data = tmp;
        }
    } : function() {};

    var get = HAS_TYPED_ARRAYS ? function() {
        return new Uint8Array(data.buffer, 0, length);
    } : function() {
        return data;
    };

    var write = HAS_TYPED_ARRAYS ? function(bytes) {
        if (typeof bytes == "string") {
            return writeString(bytes);
        }
        var len = bytes.length;
        ensure(offset + len);
        data.set(bytes, offset);
        offset += len;
        if (offset > length) {
            length = offset;
        }
    } : function(bytes) {
        if (typeof bytes == "string") {
            return writeString(bytes);
        }
        for (var i = 0; i < bytes.length; ++i) {
            writeByte(bytes[i]);
        }
    };

    var slice = HAS_TYPED_ARRAYS ? function(start, length) {
        if (data.buffer.slice) {
            return new Uint8Array(data.buffer.slice(start, start + length));
        } else {
            // IE10
            var x = new Uint8Array(length);
            x.set(new Uint8Array(data.buffer, start, length));
            return x;
        }
    } : function(start, length) {
        return data.slice(start, start + length);
    };

    function eof() {
        return offset >= length;
    }
    function readByte() {
        return offset < length ? data[offset++] : 0;
    }
    function writeByte(b) {
        ensure(offset);
        data[offset++] = b & 0xFF;
        if (offset > length) {
            length = offset;
        }
    }
    function readShort() {
        return (readByte() << 8) | readByte();
    }
    function writeShort(w) {
        writeByte(w >> 8);
        writeByte(w);
    }
    function readShort_() {
        var w = readShort();
        return w >= 0x8000 ? w - 0x10000 : w;
    }
    function writeShort_(w) {
        writeShort(w < 0 ? w + 0x10000 : w);
    }
    function readLong() {
        return (readShort() * 0x10000) + readShort();
    }
    function writeLong(w) {
        writeShort((w >>> 16) & 0xFFFF);
        writeShort(w & 0xFFFF);
    }
    function readLong_() {
        var w = readLong();
        return w >= 0x80000000 ? w - 0x100000000 : w;
    }
    function writeLong_(w) {
        writeLong(w < 0 ? w + 0x100000000 : w);
    }
    function readFixed() {
        return readLong() / 0x10000;
    }
    function writeFixed(f) {
        writeLong(Math.round(f * 0x10000));
    }
    function readFixed_() {
        return readLong_() / 0x10000;
    }
    function writeFixed_(f) {
        writeLong_(Math.round(f * 0x10000));
    }
    function read(len) {
        return times(len, readByte);
    }
    function readString(len) {
        return String.fromCharCode.apply(String, read(len));
    }
    function writeString(str) {
        for (var i = 0; i < str.length; ++i) {
            writeByte(str.charCodeAt(i));
        }
    }
    function times(n, reader) {
        for (var ret = new Array(n), i = 0; i < n; ++i) {
            ret[i] = reader();
        }
        return ret;
    }

    var stream = {
        eof         : eof,
        readByte    : readByte,
        writeByte   : writeByte,
        readShort   : readShort,
        writeShort  : writeShort,
        readLong    : readLong,
        writeLong   : writeLong,
        readFixed   : readFixed,
        writeFixed  : writeFixed,

        // signed numbers.
        readShort_  : readShort_,
        writeShort_ : writeShort_,
        readLong_   : readLong_,
        writeLong_  : writeLong_,
        readFixed_  : readFixed_,
        writeFixed_ : writeFixed_,

        read        : read,
        write       : write,
        readString  : readString,
        writeString : writeString,

        times       : times,
        get         : get,
        slice       : slice,

        offset: function(pos) {
            if (pos != null) {
                offset = pos;
                return stream;
            }
            return offset;
        },

        skip: function(nbytes) {
            offset += nbytes;
        },

        toString: function() {
            throw new Error("FIX CALLER.  BinaryStream is no longer convertible to string!");
        },

        length: function() { return length; },

        saveExcursion: function(f) {
            var pos = offset;
            try {
                return f();
            } finally {
                offset = pos;
            }
        },

        writeBase64: function(base64) {
            if (window.atob) {
                writeString(window.atob(base64));
            } else {
                write(BASE64.decode(base64));
            }
        },
        base64: function() {
            return BASE64.encode(get());
        }
    };

    return stream;
}

function ucs2decode(string) {
    var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;
    while (counter < length) {
        value = string.charCodeAt(counter++);
        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
            // high surrogate, and there is a next character
            extra = string.charCodeAt(counter++);
            if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
            } else {
                // unmatched surrogate; only append this code unit, in case the next
                // code unit is the high surrogate of a surrogate pair
                output.push(value);
                counter--;
            }
        } else {
            output.push(value);
        }
    }
    return output;
}

function ucs2encode(array) {
    return array.map(function(value){
        var output = "";
        if (value > 0xFFFF) {
            value -= 0x10000;
            output += String.fromCharCode(value >>> 10 & 0x3FF | 0xD800);
            value = 0xDC00 | value & 0x3FF;
        }
        output += String.fromCharCode(value);
        return output;
    }).join("");
}

function atobUint8Array(base64) {
    var data = window.atob(base64);
    var result = new Uint8Array(data.length);

    for (var idx = 0; idx < data.length; idx++) {
        result[idx] = data.charCodeAt(idx);
    }

    return result;
}

function createUint8Array(data) {
    var result = new Uint8Array(data.length);

    for (var idx = 0; idx < data.length; idx++) {
        result[idx] = data[idx];
    }

    return result;
}

function base64ToUint8Array(base64) {
    if (window.atob) {
        return atobUint8Array(base64);
    }

    return createUint8Array(BASE64.decode(base64));
}

/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
/* eslint-disable no-param-reassign, no-var, block-scoped-var */

/*****************************************************************************\
 *
 * The code in this file, although written from scratch, is influenced by the
 * TrueType parser/encoder in PDFKit -- http://pdfkit.org/ (a CoffeeScript
 * library for producing PDF files).
 *
 * PDFKit is (c) Devon Govett 2014 and released under the MIT License.
 *
\*****************************************************************************/

function hasOwnProperty$1(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}

function sortedKeys(obj) {
    return Object.keys(obj).sort(function(a, b){ return a - b; }).map(parseFloat);
}

///
var Directory = function Directory(data) {
    this.raw = data;
    this.scalerType = data.readLong();
    this.tableCount = data.readShort();
    this.searchRange = data.readShort();
    this.entrySelector = data.readShort();
    this.rangeShift = data.readShort();

    var tables = this.tables = {};
    for (var i = 0; i < this.tableCount; ++i) {
        var entry = {
            tag  : data.readString(4),
            checksum : data.readLong(),
            offset   : data.readLong(),
            length   : data.readLong()
        };
        tables[entry.tag] = entry;
    }
};

Directory.prototype.readTable = function readTable (name, Ctor) {
    var def = this.tables[name];
    if (!def) {
        throw new Error("Table " + name + " not found in directory");
    }
    return (this[name] = def.table = new Ctor(this, def));
};

Directory.prototype.render = function render (tables) {
        var this$1 = this;

    var tableCount = Object.keys(tables).length;

    var maxpow2 = Math.pow(2, Math.floor(Math.log(tableCount) / Math.LN2));
    var searchRange = maxpow2 * 16;
    var entrySelector = Math.floor(Math.log(maxpow2) / Math.LN2);
    var rangeShift = tableCount * 16 - searchRange;

    var out = BinaryStream();
    out.writeLong(this.scalerType);
    out.writeShort(tableCount);
    out.writeShort(searchRange);
    out.writeShort(entrySelector);
    out.writeShort(rangeShift);

    var directoryLength = tableCount * 16;
    var offset = out.offset() + directoryLength;
    var headOffset = null;
    var tableData = BinaryStream();

    for (var tag in tables) {
        if (hasOwnProperty$1(tables, tag)) {
            var table = tables[tag];

            out.writeString(tag);
            out.writeLong(this$1.checksum(table));
            out.writeLong(offset);
            out.writeLong(table.length);

            tableData.write(table);
            if (tag == "head") {
                headOffset = offset;
            }
            offset += table.length;

            while (offset % 4) {
                tableData.writeByte(0);
                offset++;
            }
        }
    }

    out.write(tableData.get());
    var sum = this.checksum(out.get());
    var adjustment = 0xB1B0AFBA - sum;

    out.offset(headOffset + 8);
    out.writeLong(adjustment);
    return out.get();
};

Directory.prototype.checksum = function checksum (data) {
    data = BinaryStream(data);
    var sum = 0;
    while (!data.eof()) {
        sum += data.readLong();
    }
    return sum & 0xFFFFFFFF;
};

var Table = function Table(file, def) {
    this.definition = def;
    this.length = def.length;
    this.offset = def.offset;
    this.file = file;
    this.rawData = file.raw;
    this.parse(file.raw);
};

Table.prototype.raw = function raw () {
    return this.rawData.slice(this.offset, this.length);
};

Table.prototype.parse = function parse () {};

var HeadTable = (function (Table) {
    function HeadTable () {
        Table.apply(this, arguments);
    }

    if ( Table ) HeadTable.__proto__ = Table;
    HeadTable.prototype = Object.create( Table && Table.prototype );
    HeadTable.prototype.constructor = HeadTable;

    HeadTable.prototype.parse = function parse (data) {
        data.offset(this.offset);
        this.version             = data.readLong();
        this.revision            = data.readLong();
        this.checkSumAdjustment  = data.readLong();
        this.magicNumber         = data.readLong();
        this.flags               = data.readShort();
        this.unitsPerEm          = data.readShort();
        this.created             = data.read(8);
        this.modified            = data.read(8);

        this.xMin = data.readShort_();
        this.yMin = data.readShort_();
        this.xMax = data.readShort_();
        this.yMax = data.readShort_();

        this.macStyle           = data.readShort();
        this.lowestRecPPEM      = data.readShort();
        this.fontDirectionHint  = data.readShort_();
        this.indexToLocFormat   = data.readShort_();
        this.glyphDataFormat    = data.readShort_();
    };

    HeadTable.prototype.render = function render (indexToLocFormat) {
        var out = BinaryStream();
        out.writeLong(this.version);
        out.writeLong(this.revision);
        out.writeLong(0);       // checksum adjustment; shall be computed later
        out.writeLong(this.magicNumber);
        out.writeShort(this.flags);
        out.writeShort(this.unitsPerEm);
        out.write(this.created);
        out.write(this.modified);
        out.writeShort_(this.xMin);
        out.writeShort_(this.yMin);
        out.writeShort_(this.xMax);
        out.writeShort_(this.yMax);
        out.writeShort(this.macStyle);
        out.writeShort(this.lowestRecPPEM);
        out.writeShort_(this.fontDirectionHint);
        out.writeShort_(indexToLocFormat); // this will depend on the `loca` table
        out.writeShort_(this.glyphDataFormat);
        return out.get();
    };

    return HeadTable;
}(Table));

var LocaTable = (function (Table) {
    function LocaTable () {
        Table.apply(this, arguments);
    }

    if ( Table ) LocaTable.__proto__ = Table;
    LocaTable.prototype = Object.create( Table && Table.prototype );
    LocaTable.prototype.constructor = LocaTable;

    LocaTable.prototype.parse = function parse (data) {
        data.offset(this.offset);
        var format = this.file.head.indexToLocFormat;
        if (format === 0) {
            this.offsets = data.times(this.length / 2, function(){
                return 2 * data.readShort();
            });
        } else {
            this.offsets = data.times(this.length / 4, data.readLong);
        }
    };

    LocaTable.prototype.offsetOf = function offsetOf (id) {
        return this.offsets[id];
    };

    LocaTable.prototype.lengthOf = function lengthOf (id) {
        return this.offsets[id + 1] - this.offsets[id];
    };

    LocaTable.prototype.render = function render (offsets) {
        var out = BinaryStream();
        var needsLongFormat = offsets[offsets.length - 1] > 0xFFFF;
        for (var i = 0; i < offsets.length; ++i) {
            if (needsLongFormat) {
                out.writeLong(offsets[i]);
            } else {
                out.writeShort(offsets[i] / 2);
            }
        }
        return {
            format: needsLongFormat ? 1 : 0,
            table: out.get()
        };
    };

    return LocaTable;
}(Table));

var HheaTable = (function (Table) {
    function HheaTable () {
        Table.apply(this, arguments);
    }

    if ( Table ) HheaTable.__proto__ = Table;
    HheaTable.prototype = Object.create( Table && Table.prototype );
    HheaTable.prototype.constructor = HheaTable;

    HheaTable.prototype.parse = function parse (data) {
        data.offset(this.offset);

        this.version              = data.readLong();
        this.ascent               = data.readShort_();
        this.descent              = data.readShort_();
        this.lineGap              = data.readShort_();
        this.advanceWidthMax      = data.readShort();
        this.minLeftSideBearing   = data.readShort_();
        this.minRightSideBearing  = data.readShort_();
        this.xMaxExtent           = data.readShort_();
        this.caretSlopeRise       = data.readShort_();
        this.caretSlopeRun        = data.readShort_();
        this.caretOffset          = data.readShort_();

        data.skip(4 * 2);       // reserved

        this.metricDataFormat     = data.readShort_();
        this.numOfLongHorMetrics  = data.readShort();
    };

    HheaTable.prototype.render = function render (ids) {
        var out = BinaryStream();
        out.writeLong(this.version);
        out.writeShort_(this.ascent);
        out.writeShort_(this.descent);
        out.writeShort_(this.lineGap);
        out.writeShort(this.advanceWidthMax);
        out.writeShort_(this.minLeftSideBearing);
        out.writeShort_(this.minRightSideBearing);
        out.writeShort_(this.xMaxExtent);
        out.writeShort_(this.caretSlopeRise);
        out.writeShort_(this.caretSlopeRun);
        out.writeShort_(this.caretOffset);

        out.write([ 0, 0, 0, 0, 0, 0, 0, 0 ]); // reserved bytes

        out.writeShort_(this.metricDataFormat);
        out.writeShort(ids.length);
        return out.get();
    };

    return HheaTable;
}(Table));

var MaxpTable = (function (Table) {
    function MaxpTable () {
        Table.apply(this, arguments);
    }

    if ( Table ) MaxpTable.__proto__ = Table;
    MaxpTable.prototype = Object.create( Table && Table.prototype );
    MaxpTable.prototype.constructor = MaxpTable;

    MaxpTable.prototype.parse = function parse (data) {
        data.offset(this.offset);
        this.version = data.readLong();
        this.numGlyphs = data.readShort();
        this.maxPoints = data.readShort();
        this.maxContours = data.readShort();
        this.maxComponentPoints = data.readShort();
        this.maxComponentContours = data.readShort();
        this.maxZones = data.readShort();
        this.maxTwilightPoints = data.readShort();
        this.maxStorage = data.readShort();
        this.maxFunctionDefs = data.readShort();
        this.maxInstructionDefs = data.readShort();
        this.maxStackElements = data.readShort();
        this.maxSizeOfInstructions = data.readShort();
        this.maxComponentElements = data.readShort();
        this.maxComponentDepth = data.readShort();
    };

    MaxpTable.prototype.render = function render (glyphIds) {
        var out = BinaryStream();
        out.writeLong(this.version);
        out.writeShort(glyphIds.length);
        out.writeShort(this.maxPoints);
        out.writeShort(this.maxContours);
        out.writeShort(this.maxComponentPoints);
        out.writeShort(this.maxComponentContours);
        out.writeShort(this.maxZones);
        out.writeShort(this.maxTwilightPoints);
        out.writeShort(this.maxStorage);
        out.writeShort(this.maxFunctionDefs);
        out.writeShort(this.maxInstructionDefs);
        out.writeShort(this.maxStackElements);
        out.writeShort(this.maxSizeOfInstructions);
        out.writeShort(this.maxComponentElements);
        out.writeShort(this.maxComponentDepth);
        return out.get();
    };

    return MaxpTable;
}(Table));

var HmtxTable = (function (Table) {
    function HmtxTable () {
        Table.apply(this, arguments);
    }

    if ( Table ) HmtxTable.__proto__ = Table;
    HmtxTable.prototype = Object.create( Table && Table.prototype );
    HmtxTable.prototype.constructor = HmtxTable;

    HmtxTable.prototype.parse = function parse (data) {
        data.offset(this.offset);
        var dir = this.file, hhea = dir.hhea;
        this.metrics = data.times(hhea.numOfLongHorMetrics, function(){
            return {
                advance: data.readShort(),
                lsb: data.readShort_()
            };
        });
        var lsbCount = dir.maxp.numGlyphs - dir.hhea.numOfLongHorMetrics;
        this.leftSideBearings = data.times(lsbCount, data.readShort_);
    };

    HmtxTable.prototype.forGlyph = function forGlyph (id) {
        var metrics = this.metrics;
        var n = metrics.length;
        if (id < n) {
            return metrics[id];
        }
        return {
            advance: metrics[n - 1].advance,
            lsb: this.leftSideBearings[id - n]
        };
    };

    HmtxTable.prototype.render = function render (glyphIds) {
        var this$1 = this;

        var out = BinaryStream();
        for (var i = 0; i < glyphIds.length; ++i) {
            var m = this$1.forGlyph(glyphIds[i]);
            out.writeShort(m.advance);
            out.writeShort_(m.lsb);
        }
        return out.get();
    };

    return HmtxTable;
}(Table));

var GlyfTable = (function(){
    var SimpleGlyph = function SimpleGlyph(raw) {
        this.raw = raw;
    };

    var prototypeAccessors = { compound: {} };

    prototypeAccessors.compound.get = function () {
        return false;
    };

    SimpleGlyph.prototype.render = function render () {
        return this.raw.get();
    };

    Object.defineProperties( SimpleGlyph.prototype, prototypeAccessors );

    var ARG_1_AND_2_ARE_WORDS     = 0x0001;
    var WE_HAVE_A_SCALE           = 0x0008;
    var MORE_COMPONENTS           = 0x0020;
    var WE_HAVE_AN_X_AND_Y_SCALE  = 0x0040;
    var WE_HAVE_A_TWO_BY_TWO      = 0x0080;
    //var WE_HAVE_INSTRUCTIONS      = 0x0100;

    var CompoundGlyph = function CompoundGlyph(data) {
        this.raw = data;
        var ids = this.glyphIds = [];
        var offsets = this.idOffsets = [];
        while (true) {      // eslint-disable-line no-constant-condition
            var flags = data.readShort();
            offsets.push(data.offset());
            ids.push(data.readShort());

            if (!(flags & MORE_COMPONENTS)) {
                break;
            }

            data.skip(flags & ARG_1_AND_2_ARE_WORDS ? 4 : 2);

            if (flags & WE_HAVE_A_TWO_BY_TWO) {
                data.skip(8);
            } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
                data.skip(4);
            } else if (flags & WE_HAVE_A_SCALE) {
                data.skip(2);
            }
        }
    };

    var prototypeAccessors$1 = { compound: {} };

    prototypeAccessors$1.compound.get = function () {
        return true;
    };

    CompoundGlyph.prototype.render = function render (old2new) {
            var this$1 = this;

        var out = BinaryStream(this.raw.get());
        for (var i = 0; i < this.glyphIds.length; ++i) {
            var id = this$1.glyphIds[i];
            out.offset(this$1.idOffsets[i]);
            out.writeShort(old2new[id]);
        }
        return out.get();
    };

    Object.defineProperties( CompoundGlyph.prototype, prototypeAccessors$1 );

    return (function (Table) {
        function anonymous () {
            Table.apply(this, arguments);
        }

        if ( Table ) anonymous.__proto__ = Table;
        anonymous.prototype = Object.create( Table && Table.prototype );
        anonymous.prototype.constructor = anonymous;

        anonymous.prototype.parse = function parse () {
            this.cache = {};
        };

        anonymous.prototype.glyphFor = function glyphFor (id) {
            var cache = this.cache;
            if (hasOwnProperty$1(cache, id)) {
                return cache[id];
            }

            var loca = this.file.loca;
            var length = loca.lengthOf(id);

            if (length === 0) {
                return (cache[id] = null);
            }

            var data = this.rawData;
            var offset = this.offset + loca.offsetOf(id);
            var raw = BinaryStream(data.slice(offset, length));

            var numberOfContours = raw.readShort_();
            var xMin = raw.readShort_();
            var yMin = raw.readShort_();
            var xMax = raw.readShort_();
            var yMax = raw.readShort_();

            var glyph = cache[id] = numberOfContours < 0 ? new CompoundGlyph(raw) : new SimpleGlyph(raw);

            glyph.numberOfContours = numberOfContours;
            glyph.xMin = xMin;
            glyph.yMin = yMin;
            glyph.xMax = xMax;
            glyph.yMax = yMax;

            return glyph;
        };

        anonymous.prototype.render = function render (glyphs, oldIds, old2new) {
            var out = BinaryStream(), offsets = [];
            for (var i = 0; i < oldIds.length; ++i) {
                var id = oldIds[i];
                var glyph = glyphs[id];
                if (out.offset() % 2) {
                    out.writeByte(0);
                }
                offsets.push(out.offset());
                if (glyph) {
                    out.write(glyph.render(old2new));
                }
            }
            if (out.offset() % 2) {
                out.writeByte(0);
            }
            offsets.push(out.offset());
            return {
                table: out.get(),
                offsets: offsets
            };
        };

        return anonymous;
    }(Table));
}());

var NameTable = (function(){
    var NameEntry = function NameEntry(text, entry) {
        this.text = text;
        this.length = text.length;
        this.platformID = entry.platformID;
        this.platformSpecificID = entry.platformSpecificID;
        this.languageID = entry.languageID;
        this.nameID = entry.nameID;
    };

    return (function (Table) {
        function anonymous () {
            Table.apply(this, arguments);
        }

        if ( Table ) anonymous.__proto__ = Table;
        anonymous.prototype = Object.create( Table && Table.prototype );
        anonymous.prototype.constructor = anonymous;

        anonymous.prototype.parse = function parse (data) {
            data.offset(this.offset);
            data.readShort();   // format
            var count = data.readShort();
            var stringOffset = this.offset + data.readShort();
            var nameRecords = data.times(count, function(){
                return {
                    platformID         : data.readShort(),
                    platformSpecificID : data.readShort(),
                    languageID         : data.readShort(),
                    nameID             : data.readShort(),
                    length             : data.readShort(),
                    offset             : data.readShort() + stringOffset
                };
            });
            var strings = this.strings = {};
            for (var i = 0; i < nameRecords.length; ++i) {
                var rec = nameRecords[i];
                data.offset(rec.offset);
                var text = data.readString(rec.length);
                if (!strings[rec.nameID]) {
                    strings[rec.nameID] = [];
                }
                strings[rec.nameID].push(new NameEntry(text, rec));
            }
            this.postscriptEntry = strings[6][0];
            this.postscriptName = this.postscriptEntry.text.replace(/[^\x20-\x7F]/g, "");
        };

        anonymous.prototype.render = function render (psName) {
            var this$1 = this;

            var strings = this.strings;
            var strCount = 0;
            for (var i in strings) {
                if (hasOwnProperty$1(strings, i)) {
                    strCount += strings[i].length;
                }
            }
            var out = BinaryStream();
            var strTable = BinaryStream();

            out.writeShort(0);  // format
            out.writeShort(strCount);
            out.writeShort(6 + 12 * strCount); // stringOffset

            for (i in strings) {
                if (hasOwnProperty$1(strings, i)) {
                    var list = i == 6 ? [
                        new NameEntry(psName, this$1.postscriptEntry)
                    ] : strings[i];
                    for (var j = 0; j < list.length; ++j) {
                        var str = list[j];
                        out.writeShort(str.platformID);
                        out.writeShort(str.platformSpecificID);
                        out.writeShort(str.languageID);
                        out.writeShort(str.nameID);
                        out.writeShort(str.length);
                        out.writeShort(strTable.offset());

                        strTable.writeString(str.text);
                    }
                }
            }

            out.write(strTable.get());

            return out.get();
        };

        return anonymous;
    }(Table));
})();

var PostTable = (function(){
    var POSTSCRIPT_GLYPHS = ".notdef .null nonmarkingreturn space exclam quotedbl numbersign dollar percent ampersand quotesingle parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore grave a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde Adieresis Aring Ccedilla Eacute Ntilde Odieresis Udieresis aacute agrave acircumflex adieresis atilde aring ccedilla eacute egrave ecircumflex edieresis iacute igrave icircumflex idieresis ntilde oacute ograve ocircumflex odieresis otilde uacute ugrave ucircumflex udieresis dagger degree cent sterling section bullet paragraph germandbls registered copyright trademark acute dieresis notequal AE Oslash infinity plusminus lessequal greaterequal yen mu partialdiff summation product pi integral ordfeminine ordmasculine Omega ae oslash questiondown exclamdown logicalnot radical florin approxequal Delta guillemotleft guillemotright ellipsis nonbreakingspace Agrave Atilde Otilde OE oe endash emdash quotedblleft quotedblright quoteleft quoteright divide lozenge ydieresis Ydieresis fraction currency guilsinglleft guilsinglright fi fl daggerdbl periodcentered quotesinglbase quotedblbase perthousand Acircumflex Ecircumflex Aacute Edieresis Egrave Iacute Icircumflex Idieresis Igrave Oacute Ocircumflex apple Ograve Uacute Ucircumflex Ugrave dotlessi circumflex tilde macron breve dotaccent ring cedilla hungarumlaut ogonek caron Lslash lslash Scaron scaron Zcaron zcaron brokenbar Eth eth Yacute yacute Thorn thorn minus multiply onesuperior twosuperior threesuperior onehalf onequarter threequarters franc Gbreve gbreve Idotaccent Scedilla scedilla Cacute cacute Ccaron ccaron dcroat".split(/\s+/g);

    return (function (Table) {
        function anonymous () {
            Table.apply(this, arguments);
        }

        if ( Table ) anonymous.__proto__ = Table;
        anonymous.prototype = Object.create( Table && Table.prototype );
        anonymous.prototype.constructor = anonymous;

        anonymous.prototype.parse = function parse (data) {
            var this$1 = this;

            data.offset(this.offset);

            this.format = data.readLong();
            this.italicAngle = data.readFixed_();
            this.underlinePosition = data.readShort_();
            this.underlineThickness = data.readShort_();
            this.isFixedPitch = data.readLong();
            this.minMemType42 = data.readLong();
            this.maxMemType42 = data.readLong();
            this.minMemType1 = data.readLong();
            this.maxMemType1 = data.readLong();

            var numberOfGlyphs;

            switch (this.format) {
              case 0x00010000:
              case 0x00030000:
                break;

              case 0x00020000:
                numberOfGlyphs = data.readShort();
                this.glyphNameIndex = data.times(numberOfGlyphs, data.readShort);
                this.names = [];
                var limit = this.offset + this.length;
                while (data.offset() < limit) {
                    this$1.names.push(data.readString(data.readByte()));
                }
                break;

              case 0x00025000:
                numberOfGlyphs = data.readShort();
                this.offsets = data.read(numberOfGlyphs);
                break;

              case 0x00040000:
                this.map = data.times(this.file.maxp.numGlyphs, data.readShort);
                break;
            }
        };

        anonymous.prototype.glyphFor = function glyphFor (code) {
            switch (this.format) {
              case 0x00010000:
                return POSTSCRIPT_GLYPHS[code] || ".notdef";

              case 0x00020000:
                var index = this.glyphNameIndex[code];
                if (index < POSTSCRIPT_GLYPHS.length) {
                    return POSTSCRIPT_GLYPHS[index];
                }
                return this.names[index - POSTSCRIPT_GLYPHS.length] || ".notdef";

              case 0x00025000:

              case 0x00030000:
                return ".notdef";

              case 0x00040000:
                return this.map[code] || 0xFFFF;
            }
        };

        anonymous.prototype.render = function render (mapping) {
            var this$1 = this;

            if (this.format == 0x00030000) {
                return this.raw();
            }

            // keep original header, but set format to 2.0
            var out = BinaryStream(this.rawData.slice(this.offset, 32));
            out.writeLong(0x00020000);
            out.offset(32);

            var indexes = [];
            var strings = [];

            for (var i = 0; i < mapping.length; ++i) {
                var id = mapping[i];
                var post = this$1.glyphFor(id);
                var index = POSTSCRIPT_GLYPHS.indexOf(post);
                if (index >= 0) {
                    indexes.push(index);
                } else {
                    indexes.push(POSTSCRIPT_GLYPHS.length + strings.length);
                    strings.push(post);
                }
            }

            out.writeShort(mapping.length);

            for (i = 0; i < indexes.length; ++i) {
                out.writeShort(indexes[i]);
            }

            for (i = 0; i < strings.length; ++i) {
                out.writeByte(strings[i].length);
                out.writeString(strings[i]);
            }

            return out.get();
        };

        return anonymous;
    }(Table));
})();

var CmapTable = (function(){
    var CmapEntry = function CmapEntry(data, offset, codeMap) {
        var self = this;
        self.platformID = data.readShort();
        self.platformSpecificID = data.readShort();
        self.offset = offset + data.readLong();

        data.saveExcursion(function(){
            var code;
            data.offset(self.offset);
            self.format = data.readShort();

            switch (self.format) {
            case 0:
                self.length = data.readShort();
                self.language = data.readShort();
                for (var i = 0; i < 256; ++i) {
                    codeMap[i] = data.readByte();
                }
                break;

            case 4:
                self.length = data.readShort();
                self.language = data.readShort();
                var segCount = data.readShort() / 2;

                data.skip(6);   // searchRange, entrySelector, rangeShift
                var endCode = data.times(segCount, data.readShort);
                data.skip(2);   // reserved pad
                var startCode = data.times(segCount, data.readShort);
                var idDelta = data.times(segCount, data.readShort_);
                var idRangeOffset = data.times(segCount, data.readShort);

                var count = (self.length + self.offset - data.offset()) / 2;
                var glyphIds = data.times(count, data.readShort);

                for (i = 0; i < segCount; ++i) {
                    var start = startCode[i], end = endCode[i];
                    for (code = start; code <= end; ++code) {
                        var glyphId;
                        if (idRangeOffset[i] === 0) {
                            glyphId = code + idDelta[i];
                        } else {
                            ///
                            // When non-zero, idRangeOffset contains for each segment the byte offset of the Glyph ID
                            // into the glyphIds table, from the *current* `i` cell of idRangeOffset.  In other words,
                            // this offset spans from the first into the second array.  This works, because the arrays
                            // are consecutive in the TTF file:
                            //
                            // [ ...idRangeOffset... ][ ...glyphIds... ]
                            //   ...... 48 ......   .... ID ....
                            //          ^----- 48 bytes -----^
                            //
                            // (but I can't stop wondering why is it not just a plain index, possibly incremented by 1
                            // so that we can have that special `zero` value.)
                            //
                            // The elements of idRangeOffset are even numbers, because both arrays contain 16-bit words,
                            // yet the offset is in bytes.  That is why we divide it by 2.  Then we subtract the
                            // remaining segments (segCount-i), and add the code-start offset, to which we need to add
                            // the corresponding delta to get the actual glyph ID.
                            ///
                            var index = idRangeOffset[i] / 2 - (segCount - i) + (code - start);
                            glyphId = glyphIds[index] || 0;
                            if (glyphId !== 0) {
                                glyphId += idDelta[i];
                            }
                        }
                        codeMap[code] = glyphId & 0xFFFF;
                    }
                }
                break;

            case 6:
                self.length = data.readShort();
                self.language = data.readShort();
                code = data.readShort();
                var length = data.readShort();
                while (length-- > 0) {
                    codeMap[code++] = data.readShort();
                }
                break;

            case 12:
                data.readShort(); // reserved
                self.length = data.readLong();
                self.language = data.readLong();
                var ngroups = data.readLong();
                while (ngroups-- > 0) {
                    code = data.readLong();
                    var endCharCode = data.readLong();
                    var glyphCode = data.readLong();
                    while (code <= endCharCode) {
                        codeMap[code++] = glyphCode++;
                    }
                }
                break;

            default:
                if (window.console) {
                    window.console.error("Unhandled CMAP format: " + self.format);
                }
            }
        });
    };

    function renderCharmap(ncid2ogid, ogid2ngid) {
        var codes = sortedKeys(ncid2ogid);
        var startCodes = [];
        var endCodes = [];
        var last = null;
        var diff = null;

        function new_gid(charcode) {
            return ogid2ngid[ncid2ogid[charcode]];
        }

        for (var i = 0; i < codes.length; ++i) {
            var code = codes[i];
            var gid = new_gid(code);
            var delta = gid - code;
            if (last == null || delta !== diff) {
                if (last) {
                    endCodes.push(last);
                }
                startCodes.push(code);
                diff = delta;
            }
            last = code;
        }

        if (last) {
            endCodes.push(last);
        }
        endCodes.push(0xFFFF);
        startCodes.push(0xFFFF);

        var segCount = startCodes.length;
        var segCountX2 = segCount * 2;
        var searchRange = 2 * Math.pow(2, Math.floor(Math.log(segCount) / Math.LN2));
        var entrySelector = Math.log(searchRange / 2) / Math.LN2;
        var rangeShift = segCountX2 - searchRange;

        var deltas = [];
        var rangeOffsets = [];
        var glyphIds = [];

        for (i = 0; i < segCount; ++i) {
            var startCode = startCodes[i];
            var endCode = endCodes[i];
            if (startCode == 0xFFFF) {
                deltas.push(0);
                rangeOffsets.push(0);
                break;
            }
            var startGlyph = new_gid(startCode);
            if (startCode - startGlyph >= 0x8000) {
                deltas.push(0);
                rangeOffsets.push(2 * (glyphIds.length + segCount - i));
                for (var j = startCode; j <= endCode; ++j) {
                    glyphIds.push(new_gid(j));
                }
            } else {
                deltas.push(startGlyph - startCode);
                rangeOffsets.push(0);
            }
        }

        var out = BinaryStream();

        out.writeShort(3);      // platformID
        out.writeShort(1);      // platformSpecificID
        out.writeLong(12);      // offset
        out.writeShort(4);      // format
        out.writeShort(16 + segCount * 8 + glyphIds.length * 2); // length
        out.writeShort(0);      // language
        out.writeShort(segCountX2);
        out.writeShort(searchRange);
        out.writeShort(entrySelector);
        out.writeShort(rangeShift);

        endCodes.forEach(out.writeShort);
        out.writeShort(0);      // reserved pad
        startCodes.forEach(out.writeShort);
        deltas.forEach(out.writeShort_);
        rangeOffsets.forEach(out.writeShort);
        glyphIds.forEach(out.writeShort);

        return out.get();
    }

    return (function (Table) {
        function anonymous () {
            Table.apply(this, arguments);
        }

        if ( Table ) anonymous.__proto__ = Table;
        anonymous.prototype = Object.create( Table && Table.prototype );
        anonymous.prototype.constructor = anonymous;

        anonymous.prototype.parse = function parse (data) {
            var self = this;
            var offset = self.offset;
            data.offset(offset);
            self.codeMap = {};
            self.version = data.readShort();
            var tableCount = data.readShort();
            self.tables = data.times(tableCount, function(){
                return new CmapEntry(data, offset, self.codeMap);
            });
        };

        anonymous.render = function render (ncid2ogid, ogid2ngid) {
            var out = BinaryStream();
            out.writeShort(0);  // version
            out.writeShort(1);  // tableCount
            out.write(renderCharmap(ncid2ogid, ogid2ngid));
            return out.get();
        };

        return anonymous;
    }(Table));

})();

var OS2Table = (function (Table) {
    function OS2Table () {
        Table.apply(this, arguments);
    }

    if ( Table ) OS2Table.__proto__ = Table;
    OS2Table.prototype = Object.create( Table && Table.prototype );
    OS2Table.prototype.constructor = OS2Table;

    OS2Table.prototype.parse = function parse (data) {
        data.offset(this.offset);
        this.version = data.readShort();
        this.averageCharWidth = data.readShort_();
        this.weightClass = data.readShort();
        this.widthClass = data.readShort();
        this.type = data.readShort();
        this.ySubscriptXSize = data.readShort_();
        this.ySubscriptYSize = data.readShort_();
        this.ySubscriptXOffset = data.readShort_();
        this.ySubscriptYOffset = data.readShort_();
        this.ySuperscriptXSize = data.readShort_();
        this.ySuperscriptYSize = data.readShort_();
        this.ySuperscriptXOffset = data.readShort_();
        this.ySuperscriptYOffset = data.readShort_();
        this.yStrikeoutSize = data.readShort_();
        this.yStrikeoutPosition = data.readShort_();
        this.familyClass = data.readShort_();

        this.panose = data.times(10, data.readByte);
        this.charRange = data.times(4, data.readLong);

        this.vendorID = data.readString(4);
        this.selection = data.readShort();
        this.firstCharIndex = data.readShort();
        this.lastCharIndex = data.readShort();

        if (this.version > 0) {
            this.ascent = data.readShort_();
            this.descent = data.readShort_();
            this.lineGap = data.readShort_();
            this.winAscent = data.readShort();
            this.winDescent = data.readShort();
            this.codePageRange = data.times(2, data.readLong);

            if (this.version > 1) {
                this.xHeight = data.readShort();
                this.capHeight = data.readShort();
                this.defaultChar = data.readShort();
                this.breakChar = data.readShort();
                this.maxContext = data.readShort();
            }
        }
    };

    OS2Table.prototype.render = function render () {
        return this.raw();
    };

    return OS2Table;
}(Table));

var subsetTag = 100000;

function nextSubsetTag() {
    var ret = "", n = String(subsetTag);
    for (var i = 0; i < n.length; ++i) {
        ret += String.fromCharCode(n.charCodeAt(i) - 48 + 65);
    }
    ++subsetTag;
    return ret;
}

var Subfont = function Subfont(font) {
    this.font = font;
    this.subset = {};
    this.unicodes = {};
    this.ogid2ngid = { 0: 0 };
    this.ngid2ogid = { 0: 0 };
    this.ncid2ogid = {};
    this.next = this.firstChar = 1;
    this.nextGid = 1;
    this.psName = nextSubsetTag() + "+" + this.font.psName;
};

Subfont.prototype.use = function use (ch) {
    var self = this;
    if (typeof ch == "string") {
        return ucs2decode(ch).reduce(function(ret, code){
            return ret + String.fromCharCode(self.use(code));
        }, "");
    }
    var code = self.unicodes[ch];
    if (!code) {
        code = self.next++;
        self.subset[code] = ch;
        self.unicodes[ch] = code;

        // generate new GID (glyph ID) and maintain newGID ->
        // oldGID and back mappings
        var old_gid = self.font.cmap.codeMap[ch];
        if (old_gid) {
            self.ncid2ogid[code] = old_gid;
            if (self.ogid2ngid[old_gid] == null) {
                var new_gid = self.nextGid++;
                self.ogid2ngid[old_gid] = new_gid;
                self.ngid2ogid[new_gid] = old_gid;
            }
        }
    }
    return code;
};

Subfont.prototype.encodeText = function encodeText (text) {
    return this.use(text);
};

Subfont.prototype.glyphIds = function glyphIds () {
    return sortedKeys(this.ogid2ngid);
};

Subfont.prototype.glyphsFor = function glyphsFor (glyphIds, result) {
        var this$1 = this;

    if (!result) {
        result = {};
    }
    for (var i = 0; i < glyphIds.length; ++i) {
        var id = glyphIds[i];
        if (!result[id]) {
            var glyph = result[id] = this$1.font.glyf.glyphFor(id);
            if (glyph && glyph.compound) {
                this$1.glyphsFor(glyph.glyphIds, result);
            }
        }
    }
    return result;
};

Subfont.prototype.render = function render () {
        var this$1 = this;

    var glyphs = this.glyphsFor(this.glyphIds());

    // add missing sub-glyphs
    for (var old_gid in glyphs) {
        if (hasOwnProperty$1(glyphs, old_gid)) {
            old_gid = parseInt(old_gid, 10);
            if (this$1.ogid2ngid[old_gid] == null) {
                var new_gid = this$1.nextGid++;
                this$1.ogid2ngid[old_gid] = new_gid;
                this$1.ngid2ogid[new_gid] = old_gid;
            }
        }
    }

    // must obtain old_gid_ids in an order matching sorted
    // new_gid_ids
    var new_gid_ids = sortedKeys(this.ngid2ogid);
    var old_gid_ids = new_gid_ids.map(function(id){
        return this.ngid2ogid[id];
    }, this);

    var font = this.font;
    var glyf = font.glyf.render(glyphs, old_gid_ids, this.ogid2ngid);
    var loca = font.loca.render(glyf.offsets);

    this.lastChar = this.next - 1;

    var tables = {
        "cmap" : CmapTable.render(this.ncid2ogid, this.ogid2ngid),
        "glyf" : glyf.table,
        "loca" : loca.table,
        "hmtx" : font.hmtx.render(old_gid_ids),
        "hhea" : font.hhea.render(old_gid_ids),
        "maxp" : font.maxp.render(old_gid_ids),
        "post" : font.post.render(old_gid_ids),
        "name" : font.name.render(this.psName),
        "head" : font.head.render(loca.format),
        "OS/2" : font.os2.render()
    };

    return this.font.directory.render(tables);
};

Subfont.prototype.cidToGidMap = function cidToGidMap () {
        var this$1 = this;

    var out = BinaryStream(), len = 0;
    for (var cid = this.firstChar; cid < this.next; ++cid) {
        while (len < cid) {
            out.writeShort(0);
            len++;
        }
        var old_gid = this$1.ncid2ogid[cid];
        if (old_gid) {
            var new_gid = this$1.ogid2ngid[old_gid];
            out.writeShort(new_gid);
        } else {
            out.writeShort(0);
        }
        len++;
    }
    return out.get();
};

var TTFFont = function TTFFont(rawData, name) {
    var self = this;
    var data = self.contents = BinaryStream(rawData);
    if (data.readString(4) == "ttcf") {
        var offset;
        var parse = function() {
            data.offset(offset);
            self.parse();
        };
        if (!name) {
            throw new Error("Must specify a name for TTC files");
        }
        data.readLong();    // version
        var numFonts = data.readLong();
        for (var i = 0; i < numFonts; ++i) {
            offset = data.readLong();
            data.saveExcursion(parse);
            if (self.psName == name) {
                return;
            }
        }
        throw new Error("Font " + name + " not found in collection");
    } else {
        data.offset(0);
        self.parse();
    }
};

TTFFont.prototype.parse = function parse () {
    var dir = this.directory = new Directory(this.contents);

    this.head = dir.readTable("head", HeadTable);
    this.loca = dir.readTable("loca", LocaTable);
    this.hhea = dir.readTable("hhea", HheaTable);
    this.maxp = dir.readTable("maxp", MaxpTable);
    this.hmtx = dir.readTable("hmtx", HmtxTable);
    this.glyf = dir.readTable("glyf", GlyfTable);
    this.name = dir.readTable("name", NameTable);
    this.post = dir.readTable("post", PostTable);
    this.cmap = dir.readTable("cmap", CmapTable);
    this.os2  = dir.readTable("OS/2", OS2Table);

    this.psName = this.name.postscriptName;
    this.ascent = this.os2.ascent || this.hhea.ascent;
    this.descent = this.os2.descent || this.hhea.descent;
    this.lineGap = this.os2.lineGap || this.hhea.lineGap;
    this.scale = 1000 / this.head.unitsPerEm;
};

TTFFont.prototype.widthOfGlyph = function widthOfGlyph (glyph) {
    return this.hmtx.forGlyph(glyph).advance * this.scale;
};

TTFFont.prototype.makeSubset = function makeSubset () {
    return new Subfont(this);
};

var deflate$1 = _progress_pakoEsm.deflate;

function supportsDeflate() {
    return true;
}

/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
/* eslint-disable no-param-reassign, no-var, block-scoped-var */

var browser$2 = support.browser;
var NL = "\n";

var RESOURCE_COUNTER = 0;

var PAPER_SIZE = {
    a0        : [ 2383.94 , 3370.39 ],
    a1        : [ 1683.78 , 2383.94 ],
    a2        : [ 1190.55 , 1683.78 ],
    a3        : [ 841.89  , 1190.55 ],
    a4        : [ 595.28  , 841.89  ],
    a5        : [ 419.53  , 595.28  ],
    a6        : [ 297.64  , 419.53  ],
    a7        : [ 209.76  , 297.64  ],
    a8        : [ 147.40  , 209.76  ],
    a9        : [ 104.88  , 147.40  ],
    a10       : [ 73.70   , 104.88  ],
    b0        : [ 2834.65 , 4008.19 ],
    b1        : [ 2004.09 , 2834.65 ],
    b2        : [ 1417.32 , 2004.09 ],
    b3        : [ 1000.63 , 1417.32 ],
    b4        : [ 708.66  , 1000.63 ],
    b5        : [ 498.90  , 708.66  ],
    b6        : [ 354.33  , 498.90  ],
    b7        : [ 249.45  , 354.33  ],
    b8        : [ 175.75  , 249.45  ],
    b9        : [ 124.72  , 175.75  ],
    b10       : [ 87.87   , 124.72  ],
    c0        : [ 2599.37 , 3676.54 ],
    c1        : [ 1836.85 , 2599.37 ],
    c2        : [ 1298.27 , 1836.85 ],
    c3        : [ 918.43  , 1298.27 ],
    c4        : [ 649.13  , 918.43  ],
    c5        : [ 459.21  , 649.13  ],
    c6        : [ 323.15  , 459.21  ],
    c7        : [ 229.61  , 323.15  ],
    c8        : [ 161.57  , 229.61  ],
    c9        : [ 113.39  , 161.57  ],
    c10       : [ 79.37   , 113.39  ],
    executive : [ 521.86  , 756.00  ],
    folio     : [ 612.00  , 936.00  ],
    legal     : [ 612.00  , 1008.00 ],
    letter    : [ 612.00  , 792.00  ],
    tabloid   : [ 792.00  , 1224.00 ]
};

function makeOutput() {
    var indentLevel = 0, output = BinaryStream();
    function out() {
        var arguments$1 = arguments;

        for (var i = 0; i < arguments.length; ++i) {
            var x = arguments$1[i];
            if (x === undefined) {
                throw new Error("Cannot output undefined to PDF");
            }
            else if (x instanceof PDFValue) {
                x.beforeRender(out);
                x.render(out);
            }
            else if (isArray(x)) {
                renderArray(x, out);
            }
            else if (isDate(x)) {
                renderDate(x, out);
            }
            else if (typeof x == "number") {
                if (isNaN(x)) {
                    throw new Error("Cannot output NaN to PDF");
                }
                // make sure it doesn't end up in exponent notation
                var num = x.toFixed(7);
                if (num.indexOf(".") >= 0) {
                    num = num.replace(/\.?0+$/, "");
                }
                if (num == "-0") {
                    num = "0";
                }
                output.writeString(num);
            }
            else if (/string|boolean/.test(typeof x)) {
                output.writeString(String(x));
            }
            else if (typeof x.get == "function") {
                output.write(x.get());
            }
            else if (typeof x == "object") {
                if (!x) {
                    output.writeString("null");
                } else {
                    out(new PDFDictionary(x));
                }
            }
        }
    }
    out.writeData = function(data) {
        output.write(data);
    };
    out.withIndent = function(f) {
        ++indentLevel;
        f(out);
        --indentLevel;
    };
    out.indent = function() {
        out(NL, pad("", indentLevel * 2, "  "));
        out.apply(null, arguments);
    };
    out.offset = function() {
        return output.offset();
    };
    out.toString = function() {
        throw new Error("FIX CALLER");
    };
    out.get = function() {
        return output.get();
    };
    out.stream = function() {
        return output;
    };
    return out;
}

function wrapObject(value, id) {
    var beforeRender = value.beforeRender;
    var renderValue = value.render;

    value.beforeRender = function(){};

    value.render = function(out) {
        out(id, " 0 R");
    };

    value.renderFull = function(out) {
        value._offset = out.offset();
        out(id, " 0 obj ");
        beforeRender.call(value, out);
        renderValue.call(value, out);
        out(" endobj");
    };
}

function getPaperOptions(getOption) {
    if (typeof getOption != "function") {
        var options = getOption;
        getOption = function(key, def) {
            return key in options ? options[key] : def;
        };
    }
    var paperSize = getOption("paperSize", PAPER_SIZE.a4);
    if (!paperSize) {
        return {};
    }
    if (typeof paperSize == "string") {
        paperSize = PAPER_SIZE[paperSize.toLowerCase()];
        if (paperSize == null) {
            throw new Error("Unknown paper size");
        }
    }

    paperSize[0] = unitsToPoints(paperSize[0]);
    paperSize[1] = unitsToPoints(paperSize[1]);

    if (getOption("landscape", false)) {
        paperSize = [
            Math.max(paperSize[0], paperSize[1]),
            Math.min(paperSize[0], paperSize[1])
        ];
    }

    var margin = getOption("margin");
    if (margin) {
        if (typeof margin == "string" || typeof margin == "number") {
            margin = unitsToPoints(margin, 0);
            margin = { left: margin, top: margin, right: margin, bottom: margin };
        } else {
            margin = {
                left   : unitsToPoints(margin.left, 0),
                top    : unitsToPoints(margin.top, 0),
                right  : unitsToPoints(margin.right, 0),
                bottom : unitsToPoints(margin.bottom, 0)
            };
        }
        if (getOption("addMargin")) {
            paperSize[0] += margin.left + margin.right;
            paperSize[1] += margin.top + margin.bottom;
        }
    }
    return { paperSize: paperSize, margin: margin };
}

var FONT_CACHE = {
    "Times-Roman"           : true,
    "Times-Bold"            : true,
    "Times-Italic"          : true,
    "Times-BoldItalic"      : true,
    "Helvetica"             : true,
    "Helvetica-Bold"        : true,
    "Helvetica-Oblique"     : true,
    "Helvetica-BoldOblique" : true,
    "Courier"               : true,
    "Courier-Bold"          : true,
    "Courier-Oblique"       : true,
    "Courier-BoldOblique"   : true,
    "Symbol"                : true,
    "ZapfDingbats"          : true
};

function loadBinary(url, cont) {
    // IE throws Accesss denied error for Data URIs
    var m;
    if (browser$2.msie && (m = /^data:.*?;base64,/i.exec(url))) {
        cont(base64ToUint8Array(url.substr(m[0].length)));
        return;
    }

    function error() {
        if (window.console) {
            if (window.console.error) {
                window.console.error("Cannot load URL: %s", url);
            } else {
                window.console.log("Cannot load URL: %s", url);
            }
        }
        cont(null);
    }
    var req = new XMLHttpRequest();
    req.open('GET', url, true);
    if (HAS_TYPED_ARRAYS) {
        req.responseType = "arraybuffer";
    }
    req.onload = function() {
        if (req.status == 200 || req.status == 304) {
            if (HAS_TYPED_ARRAYS) {
                cont(new Uint8Array(req.response));
            } else {
                cont(new window.VBArray(req.responseBody).toArray()); // IE9 only
            }
        } else {
            error();
        }
    };
    req.onerror = error;
    req.send(null);
}

function loadFont(url, cont) {
    var font = FONT_CACHE[url];
    if (font) {
        cont(font);
    } else {
        loadBinary(url, function(data){
            if (data == null) {
                throw new Error("Cannot load font from " + url);
            } else {
                var font = new TTFFont(data);
                FONT_CACHE[url] = font;
                cont(font);
            }
        });
    }
}

var IMAGE_CACHE = {};

function clearImageCache() {
    IMAGE_CACHE = {};
}

function loadImage(url, size, cont, options) {
    var img = IMAGE_CACHE[url], bloburl, blob;
    if (img) {
        cont(img);
    } else {
        img = new Image();
        if (!(/^data:/i.test(url))) {
            img.crossOrigin = "Anonymous";
        }
        if (HAS_TYPED_ARRAYS && !(/^data:/i.test(url))) {
            // IE10 fails to load images from another domain even when the server sends the
            // proper CORS headers.  a XHR, however, will be able to load the data.
            // http://stackoverflow.com/a/19734516/154985
            //
            // On the other hand, it's worth doing it this way for all browsers which support
            // responseType = "blob" (HAS_TYPED_ARRAYS will be true), because we can inspect the
            // mime type and if it's a JPEG (very common case) we can save a lot of time in
            // _load below.
            var xhr = new XMLHttpRequest();
            xhr.onload = function() {
                blob = xhr.response;
                if (browser$2.mozilla && blob.type == "image/svg+xml") {
                    // Firefox won't render SVGs that don't contain width and height attributes.
                    var reader = new FileReader();
                    reader.onload = function() {
                        var doc = new window.DOMParser().parseFromString(this.result, "image/svg+xml");
                        var svg = doc.documentElement;
                        if (svg.getAttribute("width") && svg.getAttribute("height")) {
                            // we're good, continue with the existing blob.
                            bloburl = URL.createObjectURL(blob);
                            _load(bloburl);
                        } else {
                            svg.setAttribute("width", size.width);
                            svg.setAttribute("height", size.height);
                            var xml = new window.XMLSerializer().serializeToString(svg);
                            var dataURL = "data:image/svg+xml;base64," + (encodeBase64(xml));
                            _load(dataURL);
                        }
                    };
                    reader.readAsText(blob);
                } else {
                    bloburl = URL.createObjectURL(blob);
                    _load(bloburl);
                }
            };
            xhr.onerror = _onerror;
            xhr.open("GET", url, true);
            xhr.responseType = "blob";
            xhr.send();
        } else {
            _load(url);
        }
    }

    function _load(url) {
        img.src = url;
        if (img.complete && !browser$2.msie) {
            // IE, bless its little heart, says img.complete == true even though the image is
            // not loaded (width=0), therefore we must go the onload route (ticket 929635).
            _onload.call(img);
        } else {
            img.onload = _onload;
            img.onerror = _onerror;
        }
    }

    function _trycanvas() {
        if (!size) {
            size = { width: img.width, height: img.height };
        }

        var canvas = document.createElement("canvas");
        canvas.width = size.width;
        canvas.height = size.height;

        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0, size.width, size.height);

        var imgdata;
        try {
            imgdata = ctx.getImageData(0, 0, size.width, size.height);
        } catch (ex) {
            // it tainted the canvas -- can't draw it.
            _onerror();
            return;
        } finally {
            if (bloburl) {
                URL.revokeObjectURL(bloburl);
            }
        }

        // in case it contains transparency, we must separate rgb data from the alpha
        // channel and create a PDFRawImage image with opacity.  otherwise we can use a
        // PDFJpegImage.
        //
        // to do this in one step, we create the rgb and alpha streams anyway, even if
        // we might end up not using them if hasAlpha remains false.

        var hasAlpha = false, rgb = BinaryStream(), alpha = BinaryStream();
        var rawbytes = imgdata.data;
        var i = 0;
        while (i < rawbytes.length) {
            rgb.writeByte(rawbytes[i++]);
            rgb.writeByte(rawbytes[i++]);
            rgb.writeByte(rawbytes[i++]);
            var a = rawbytes[i++];
            if (a < 255) {
                hasAlpha = true;
            }
            alpha.writeByte(a);
        }

        if (hasAlpha || options.keepPNG) {
            img = new PDFRawImage(size.width, size.height, rgb, alpha);
        } else {
            // no transparency, encode as JPEG.
            var data = canvas.toDataURL("image/jpeg", options.jpegQuality);
            data = data.substr(data.indexOf(";base64,") + 8);

            var stream = BinaryStream();
            stream.writeBase64(data);
            img = new PDFJpegImage(stream);
        }

        cont(IMAGE_CACHE[url] = img);
    }

    function _onerror() {
        cont(IMAGE_CACHE[url] = "ERROR");
    }

    function _onload() {
        if (size) {
            var svg = (blob && blob.type === 'image/svg+xml') || (
              /^data:image\/svg\+xml;/i.test(this.src.substring(0, 19))
            );

            var upscale = size.width >= img.width || size.height >= img.height;

            // Use the original image if requested size is bigger than the source,
            // unless it's an SVG that can be upscaled.
            if (!svg && upscale) {
                size = null;
            }
        }
        if (!size && blob && /^image\/jpe?g$/i.test(blob.type)) {
            // If we know we got a JPEG, we can skip the process of rendering it to a
            // canvas, getting the pixel data, searching for transparency we know we won't
            // find, getting back a data URI and then decoding the BASE64 to finally get the
            // binary we already have.  Also, we avoid downgrading the image quality, with
            // the possible drawback of making a bigger PDF; still, seems legit.
            //
            // Besides saving a lot of work, this also reuses the buffer memory
            // (BinaryStream does not create a copy), potentially saving some GC cycles.
            var reader = new FileReader();
            reader.onload = function() {
                try {
                    var img = new PDFJpegImage(BinaryStream(new Uint8Array(this.result)));
                    URL.revokeObjectURL(bloburl);
                    cont(IMAGE_CACHE[url] = img);
                } catch (ex) {
                    // if there's an error parsing the JPEG stream, it could be due to a
                    // misconfigured server (improper content-type:
                    // https://github.com/telerik/kendo-ui-core/issues/4184).  If that's the case,
                    // the canvas will still be able to draw it.
                    _trycanvas();
                }
            };
            reader.readAsArrayBuffer(blob);
        } else {
            _trycanvas();
        }
    }
}

function manyLoader(loadOne) {
    return function(urls, callback) {
        var n = urls.length, i = n;
        if (n === 0) {
            return callback();
        }
        function next() {
            if (--n === 0) {
                callback();
            }
        }
        while (i-- > 0) {
            loadOne(urls[i], next);
        }
    };
}

var loadFonts = manyLoader(loadFont);
var loadImages = function(images, callback, options) {
    options = Object.assign({
        jpegQuality : 0.92,
        keepPNG     : false
    }, options);
    var urls = Object.keys(images), n = urls.length;
    if (n === 0) {
        return callback();
    }
    function next() {
        if (--n === 0) {
            callback();
        }
    }
    urls.forEach(function(url){
        loadImage(url, images[url], next, options);
    });
};

var PDFDocument = function PDFDocument (options) {
    var self = this;
    var out = makeOutput();
    var objcount = 0;
    var objects = [];

    function getOption(name, defval) {
        return (options && options[name] != null) ? options[name] : defval;
    }

    self.getOption = getOption;

    self.attach = function(value) {
        if (objects.indexOf(value) < 0) {
            wrapObject(value, ++objcount);
            objects.push(value);
        }
        return value;
    };

    self.pages = [];

    self.FONTS = {};
    self.IMAGES = {};
    self.GRAD_COL_FUNCTIONS = {}; // cache for color gradient functions
    self.GRAD_OPC_FUNCTIONS = {}; // cache for opacity gradient functions
    self.GRAD_COL = {}; // cache for whole color gradient objects
    self.GRAD_OPC = {}; // cache for whole opacity gradient objects

    var catalog = self.attach(new PDFCatalog());
    var pageTree = self.attach(new PDFPageTree());

    if (getOption("autoPrint")) {
        var nameTree = {};
        nameTree.JavaScript = new PDFDictionary({ Names: [
            new PDFString("JS"), self.attach(new PDFDictionary({
                S: _("JavaScript"),
                JS: new PDFString("print(true);")
            }))
        ] });
        catalog.props.Names = new PDFDictionary(nameTree);
    }

    catalog.setPages(pageTree);

    var info = self.attach(new PDFDictionary({
        Producer : new PDFString(getOption("producer", "Kendo UI PDF Generator"), true), // XXX: kendo.version?
        Title    : new PDFString(getOption("title", ""), true),
        Author   : new PDFString(getOption("author", ""), true),
        Subject  : new PDFString(getOption("subject", ""), true),
        Keywords : new PDFString(getOption("keywords", ""), true),
        Creator  : new PDFString(getOption("creator", "Kendo UI PDF Generator"), true),
        CreationDate : getOption("date", new Date())
    }));

    self.addPage = function(options) {
        var paperOptions  = getPaperOptions(function(name, defval){
            return (options && options[name] != null) ? options[name] : defval;
        });
        var paperSize = paperOptions.paperSize;
        var margin    = paperOptions.margin;
        var contentWidth  = paperSize[0];
        var contentHeight = paperSize[1];
        if (margin) {
            contentWidth -= margin.left + margin.right;
            contentHeight -= margin.top + margin.bottom;
        }
        var content = new PDFStream(makeOutput(), null, true);
        var props = {
            Contents : self.attach(content),
            Parent   : pageTree,
            MediaBox : [ 0, 0, paperSize[0], paperSize[1] ]
        };
        var page = new PDFPage(self, props);
        page._content = content;
        pageTree.addPage(self.attach(page));

        // canvas-like coord. system.  (0,0) is upper-left.
        // text must be vertically mirorred before drawing.
        page.transform(1, 0, 0, -1, 0, paperSize[1]);

        if (margin) {
            page.translate(margin.left, margin.top);
            // XXX: clip to right/bottom margin.  Make this optional?
            page.rect(0, 0, contentWidth, contentHeight);
            page.clip();
        }

        self.pages.push(page);
        return page;
    };

    self.render = function() {
        var i;
        /// file header
        out("%PDF-1.4", NL, "%\xc2\xc1\xda\xcf\xce", NL, NL);

        /// file body
        for (i = 0; i < objects.length; ++i) {
            objects[i].renderFull(out);
            out(NL, NL);
        }

        /// cross-reference table
        var xrefOffset = out.offset();
        out("xref", NL, 0, " ", objects.length + 1, NL);
        out("0000000000 65535 f ", NL);
        for (i = 0; i < objects.length; ++i) {
            out(zeropad(objects[i]._offset, 10), " 00000 n ", NL);
        }
        out(NL);

        /// trailer
        out("trailer", NL);
        out(new PDFDictionary({
            Size: objects.length + 1,
            Root: catalog,
            Info: info
        }), NL, NL);

        /// end
        out("startxref", NL, xrefOffset, NL);
        out("%%EOF", NL);

        return out.stream().offset(0);
    };

    self.loadFonts = loadFonts;
    self.loadImages = loadImages;
};

PDFDocument.prototype.getFont = function getFont (url) {
    var font = this.FONTS[url];
    if (!font) {
        font = FONT_CACHE[url];
        if (!font) {
            throw new Error("Font " + url + " has not been loaded");
        }
        if (font === true) {
            font = this.attach(new PDFStandardFont(url));
        } else {
            font = this.attach(new PDFFont(this, font));
        }
        this.FONTS[url] = font;
    }
    return font;
};

PDFDocument.prototype.getImage = function getImage (url) {
    var img = this.IMAGES[url];
    if (!img) {
        img = IMAGE_CACHE[url];
        if (!img) {
            throw new Error("Image " + url + " has not been loaded");
        }
        if (img === "ERROR") {
            return null;
        }
        img = this.IMAGES[url] = this.attach(img.asStream(this));
    }
    return img;
};

PDFDocument.prototype.getOpacityGS = function getOpacityGS (opacity, forStroke) {
    var id = parseFloat(opacity).toFixed(3);
    opacity = parseFloat(id);
    id += forStroke ? "S" : "F";
    var cache = this._opacityGSCache || (this._opacityGSCache = {});
    var gs = cache[id];
    if (!gs) {
        var props = {
            Type: _("ExtGState")
        };
        if (forStroke) {
            props.CA = opacity;
        } else {
            props.ca = opacity;
        }
        gs = this.attach(new PDFDictionary(props));
        gs._resourceName = _("GS" + (++RESOURCE_COUNTER));
        cache[id] = gs;
    }
    return gs;
};

PDFDocument.prototype.dict = function dict (props) {
    return new PDFDictionary(props);
};

PDFDocument.prototype.name = function name (str) {
    return _(str);
};

PDFDocument.prototype.stream = function stream (props, content) {
    return new PDFStream(content, props);
};

/* -----[ utils ]----- */

function pad(str, len, ch) {
    while (str.length < len) {
        str = ch + str;
    }
    return str;
}

function zeropad(n, len) {
    return pad(String(n), len, "0");
}

function hasOwnProperty(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}

var isArray = Array.isArray || function(obj) {
    return obj instanceof Array;
};

function isDate(obj) {
    return obj instanceof Date;
}

function renderArray(a, out) {
    out("[");
    if (a.length > 0) {
        out.withIndent(function(){
            for (var i = 0; i < a.length; ++i) {
                if (i > 0 && i % 8 === 0) {
                    out.indent(a[i]);
                } else {
                    out(" ", a[i]);
                }
            }
        });
        //out.indent();
    }
    out(" ]");
}

function renderDate(date, out) {
    out("(D:",
        zeropad(date.getUTCFullYear(), 4),
        zeropad(date.getUTCMonth() + 1, 2),
        zeropad(date.getUTCDate(), 2),
        zeropad(date.getUTCHours(), 2),
        zeropad(date.getUTCMinutes(), 2),
        zeropad(date.getUTCSeconds(), 2),
        "Z)");
}

function mm2pt(mm) {
    return mm * (72/25.4);
}

function cm2pt(cm) {
    return mm2pt(cm * 10);
}

function in2pt(inch)  {
    return inch * 72;
}


function unitsToPoints(x, def) {
    if (typeof x == "number") {
        return x;
    }
    if (typeof x == "string") {
        var m;
        m = /^\s*([0-9.]+)\s*(mm|cm|in|pt)\s*$/.exec(x);
        if (m) {
            var num = parseFloat(m[1]);
            if (!isNaN(num)) {
                if (m[2] == "pt") {
                    return num;
                }
                return {
                    "mm": mm2pt,
                    "cm": cm2pt,
                    "in": in2pt
                }[m[2]](num);
            }
        }
    }
    if (def != null) {
        return def;
    }
    throw new Error("Can't parse unit: " + x);
}

/* -----[ PDF basic objects ]----- */

var PDFValue = function PDFValue () {};

PDFValue.prototype.beforeRender = function beforeRender () {};

var PDFString = (function (PDFValue) {
    function PDFString(value, utf16be) {
        PDFValue.call(this);
        this.value = value;
        this.utf16be = Boolean(utf16be);
    }

    if ( PDFValue ) PDFString.__proto__ = PDFValue;
    PDFString.prototype = Object.create( PDFValue && PDFValue.prototype );
    PDFString.prototype.constructor = PDFString;

    PDFString.prototype.render = function render (out) {
        var txt = this.value;
        if (this.utf16be) {
            txt = BOM + encodeUTF16BE(txt);
            txt = txt.replace(/([\(\)\\])/g, "\\$1");
            out("(", txt, ")");
        } else {
            // out.writeString truncates charcodes to 8 bits and
            // 0x128 & 0xFF is 40, the code for open paren.
            // therefore we need to do the chopping here to make
            // sure we backslash all cases.
            var data = [ 40 ]; // open PDF string '('
            for (var i = 0; i < txt.length; ++i) {
                var code = txt.charCodeAt(i) & 0xFF;
                if (code == 40 || code == 41 || code == 92) {
                    // backslash before (, ) and \
                    data.push(92);
                }
                data.push(code);
            }
            data.push(41);  // ')' close PDF string
            out.writeData(data);
        }
    };

    PDFString.prototype.toString = function toString () {
        return this.value;
    };

    return PDFString;
}(PDFValue));

var PDFHexString = (function (PDFString) {
    function PDFHexString(value) {
        PDFString.call(this, value);
        this.value = value;
    }

    if ( PDFString ) PDFHexString.__proto__ = PDFString;
    PDFHexString.prototype = Object.create( PDFString && PDFString.prototype );
    PDFHexString.prototype.constructor = PDFHexString;

    PDFHexString.prototype.render = function render (out) {
        var this$1 = this;

        out("<");
        for (var i = 0; i < this.value.length; ++i) {
            out(zeropad(this$1.value.charCodeAt(i).toString(16), 4));
        }
        out(">");
    };

    return PDFHexString;
}(PDFString));

/// names
var PDFName = (function (PDFValue) {
    function PDFName(name) {
        PDFValue.call(this);
        this.name = name;
    }

    if ( PDFValue ) PDFName.__proto__ = PDFValue;
    PDFName.prototype = Object.create( PDFValue && PDFValue.prototype );
    PDFName.prototype.constructor = PDFName;

    PDFName.get = function get (name) {
        return _(name);
    };

    PDFName.prototype.render = function render (out) {
        out("/" + this.escape());
    };

    PDFName.prototype.escape = function escape () {
        return this.name.replace(/[^\x21-\x7E]/g, function(c){
            return "#" + zeropad(c.charCodeAt(0).toString(16), 2);
        });
    };

    PDFName.prototype.toString = function toString () {
        return this.name;
    };

    return PDFName;
}(PDFValue));

var PDFName_cache = {};

function _(name) {
    if (hasOwnProperty(PDFName_cache, name)) {
        return PDFName_cache[name];
    }
    return (PDFName_cache[name] = new PDFName(name));
}

/// dictionary

var PDFDictionary = (function (PDFValue) {
    function PDFDictionary(props) {
        PDFValue.call(this);
        this.props = props;
    }

    if ( PDFValue ) PDFDictionary.__proto__ = PDFValue;
    PDFDictionary.prototype = Object.create( PDFValue && PDFValue.prototype );
    PDFDictionary.prototype.constructor = PDFDictionary;

    PDFDictionary.prototype.render = function render (out) {
        var props = this.props, empty = true;
        out("<<");
        out.withIndent(function(){
            for (var i in props) {
                if (hasOwnProperty(props, i) && !/^_/.test(i)) {
                    empty = false;
                    out.indent(_(i), " ", props[i]);
                }
            }
        });
        if (!empty) {
            out.indent();
        }
        out(">>");
    };

    return PDFDictionary;
}(PDFValue));

/// streams

var PDFStream = (function (PDFValue) {
    function PDFStream(data, props, compress) {
        PDFValue.call(this);
        if (typeof data == "string") {
            var tmp = BinaryStream();
            tmp.write(data);
            data = tmp;
        }
        this.data = data;
        this.props = props || {};
        this.compress = compress;
    }

    if ( PDFValue ) PDFStream.__proto__ = PDFValue;
    PDFStream.prototype = Object.create( PDFValue && PDFValue.prototype );
    PDFStream.prototype.constructor = PDFStream;

    PDFStream.prototype.render = function render (out) {
        var data = this.data.get(), props = this.props;
        if (this.compress && supportsDeflate()) {
            if (!props.Filter) {
                props.Filter = [];
            } else if (!(props.Filter instanceof Array)) {
                props.Filter = [ props.Filter ];
            }
            props.Filter.unshift(_("FlateDecode"));
            data = deflate$1(data);
        }
        props.Length = data.length;
        out(new PDFDictionary(props), " stream", NL);
        out.writeData(data);
        out(NL, "endstream");
    };

    return PDFStream;
}(PDFValue));

/// catalog

var PDFCatalog = (function (PDFDictionary) {
    function PDFCatalog() {
        PDFDictionary.call(this, {
            Type: _("Catalog")
        });
    }

    if ( PDFDictionary ) PDFCatalog.__proto__ = PDFDictionary;
    PDFCatalog.prototype = Object.create( PDFDictionary && PDFDictionary.prototype );
    PDFCatalog.prototype.constructor = PDFCatalog;

    PDFCatalog.prototype.setPages = function setPages (pagesObj) {
        this.props.Pages = pagesObj;
    };

    return PDFCatalog;
}(PDFDictionary));

/// page tree

var PDFPageTree = (function (PDFDictionary) {
    function PDFPageTree() {
        PDFDictionary.call(this, {
            Type  : _("Pages"),
            Kids  : [],
            Count : 0
        });
    }

    if ( PDFDictionary ) PDFPageTree.__proto__ = PDFDictionary;
    PDFPageTree.prototype = Object.create( PDFDictionary && PDFDictionary.prototype );
    PDFPageTree.prototype.constructor = PDFPageTree;

    PDFPageTree.prototype.addPage = function addPage (pageObj) {
        this.props.Kids.push(pageObj);
        this.props.Count++;
    };

    return PDFPageTree;
}(PDFDictionary));

/// images

// JPEG

var SOF_CODES = [0xc0, 0xc1, 0xc2, 0xc3, 0xc5, 0xc6, 0xc7, 0xc9, 0xca, 0xcb, 0xcd, 0xce, 0xcf];

var PDFJpegImage = function PDFJpegImage(data) {
    // we must determine the correct color space.  we'll parse a bit
    // of the JPEG stream for this, it's still better than going
    // through the canvas.
    // https://github.com/telerik/kendo-ui-core/issues/2845
    data.offset(0);
    var width, height, colorSpace, bitsPerComponent;
    var soi = data.readShort();
    if (soi != 0xFFD8) {
        // XXX: do we have some better options here?
        throw new Error("Invalid JPEG image");
    }
    while (!data.eof()) {
        var ff = data.readByte();
        if (ff != 0xFF) {
            throw new Error("Invalid JPEG image");
        }
        var marker = data.readByte();
        var length = data.readShort();
        if (SOF_CODES.indexOf(marker) >= 0) {
            // "start of frame" marker
            bitsPerComponent = data.readByte();
            height = data.readShort();
            width = data.readShort();
            colorSpace = data.readByte();
            break;
        }
        data.skip(length - 2);
    }

    if (colorSpace == null) {
        throw new Error("Invalid JPEG image");
    }

    var props = {
        Type         : _("XObject"),
        Subtype      : _("Image"),
        Width        : width,
        Height       : height,
        BitsPerComponent : bitsPerComponent,
        Filter       : _("DCTDecode")
    };

    switch (colorSpace) {
    case 1:
        props.ColorSpace = _("DeviceGray");
        break;
    case 3:
        props.ColorSpace = _("DeviceRGB");
        break;
    case 4:
        props.ColorSpace = _("DeviceCMYK");
        props.Decode = [ 1, 0, 1, 0, 1, 0, 1, 0 ]; // invert colors
        break;
    }

    this.asStream = function() {
        data.offset(0);
        var stream = new PDFStream(data, props);
        stream._resourceName = _("I" + (++RESOURCE_COUNTER));
        return stream;
    };
};

// PDFRawImage will be used for images with transparency (PNG)

var PDFRawImage = function PDFRawImage(width, height, rgb, alpha) {
    this.asStream = function(pdf) {
        var mask = new PDFStream(alpha, {
            Type         : _("XObject"),
            Subtype      : _("Image"),
            Width        : width,
            Height       : height,
            BitsPerComponent : 8,
            ColorSpace   : _("DeviceGray")
        }, true);
        var stream = new PDFStream(rgb, {
            Type         : _("XObject"),
            Subtype      : _("Image"),
            Width        : width,
            Height       : height,
            BitsPerComponent : 8,
            ColorSpace   : _("DeviceRGB"),
            SMask        : pdf.attach(mask)
        }, true);
        stream._resourceName = _("I" + (++RESOURCE_COUNTER));
        return stream;
    };
};

/// standard fonts

var PDFStandardFont = (function (PDFDictionary) {
    function PDFStandardFont(name){
        PDFDictionary.call(this, {
            Type     : _("Font"),
            Subtype  : _("Type1"),
            BaseFont : _(name)
        });

        this._resourceName = _("F" + (++RESOURCE_COUNTER));
    }

    if ( PDFDictionary ) PDFStandardFont.__proto__ = PDFDictionary;
    PDFStandardFont.prototype = Object.create( PDFDictionary && PDFDictionary.prototype );
    PDFStandardFont.prototype.constructor = PDFStandardFont;

    PDFStandardFont.prototype.encodeText = function encodeText (str) {
        return new PDFString(String(str));
    };

    return PDFStandardFont;
}(PDFDictionary));

/// TTF fonts

var PDFFont = (function (PDFDictionary) {
    function PDFFont(pdf, font, props){
        PDFDictionary.call(this, {});

        props = this.props;
        props.Type = _("Font");
        props.Subtype = _("Type0");
        props.Encoding = _("Identity-H");

        this._pdf = pdf;
        this._font = font;
        this._sub = font.makeSubset();
        this._resourceName = _("F" + (++RESOURCE_COUNTER));

        var head = font.head;

        this.name = font.psName;
        var scale = this.scale = font.scale;
        this.bbox = [
            head.xMin * scale,
            head.yMin * scale,
            head.xMax * scale,
            head.yMax * scale
        ];

        this.italicAngle = font.post.italicAngle;
        this.ascent = font.ascent * scale;
        this.descent = font.descent * scale;
        this.lineGap = font.lineGap * scale;
        this.capHeight = font.os2.capHeight || this.ascent;
        this.xHeight = font.os2.xHeight || 0;
        this.stemV = 0;

        this.familyClass = (font.os2.familyClass || 0) >> 8;
        this.isSerif = this.familyClass >= 1 && this.familyClass <= 7;
        this.isScript = this.familyClass == 10;

        this.flags = ((font.post.isFixedPitch ? 1 : 0) |
                    (this.isSerif ? 1 << 1 : 0) |
                    (this.isScript ? 1 << 3 : 0) |
                    (this.italicAngle !== 0 ? 1 << 6 : 0) |
                    (1 << 5));
        }

    if ( PDFDictionary ) PDFFont.__proto__ = PDFDictionary;
    PDFFont.prototype = Object.create( PDFDictionary && PDFDictionary.prototype );
    PDFFont.prototype.constructor = PDFFont;

        PDFFont.prototype.encodeText = function encodeText (text) {
            return new PDFHexString(this._sub.encodeText(String(text)));
        };

        PDFFont.prototype.getTextWidth = function getTextWidth (fontSize, text) {
            var this$1 = this;

            var width = 0, codeMap = this._font.cmap.codeMap;
            for (var i = 0; i < text.length; ++i) {
                var glyphId = codeMap[text.charCodeAt(i)];
                width += this$1._font.widthOfGlyph(glyphId || 0);
            }
            return width * fontSize / 1000;
        };

        PDFFont.prototype.beforeRender = function beforeRender () {
            var self = this;
            var sub = self._sub;

            // write the TTF data
            var data = sub.render();
            var fontStream = new PDFStream(BinaryStream(data), {
                Length1: data.length
            }, true);

            var descriptor = self._pdf.attach(new PDFDictionary({
                Type         : _("FontDescriptor"),
                FontName     : _(self._sub.psName),
                FontBBox     : self.bbox,
                Flags        : self.flags,
                StemV        : self.stemV,
                ItalicAngle  : self.italicAngle,
                Ascent       : self.ascent,
                Descent      : self.descent,
                CapHeight    : self.capHeight,
                XHeight      : self.xHeight,
                FontFile2    : self._pdf.attach(fontStream)
            }));

            var cmap = sub.ncid2ogid;
            var firstChar = sub.firstChar;
            var lastChar = sub.lastChar;
            var charWidths = [];
            (function loop(i, chunk){
                if (i <= lastChar) {
                    var gid = cmap[i];
                    if (gid == null) {
                        loop(i + 1);
                    } else {
                        if (!chunk) {
                            charWidths.push(i, chunk = []);
                        }
                        chunk.push(self._font.widthOfGlyph(gid));
                        loop(i + 1, chunk);
                    }
                }
            })(firstChar);

            // As if two dictionaries weren't enough, we need another
            // one, the "descendant font".  Only that one can be of
            // Subtype CIDFontType2.  PDF is the X11 of document
            // formats: portable but full of legacy that nobody cares
            // about anymore.

            var descendant = new PDFDictionary({
                Type: _("Font"),
                Subtype: _("CIDFontType2"),
                BaseFont: _(self._sub.psName),
                CIDSystemInfo: new PDFDictionary({
                    Registry   : new PDFString("Adobe"),
                    Ordering   : new PDFString("Identity"),
                    Supplement : 0
                }),
                FontDescriptor: descriptor,
                FirstChar: firstChar,
                LastChar: lastChar,
                DW: Math.round(self._font.widthOfGlyph(0)),
                W: charWidths,
                CIDToGIDMap: self._pdf.attach(self._makeCidToGidMap())
            });

            var dict = self.props;
            dict.BaseFont = _(self._sub.psName);
            dict.DescendantFonts = [ self._pdf.attach(descendant) ];

            // Compute the ToUnicode map so that apps can extract
            // meaningful text from the PDF.
            var unimap = new PDFToUnicodeCmap(firstChar, lastChar, sub.subset);
            var unimapStream = new PDFStream(makeOutput(), null, true);
            unimapStream.data(unimap);
            dict.ToUnicode = self._pdf.attach(unimapStream);
        };

        PDFFont.prototype._makeCidToGidMap = function _makeCidToGidMap () {
            return new PDFStream(BinaryStream(this._sub.cidToGidMap()), null, true);
        };

    return PDFFont;
}(PDFDictionary));

var PDFToUnicodeCmap = (function (PDFValue) {
    function PDFToUnicodeCmap(firstChar, lastChar, map){
        PDFValue.call(this);
        this.firstChar = firstChar;
        this.lastChar = lastChar;
        this.map = map;
    }

    if ( PDFValue ) PDFToUnicodeCmap.__proto__ = PDFValue;
    PDFToUnicodeCmap.prototype = Object.create( PDFValue && PDFValue.prototype );
    PDFToUnicodeCmap.prototype.constructor = PDFToUnicodeCmap;

    PDFToUnicodeCmap.prototype.render = function render (out) {
        out.indent("/CIDInit /ProcSet findresource begin");
        out.indent("12 dict begin");
        out.indent("begincmap");
        out.indent("/CIDSystemInfo <<");
        out.indent("  /Registry (Adobe)");
        out.indent("  /Ordering (UCS)");
        out.indent("  /Supplement 0");
        out.indent(">> def");
        out.indent("/CMapName /Adobe-Identity-UCS def");
        out.indent("/CMapType 2 def");
        out.indent("1 begincodespacerange");
        out.indent("  <0000><ffff>");
        out.indent("endcodespacerange");

        var self = this;
        out.indent(self.lastChar - self.firstChar + 1, " beginbfchar");
        out.withIndent(function(){
            for (var code = self.firstChar; code <= self.lastChar; ++code) {
                var unicode = self.map[code];
                var str = ucs2encode([ unicode ]);
                out.indent("<", zeropad(code.toString(16), 4), ">", "<");
                for (var i = 0; i < str.length; ++i) {
                    out(zeropad(str.charCodeAt(i).toString(16), 4));
                }
                out(">");
            }
        });
        out.indent("endbfchar");

        out.indent("endcmap");
        out.indent("CMapName currentdict /CMap defineresource pop");
        out.indent("end");
        out.indent("end");
    };

    return PDFToUnicodeCmap;
}(PDFValue));

/// gradients

function makeHash(a) {
    return a.map(function(x){
        return isArray(x) ? makeHash(x)
            : typeof x == "number" ? (Math.round(x * 1000) / 1000).toFixed(3)
            : x;
    }).join(" ");
}

function cacheColorGradientFunction(pdf, r1, g1, b1, r2, g2, b2) {
    var hash = makeHash([ r1, g1, b1, r2, g2, b2 ]);
    var func = pdf.GRAD_COL_FUNCTIONS[hash];
    if (!func) {
        func = pdf.GRAD_COL_FUNCTIONS[hash] = pdf.attach(new PDFDictionary({
            FunctionType: 2,
            Domain: [ 0, 1 ],
            Range: [ 0, 1, 0, 1, 0, 1 ],
            N: 1,
            C0: [ r1 , g1 , b1 ],
            C1: [ r2 , g2 , b2 ]
        }));
    }
    return func;
}

function cacheOpacityGradientFunction(pdf, a1, a2) {
    var hash = makeHash([ a1, a2 ]);
    var func = pdf.GRAD_OPC_FUNCTIONS[hash];
    if (!func) {
        func = pdf.GRAD_OPC_FUNCTIONS[hash] = pdf.attach(new PDFDictionary({
            FunctionType: 2,
            Domain: [ 0, 1 ],
            Range: [ 0, 1 ],
            N: 1,
            C0: [ a1 ],
            C1: [ a2 ]
        }));
    }
    return func;
}

function makeGradientFunctions(pdf, stops) {
    var hasAlpha = false;
    var opacities = [];
    var colors = [];
    var offsets = [];
    var encode = [];
    var i, prev, cur, prevColor, curColor;
    for (i = 1; i < stops.length; ++i) {
        prev = stops[i - 1];
        cur = stops[i];
        prevColor = prev.color;
        curColor = cur.color;
        colors.push(cacheColorGradientFunction(
            pdf,
            prevColor.r, prevColor.g, prevColor.b,
            curColor.r,  curColor.g,  curColor.b
        ));
        if (prevColor.a < 1 || curColor.a < 1) {
            hasAlpha = true;
        }
        offsets.push(cur.offset);
        encode.push(0, 1);
    }
    if (hasAlpha) {
        for (i = 1; i < stops.length; ++i) {
            prev = stops[i - 1];
            cur = stops[i];
            prevColor = prev.color;
            curColor = cur.color;
            opacities.push(cacheOpacityGradientFunction(
                pdf, prevColor.a, curColor.a
            ));
        }
    }
    offsets.pop();
    return {
        hasAlpha  : hasAlpha,
        colors    : assemble(colors),
        opacities : hasAlpha ? assemble(opacities) : null
    };
    function assemble(funcs) {
        if (funcs.length == 1) {
            return funcs[0];
        }
        return {
            FunctionType: 3,
            Functions: funcs,
            Domain: [ 0, 1 ],
            Bounds: offsets,
            Encode: encode
        };
    }
}

function cacheColorGradient(pdf, isRadial, stops, coords, funcs, box) {
    var shading, hash;
    // if box is given then we have user-space coordinates, which
    // means the gradient is designed for a certain position/size
    // on page.  caching won't do any good.
    if (!box) {
        var a = [ isRadial ].concat(coords);
        stops.forEach(function(x){
            a.push(x.offset, x.color.r, x.color.g, x.color.b);
        });
        hash = makeHash(a);
        shading = pdf.GRAD_COL[hash];
    }
    if (!shading) {
        shading = new PDFDictionary({
            Type: _("Shading"),
            ShadingType: isRadial ? 3 : 2,
            ColorSpace: _("DeviceRGB"),
            Coords: coords,
            Domain: [ 0, 1 ],
            Function: funcs,
            Extend: [ true, true ]
        });
        pdf.attach(shading);
        shading._resourceName = "S" + (++RESOURCE_COUNTER);
        if (hash) {
            pdf.GRAD_COL[hash] = shading;
        }
    }
    return shading;
}

function cacheOpacityGradient(pdf, isRadial, stops, coords, funcs, box) {
    var opacity, hash;
    // if box is given then we have user-space coordinates, which
    // means the gradient is designed for a certain position/size
    // on page.  caching won't do any good.
    if (!box) {
        var a = [ isRadial ].concat(coords);
        stops.forEach(function(x){
            a.push(x.offset, x.color.a);
        });
        hash = makeHash(a);
        opacity = pdf.GRAD_OPC[hash];
    }
    if (!opacity) {
        opacity = new PDFDictionary({
            Type: _("ExtGState"),
            AIS: false,
            CA: 1,
            ca: 1,
            SMask: {
                Type: _("Mask"),
                S: _("Luminosity"),
                G: pdf.attach(new PDFStream("/a0 gs /s0 sh", {
                    Type: _("XObject"),
                    Subtype: _("Form"),
                    FormType: 1,
                    BBox: (box ? [
                        box.left, box.top + box.height, box.left + box.width, box.top
                    ] : [ 0, 1, 1, 0 ]),
                    Group: {
                        Type: _("Group"),
                        S: _("Transparency"),
                        CS: _("DeviceGray"),
                        I: true
                    },
                    Resources: {
                        ExtGState: {
                            a0: { CA: 1, ca: 1 }
                        },
                        Shading: {
                            s0: {
                                ColorSpace: _("DeviceGray"),
                                Coords: coords,
                                Domain: [ 0, 1 ],
                                ShadingType: isRadial ? 3 : 2,
                                Function: funcs,
                                Extend: [ true, true ]
                            }
                        }
                    }
                }))
            }
        });
        pdf.attach(opacity);
        opacity._resourceName = "O" + (++RESOURCE_COUNTER);
        if (hash) {
            pdf.GRAD_OPC[hash] = opacity;
        }
    }
    return opacity;
}

function cacheGradient(pdf, gradient, box) {
    var isRadial = gradient.type == "radial";
    var funcs = makeGradientFunctions(pdf, gradient.stops);
    var coords = isRadial ? [
        gradient.start.x , gradient.start.y , gradient.start.r,
        gradient.end.x   , gradient.end.y   , gradient.end.r
    ] : [
        gradient.start.x , gradient.start.y,
        gradient.end.x   , gradient.end.y
    ];
    var shading = cacheColorGradient(
        pdf, isRadial, gradient.stops, coords, funcs.colors, gradient.userSpace && box
    );
    var opacity = funcs.hasAlpha ? cacheOpacityGradient(
        pdf, isRadial, gradient.stops, coords, funcs.opacities, gradient.userSpace && box
    ) : null;
    return {
        hasAlpha: funcs.hasAlpha,
        shading: shading,
        opacity: opacity
    };
}

/// page object

var PDFPage = (function (PDFDictionary) {
    function PDFPage(pdf, props){
        PDFDictionary.call(this, props);

        this._pdf = pdf;
        this._rcount = 0;
        this._textMode = false;
        this._fontResources = {};
        this._gsResources = {};
        this._xResources = {};
        this._patResources = {};
        this._shResources = {};
        this._opacity = 1;
        this._matrix = [ 1, 0, 0, 1, 0, 0 ];
        this._annotations = [];

        this._font = null;
        this._fontSize = null;

        this._contextStack = [];

        props = this.props;
        props.Type = _("Page");
        props.ProcSet = [
            _("PDF"),
            _("Text"),
            _("ImageB"),
            _("ImageC"),
            _("ImageI")
        ];
        props.Resources = new PDFDictionary({
            Font      : new PDFDictionary(this._fontResources),
            ExtGState : new PDFDictionary(this._gsResources),
            XObject   : new PDFDictionary(this._xResources),
            Pattern   : new PDFDictionary(this._patResources),
            Shading   : new PDFDictionary(this._shResources)
        });
        props.Annots = this._annotations;
    }

    if ( PDFDictionary ) PDFPage.__proto__ = PDFDictionary;
    PDFPage.prototype = Object.create( PDFDictionary && PDFDictionary.prototype );
    PDFPage.prototype.constructor = PDFPage;

    PDFPage.prototype._out = function _out () {
        this._content.data.apply(null, arguments);
    };

    PDFPage.prototype.transform = function transform (a, b, c, d, e, f) {
        if (!isIdentityMatrix(arguments)) {
            this._matrix = mmul(arguments, this._matrix);
            this._out(a, " ", b, " ", c, " ", d, " ", e, " ", f, " cm");
            // XXX: debug
            // this._out(" % current matrix: ", this._matrix);
            this._out(NL);
        }
    };

    PDFPage.prototype.translate = function translate (dx, dy) {
        this.transform(1, 0, 0, 1, dx, dy);
    };

    PDFPage.prototype.scale = function scale (sx, sy) {
        this.transform(sx, 0, 0, sy, 0, 0);
    };

    PDFPage.prototype.rotate = function rotate (angle) {
        var cos = Math.cos(angle), sin = Math.sin(angle);
        this.transform(cos, sin, -sin, cos, 0, 0);
    };

    PDFPage.prototype.beginText = function beginText () {
        this._textMode = true;
        this._out("BT", NL);
    };

    PDFPage.prototype.endText = function endText () {
        this._textMode = false;
        this._out("ET", NL);
    };

    PDFPage.prototype._requireTextMode = function _requireTextMode () {
        if (!this._textMode) {
            throw new Error("Text mode required; call page.beginText() first");
        }
    };

    PDFPage.prototype._requireFont = function _requireFont () {
        if (!this._font) {
            throw new Error("No font selected; call page.setFont() first");
        }
    };

    PDFPage.prototype.setFont = function setFont (font, size) {
        this._requireTextMode();
        if (font == null) {
            font = this._font;
        } else if (!(font instanceof PDFFont)) {
            font = this._pdf.getFont(font);
        }
        if (size == null) {
            size = this._fontSize;
        }
        this._fontResources[font._resourceName] = font;
        this._font = font;
        this._fontSize = size;
        this._out(font._resourceName, " ", size, " Tf", NL);
    };

    PDFPage.prototype.setTextLeading = function setTextLeading (size) {
        this._requireTextMode();
        this._out(size, " TL", NL);
    };

    PDFPage.prototype.setTextRenderingMode = function setTextRenderingMode (mode) {
        this._requireTextMode();
        this._out(mode, " Tr", NL);
    };

    PDFPage.prototype.showText = function showText (text, requestedWidth) {
        this._requireFont();
        if (text.length > 1 && requestedWidth && this._font instanceof PDFFont) {
            var outputWidth = this._font.getTextWidth(this._fontSize, text);
            var scale = requestedWidth / outputWidth * 100;
            this._out(scale, " Tz ");
        }
        this._out(this._font.encodeText(text), " Tj", NL);
    };

    PDFPage.prototype.showTextNL = function showTextNL (text) {
        this._requireFont();
        this._out(this._font.encodeText(text), " '", NL);
    };

    PDFPage.prototype.addLink = function addLink (uri, box) {
        var ll = this._toPage({ x: box.left, y: box.bottom });
        var ur = this._toPage({ x: box.right, y: box.top });
        this._annotations.push(new PDFDictionary({
            Type    : _("Annot"),
            Subtype : _("Link"),
            Rect    : [ ll.x, ll.y, ur.x, ur.y ],
            Border  : [ 0, 0, 0 ],
            A       : new PDFDictionary({
                Type : _("Action"),
                S    : _("URI"),
                URI  : new PDFString(uri)
            })
        }));
    };

    PDFPage.prototype.setStrokeColor = function setStrokeColor (r, g, b) {
        this._out(r, " ", g, " ", b, " RG", NL);
    };

    PDFPage.prototype.setOpacity = function setOpacity (opacity) {
        this.setFillOpacity(opacity);
        this.setStrokeOpacity(opacity);
        this._opacity *= opacity;
    };

    PDFPage.prototype.setStrokeOpacity = function setStrokeOpacity (opacity) {
        if (opacity < 1) {
            var gs = this._pdf.getOpacityGS(this._opacity * opacity, true);
            this._gsResources[gs._resourceName] = gs;
            this._out(gs._resourceName, " gs", NL);
        }
    };

    PDFPage.prototype.setFillColor = function setFillColor (r, g, b) {
        this._out(r, " ", g, " ", b, " rg", NL);
    };

    PDFPage.prototype.setFillOpacity = function setFillOpacity (opacity) {
        if (opacity < 1) {
            var gs = this._pdf.getOpacityGS(this._opacity * opacity, false);
            this._gsResources[gs._resourceName] = gs;
            this._out(gs._resourceName, " gs", NL);
        }
    };

    PDFPage.prototype.gradient = function gradient (gradient, box) {
        this.save();
        this.rect(box.left, box.top, box.width, box.height);
        this.clip();
        if (!gradient.userSpace) {
            this.transform(box.width, 0, 0, box.height, box.left, box.top);
        }
        var g = cacheGradient(this._pdf, gradient, box);
        var sname = g.shading._resourceName, oname;
        this._shResources[sname] = g.shading;
        if (g.hasAlpha) {
            oname = g.opacity._resourceName;
            this._gsResources[oname] = g.opacity;
            this._out("/" + oname + " gs ");
        }
        this._out("/" + sname + " sh", NL);
        this.restore();
    };

    PDFPage.prototype.setDashPattern = function setDashPattern (dashArray, dashPhase) {
        this._out(dashArray, " ", dashPhase, " d", NL);
    };

    PDFPage.prototype.setLineWidth = function setLineWidth (width) {
        this._out(width, " w", NL);
    };

    PDFPage.prototype.setLineCap = function setLineCap (lineCap) {
        this._out(lineCap, " J", NL);
    };

    PDFPage.prototype.setLineJoin = function setLineJoin (lineJoin) {
        this._out(lineJoin, " j", NL);
    };

    PDFPage.prototype.setMitterLimit = function setMitterLimit (mitterLimit) {
        this._out(mitterLimit, " M", NL);
    };

    PDFPage.prototype.save = function save () {
        this._contextStack.push(this._context());
        this._out("q", NL);
    };

    PDFPage.prototype.restore = function restore () {
        this._out("Q", NL);
        this._context(this._contextStack.pop());
    };


    // paths
    PDFPage.prototype.moveTo = function moveTo (x, y) {
        this._out(x, " ", y, " m", NL);
    };

    PDFPage.prototype.lineTo = function lineTo (x, y) {
        this._out(x, " ", y, " l", NL);
    };

    PDFPage.prototype.bezier = function bezier (x1, y1, x2, y2, x3, y3) {
        this._out(x1, " ", y1, " ", x2, " ", y2, " ", x3, " ", y3, " c", NL);
    };

    PDFPage.prototype.bezier1 = function bezier1 (x1, y1, x3, y3) {
        this._out(x1, " ", y1, " ", x3, " ", y3, " y", NL);
    };

    PDFPage.prototype.bezier2 = function bezier2 (x2, y2, x3, y3) {
        this._out(x2, " ", y2, " ", x3, " ", y3, " v", NL);
    };

    PDFPage.prototype.close = function close () {
        this._out("h", NL);
    };

    PDFPage.prototype.rect = function rect (x, y, w, h) {
        this._out(x, " ", y, " ", w, " ", h, " re", NL);
    };

    PDFPage.prototype.ellipse = function ellipse (x, y, rx, ry) {
        function _X(v) { return x + v; }
        function _Y(v) { return y + v; }

        // how to get to the "magic number" is explained here:
        // http://www.whizkidtech.redprince.net/bezier/circle/kappa/
        var k = 0.5522847498307936;

        this.moveTo(_X(0), _Y(ry));
        this.bezier(
            _X(rx * k) , _Y(ry),
            _X(rx)     , _Y(ry * k),
            _X(rx)     , _Y(0)
        );
        this.bezier(
            _X(rx)     , _Y(-ry * k),
            _X(rx * k) , _Y(-ry),
            _X(0)      , _Y(-ry)
        );
        this.bezier(
            _X(-rx * k) , _Y(-ry),
            _X(-rx)     , _Y(-ry * k),
            _X(-rx)     , _Y(0)
        );
        this.bezier(
            _X(-rx)     , _Y(ry * k),
            _X(-rx * k) , _Y(ry),
            _X(0)       , _Y(ry)
        );
    };

    PDFPage.prototype.circle = function circle (x, y, r) {
        this.ellipse(x, y, r, r);
    };

    PDFPage.prototype.stroke = function stroke () {
        this._out("S", NL);
    };

    PDFPage.prototype.nop = function nop () {
        this._out("n", NL);
    };

    PDFPage.prototype.clip = function clip () {
        this._out("W n", NL);
    };

    PDFPage.prototype.clipStroke = function clipStroke () {
        this._out("W S", NL);
    };

    PDFPage.prototype.closeStroke = function closeStroke () {
        this._out("s", NL);
    };

    PDFPage.prototype.fill = function fill () {
        this._out("f", NL);
    };

    PDFPage.prototype.fillStroke = function fillStroke () {
        this._out("B", NL);
    };

    PDFPage.prototype.drawImage = function drawImage (url) {
        var img = this._pdf.getImage(url);
        if (img) { // the result can be null for a cross-domain image
            this._xResources[img._resourceName] = img;
            this._out(img._resourceName, " Do", NL);
        }
    };

    PDFPage.prototype.comment = function comment (txt) {
        var self = this;
        txt.split(/\r?\n/g).forEach(function(line){
            self._out("% ", line, NL);
        });
    };

    // internal
    PDFPage.prototype._context = function _context (val) {
        if (val != null) {
            this._opacity = val.opacity;
            this._matrix = val.matrix;
        } else {
            return {
                opacity: this._opacity,
                matrix: this._matrix
            };
        }
    };

    PDFPage.prototype._toPage = function _toPage (p) {
        var m = this._matrix;
        var a = m[0], b = m[1], c = m[2], d = m[3], e = m[4], f = m[5];
        return {
            x: a*p.x + c*p.y + e,
            y: b*p.x + d*p.y + f
        };
    };

    return PDFPage;
}(PDFDictionary));

function unquote(str) {
    return str.replace(/^\s*(['"])(.*)\1\s*$/, "$2");
}

function parseFontDef(fontdef) {
    // XXX: this is very crude for now and buggy.  Proper parsing is quite involved.
    var rx = /^\s*((normal|italic)\s+)?((normal|small-caps)\s+)?((normal|bold|\d+)\s+)?(([0-9.]+)(px|pt))(\/(([0-9.]+)(px|pt)|normal))?\s+(.*?)\s*$/i;
    var m = rx.exec(fontdef);
    if (!m) {
        return { fontSize: 12, fontFamily: "sans-serif" };
    }
    var fontSize = m[8] ? parseInt(m[8], 10) : 12;
    return {
        italic     : m[2] && m[2].toLowerCase() == "italic",
        variant    : m[4],
        bold       : m[6] && /bold|700/i.test(m[6]),
        fontSize   : fontSize,
        lineHeight : m[12] ? m[12] == "normal" ? fontSize : parseInt(m[12], 10) : null,
        fontFamily : m[14].split(/\s*,\s*/g).map(unquote)
    };
}

function getFontURL(style) {
    function mkFamily(name) {
        if (style.bold) {
            name += "|bold";
        }
        if (style.italic) {
            name += "|italic";
        }
        return name.toLowerCase();
    }
    var fontFamily = style.fontFamily;
    var name, url;
    if (fontFamily instanceof Array) {
        for (var i = 0; i < fontFamily.length; ++i) {
            name = mkFamily(fontFamily[i]);
            url = FONT_MAPPINGS[name];
            if (url) {
                break;
            }
        }
    } else {
        url = FONT_MAPPINGS[fontFamily.toLowerCase()];
    }
    while (typeof url == "function") {
        url = url();
    }
    if (!url) {
        url = "Times-Roman";
    }
    return url;
}

var FONT_MAPPINGS = {
    "serif"                    : "Times-Roman",
    "serif|bold"               : "Times-Bold",
    "serif|italic"             : "Times-Italic",
    "serif|bold|italic"        : "Times-BoldItalic",
    "sans-serif"               : "Helvetica",
    "sans-serif|bold"          : "Helvetica-Bold",
    "sans-serif|italic"        : "Helvetica-Oblique",
    "sans-serif|bold|italic"   : "Helvetica-BoldOblique",
    "monospace"                : "Courier",
    "monospace|bold"           : "Courier-Bold",
    "monospace|italic"         : "Courier-Oblique",
    "monospace|bold|italic"    : "Courier-BoldOblique",
    "zapfdingbats"             : "ZapfDingbats",
    "zapfdingbats|bold"        : "ZapfDingbats",
    "zapfdingbats|italic"      : "ZapfDingbats",
    "zapfdingbats|bold|italic" : "ZapfDingbats"
};

function fontAlias(alias, name) {
    alias = alias.toLowerCase();
    FONT_MAPPINGS[alias] = function() {
        return FONT_MAPPINGS[name];
    };
    FONT_MAPPINGS[alias + "|bold"] = function() {
        return FONT_MAPPINGS[name + "|bold"];
    };
    FONT_MAPPINGS[alias + "|italic"] = function() {
        return FONT_MAPPINGS[name + "|italic"];
    };
    FONT_MAPPINGS[alias + "|bold|italic"] = function() {
        return FONT_MAPPINGS[name + "|bold|italic"];
    };
}

// Let's define some common names to an appropriate replacement.
// These are overridable via pdf.defineFont, should the user want to
// include the proper versions.

fontAlias("Times New Roman" , "serif");
fontAlias("Courier New"     , "monospace");
fontAlias("Arial"           , "sans-serif");
fontAlias("Helvetica"       , "sans-serif");
fontAlias("Verdana"         , "sans-serif");
fontAlias("Tahoma"          , "sans-serif");
fontAlias("Georgia"         , "sans-serif");
fontAlias("Monaco"          , "monospace");
fontAlias("Andale Mono"     , "monospace");

function defineFont(name, url) {
    if (arguments.length == 1) {
        for (var i in name) {
            if (hasOwnProperty(name, i)) {
                defineFont(i, name[i]);
            }
        }
    } else {
        name = name.toLowerCase();
        FONT_MAPPINGS[name] = url;

        // special handling for DejaVu fonts: if they get defined,
        // let them also replace the default families, for good
        // Unicode support out of the box.
        switch (name) {
          case "dejavu sans"               : FONT_MAPPINGS["sans-serif"]              = url; break;
          case "dejavu sans|bold"          : FONT_MAPPINGS["sans-serif|bold"]         = url; break;
          case "dejavu sans|italic"        : FONT_MAPPINGS["sans-serif|italic"]       = url; break;
          case "dejavu sans|bold|italic"   : FONT_MAPPINGS["sans-serif|bold|italic"]  = url; break;
          case "dejavu serif"              : FONT_MAPPINGS["serif"]                   = url; break;
          case "dejavu serif|bold"         : FONT_MAPPINGS["serif|bold"]              = url; break;
          case "dejavu serif|italic"       : FONT_MAPPINGS["serif|italic"]            = url; break;
          case "dejavu serif|bold|italic"  : FONT_MAPPINGS["serif|bold|italic"]       = url; break;
          case "dejavu mono"               : FONT_MAPPINGS["monospace"]               = url; break;
          case "dejavu mono|bold"          : FONT_MAPPINGS["monospace|bold"]          = url; break;
          case "dejavu mono|italic"        : FONT_MAPPINGS["monospace|italic"]        = url; break;
          case "dejavu mono|bold|italic"   : FONT_MAPPINGS["monospace|bold|italic"]   = url; break;
        }
    }
}

function mmul(a, b) {
    var a1 = a[0], b1 = a[1], c1 = a[2], d1 = a[3], e1 = a[4], f1 = a[5];
    var a2 = b[0], b2 = b[1], c2 = b[2], d2 = b[3], e2 = b[4], f2 = b[5];
    return [
        a1*a2 + b1*c2,          a1*b2 + b1*d2,
        c1*a2 + d1*c2,          c1*b2 + d1*d2,
        e1*a2 + f1*c2 + e2,     e1*b2 + f1*d2 + f2
    ];
}

function isIdentityMatrix(m) {
    return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0;
}

var TEXT_RENDERING_MODE = {
    fill           : 0,
    stroke         : 1,
    fillAndStroke  : 2,
    invisible      : 3,
    fillAndClip    : 4,
    strokeAndClip  : 5,
    fillStrokeClip : 6,
    clip           : 7
};

/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
/* eslint-disable no-param-reassign, no-var, block-scoped-var */

var DEFAULT_IMAGE_DPI = 300;
var TEXT_RENDERING_MODE$1 = TEXT_RENDERING_MODE;

var DASH_PATTERNS = {
    dash           : [ 4 ],
    dashDot        : [ 4, 2, 1, 2 ],
    dot            : [ 1, 2 ],
    longDash       : [ 8, 2 ],
    longDashDot    : [ 8, 2, 1, 2 ],
    longDashDotDot : [ 8, 2, 1, 2, 1, 2 ],
    solid          : []
};

var LINE_CAP = {
    butt   : 0,
    round  : 1,
    square : 2
};

var LINE_JOIN = {
    miter : 0,
    round : 1,
    bevel : 2
};

function render$1(group, callback) {
    var fonts = [], images = {}, options = group.options;

    function getOption(name, defval, hash) {
        if (!hash) {
            hash = options;
        }
        if (hash.pdf && hash.pdf[name] != null) {
            return hash.pdf[name];
        }
        return defval;
    }

    var multiPage = getOption("multiPage");
    var imgDPI = getOption("imgDPI", DEFAULT_IMAGE_DPI);

    clearImageCache();

    group.traverse(function(element){
        dispatch({
            Image: function(element) {
                var url = element.src();
                var size = element.bbox().size;
                if (imgDPI) {
                    var prev = images[url];
                    size = {
                      width: Math.ceil(size.width * imgDPI / 72),
                      height: Math.ceil(size.height * imgDPI / 72)
                    };

                    if (prev) {
                      size.width = Math.max(prev.width, size.width);
                      size.height = Math.max(prev.height, size.height);
                    }
                }

                images[url] = size;
            },
            Text: function(element) {
                var style = parseFontDef(element.options.font);
                var url = getFontURL(style);
                if (fonts.indexOf(url) < 0) {
                    fonts.push(url);
                }
            }
        }, element);
    });

    function doIt() {
        if (--count > 0) {
            return;
        }

        var pdf = new (PDFDocument)({
            producer  : getOption("producer"),
            title     : getOption("title"),
            author    : getOption("author"),
            subject   : getOption("subject"),
            keywords  : getOption("keywords"),
            creator   : getOption("creator"),
            date      : getOption("date"),

            autoPrint : getOption("autoPrint")
        });

        function drawPage(group) {
            var options = group.options;

            var tmp = optimize(group);
            var bbox = tmp.bbox;
            group = tmp.root;
            // var tmp, bbox;

            var paperSize = getOption("paperSize", getOption("paperSize", "auto"), options), addMargin = false;
            if (paperSize == "auto") {
                if (bbox) {
                    var size = bbox.getSize();
                    paperSize = [ size.width, size.height ];
                    addMargin = true;
                    var origin = bbox.getOrigin();
                    tmp = new Group();
                    tmp.transform(new Matrix(1, 0, 0, 1, -origin.x, -origin.y));
                    tmp.append(group);
                    group = tmp;
                }
                else {
                    paperSize = "A4";
                }
            }

            var page;
            page = pdf.addPage({
                paperSize : paperSize,
                margin    : getOption("margin", getOption("margin"), options),
                addMargin : addMargin,
                landscape : getOption("landscape", getOption("landscape", false), options)
            });
            drawElement(group, page, pdf);
        }

        if (multiPage) {
            group.children.forEach(drawPage);
        } else {
            drawPage(group);
        }

        callback(pdf.render(), pdf);
    }

    var count = 2;
    loadFonts(fonts, doIt);
    loadImages(images, doIt, {
        jpegQuality : getOption("jpegQuality", 0.92),
        keepPNG     : getOption("keepPNG", false)
    });
}

function toDataURL(group, callback) {
    render$1(group, function(data){
        callback("data:application/pdf;base64," + data.base64());
    });
}

function toBlob(group, callback) {
    render$1(group, function(data){
        callback(new window.Blob([ data.get() ], { type: "application/pdf" }));
    });
}

function saveAs$1(group, filename, proxy, callback) {
    // XXX: Safari has Blob, but does not support the download attribute
    //      so we'd end up converting to dataURL and using the proxy anyway.
    if (window.Blob && !support.browser.safari) {
        toBlob(group, function(blob){
            saveAs({ dataURI: blob, fileName: filename });
            if (callback) {
                callback(blob);
            }
        });
    } else {
        toDataURL(group, function(dataURL){
            saveAs({ dataURI: dataURL, fileName: filename, proxyURL: proxy });
            if (callback) {
                callback(dataURL);
            }
        });
    }
}

function dispatch(handlers, element) {
    var handler = handlers[element.nodeType];
    if (handler) {
        return handler.call.apply(handler, arguments);
    }
    return element;
}

function drawElement(element, page, pdf) {
    if (element.options._pdfDebug) {
        page.comment("BEGIN: " + element.options._pdfDebug);
    }

    var transform$$1 = element.transform();
    var opacity = element.opacity();

    page.save();

    if (opacity != null && opacity < 1) {
        page.setOpacity(opacity);
    }

    setStrokeOptions(element, page, pdf);
    setFillOptions(element, page, pdf);

    if (transform$$1) {
        var m = transform$$1.matrix();
        page.transform(m.a, m.b, m.c, m.d, m.e, m.f);
    }

    setClipping(element, page, pdf);

    dispatch({
        Path      : drawPath,
        MultiPath : drawMultiPath,
        Circle    : drawCircle,
        Arc       : drawArc,
        Text      : drawText,
        Image     : drawImage$1,
        Group     : drawGroup,
        Rect      : drawRect
    }, element, page, pdf);

    page.restore();

    if (element.options._pdfDebug) {
        page.comment("END: " + element.options._pdfDebug);
    }
}

function setStrokeOptions(element, page) {
    var stroke = element.stroke && element.stroke();
    if (!stroke) {
        return;
    }

    var color = stroke.color;
    if (color) {
        color = parseColor$1(color);
        if (color == null) {
            return; // no stroke
        }
        page.setStrokeColor(color.r, color.g, color.b);
        if (color.a != 1) {
            page.setStrokeOpacity(color.a);
        }
    }

    var width = stroke.width;
    if (width != null) {
        if (width === 0) {
            return; // no stroke
        }
        page.setLineWidth(width);
    }

    var dashType = stroke.dashType;
    if (dashType) {
        page.setDashPattern(DASH_PATTERNS[dashType], 0);
    }

    var lineCap = stroke.lineCap;
    if (lineCap) {
        page.setLineCap(LINE_CAP[lineCap]);
    }

    var lineJoin = stroke.lineJoin;
    if (lineJoin) {
        page.setLineJoin(LINE_JOIN[lineJoin]);
    }

    var opacity = stroke.opacity;
    if (opacity != null) {
        page.setStrokeOpacity(opacity);
    }
}

function setFillOptions(element, page) {
    var fill = element.fill && element.fill();
    if (!fill) {
        return;
    }

    if (fill instanceof Gradient) {
        return;
    }

    var color = fill.color;
    if (color) {
        color = parseColor$1(color);
        if (color == null) {
            return; // no fill
        }
        page.setFillColor(color.r, color.g, color.b);
        if (color.a != 1) {
            page.setFillOpacity(color.a);
        }
    }

    var opacity = fill.opacity;
    if (opacity != null) {
        page.setFillOpacity(opacity);
    }
}

function setClipping(element, page, pdf) {
    // XXX: only Path supported at the moment.
    var clip = element.clip();
    if (clip) {
        _drawPath(clip, page, pdf);
        page.clip();
        // page.setStrokeColor(Math.random(), Math.random(), Math.random());
        // page.setLineWidth(1);
        // page.stroke();
    }
}

function shouldDraw(thing) {
    return (thing &&
            (thing instanceof Gradient ||
             (thing.color && !/^(none|transparent)$/i.test(thing.color) &&
              (thing.width == null || thing.width > 0) &&
              (thing.opacity == null || thing.opacity > 0))));
}

function maybeGradient(element, page, pdf, stroke) {
    var fill = element.fill();
    if (fill instanceof Gradient) {
        if (stroke) {
            page.clipStroke();
        } else {
            page.clip();
        }
        var isRadial = fill instanceof RadialGradient;
        var start, end;
        if (isRadial) {
            start = { x: fill.center().x , y: fill.center().y , r: 0 };
            end   = { x: fill.center().x , y: fill.center().y , r: fill.radius() };
        } else {
            start = { x: fill.start().x , y: fill.start().y };
            end   = { x: fill.end().x   , y: fill.end().y   };
        }

        var stops = fill.stops.elements().map(function(stop){
            var offset = stop.offset();
            if (/%$/.test(offset)) {
                offset = parseFloat(offset) / 100;
            } else {
                offset = parseFloat(offset);
            }
            var color = parseColor$1(stop.color());
            color.a *= stop.opacity();
            return {
                offset: offset,
                color: color
            };
        });

        // Duplicats first and last stop to fix
        // https://github.com/telerik/kendo-ui-core/issues/1782
        stops.unshift(stops[0]);
        stops.push(stops[stops.length - 1]);

        var gradient = {
            userSpace : fill.userSpace(),
            type      : isRadial ? "radial" : "linear",
            start     : start,
            end       : end,
            stops     : stops
        };
        var box = element.rawBBox();
        var tl = box.topLeft(), size = box.getSize();
        box = {
            left   : tl.x,
            top    : tl.y,
            width  : size.width,
            height : size.height
        };
        page.gradient(gradient, box);
        return true;
    }
}

function maybeFillStroke(element, page, pdf) {
    if (shouldDraw(element.fill()) && shouldDraw(element.stroke())) {
        if (!maybeGradient(element, page, pdf, true)) {
            page.fillStroke();
        }
    } else if (shouldDraw(element.fill())) {
        if (!maybeGradient(element, page, pdf, false)) {
            page.fill();
        }
    } else if (shouldDraw(element.stroke())) {
        page.stroke();
    } else {
        // we should not get here; the path should have been
        // optimized away.  but let's be prepared.
        page.nop();
    }
}

function maybeDrawRect(path, page) {
    var segments = path.segments;
    if (segments.length == 4 && path.options.closed) {
        // detect if this path looks like a rectangle parallel to the axis
        var a = [];
        for (var i = 0; i < segments.length; ++i) {
            if (segments[i].controlIn()) { // has curve?
                return false;
            }
            a[i] = segments[i].anchor();
        }
        // it's a rectangle if the y/x/y/x or x/y/x/y coords of
        // consecutive points are the same.
        var isRect = (
            a[0].y == a[1].y && a[1].x == a[2].x && a[2].y == a[3].y && a[3].x == a[0].x
        ) || (
            a[0].x == a[1].x && a[1].y == a[2].y && a[2].x == a[3].x && a[3].y == a[0].y
        );
        if (isRect) {
            // this saves a bunch of instructions in PDF:
            // moveTo, lineTo, lineTo, lineTo, close -> rect.
            page.rect(a[0].x, a[0].y,
                      a[2].x - a[0].x /*width*/,
                      a[2].y - a[0].y /*height*/);
            return true;
        }
    }
}

function _drawPath(element, page, pdf) {
    var segments = element.segments;
    if (segments.length === 0) {
        return;
    }
    if (!maybeDrawRect(element, page, pdf)) {
        for (var prev, i = 0; i < segments.length; ++i) {
            var seg = segments[i];
            var anchor = seg.anchor();
            if (!prev) {
                page.moveTo(anchor.x, anchor.y);
            } else {
                var prevOut = prev.controlOut();
                var controlIn = seg.controlIn();
                if (prevOut && controlIn) {
                    page.bezier(
                        prevOut.x   , prevOut.y,
                        controlIn.x , controlIn.y,
                        anchor.x    , anchor.y
                    );
                } else {
                    page.lineTo(anchor.x, anchor.y);
                }
            }
            prev = seg;
        }
        if (element.options.closed) {
            page.close();
        }
    }
}

function drawPath(element, page, pdf) {
    _drawPath(element, page, pdf);
    maybeFillStroke(element, page, pdf);
}

function drawMultiPath(element, page, pdf) {
    var paths = element.paths;
    for (var i = 0; i < paths.length; ++i) {
        _drawPath(paths[i], page, pdf);
    }
    maybeFillStroke(element, page, pdf);
}

function drawCircle(element, page, pdf) {
    var g = element.geometry();
    page.circle(g.center.x, g.center.y, g.radius);
    maybeFillStroke(element, page, pdf);
}

function drawArc(element, page, pdf) {
    var points = element.geometry().curvePoints();
    page.moveTo(points[0].x, points[0].y);
    for (var i = 1; i < points.length;) {
        page.bezier(
            points[i].x, points[i++].y,
            points[i].x, points[i++].y,
            points[i].x, points[i++].y
        );
    }
    maybeFillStroke(element, page, pdf);
}

function drawText(element, page) {
    var style = parseFontDef(element.options.font);
    var pos = element._position;
    var mode;
    if (element.fill() && element.stroke()) {
        mode = TEXT_RENDERING_MODE$1.fillAndStroke;
    } else if (element.fill()) {
        mode = TEXT_RENDERING_MODE$1.fill;
    } else if (element.stroke()) {
        mode = TEXT_RENDERING_MODE$1.stroke;
    }

    page.transform(1, 0, 0, -1, pos.x, pos.y + style.fontSize);
    page.beginText();
    page.setFont(getFontURL(style), style.fontSize);
    page.setTextRenderingMode(mode);
    page.showText(element.content(), element._pdfRect ? element._pdfRect.width() : null);
    page.endText();
}

function drawGroup(element, page, pdf) {
    if (element._pdfLink) {
        page.addLink(element._pdfLink.url, element._pdfLink);
    }
    var children = element.children;
    for (var i = 0; i < children.length; ++i) {
        drawElement(children[i], page, pdf);
    }
}

function drawImage$1(element, page) {
    var url = element.src();
    if (!url) {
        return;
    }

    var rect = element.rect();
    var tl = rect.getOrigin();
    var sz = rect.getSize();
    page.transform(sz.width, 0, 0, -sz.height, tl.x, tl.y + sz.height);
    page.drawImage(url);
}

function drawRect(element, page, pdf) {
    var geometry = element.geometry();
    var ref = geometry.cornerRadius;
    var rx = ref[0];
    var ry = ref[1];
    if (rx === 0 && ry === 0) {
        page.rect(geometry.origin.x, geometry.origin.y, geometry.size.width, geometry.size.height);
        maybeFillStroke(element, page, pdf);
    } else {
        drawPath(Path.fromRect(geometry, element.options), page, pdf);
    }
}

function parseColor$1(value) {
    var color = parseColor(value, true);
    return color ? color.toRGB() : null;
}

function optimize(root) {
    var clipbox = false;
    var matrix = Matrix.unit();
    var currentBox = null;
    var changed;
    do {
        changed = false;
        root = opt(root);
    } while (root && changed);
    return { root: root, bbox: currentBox };

    function change(newShape) {
        changed = true;
        return newShape;
    }

    function visible(shape) {
        return (shape.visible() && shape.opacity() > 0 &&
                ( shouldDraw(shape.fill()) ||
                  shouldDraw(shape.stroke()) ));
    }

    function optArray(a) {
        var b = [];
        for (var i = 0; i < a.length; ++i) {
            var el = opt(a[i]);
            if (el != null) {
                b.push(el);
            }
        }
        return b;
    }

    function withClipping(shape, f) {
        var saveclipbox = clipbox;
        var savematrix = matrix;

        if (shape.transform()) {
            matrix = matrix.multiplyCopy(shape.transform().matrix());
        }

        var clip = shape.clip();
        if (clip) {
            clip = clip.bbox();
            if (clip) {
                clip = clip.bbox(matrix);
                clipbox = clipbox ? Rect.intersect(clipbox, clip) : clip;
            }
        }

        try {
            return f();
        }
        finally {
            clipbox = saveclipbox;
            matrix = savematrix;
        }
    }

    function inClipbox(shape) {
        if (clipbox == null) {
            return false;
        }
        var box = shape.rawBBox().bbox(matrix);
        if (clipbox && box) {
            box = Rect.intersect(box, clipbox);
        }
        return box;
    }

    function opt(shape) {
        return withClipping(shape, function(){
            if (!(shape instanceof Group || shape instanceof MultiPath)) {
                var box = inClipbox(shape);
                if (!box) {
                    return change(null);
                }
                currentBox = currentBox ? Rect.union(currentBox, box) : box;
            }
            return dispatch({
                Path: function(shape) {
                    if (shape.segments.length === 0 || !visible(shape)) {
                        return change(null);
                    }
                    return shape;
                },
                MultiPath: function(shape) {
                    if (!visible(shape)) {
                        return change(null);
                    }
                    var el = new MultiPath(shape.options);
                    el.paths = optArray(shape.paths);
                    if (el.paths.length === 0) {
                        return change(null);
                    }
                    return el;
                },
                Circle: function(shape) {
                    if (!visible(shape)) {
                        return change(null);
                    }
                    return shape;
                },
                Arc: function(shape) {
                    if (!visible(shape)) {
                        return change(null);
                    }
                    return shape;
                },
                Text: function(shape) {
                    if (!/\S/.test(shape.content()) || !visible(shape)) {
                        return change(null);
                    }
                    return shape;
                },
                Image: function(shape) {
                    if (!(shape.visible() && shape.opacity() > 0)) {
                        return change(null);
                    }
                    return shape;
                },
                Group: function(shape) {
                    if (!(shape.visible() && shape.opacity() > 0)) {
                        return change(null);
                    }
                    var el = new Group(shape.options);
                    el.children = optArray(shape.children);
                    el._pdfLink = shape._pdfLink;
                    if (shape !== root && el.children.length === 0 && !shape._pdfLink) {
                        return change(null);
                    }
                    return el;
                },
                Rect: function(shape) {
                    if (!visible(shape)) {
                        return change(null);
                    }
                    return shape;
                }
            }, shape);
        });
    }
}

function exportPDF(group, options) {
    var promise = createPromise();

    for (var i in options) {
        if (i == "margin" && group.options.pdf && group.options.pdf._ignoreMargin) {
            // This hackish option is set by the page breaking code in drawDOM.  The idea is
            // that margin is already taken into account there (that's required to do proper
            // page breaking) and we don't want to set it again here, as it would double the
            // top-left margin, and truncate the content on bottom/right.
            continue;
        }
        group.options.set("pdf." + i, options[i]);
    }

    toDataURL(group, promise.resolve);

    return promise;
}

// XXX: the duplication is in order to keep exportPDF return a data
// URI, which is what previous versions do.  Currently only IE9 does
// not support Blob, IMO we should switch to Blob by default
// everywhere.
function exportPDFToBlob(group, options) {
    var promise = createPromise();

    for (var i in options) {
        if (i == "margin" && group.options.pdf && group.options.pdf._ignoreMargin) {
            // This hackish option is set by the page breaking code in drawDOM.  The idea is
            // that margin is already taken into account there (that's required to do proper
            // page breaking) and we don't want to set it again here, as it would double the
            // top-left margin, and truncate the content on bottom/right.
            continue;
        }
        group.options.set("pdf." + i, options[i]);
    }

    if (window.Blob && !support.browser.safari) {
        toBlob(group, promise.resolve);
    } else {
        toDataURL(group, promise.resolve);
    }

    return promise;
}



var pdf = Object.freeze({
	Document: PDFDocument,
	BinaryStream: BinaryStream,
	defineFont: defineFont,
	parseFontDef: parseFontDef,
	getFontURL: getFontURL,
	loadFonts: loadFonts,
	loadImages: loadImages,
	getPaperOptions: getPaperOptions,
	clearImageCache: clearImageCache,
	TEXT_RENDERING_MODE: TEXT_RENDERING_MODE,
	exportPDF: exportPDF,
	exportPDFToBlob: exportPDFToBlob,
	saveAs: saveAs$1,
	toDataURL: toDataURL,
	toBlob: toBlob,
	render: render$1
});

/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty, yoda */
/* eslint-disable no-param-reassign, no-var, block-scoped-var */

var browser$3 = support.browser || {};
/*

  XXX: to test:

  - cloneNodes function:
    - drawing document containing canvas with page breaking
    - drawing document with named radio <input>-s (should not clear selection)
    - IE9/IE10 don't support el.dataset; do they copy user data?

  - repeating table headers/footers on page breaking

  - forceBreak, keepTogether

  - avoidLinks

 */

/* -----[ local vars ]----- */

function slice$1$1(thing) {
    return Array.prototype.slice.call(thing);
}

var KENDO_PSEUDO_ELEMENT = "KENDO-PSEUDO-ELEMENT";

var IMAGE_CACHE$1 = {};

var nodeInfo = {};
nodeInfo._root = nodeInfo;

/* -----[ Custom Text node to speed up rendering in PDF ]----- */

var inBrowser = typeof window !== 'undefined';
var microsoft = inBrowser ? browser$3.msie || browser$3.edge : false;

var TextRect = (function (Text$$1) {
  function TextRect(str, rect, options) {
        Text$$1.call(this, str, rect.getOrigin(), options);
        this._pdfRect = rect;
    }

  if ( Text$$1 ) TextRect.__proto__ = Text$$1;
  TextRect.prototype = Object.create( Text$$1 && Text$$1.prototype );
  TextRect.prototype.constructor = TextRect;
    TextRect.prototype.rect = function rect () {
        // this is the crux of it: we can avoid a call to
        // measure(), which is what the base class does, since we
        // already know the rect.  measure() is s-l-o-w.
        return this._pdfRect;
    };
    TextRect.prototype.rawBBox = function rawBBox () {
        // also let's avoid creating a new rectangle.
        return this._pdfRect;
    };

  return TextRect;
}(Text));

function addClass(el, cls) {
    if (el.classList) {
        el.classList.add(cls);
    } else {
        el.className += " " + cls;
    }
}

function removeClass(el, cls) {
    if (el.classList) {
        el.classList.remove(cls);
    } else {
        el.className = el.className.split(/\s+/).reduce(function(a, word){
            if (word != cls) {
                a.push(word);
            }
            return a;
        }, []).join(" ");
    }
}

function setCSS(el, styles) {
    Object.keys(styles).forEach(function(key){
        el.style[key] = styles[key];
    });
}

var matches = typeof Element !== "undefined" && Element.prototype && (function(p){
    if (p.matches) {
        return function(el, selector) { return el.matches(selector); };
    }
    if (p.webkitMatchesSelector) {
        return function(el, selector) { return el.webkitMatchesSelector(selector); };
    }
    if (p.mozMatchesSelector) {
        return function(el, selector) { return el.mozMatchesSelector(selector); };
    }
    if (p.msMatchesSelector) {
        return function(el, selector) { return el.msMatchesSelector(selector); };
    }
    return function(s) {
	return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
    };
})(Element.prototype);

function closest(el, selector) {
    if (el.closest) {
        return el.closest(selector);
    }
    // IE: stringifying rather than simply comparing with `document`,
    // which is not iframe-proof and fails in editor export —
    // https://github.com/telerik/kendo/issues/6721
    while (el && !/^\[object (?:HTML)?Document\]$/.test(String(el))) {
        if (el.nodeType == 1 /* Element */ && matches(el, selector)) {
            return el;
        }
        el = el.parentNode;
    }
}

// clone nodes ourselves, so that we redraw <canvas> (DOM or
// jQuery clone will not)
var cloneNodes = (function($){
    if ($) {
        // if we have Kendo and jQuery, use this version as it will
        // maintain proper links between cloned element and Kendo
        // widgets (i.e. it clones jQuery data(), which isn't the same
        // as element's data attributes).
        // https://github.com/telerik/kendo-ui-core/issues/2750
        return function cloneNodes(el) {
            var clone = el.cloneNode(false);
            if (el.nodeType == 1 /* Element */) {
                var $el = $(el), $clone = $(clone), i;
                var data = $el.data();
                for (i in data) {
                    $clone.data(i, data[i]);
                }
                if (/^canvas$/i.test(el.tagName)) {
                    clone.getContext("2d").drawImage(el, 0, 0);
                } else if (/^(?:input|select|textarea|option)$/i.test(el.tagName)) {
                    // drop the name attributes so that we don't affect the selection of the
                    // original nodes (i.e. checked status of radio buttons) when we insert our copy
                    // into the DOM.  https://github.com/telerik/kendo/issues/5409
                    clone.removeAttribute("id");
                    clone.removeAttribute("name");
                    if (!/^textarea$/i.test(el.tagName)) {
                        clone.value = el.value;
                    }
                    clone.checked = el.checked;
                    clone.selected = el.selected;
                }
                for (i = el.firstChild; i; i = i.nextSibling) {
                    clone.appendChild(cloneNodes(i));
                }
            }
            return clone;
        };
    } else {
        // the no-jQuery version
        return function cloneNodes(el) {
            var clone = (function dive(node){
                var clone = node.cloneNode(false);
                if (node._kendoExportVisual) {
                    clone._kendoExportVisual = node._kendoExportVisual;
                }
                for (var i = node.firstChild; i; i = i.nextSibling) {
                    clone.appendChild(dive(i));
                }
                return clone;
            })(el);

            // re-draw canvases - https://github.com/telerik/kendo/issues/4872
            var canvases = el.querySelectorAll("canvas");
            if (canvases.length) {
                slice$1$1(clone.querySelectorAll("canvas")).forEach(function (canvas$$1, i) {
                    canvas$$1.getContext("2d").drawImage(canvases[i], 0, 0);
                });
            }

            // remove "name" attributes from <input> elements -
            // https://github.com/telerik/kendo/issues/5409
            var orig = el.querySelectorAll("input, select, textarea, option");
            slice$1$1(clone.querySelectorAll("input, select, textarea, option")).forEach(function (el, i) {
                el.removeAttribute("id");
                el.removeAttribute("name");
                if (!/^textarea$/i.test(el.tagName)) {
                    el.value = orig[i].value;
                }
                el.checked = orig[i].checked;
                el.selected = orig[i].selected;
            });

            return clone;
        };
    }
})(typeof window !== "undefined" && window.kendo && window.kendo.jQuery);

function getXY(thing) {
    if (typeof thing == "number") {
        return { x: thing, y: thing };
    }
    if (Array.isArray(thing)) {
        return { x: thing[0], y: thing[1] };
    }
    return { x: thing.x, y: thing.y };
}

function drawDOM(element, options) {
    if (!options) {
        options = {};
    }
    var promise = createPromise();

    if (!element) {
        return promise.reject("No element to export");
    }

    if (typeof window.getComputedStyle != "function") {
        throw new Error("window.getComputedStyle is missing.  You are using an unsupported browser, or running in IE8 compatibility mode.  Drawing HTML is supported in Chrome, Firefox, Safari and IE9+.");
    }

    defineFont(getFontFaces(element.ownerDocument));

    var scale = getXY(options.scale || 1);

    function doOne(element) {
        var group = new Group();

        // translate to start of page
        var pos = element.getBoundingClientRect();
        setTransform$1(group, [
            scale.x,
            0,
            0,
            scale.y,
            (-pos.left * scale.x),
            (-pos.top * scale.y)
        ]);

        nodeInfo._clipbox = false;
        nodeInfo._matrix = Matrix.unit();
        nodeInfo._stackingContext = {
            element: element,
            group: group
        };

        if (options.avoidLinks === true) {
            nodeInfo._avoidLinks = "a";
        } else {
            nodeInfo._avoidLinks = options.avoidLinks;
        }

        addClass(element, "k-pdf-export");
        renderElement(element, group);
        removeClass(element, "k-pdf-export");

        return group;
    }

    cacheImages([ element ], function(){
        var forceBreak = options && options.forcePageBreak;
        var hasPaperSize = options && options.paperSize && options.paperSize != "auto";
        var paperOptions = getPaperOptions(function(key, def){
            if (key == "paperSize") {
                // PDF.getPaperOptions croaks on "auto", just pass dummy A4 as we might
                // still be interested in margins.
                return hasPaperSize ? options[key] : "A4";
            }
            return key in options ? options[key] : def;
        });
        var pageWidth = hasPaperSize && paperOptions.paperSize[0];
        var pageHeight = hasPaperSize && paperOptions.paperSize[1];
        var margin = options.margin && paperOptions.margin;
        var hasMargin = Boolean(margin);
        if (forceBreak || pageHeight) {
            if (!margin) {
                margin = { left: 0, top: 0, right: 0, bottom: 0 };
            }

            // we want paper size and margin to be unaffected by
            // scaling in the output, so we have to reverse-scale
            // before our calculations begin.
            if (pageWidth)  { pageWidth  /= scale.x; }
            if (pageHeight) { pageHeight /= scale.y; }
            margin.left   /= scale.x;
            margin.right  /= scale.x;
            margin.top    /= scale.y;
            margin.bottom /= scale.y;

            var group = new Group({
                pdf: {
                    multiPage     : true,
                    paperSize     : hasPaperSize ? paperOptions.paperSize : "auto",
                    _ignoreMargin : hasMargin // HACK!  see exportPDF in pdf/drawing.js
                }
            });
            handlePageBreaks(
                function(x) {
                    if (options.progress) {
                        var canceled = false, pageNum = 0;
                        (function next(){
                            if (pageNum < x.pages.length) {
                                var page = doOne(x.pages[pageNum]);
                                group.append(page);
                                options.progress({
                                    page: page,
                                    pageNum: ++pageNum,
                                    totalPages: x.pages.length,
                                    cancel: function() {
                                        canceled = true;
                                    }
                                });
                                if (!canceled) {
                                    setTimeout(next);
                                } else {
                                    // XXX: should we also fail() the deferred object?
                                    x.container.parentNode.removeChild(x.container);
                                }
                            } else {
                                x.container.parentNode.removeChild(x.container);
                                promise.resolve(group);
                            }
                        })();
                    } else {
                        x.pages.forEach(function(page){
                            group.append(doOne(page));
                        });
                        x.container.parentNode.removeChild(x.container);
                        promise.resolve(group);
                    }
                },
                element,
                forceBreak,
                pageWidth ? pageWidth - margin.left - margin.right : null,
                pageHeight ? pageHeight - margin.top - margin.bottom : null,
                margin,
                options
            );
        } else {
            promise.resolve(doOne(element));
        }
    });

    function makeTemplate(template$$1) {
        if (template$$1 != null) {
            if (typeof template$$1 == "string") {
                template$$1 = template$1(template$$1.replace(/^\s+|\s+$/g, ""));
            }
            if (typeof template$$1 == "function") {
                return function(data) {
                    var el = template$$1(data);
                    if (el && typeof el == "string") {
                        var div = document.createElement("div");
                        div.innerHTML = el;
                        el = div.firstElementChild;
                    }
                    return el;
                };
            }
            // assumed DOM element
            return function() {
                return template$$1.cloneNode(true);
            };
        }
    }

    function handlePageBreaks(callback, element, forceBreak, pageWidth, pageHeight, margin, options) {
        var template$$1 = makeTemplate(options.template);
        var doc = element.ownerDocument;
        var pages = [];
        var copy = options._destructive ? element : cloneNodes(element);
        var container = doc.createElement("KENDO-PDF-DOCUMENT");
        var adjust = 0;

        // make sure <tfoot> elements are at the end (Grid widget
        // places TFOOT before TBODY, tricking our algorithm to
        // insert a page break right after the header).
        // https://github.com/telerik/kendo/issues/4699
        slice$1$1(copy.querySelectorAll("tfoot")).forEach(function(tfoot){
            tfoot.parentNode.appendChild(tfoot);
        });

        // remember the index of each LI from an ordered list.
        // we'll use it to reconstruct the proper numbering.
        slice$1$1(copy.querySelectorAll("ol")).forEach(function(ol){
            slice$1$1(ol.children).forEach(function(li, index){
                li.setAttribute("kendo-split-index", index);
            });
        });

        setCSS(container, {
            display   : "block",
            position  : "absolute",
            boxSizing : "content-box",
            left      : "-10000px",
            top       : "-10000px"
        });

        if (pageWidth) {
            // subtle: if we don't set the width *and* margins here, the layout in this
            // container will be different from the one in our final page elements, and we'll
            // split at the wrong places.
            setCSS(container, {
                width        : pageWidth + "px",
                paddingLeft  : margin.left + "px",
                paddingRight : margin.right + "px"
            });

            // when the first element has a margin-top (i.e. a <h1>) the page will be
            // inadvertently enlarged by that number (the browser will report the container's
            // bounding box top to start at the element's top, rather than including its
            // margin).  Adding overflow: hidden seems to fix it.
            //
            // to understand the difference, try the following snippets in your browser:
            //
            // 1. <div style="background: yellow">
            //      <h1 style="margin: 3em">Foo</h1>
            //    </div>
            //
            // 2. <div style="background: yellow; overflow: hidden">
            //      <h1 style="margin: 3em">Foo</h1>
            //    </div>
            //
            // this detail is not important when automatic page breaking is not requested, hence
            // doing it only if pageWidth is defined.
            setCSS(copy, { overflow: "hidden" });
        }

        element.parentNode.insertBefore(container, element);
        container.appendChild(copy);

        // With cache disabled, images will still have height zero until their `complete` attribute
        // is true.  `whenImagesAreActuallyLoaded` will wait for it.
        if (options.beforePageBreak) {
            whenImagesAreActuallyLoaded([ container ], function() {
                options.beforePageBreak(container, doPageBreak);
            });
        } else {
            whenImagesAreActuallyLoaded([ container ], doPageBreak);
        }

        function doPageBreak() {
            if (forceBreak != "-" || pageHeight) {
                splitElement(copy);
            }

            {
                var page = makePage();
                copy.parentNode.insertBefore(page, copy);
                page.appendChild(copy);
            }

            if (template$$1) {
                pages.forEach(function(page, i){
                    var el = template$$1({
                        element    : page,
                        pageNum    : i + 1,
                        totalPages : pages.length
                    });
                    if (el) {
                        page.appendChild(el);
                    }
                });
            }

            cacheImages(pages, callback.bind(null, { pages: pages, container: container }));
        }

        function keepTogether(el) {
            if (options.keepTogether && matches(el, options.keepTogether) && el.offsetHeight <= pageHeight - adjust) {
                return true;
            }

            var tag = el.tagName;
            if (/^h[1-6]$/i.test(tag) && el.offsetHeight >= pageHeight - adjust) {
                return false;
            }

            return (el.getAttribute("data-kendo-chart") ||
                    /^(?:img|tr|thead|th|tfoot|iframe|svg|object|canvas|input|textarea|select|video|h[1-6])/i.test(el.tagName));
        }

        function splitElement(element) {
            if (element.tagName == "TABLE") {
                setCSS(element, { tableLayout: "fixed" });
            }
            if (keepTogether(element)) {
                return;
            }
            var style = getComputedStyle$1(element);
            var bottomPadding = parseFloat(getPropertyValue(style, "padding-bottom"));
            var bottomBorder = parseFloat(getPropertyValue(style, "border-bottom-width"));
            var saveAdjust = adjust;
            adjust += bottomPadding + bottomBorder;
            var isFirst = true;
            for (var el = element.firstChild; el; el = el.nextSibling) {
                if (el.nodeType == 1 /* Element */) {
                    isFirst = false;
                    if (matches(el, forceBreak)) {
                        breakAtElement(el);
                        continue;
                    }
                    if (!pageHeight) {
                        // we're in "manual breaks mode"
                        splitElement(el);
                        continue;
                    }
                    if (!/^(?:static|relative)$/.test(getPropertyValue(getComputedStyle$1(el), "position"))) {
                        continue;
                    }
                    var fall = fallsOnMargin(el);
                    if (fall == 1) {
                        // element starts on next page, break before anyway.
                        breakAtElement(el);
                    }
                    else if (fall) {
                        // elements ends up on next page, or possibly doesn't fit on a page at
                        // all.  break before it anyway if it's an <img> or <tr>, otherwise
                        // attempt to split.
                        if (keepTogether(el)) {
                            breakAtElement(el);
                        } else {
                            splitElement(el);
                        }
                    }
                    else {
                        splitElement(el);
                    }
                }
                else if (el.nodeType == 3 /* Text */ && pageHeight) {
                    splitText(el, isFirst);
                    isFirst = false;
                }
            }
            adjust = saveAdjust;
        }

        function firstInParent(el) {
            var p = el.parentNode, first = p.firstChild;
            if (el === first) {
                return true;
            }
            if (el === p.children[0]) {
                if (first.nodeType == 7 /* comment */ ||
                    first.nodeType == 8 /* processing instruction */) {
                    return true;
                }
                if (first.nodeType == 3 /* text */) {
                    // if whitespace only we can probably consider it's first
                    return !/\S/.test(first.data);
                }
            }
            return false;
        }

        function breakAtElement(el) {
            if (el.nodeType == 1 && el !== copy && firstInParent(el)) {
                return breakAtElement(el.parentNode);
            }
            var table, colgroup, thead, grid, gridHead;
            table = closest(el, "table");
            colgroup = table && table.querySelector("colgroup");
            if (options.repeatHeaders) {
                thead = table && table.querySelector("thead");

                // If we break page in a Kendo Grid, repeat its header.  This ugly hack is
                // necessary because a scrollable grid will keep the header in a separate
                // <table> element from its content.
                //
                // XXX: This is likely to break as soon as the widget HTML is modified.
                grid = closest(el, ".k-grid.k-widget");
                if (grid && grid.querySelector(".k-auto-scrollable")) {
                    gridHead = grid.querySelector(".k-grid-header");
                }
            }
            var page = makePage();
            var range = doc.createRange();
            range.setStartBefore(copy);
            range.setEndBefore(el);
            page.appendChild(range.extractContents());
            copy.parentNode.insertBefore(page, copy);
            preventBulletOnListItem(el.parentNode);
            if (table) {
                table = closest(el, "table"); // that's the <table> on next page!
                if (options.repeatHeaders && thead) {
                    table.insertBefore(thead.cloneNode(true), table.firstChild);
                }
                if (colgroup) {
                    table.insertBefore(colgroup.cloneNode(true), table.firstChild);
                }
            }
            if (options.repeatHeaders && gridHead) {
                grid = closest(el, ".k-grid.k-widget");
                grid.insertBefore(gridHead.cloneNode(true), grid.firstChild);
            }
        }

        function makePage() {
            var page = doc.createElement("KENDO-PDF-PAGE");
            setCSS(page, {
                display  : "block",
                boxSizing: "content-box",
                width    : pageWidth ? (pageWidth + "px") : "auto",
                padding  : (margin.top + "px " +
                            margin.right + "px " +
                            margin.bottom + "px " +
                            margin.left + "px"),

                // allow absolutely positioned elements to be relative to current page
                position : "relative",

                // without the following we might affect layout of subsequent pages
                height   : pageHeight ? (pageHeight + "px") : "auto",
                overflow : pageHeight || pageWidth ? "hidden" : "visible",
                clear    : "both"
            });

            // debug
            // $("<div>").css({
            //     position  : "absolute",
            //     left      : margin.left,
            //     top       : margin.top,
            //     width     : pageWidth,
            //     height    : pageHeight,
            //     boxSizing : "border-box",
            //     background: "rgba(255, 255, 0, 0.5)"
            //     //border    : "1px solid red"
            // }).appendTo(page);

            if (options && options.pageClassName) {
                page.className = options.pageClassName;
            }
            pages.push(page);
            return page;
        }

        function fallsOnMargin(thing) {
            var box = thing.getBoundingClientRect();
            if (box.width === 0 || box.height === 0) {
                // I'd say an element with dimensions zero fits on current page.
                return 0;
            }
            var top = copy.getBoundingClientRect().top;
            var available = pageHeight - adjust;
            return (box.height > available) ? 3
                : (box.top - top > available) ? 1
                : (box.bottom - top > available) ? 2
                : 0;
        }

        function splitText(node, isFirst) {
            if (!/\S/.test(node.data)) {
                return;
            }

            var len = node.data.length;
            var range = doc.createRange();
            range.selectNodeContents(node);
            var fall = fallsOnMargin(range);
            if (!fall) {
                return;     // the whole text fits on current page
            }

            var nextnode = node;
            if (fall == 1) {
                // starts on next page, break before anyway.
                if (isFirst) {
                    // avoid leaving an empty <p>, <li>, etc. on previous page.
                    breakAtElement(node.parentNode);
                } else {
                    breakAtElement(node);
                }
            }
            else {
                (function findEOP(min, pos, max) {
                    range.setEnd(node, pos);
                    if (min == pos || pos == max) {
                        return pos;
                    }
                    if (fallsOnMargin(range)) {
                        return findEOP(min, (min + pos) >> 1, pos);
                    } else {
                        return findEOP(pos, (pos + max) >> 1, max);
                    }
                })(0, len >> 1, len);

                if (!/\S/.test(range.toString()) && isFirst) {
                    // avoid leaving an empty <p>, <li>, etc. on previous page.
                    breakAtElement(node.parentNode);
                } else {
                    // This is only needed for IE, but it feels cleaner to do it anyway.  Without
                    // it, IE will truncate a very long text (playground/pdf-long-text-2.html).
                    nextnode = node.splitText(range.endOffset);

                    var page = makePage();
                    range.setStartBefore(copy);
                    page.appendChild(range.extractContents());
                    copy.parentNode.insertBefore(page, copy);
                    preventBulletOnListItem(nextnode.parentNode);
                }
            }

            splitText(nextnode);
        }

        function preventBulletOnListItem(el) {
            // set a hint on continued LI elements, to tell the
            // renderer not to draw the bullet again.
            // https://github.com/telerik/kendo-ui-core/issues/2732
            var li = closest(el, "li");
            if (li) {
                li.setAttribute("kendo-no-bullet", "1");
                preventBulletOnListItem(li.parentNode);
            }
        }
    }

    return promise;
}

// This is needed for the Spreadsheet print functionality.  Since
// there we only need to draw text, this cuts through the ceremony
// of drawDOM/renderElement and renders the text node directly.
function drawText$1(element) {
    var group = new Group();
    nodeInfo._clipbox = false;
    nodeInfo._matrix = Matrix.unit();
    nodeInfo._stackingContext = {
        element: element,
        group: group
    };
    pushNodeInfo(element, getComputedStyle$1(element), group);
    if (element.firstChild.nodeType == 3 /* Text */) {
        // avoid the penalty of renderElement
        renderText(element, element.firstChild, group);
    } else {
        _renderElement(element, group);
    }
    popNodeInfo();
    return group;
}

var parseBackgroundImage = (function(){
    var tok_linear_gradient  = /^((-webkit-|-moz-|-o-|-ms-)?linear-gradient\s*)\(/;
    //var tok_radial_gradient  = /^((-webkit-|-moz-|-o-|-ms-)?radial-gradient\s*)\(/;
    var tok_percent          = /^([-0-9.]+%)/;
    var tok_length           = /^([-0-9.]+px)/;
    var tok_keyword          = /^(left|right|top|bottom|to|center)\W/;
    var tok_angle            = /^([-0-9.]+(deg|grad|rad|turn)|0)/;
    var tok_whitespace       = /^(\s+)/;
    var tok_popen            = /^(\()/;
    var tok_pclose           = /^(\))/;
    var tok_comma            = /^(,)/;
    var tok_url              = /^(url)\(/;
    var tok_content          = /^(.*?)\)/;

    var cache1 = {}, cache2 = {};

    function parse(input) {
        var orig = input;
        if (hasOwnProperty$2(cache1, orig)) {
            return cache1[orig];
        }
        function skip_ws() {
            var m = tok_whitespace.exec(input);
            if (m) {
                input = input.substr(m[1].length);
            }
        }
        function read(token) {
            skip_ws();
            var m = token.exec(input);
            if (m) {
                input = input.substr(m[1].length);
                return m[1];
            }
        }

        function read_stop() {
            var color = parseColor(input, true);
            var length, percent;
            if (color) {
                var match =
                    /^#[0-9a-f]+/i.exec(input) ||
                    /^rgba?\(.*?\)/i.exec(input) ||
                    /^..*?\b/.exec(input); // maybe named color
                input = input.substr(match[0].length);
                color = color.toRGB();
                if (!(length = read(tok_length))) {
                    percent = read(tok_percent);
                }
                return { color: color, length: length, percent: percent };
            }
        }

        function read_linear_gradient(propName) {
            var angle;
            var to1, to2;
            var stops = [];
            var reverse = false;

            if (read(tok_popen)) {
                // 1. [ <angle> || to <side-or-corner>, ]?
                angle = read(tok_angle);
                if (angle == "0") {
                    angle = "0deg"; // Edge
                }
                if (angle) {
                    angle = parseAngle(angle);
                    read(tok_comma);
                }
                else {
                    to1 = read(tok_keyword);
                    if (to1 == "to") {
                        to1 = read(tok_keyword);
                    } else if (to1 && /^-/.test(propName)) {
                        reverse = true;
                    }
                    to2 = read(tok_keyword);
                    read(tok_comma);
                }

                if (/-moz-/.test(propName) && angle == null && to1 == null) {
                    var x = read(tok_percent), y = read(tok_percent);
                    reverse = true;
                    if (x == "0%") {
                        to1 = "left";
                    } else if (x == "100%") {
                        to1 = "right";
                    }
                    if (y == "0%") {
                        to2 = "top";
                    } else if (y == "100%") {
                        to2 = "bottom";
                    }
                    read(tok_comma);
                }

                // 2. color stops
                while (input && !read(tok_pclose)) {
                    var stop = read_stop();
                    if (!stop) {
                        break;
                    }
                    stops.push(stop);
                    read(tok_comma);
                }

                return {
                    type    : "linear",
                    angle   : angle,
                    to      : to1 && to2 ? to1 + " " + to2 : to1 ? to1 : to2 ? to2 : null,
                    stops   : stops,
                    reverse : reverse
                };
            }
        }

        function read_url() {
            if (read(tok_popen)) {
                var url = read(tok_content);
                url = url.replace(/^['"]+|["']+$/g, "");
                read(tok_pclose);
                return { type: "url", url: url };
            }
        }

        var tok;

        if ((tok = read(tok_linear_gradient))) {
            tok = read_linear_gradient(tok);
        }
        else if ((tok = read(tok_url))) {
            tok = read_url();
        }

        return (cache1[orig] = tok || { type: "none" });
    }

    return function(input) {
        if (hasOwnProperty$2(cache2, input)) {
            return cache2[input];
        }
        return (cache2[input] = splitProperty(input).map(parse));
    };
})();

var splitProperty = (function(){
    var cache = {};
    return function(input, separator) {
        if (!separator) {
            separator = /^\s*,\s*/;
        }

        var cacheKey = input + separator;

        if (hasOwnProperty$2(cache, cacheKey)) {
            return cache[cacheKey];
        }

        var ret = [];
        var last$$1 = 0, pos = 0;
        var in_paren = 0;
        var in_string = false;
        var m;

        function looking_at(rx) {
            return (m = rx.exec(input.substr(pos)));
        }

        function trim(str) {
            return str.replace(/^\s+|\s+$/g, "");
        }

        while (pos < input.length) {
            if (!in_string && looking_at(/^[\(\[\{]/)) {
                in_paren++;
                pos++;
            }
            else if (!in_string && looking_at(/^[\)\]\}]/)) {
                in_paren--;
                pos++;
            }
            else if (!in_string && looking_at(/^[\"\']/)) {
                in_string = m[0];
                pos++;
            }
            else if (in_string == "'" && looking_at(/^\\\'/)) {
                pos += 2;
            }
            else if (in_string == '"' && looking_at(/^\\\"/)) {
                pos += 2;
            }
            else if (in_string == "'" && looking_at(/^\'/)) {
                in_string = false;
                pos++;
            }
            else if (in_string == '"' && looking_at(/^\"/)) {
                in_string = false;
                pos++;
            }
            else if (looking_at(separator)) {
                if (!in_string && !in_paren && pos > last$$1) {
                    ret.push(trim(input.substring(last$$1, pos)));
                    last$$1 = pos + m[0].length;
                }
                pos += m[0].length;
            }
            else {
                pos++;
            }
        }
        if (last$$1 < pos) {
            ret.push(trim(input.substring(last$$1, pos)));
        }
        return (cache[cacheKey] = ret);
    };
})();

var getFontURL$1 = (function(cache){
    return function(el){
        // XXX: for IE we get here the whole cssText of the rule,
        // because the computedStyle.src is empty.  Next time we need
        // to fix these regexps we better write a CSS parser. :-\
        var url = cache[el];
        if (!url) {
            var m;
            if ((m = /url\((['"]?)([^'")]*?)\1\)\s+format\((['"]?)truetype\3\)/.exec(el))) {
                url = cache[el] = m[2];
            } else if ((m = /url\((['"]?)([^'")]*?\.ttf)\1\)/.exec(el))) {
                url = cache[el] = m[2];
            }
        }
        return url;
    };
})(Object.create(null));

var getFontHeight = (function(cache){
    return function(font) {
        var height = cache[font];
        if (height == null) {
            height = cache[font] = measureText("Mapq", { font: font }).height;
        }
        return height;
    };
})(Object.create(null));

function getFontFaces(doc) {
    if (doc == null) {
        doc = document;
    }
    var result = {};
    for (var i = 0; i < doc.styleSheets.length; ++i) {
        doStylesheet(doc.styleSheets[i]);
    }
    return result;
    function doStylesheet(ss) {
        if (ss) {
            var rules = null;
            try {
                rules = ss.cssRules;
            } catch (ex) {}
            if (rules) {
                addRules(ss, rules);
            }
        }
    }
    function findFonts(rule) {
        var src = getPropertyValue(rule.style, "src");
        if (src) {
            return splitProperty(src).reduce(function(a, el){
                var font = getFontURL$1(el);
                if (font) {
                    a.push(font);
                }
                return a;
            }, []);
        } else {
            // Internet Explorer
            // XXX: this is gross.  should work though for valid CSS.
            var font = getFontURL$1(rule.cssText);
            return font ? [ font ] : [];
        }
    }
    function addRules(styleSheet, rules) {
        for (var i = 0; i < rules.length; ++i) {
            var r = rules[i];
            switch (r.type) {
              case 3:       // CSSImportRule
                doStylesheet(r.styleSheet);
                break;
              case 5:       // CSSFontFaceRule
                var style  = r.style;
                var family = splitProperty(getPropertyValue(style, "font-family"));
                var bold   = /^([56789]00|bold)$/i.test(getPropertyValue(style, "font-weight"));
                var italic = "italic" == getPropertyValue(style, "font-style");
                var src    = findFonts(r);
                if (src.length > 0) {
                    addRule(styleSheet, family, bold, italic, src[0]);
                }
            }
        }
    }
    function addRule(styleSheet, names, bold, italic, url) {
        // We get full resolved absolute URLs in Chrome, but sadly
        // not in Firefox.
        if (!(/^data:/i.test(url))) {
            if (!(/^[^\/:]+:\/\//.test(url) || /^\//.test(url))) {
                url = String(styleSheet.href).replace(/[^\/]*$/, "") + url;
            }
        }
        names.forEach(function(name){
            name = name.replace(/^(['"]?)(.*?)\1$/, "$2"); // it's quoted
            if (bold) {
                name += "|bold";
            }
            if (italic) {
                name += "|italic";
            }
            result[name] = url;
        });
    }
}

function hasOwnProperty$2(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}

function getCounter(name) {
    name = "_counter_" + name;
    return nodeInfo[name];
}

function getAllCounters(name) {
    var values = [], p = nodeInfo;
    name = "_counter_" + name;
    while (p) {
        if (hasOwnProperty$2(p, name)) {
            values.push(p[name]);
        }
        p = Object.getPrototypeOf(p);
    }
    return values.reverse();
}

function incCounter(name, inc) {
    var p = nodeInfo;
    name = "_counter_" + name;
    while (p && !hasOwnProperty$2(p, name)) {
        p = Object.getPrototypeOf(p);
    }
    if (!p) {
        p = nodeInfo._root;
    }
    p[name] = (p[name] || 0) + (inc == null ? 1 : inc);
}

function resetCounter(name, val) {
    name = "_counter_" + name;
    nodeInfo[name] = val == null ? 0 : val;
}

function doCounters(a, f, def) {
    for (var i = 0; i < a.length;) {
        var name = a[i++];
        var val = parseFloat(a[i]);
        if (isNaN(val)) {
            f(name, def);
        } else {
            f(name, val);
            ++i;
        }
    }
}

function updateCounters(style) {
    var counterReset = getPropertyValue(style, "counter-reset");
    if (counterReset) {
        doCounters(splitProperty(counterReset, /^\s+/), resetCounter, 0);
    }
    var counterIncrement = getPropertyValue(style, "counter-increment");
    if (counterIncrement) {
        doCounters(splitProperty(counterIncrement, /^\s+/), incCounter, 1);
    }
}

function parseColor$2(str, css) {
    var color = parseColor(str, true);
    if (color) {
        color = color.toRGB();
        if (css) {
            color = color.toCssRgba();
        } else if (color.a === 0) {
            color = null;
        }
    }
    return color;
}

function whenImagesAreActuallyLoaded(elements, callback) {
    var pending = 0;
    var done = false;
    elements.forEach(function(el){
        var images = el.querySelectorAll("img");
        for (var i = 0; i < images.length; ++i) {
            var img = images[i];
            if (!img.complete) {
                pending++;
                img.onload = img.onerror = next;
            }
        }
    });
    next();

    function next() {
        if (!done && --pending <= 0) {
            callback();
            done = true;
        }
    }
}

function cacheImages(elements, callback) {
    var urls = [];
    function add(url) {
        if (!IMAGE_CACHE$1[url]) {
            IMAGE_CACHE$1[url] = true;
            urls.push(url);
        }
    }

    elements.forEach(function dive(element){
        if (/^img$/i.test(element.tagName)) {
            add(element.src);
        }
        parseBackgroundImage(
            getPropertyValue(
                getComputedStyle$1(element), "background-image"
            )
        ).forEach(function(bg){
            if (bg.type == "url") {
                add(bg.url);
            }
        });

        if (element.children) {
            slice$1$1(element.children).forEach(dive);
        }
    });

    var count = urls.length;
    function next() {
        if (--count <= 0) {
            // Even though we cached them, they simply won't be available immediately in the newly
            // created DOM.  Previously we'd allow a 10ms timeout, but that's arbitrary and clearly
            // not working in all cases (https://github.com/telerik/kendo/issues/5399), so this
            // function will wait for their .complete attribute.
            whenImagesAreActuallyLoaded(elements, callback);
        }
    }
    if (count === 0) {
        next();
    }
    urls.forEach(function(url){
        var img = IMAGE_CACHE$1[url] = new window.Image();
        if (!(/^data:/i.test(url))) {
            img.crossOrigin = "Anonymous";
        }
        img.src = url;
        if (img.complete) {
            next();
        } else {
            img.onload = next;
            img.onerror = function() {
                IMAGE_CACHE$1[url] = null;
                next();
            };
        }
    });
}

function alphaNumeral(n) {
    var result = "";
    do {
        var r = n % 26;
        result = String.fromCharCode(97 + r) + result;
        n = Math.floor(n / 26);
    } while (n > 0);
    return result;
}

function pushNodeInfo(element, style, group) {
    nodeInfo = Object.create(nodeInfo);
    nodeInfo[element.tagName.toLowerCase()] = {
        element: element,
        style: style
    };
    var decoration = getPropertyValue(style, "text-decoration");
    if (decoration && decoration != "none") {
        var color = getPropertyValue(style, "text-decoration-color");
        decoration.split(/\s+/g).forEach(function(name){
            if (!nodeInfo[name]) {
                nodeInfo[name] = color;
                if (name == "underline") {
                    var offset = getPropertyValue(style, "text-underline-offset");
                    if (offset != "auto") {
                        nodeInfo["underline-offset"] = parseFloat(offset);
                    }
                }
            }
        });
    }

    if (createsStackingContext(style)) {
        nodeInfo._stackingContext = {
            element: element,
            group: group
        };
    }
}

function popNodeInfo() {
    nodeInfo = Object.getPrototypeOf(nodeInfo);
}

function updateClipbox(path) {
    if (nodeInfo._clipbox != null) {
        var box = path.bbox(nodeInfo._matrix);
        if (nodeInfo._clipbox) {
            nodeInfo._clipbox = Rect.intersect(nodeInfo._clipbox, box);
        } else {
            nodeInfo._clipbox = box;
        }
    }
}

function emptyClipbox() {
    var cb = nodeInfo._clipbox;
    if (cb == null) {
        return true;
    }
    if (cb) {
        return cb.width() === 0 || cb.height() === 0;
    }
}

function createsStackingContext(style) {
    function prop(name) { return getPropertyValue(style, name); }
    if (prop("transform") != "none" ||
        prop("position") != "static" ||
        prop("z-index") != "auto" ||
        prop("opacity") < 1) {
        return true;
    }
}

function getComputedStyle$1(element, pseudoElt) {
    return window.getComputedStyle(element, pseudoElt || null);
}

function getPropertyValue(style, prop, defa) {
    var val = style.getPropertyValue(prop);
    if (val == null || val === "") {
        if (browser$3.webkit) {
            val = style.getPropertyValue("-webkit-" + prop );
        } else if (browser$3.mozilla) {
            val = style.getPropertyValue("-moz-" + prop );
        } else if (browser$3.opera) {
            val = style.getPropertyValue("-o-" + prop);
        } else if (microsoft) {
            val = style.getPropertyValue("-ms-" + prop);
        }
    }
    if (arguments.length > 2 && (val == null || val === "")) {
        return defa;
    } else {
        return val;
    }
}

function pleaseSetPropertyValue(style, prop, value, important) {
    style.setProperty(prop, value, important);
    if (browser$3.webkit) {
        style.setProperty("-webkit-" + prop, value, important);
    } else if (browser$3.mozilla) {
        style.setProperty("-moz-" + prop, value, important);
    } else if (browser$3.opera) {
        style.setProperty("-o-" + prop, value, important);
    } else if (microsoft) {
        style.setProperty("-ms-" + prop, value, important);
        prop = "ms" + prop.replace(/(^|-)([a-z])/g, function(s, p1, p2){
            return p1 + p2.toUpperCase();
        });
        style[prop] = value;
    }
}

function getBorder(style, side) {
    side = "border-" + side;
    return {
        width: parseFloat(getPropertyValue(style, side + "-width")),
        style: getPropertyValue(style, side + "-style"),
        color: parseColor$2(getPropertyValue(style, side + "-color"), true)
    };
}

function saveStyle(element, func) {
    var prev = element.style.cssText;
    var result = func();
    element.style.cssText = prev;
    return result;
}

function getBorderRadius(style, side) {
    var r = getPropertyValue(style, "border-" + side + "-radius").split(/\s+/g).map(parseFloat);
    if (r.length == 1) {
        r.push(r[0]);
    }
    return sanitizeRadius({ x: r[0], y: r[1] });
}

function getContentBox(element) {
    var box = element.getBoundingClientRect();
    box = innerBox(box, "border-*-width", element);
    box = innerBox(box, "padding-*", element);
    return box;
}

function innerBox(box, prop, element) {
    var style, wt, wr, wb, wl;
    if (typeof prop == "string") {
        style = getComputedStyle$1(element);
        wt = parseFloat(getPropertyValue(style, prop.replace("*", "top")));
        wr = parseFloat(getPropertyValue(style, prop.replace("*", "right")));
        wb = parseFloat(getPropertyValue(style, prop.replace("*", "bottom")));
        wl = parseFloat(getPropertyValue(style, prop.replace("*", "left")));
    }
    else if (typeof prop == "number") {
        wt = wr = wb = wl = prop;
    }
    return {
        top    : box.top + wt,
        right  : box.right - wr,
        bottom : box.bottom - wb,
        left   : box.left + wl,
        width  : box.right - box.left - wr - wl,
        height : box.bottom - box.top - wb - wt
    };
}

function getTransform(style) {
    var transform$$1 = getPropertyValue(style, "transform");
    if (transform$$1 == "none") {
        return null;
    }
    var matrix = /^\s*matrix\(\s*(.*?)\s*\)\s*$/.exec(transform$$1);
    if (matrix) {
        var origin = getPropertyValue(style, "transform-origin");
        matrix = matrix[1].split(/\s*,\s*/g).map(parseFloat);
        origin = origin.split(/\s+/g).map(parseFloat);
        return {
            matrix: matrix,
            origin: origin
        };
    }
}

function radiansToDegrees(radians) {
    return ((180 * radians) / Math.PI) % 360;
}

function parseAngle(angle) {
    var num = parseFloat(angle);
    if (/grad$/.test(angle)) {
        return Math.PI * num / 200;
    }
    else if (/rad$/.test(angle)) {
        return num;
    }
    else if (/turn$/.test(angle)) {
        return Math.PI * num * 2;
    }
    else if (/deg$/.test(angle)) {
        return Math.PI * num / 180;
    }
}

function setTransform$1(shape, m) {
    m = new Matrix(m[0], m[1], m[2], m[3], m[4], m[5]);
    shape.transform(m);
    return m;
}

function setClipping$1(shape, clipPath) {
    shape.clip(clipPath);
}

function addArcToPath(path, x, y, options) {
    var points = new Arc$2([ x, y ], options).curvePoints(), i = 1;
    while (i < points.length) {
        path.curveTo(points[i++], points[i++], points[i++]);
    }
}

function sanitizeRadius(r) {
    if (r.x <= 0 || r.y <= 0) {
        r.x = r.y = 0;
    }
    return r;
}

function adjustBorderRadiusForBox(box, rTL, rTR, rBR, rBL) {
    // adjust border radiuses such that the sum of adjacent
    // radiuses is not bigger than the length of the side.
    // seems the correct algorithm is variant (3) from here:
    // http://www.w3.org/Style/CSS/Tracker/issues/29?changelog
    var tl_x = Math.max(0, rTL.x), tl_y = Math.max(0, rTL.y);
    var tr_x = Math.max(0, rTR.x), tr_y = Math.max(0, rTR.y);
    var br_x = Math.max(0, rBR.x), br_y = Math.max(0, rBR.y);
    var bl_x = Math.max(0, rBL.x), bl_y = Math.max(0, rBL.y);

    var f = Math.min(
        box.width / (tl_x + tr_x),
        box.height / (tr_y + br_y),
        box.width / (br_x + bl_x),
        box.height / (bl_y + tl_y)
    );

    if (f < 1) {
        tl_x *= f; tl_y *= f;
        tr_x *= f; tr_y *= f;
        br_x *= f; br_y *= f;
        bl_x *= f; bl_y *= f;
    }

    return {
        tl: { x: tl_x, y: tl_y },
        tr: { x: tr_x, y: tr_y },
        br: { x: br_x, y: br_y },
        bl: { x: bl_x, y: bl_y }
    };
}

function elementRoundBox(element, box, type) {
    var style = getComputedStyle$1(element);

    var rTL = getBorderRadius(style, "top-left");
    var rTR = getBorderRadius(style, "top-right");
    var rBL = getBorderRadius(style, "bottom-left");
    var rBR = getBorderRadius(style, "bottom-right");

    if (type == "padding" || type == "content") {
        var bt = getBorder(style, "top");
        var br = getBorder(style, "right");
        var bb = getBorder(style, "bottom");
        var bl = getBorder(style, "left");
        rTL.x -= bl.width; rTL.y -= bt.width;
        rTR.x -= br.width; rTR.y -= bt.width;
        rBR.x -= br.width; rBR.y -= bb.width;
        rBL.x -= bl.width; rBL.y -= bb.width;
        if (type == "content") {
            var pt = parseFloat(getPropertyValue(style, "padding-top"));
            var pr = parseFloat(getPropertyValue(style, "padding-right"));
            var pb = parseFloat(getPropertyValue(style, "padding-bottom"));
            var pl = parseFloat(getPropertyValue(style, "padding-left"));
            rTL.x -= pl; rTL.y -= pt;
            rTR.x -= pr; rTR.y -= pt;
            rBR.x -= pr; rBR.y -= pb;
            rBL.x -= pl; rBL.y -= pb;
        }
    }

    if (typeof type == "number") {
        rTL.x -= type; rTL.y -= type;
        rTR.x -= type; rTR.y -= type;
        rBR.x -= type; rBR.y -= type;
        rBL.x -= type; rBL.y -= type;
    }

    return roundBox(box, rTL, rTR, rBR, rBL);
}

// Create a drawing.Path for a rounded rectangle.  Receives the
// bounding box and the border-radiuses in CSS order (top-left,
// top-right, bottom-right, bottom-left).  The radiuses must be
// objects containing x (horiz. radius) and y (vertical radius).
function roundBox(box, rTL0, rTR0, rBR0, rBL0) {
    var tmp = adjustBorderRadiusForBox(box, rTL0, rTR0, rBR0, rBL0);
    var rTL = tmp.tl;
    var rTR = tmp.tr;
    var rBR = tmp.br;
    var rBL = tmp.bl;
    var path = new Path({ fill: null, stroke: null });
    path.moveTo(box.left, box.top + rTL.y);
    if (rTL.x) {
        addArcToPath(path, box.left + rTL.x, box.top + rTL.y, {
            startAngle: -180,
            endAngle: -90,
            radiusX: rTL.x,
            radiusY: rTL.y
        });
    }
    path.lineTo(box.right - rTR.x, box.top);
    if (rTR.x) {
        addArcToPath(path, box.right - rTR.x, box.top + rTR.y, {
            startAngle: -90,
            endAngle: 0,
            radiusX: rTR.x,
            radiusY: rTR.y
        });
    }
    path.lineTo(box.right, box.bottom - rBR.y);
    if (rBR.x) {
        addArcToPath(path, box.right - rBR.x, box.bottom - rBR.y, {
            startAngle: 0,
            endAngle: 90,
            radiusX: rBR.x,
            radiusY: rBR.y
        });
    }
    path.lineTo(box.left + rBL.x, box.bottom);
    if (rBL.x) {
        addArcToPath(path, box.left + rBL.x, box.bottom - rBL.y, {
            startAngle: 90,
            endAngle: 180,
            radiusX: rBL.x,
            radiusY: rBL.y
        });
    }
    return path.close();
}

function formatCounter(val, style) {
    var str = String(parseFloat(val));
    switch (style) {
      case "decimal-leading-zero":
        if (str.length < 2) {
            str = "0" + str;
        }
        return str;
      case "lower-roman":
        return arabicToRoman(val).toLowerCase();
      case "upper-roman":
        return arabicToRoman(val).toUpperCase();
      case "lower-latin":
      case "lower-alpha":
        return alphaNumeral(val - 1);
      case "upper-latin":
      case "upper-alpha":
        return alphaNumeral(val - 1).toUpperCase();
      default:
        return str;
    }
}

function evalPseudoElementContent(element, content) {
    function displayCounter(name, style, separator) {
        if (!separator) {
            return formatCounter(getCounter(name) || 0, style);
        }
        separator = separator.replace(/^\s*(["'])(.*)\1\s*$/, "$2");
        return getAllCounters(name).map(function(val){
            return formatCounter(val, style);
        }).join(separator);
    }
    var a = splitProperty(content, /^\s+/);
    var result = [], m;
    a.forEach(function(el){
        var tmp;
        if ((m = /^\s*(["'])(.*)\1\s*$/.exec(el))) {
            result.push(m[2].replace(/\\([0-9a-f]{4})/gi, function(s, p){
                return String.fromCharCode(parseInt(p, 16));
            }));
        }
        else if ((m = /^\s*counter\((.*?)\)\s*$/.exec(el))) {
            tmp = splitProperty(m[1]);
            result.push(displayCounter(tmp[0], tmp[1]));
        }
        else if ((m = /^\s*counters\((.*?)\)\s*$/.exec(el))) {
            tmp = splitProperty(m[1]);
            result.push(displayCounter(tmp[0], tmp[2], tmp[1]));
        }
        else if ((m = /^\s*attr\((.*?)\)\s*$/.exec(el))) {
            result.push(element.getAttribute(m[1]) || "");
        }
        else {
            result.push(el);
        }
    });
    return result.join("");
}

function getCssText(style) {
    if (style.cssText) {
        return style.cssText;
    }
    // Status: NEW.  Report year: 2002.  Current year: 2014.
    // Nice played, Mozillians.
    // https://bugzilla.mozilla.org/show_bug.cgi?id=137687
    var result = [];
    for (var i = 0; i < style.length; ++i) {
        result.push(style[i] + ": " + getPropertyValue(style, style[i]));
    }
    return result.join(";\n");
}

function _renderWithPseudoElements(element, group) {
    if (element.tagName == KENDO_PSEUDO_ELEMENT) {
        _renderElement(element, group);
        return;
    }
    var fake = [];
    function pseudo(kind, place) {
        var style = getComputedStyle$1(element, kind), content = style.content;
        updateCounters(style);
        if (content && content != "normal" && content != "none" && style.width != "0px") {
            var psel = element.ownerDocument.createElement(KENDO_PSEUDO_ELEMENT);
            psel.style.cssText = getCssText(style);
            psel.textContent = evalPseudoElementContent(element, content);
            element.insertBefore(psel, place);
            fake.push(psel);
        }
    }
    pseudo(":before", element.firstChild);
    pseudo(":after", null);
    if (fake.length > 0) {
        var saveClass = element.className;
        element.className += " kendo-pdf-hide-pseudo-elements";
        _renderElement(element, group);
        element.className = saveClass;
        fake.forEach(function(el){ element.removeChild(el); });
    } else {
        _renderElement(element, group);
    }
}

function _renderElement(element, group) {
    var style = getComputedStyle$1(element);

    var top = getBorder(style, "top");
    var right = getBorder(style, "right");
    var bottom = getBorder(style, "bottom");
    var left = getBorder(style, "left");

    var rTL0 = getBorderRadius(style, "top-left");
    var rTR0 = getBorderRadius(style, "top-right");
    var rBL0 = getBorderRadius(style, "bottom-left");
    var rBR0 = getBorderRadius(style, "bottom-right");

    var dir = getPropertyValue(style, "direction");

    var backgroundColor = getPropertyValue(style, "background-color");
    backgroundColor = parseColor$2(backgroundColor);

    var backgroundImage = parseBackgroundImage( getPropertyValue(style, "background-image") );
    var backgroundRepeat = splitProperty( getPropertyValue(style, "background-repeat") );
    var backgroundPosition = splitProperty( getPropertyValue(style, "background-position") );
    var backgroundOrigin = splitProperty( getPropertyValue(style, "background-origin") );
    var backgroundSize = splitProperty( getPropertyValue(style, "background-size") );

    // IE shrinks the text with text-overflow: ellipsis,
    // apparently because the returned bounding box for the range
    // is limited to the visible area minus space for the dots,
    // instead of being the full width of the text.
    //
    // https://github.com/telerik/kendo/issues/5232
    // https://github.com/telerik/kendo-ui-core/issues/1868
    //
    // We have to test it here rather than in renderText because
    // text-overflow: ellipsis could be set on a parent element (not
    // necessarily the one containing the text); in this case,
    // getComputedStyle(elementWithTheText) will return "clip", not
    // "ellipsis" (which is probably a bug, but oh well...)
    var textOverflow, saveTextOverflow;
    if (microsoft) {
        textOverflow = style.textOverflow;             // computed style
        if (textOverflow == "ellipsis") {
            saveTextOverflow = element.style.textOverflow; // own style.
            element.style.textOverflow = "clip";
        }
    }

    if (browser$3.msie && browser$3.version < 10) {
        // IE9 hacks.  getPropertyValue won't return the correct
        // value.  Sucks that we have to do it here, I'd prefer to
        // move it in getPropertyValue, but we don't have the
        // element.
        backgroundPosition = splitProperty(element.currentStyle.backgroundPosition);
    }

    var innerbox = innerBox(element.getBoundingClientRect(), "border-*-width", element);

    // CSS "clip" property - if present, replace the group with a
    // new one which is clipped.  This must happen before drawing
    // the borders and background.
    (function(){
        var clip = getPropertyValue(style, "clip");
        var m = /^\s*rect\((.*)\)\s*$/.exec(clip);
        if (m) {
            var a = m[1].split(/[ ,]+/g);
            var top = a[0] == "auto" ? innerbox.top : parseFloat(a[0]) + innerbox.top;
            var right = a[1] == "auto" ? innerbox.right : parseFloat(a[1]) + innerbox.left;
            var bottom = a[2] == "auto" ? innerbox.bottom : parseFloat(a[2]) + innerbox.top;
            var left = a[3] == "auto" ? innerbox.left : parseFloat(a[3]) + innerbox.left;
            var tmp = new Group();
            var clipPath = new Path()
                .moveTo(left, top)
                .lineTo(right, top)
                .lineTo(right, bottom)
                .lineTo(left, bottom)
                .close();
            setClipping$1(tmp, clipPath);
            group.append(tmp);
            group = tmp;
            updateClipbox(clipPath);
        }
    })();

    var boxes, i, cells;
    var display = getPropertyValue(style, "display");

    if (display == "table-row") {
        // because of rowspan/colspan, we shouldn't draw background of table row elements on the
        // box given by its getBoundingClientRect, because if we do we risk overwritting a
        // previously rendered cell.  https://github.com/telerik/kendo/issues/4881
        boxes = [];
        for (i = 0, cells = element.children; i < cells.length; ++i) {
            boxes.push(cells[i].getBoundingClientRect());
        }
    } else {
        boxes = element.getClientRects();
        if (boxes.length == 1) {
            // Workaround the missing borders in Chrome!  getClientRects() boxes contains values
            // rounded to integer.  getBoundingClientRect() appears to work fine.  We still need
            // getClientRects() to support cases where there are more boxes (continued inline
            // elements that might have border/background).
            boxes = [ element.getBoundingClientRect() ];
        }
    }

    // This function workarounds another Chrome bug, where boxes returned for a table with
    // border-collapse: collapse will overlap the table border.  Our rendering is not perfect in
    // such case anyway, but with this is better than without it.
    boxes = adjustBoxes(boxes);

    for (i = 0; i < boxes.length; ++i) {
        drawOneBox(boxes[i], i === 0, i == boxes.length - 1);
    }

    // Render links as separate groups.  We can't use boxes returned by element's getClientRects
    // because if display type is "inline" (default for <a>), boxes will not include the height of
    // images inside.  https://github.com/telerik/kendo-ui-core/issues/3359
    if (element.tagName == "A" && element.href && !/^#?$/.test(element.getAttribute("href"))) {
        if (!nodeInfo._avoidLinks || !matches(element, nodeInfo._avoidLinks)) {
            var r = document.createRange();
            r.selectNodeContents(element);
            slice$1$1(r.getClientRects()).forEach(function(box){
                var g = new Group();
                g._pdfLink = {
                    url    : element.href,
                    top    : box.top,
                    right  : box.right,
                    bottom : box.bottom,
                    left   : box.left
                };
                group.append(g);
            });
        }
    }

    if (boxes.length > 0 && display == "list-item" && !element.getAttribute("kendo-no-bullet")) {
        drawBullet(boxes[0]);
    }

    // overflow: hidden/auto - if present, replace the group with
    // a new one clipped by the inner box.
    (function(){
        function clipit() {
            var clipPath = elementRoundBox(element, innerbox, "padding");
            var tmp = new Group();
            setClipping$1(tmp, clipPath);
            group.append(tmp);
            group = tmp;
            updateClipbox(clipPath);
        }
        if (isFormField(element)) {
            clipit();
        } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, "overflow"))) {
            clipit();
        } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, "overflow-x"))) {
            clipit();
        } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, "overflow-y"))) {
            clipit();
        }
    })();

    if (!maybeRenderWidget(element, group)) {
        renderContents(element, group);
    }

    if (microsoft && textOverflow == "ellipsis") {
        element.style.textOverflow = saveTextOverflow;
    }

    return group; // only utility functions after this line.

    function adjustBoxes(boxes) {
        if (/^td$/i.test(element.tagName)) {
            var table = nodeInfo.table;
            if (table && getPropertyValue(table.style, "border-collapse") == "collapse") {
                var tableBorderLeft = getBorder(table.style, "left").width;
                var tableBorderTop = getBorder(table.style, "top").width;
                // check if we need to adjust
                if (tableBorderLeft === 0 && tableBorderTop === 0) {
                    return boxes; // nope
                }
                var tableBox = table.element.getBoundingClientRect();
                var firstCell = table.element.rows[0].cells[0];
                var firstCellBox = firstCell.getBoundingClientRect();
                if (firstCellBox.top == tableBox.top || firstCellBox.left == tableBox.left) {
                    return slice$1$1(boxes).map(function(box){
                        return {
                            left   : box.left + tableBorderLeft,
                            top    : box.top + tableBorderTop,
                            right  : box.right + tableBorderLeft,
                            bottom : box.bottom + tableBorderTop,
                            height : box.height,
                            width  : box.width
                        };
                    });
                }
            }
        }
        return boxes;
    }

    // this function will be called to draw each border.  it
    // draws starting at origin and the resulted path must be
    // translated/rotated to be placed in the proper position.
    //
    // arguments are named as if it draws the top border:
    //
    //    - `len` the length of the edge
    //    - `Wtop` the width of the edge (i.e. border-top-width)
    //    - `Wleft` the width of the left edge (border-left-width)
    //    - `Wright` the width of the right edge
    //    - `rl` and `rl` -- the border radius on the left and right
    //      (objects containing x and y, for horiz/vertical radius)
    //    - `transform` -- transformation to apply
    //
    function drawEdge(color, len, Wtop, Wleft, Wright, rl, rr, transform$$1) {
        if (Wtop <= 0) {
            return;
        }

        var path, edge = new Group();
        setTransform$1(edge, transform$$1);
        group.append(edge);

        sanitizeRadius(rl);
        sanitizeRadius(rr);

        // draw main border.  this is the area without the rounded corners
        path = new Path({
            fill: { color: color },
            stroke: null
        });
        edge.append(path);
        path.moveTo(rl.x ? Math.max(rl.x, Wleft) : 0, 0)
            .lineTo(len - (rr.x ? Math.max(rr.x, Wright) : 0), 0)
            .lineTo(len - Math.max(rr.x, Wright), Wtop)
            .lineTo(Math.max(rl.x, Wleft), Wtop)
            .close();

        if (rl.x) {
            drawRoundCorner(Wleft, rl, [ -1, 0, 0, 1, rl.x, 0 ]);
        }

        if (rr.x) {
            drawRoundCorner(Wright, rr, [ 1, 0, 0, 1, len - rr.x, 0 ]);
        }

        // draws one round corner, starting at origin (needs to be
        // translated/rotated to be placed properly).
        function drawRoundCorner(Wright, r, transform$$1) {
            var angle = Math.PI/2 * Wright / (Wright + Wtop);

            // not sanitizing this one, because negative values
            // are useful to fill the box correctly.
            var ri = {
                x: r.x - Wright,
                y: r.y - Wtop
            };

            var path = new Path({
                fill: { color: color },
                stroke: null
            }).moveTo(0, 0);

            setTransform$1(path, transform$$1);

            addArcToPath(path, 0, r.y, {
                startAngle: -90,
                endAngle: -radiansToDegrees(angle),
                radiusX: r.x,
                radiusY: r.y
            });

            if (ri.x > 0 && ri.y > 0) {
                path.lineTo(ri.x * Math.cos(angle), r.y - ri.y * Math.sin(angle));
                addArcToPath(path, 0, r.y, {
                    startAngle: -radiansToDegrees(angle),
                    endAngle: -90,
                    radiusX: ri.x,
                    radiusY: ri.y,
                    anticlockwise: true
                });
            }
            else if (ri.x > 0) {
                path.lineTo(ri.x, Wtop)
                    .lineTo(0, Wtop);
            }
            else {
                path.lineTo(ri.x, Wtop)
                    .lineTo(ri.x, 0);
            }

            edge.append(path.close());
        }
    }

    function drawBackground(box) {
        var background = new Group();
        setClipping$1(background, roundBox(box, rTL0, rTR0, rBR0, rBL0));
        group.append(background);

        if (backgroundColor) {
            var path = new Path({
                fill: { color: backgroundColor.toCssRgba() },
                stroke: null
            });
            path.moveTo(box.left, box.top)
                .lineTo(box.right, box.top)
                .lineTo(box.right, box.bottom)
                .lineTo(box.left, box.bottom)
                .close();
            background.append(path);
        }

        for (var i = backgroundImage.length; --i >= 0;) {
            drawOneBackground(
                background, box,
                backgroundImage[i],
                backgroundRepeat[i % backgroundRepeat.length],
                backgroundPosition[i % backgroundPosition.length],
                backgroundOrigin[i % backgroundOrigin.length],
                backgroundSize[i % backgroundSize.length]
            );
        }
    }

    function drawOneBackground(group, box, background, backgroundRepeat, backgroundPosition, backgroundOrigin, backgroundSize) {
        if (!background || (background == "none")) {
            return;
        }

        if (background.type == "url") {
            var img = IMAGE_CACHE$1[background.url];
            if (img && img.width > 0 && img.height > 0) {
                drawBackgroundImage(group, box, img.width, img.height, function(group, rect){
                    group.append(new Image$1(background.url, rect));
                });
            }
        } else if (background.type == "linear") {
            drawBackgroundImage(group, box, box.width, box.height, gradientRenderer(background));
        } else {
            return;
        }

        function drawBackgroundImage(group, box, img_width, img_height, renderBG) {
            var aspect_ratio = img_width / img_height, f;

            // for background-origin: border-box the box is already appropriate
            var orgBox = box;
            if (backgroundOrigin == "content-box") {
                orgBox = innerBox(orgBox, "border-*-width", element);
                orgBox = innerBox(orgBox, "padding-*", element);
            } else if (backgroundOrigin == "padding-box") {
                orgBox = innerBox(orgBox, "border-*-width", element);
            }

            if (!/^\s*auto(\s+auto)?\s*$/.test(backgroundSize)) {
                if (backgroundSize == "contain") {
                    f = Math.min(orgBox.width / img_width,
                                 orgBox.height / img_height);
                    img_width *= f;
                    img_height *= f;
                }
                else if (backgroundSize == "cover") {
                    f = Math.max(orgBox.width / img_width,
                                 orgBox.height / img_height);
                    img_width *= f;
                    img_height *= f;
                }
                else {
                    var size = backgroundSize.split(/\s+/g);
                    // compute width
                    if (/%$/.test(size[0])) {
                        img_width = orgBox.width * parseFloat(size[0]) / 100;
                    } else {
                        img_width = parseFloat(size[0]);
                    }
                    // compute height
                    if (size.length == 1 || size[1] == "auto") {
                        img_height = img_width / aspect_ratio;
                    } else if (/%$/.test(size[1])) {
                        img_height = orgBox.height * parseFloat(size[1]) / 100;
                    } else {
                        img_height = parseFloat(size[1]);
                    }
                }
            }

            var pos = String(backgroundPosition);

            // IE sometimes reports single-word positions
            // https://github.com/telerik/kendo-ui-core/issues/2786
            //
            // it seems to switch to percentages when the horizontal
            // position is not "center", therefore we don't handle
            // multi-word cases here.  All other browsers return
            // percentages or pixels instead of keywords.  At least
            // for now...
            switch (pos) {
              case "bottom" : pos = "50% 100%"; break;
              case "top"    : pos = "50% 0"; break;
              case "left"   : pos = "0 50%"; break;
              case "right"  : pos = "100% 50%"; break;
              case "center" : pos = "50% 50%"; break;
            }

            pos = pos.split(/\s+/);
            if (pos.length == 1) {
                pos[1] = "50%";
            }

            if (/%$/.test(pos[0])) {
                pos[0] = parseFloat(pos[0]) / 100 * (orgBox.width - img_width);
            } else {
                pos[0] = parseFloat(pos[0]);
            }
            if (/%$/.test(pos[1])) {
                pos[1] = parseFloat(pos[1]) / 100 * (orgBox.height - img_height);
            } else {
                pos[1] = parseFloat(pos[1]);
            }

            var rect = new Rect([ orgBox.left + pos[0], orgBox.top + pos[1] ], [ img_width, img_height ]);

            // XXX: background-repeat could be implemented more
            //      efficiently as a fill pattern (at least for PDF
            //      output, probably SVG too).

            function rewX() {
                while (rect.origin.x > box.left) {
                    rect.origin.x -= img_width;
                }
            }

            function rewY() {
                while (rect.origin.y > box.top) {
                    rect.origin.y -= img_height;
                }
            }

            function repeatX() {
                while (rect.origin.x < box.right) {
                    renderBG(group, rect.clone());
                    rect.origin.x += img_width;
                }
            }

            if (backgroundRepeat == "no-repeat") {
                renderBG(group, rect);
            }
            else if (backgroundRepeat == "repeat-x") {
                rewX();
                repeatX();
            }
            else if (backgroundRepeat == "repeat-y") {
                rewY();
                while (rect.origin.y < box.bottom) {
                    renderBG(group, rect.clone());
                    rect.origin.y += img_height;
                }
            }
            else if (backgroundRepeat == "repeat") {
                rewX();
                rewY();
                var origin = rect.origin.clone();
                while (rect.origin.y < box.bottom) {
                    rect.origin.x = origin.x;
                    repeatX();
                    rect.origin.y += img_height;
                }
            }
        }
    }

    function drawBullet() {
        var listStyleType = getPropertyValue(style, "list-style-type");
        if (listStyleType == "none") {
            return;
        }
        var listStylePosition = getPropertyValue(style, "list-style-position");

        function _drawBullet(f) {
            saveStyle(element, function(){
                element.style.position = "relative";
                var bullet = element.ownerDocument.createElement(KENDO_PSEUDO_ELEMENT);
                bullet.style.position = "absolute";
                bullet.style.boxSizing = "border-box";
                if (listStylePosition == "outside") {
                    bullet.style.width = "6em";
                    bullet.style.left = "-6.8em";
                    bullet.style.textAlign = "right";
                } else {
                    bullet.style.left = "0px";
                }
                f(bullet);
                element.insertBefore(bullet, element.firstChild);
                renderElement(bullet, group);
                element.removeChild(bullet);
            });
        }

        function elementIndex(f) {
            var a = element.parentNode.children;
            var k = element.getAttribute("kendo-split-index");
            if (k != null) {
                return f(k|0, a.length);
            }
            for (var i = 0; i < a.length; ++i) {
                if (a[i] === element) {
                    return f(i, a.length);
                }
            }
        }

        switch (listStyleType) {
          case "circle":
          case "disc":
          case "square":
            _drawBullet(function(bullet){
                // XXX: the science behind these values is called "trial and error".
                bullet.style.fontSize = "60%";
                bullet.style.lineHeight = "200%";
                bullet.style.paddingRight = "0.5em";
                bullet.style.fontFamily = "DejaVu Serif";
                bullet.innerHTML = {
                    "disc"   : "\u25cf",
                    "circle" : "\u25ef",
                    "square" : "\u25a0"
                }[listStyleType];
            });
            break;

          case "decimal":
          case "decimal-leading-zero":
            _drawBullet(function(bullet){
                elementIndex(function(idx){
                    ++idx;
                    if (listStyleType == "decimal-leading-zero" && idx < 10) {
                        idx = "0" + idx;
                    }
                    bullet.innerHTML = idx + ".";
                });
            });
            break;

          case "lower-roman":
          case "upper-roman":
            _drawBullet(function(bullet){
                elementIndex(function(idx){
                    idx = arabicToRoman(idx + 1);
                    if (listStyleType == "upper-roman") {
                        idx = idx.toUpperCase();
                    }
                    bullet.innerHTML = idx + ".";
                });
            });
            break;

          case "lower-latin":
          case "lower-alpha":
          case "upper-latin":
          case "upper-alpha":
            _drawBullet(function(bullet){
                elementIndex(function(idx){
                    idx = alphaNumeral(idx);
                    if (/^upper/i.test(listStyleType)) {
                        idx = idx.toUpperCase();
                    }
                    bullet.innerHTML = idx + ".";
                });
            });
            break;
        }
    }

    // draws a single border box
    function drawOneBox(box, isFirst, isLast) {
        if (box.width === 0 || box.height === 0) {
            return;
        }

        drawBackground(box);

        var shouldDrawLeft = (left.width > 0 && ((isFirst && dir == "ltr") || (isLast && dir == "rtl")));
        var shouldDrawRight = (right.width > 0 && ((isLast && dir == "ltr") || (isFirst && dir == "rtl")));

        // The most general case is that the 4 borders have different widths and border
        // radiuses.  The way that is handled is by drawing 3 Paths for each border: the
        // straight line, and two round corners which represent half of the entire rounded
        // corner.  To simplify code those shapes are drawed at origin (by the drawEdge
        // function), then translated/rotated into the right position.
        //
        // However, this leads to poor results due to rounding in the simpler cases where
        // borders are straight lines.  Therefore we handle a few such cases separately with
        // straight lines. C^wC^wC^w -- nope, scratch that.  poor rendering was because of a bug
        // in Chrome (getClientRects() returns rounded integer values rather than exact floats.
        // web dev is still a ghetto.)

        // first, just in case there is no border...
        if (top.width === 0 && left.width === 0 && right.width === 0 && bottom.width === 0) {
            return;
        }

        // START paint borders
        // if all borders have equal colors...
        if (top.color == right.color && top.color == bottom.color && top.color == left.color) {

            // if same widths too, we can draw the whole border by stroking a single path.
            if (top.width == right.width && top.width == bottom.width && top.width == left.width)
            {
                if (shouldDrawLeft && shouldDrawRight) {
                    // reduce box by half the border width, so we can draw it by stroking.
                    box = innerBox(box, top.width/2);

                    // adjust the border radiuses, again by top.width/2, and make the path element.
                    var path = elementRoundBox(element, box, top.width/2);
                    path.options.stroke = {
                        color: top.color,
                        width: top.width
                    };
                    group.append(path);
                    return;
                }
            }
        }

        // if border radiuses are zero and widths are at most one pixel, we can again use simple
        // paths.
        if (rTL0.x === 0 && rTR0.x === 0 && rBR0.x === 0 && rBL0.x === 0) {
            // alright, 1.9px will do as well.  the difference in color blending should not be
            // noticeable.
            if (top.width < 2 && left.width < 2 && right.width < 2 && bottom.width < 2) {
                // top border
                if (top.width > 0) {
                    group.append(
                        new Path({
                            stroke: { width: top.width, color: top.color }
                        })
                            .moveTo(box.left, box.top + top.width/2)
                            .lineTo(box.right, box.top + top.width/2)
                    );
                }

                // bottom border
                if (bottom.width > 0) {
                    group.append(
                        new Path({
                            stroke: { width: bottom.width, color: bottom.color }
                        })
                            .moveTo(box.left, box.bottom - bottom.width/2)
                            .lineTo(box.right, box.bottom - bottom.width/2)
                    );
                }

                // left border
                if (shouldDrawLeft) {
                    group.append(
                        new Path({
                            stroke: { width: left.width, color: left.color }
                        })
                            .moveTo(box.left + left.width/2, box.top)
                            .lineTo(box.left + left.width/2, box.bottom)
                    );
                }

                // right border
                if (shouldDrawRight) {
                    group.append(
                        new Path({
                            stroke: { width: right.width, color: right.color }
                        })
                            .moveTo(box.right - right.width/2, box.top)
                            .lineTo(box.right - right.width/2, box.bottom)
                    );
                }

                return;
            }
        }
        // END paint borders

        var tmp = adjustBorderRadiusForBox(box, rTL0, rTR0, rBR0, rBL0);
        var rTL = tmp.tl;
        var rTR = tmp.tr;
        var rBR = tmp.br;
        var rBL = tmp.bl;

        // top border
        drawEdge(top.color,
                 box.width, top.width, left.width, right.width,
                 rTL, rTR,
                 [ 1, 0, 0, 1, box.left, box.top ]);

        // bottom border
        drawEdge(bottom.color,
                 box.width, bottom.width, right.width, left.width,
                 rBR, rBL,
                 [ -1, 0, 0, -1, box.right, box.bottom ]);

        // for left/right borders we need to invert the border-radiuses
        function inv(p) {
            return { x: p.y, y: p.x };
        }

        // left border
        drawEdge(left.color,
                 box.height, left.width, bottom.width, top.width,
                 inv(rBL), inv(rTL),
                 [ 0, -1, 1, 0, box.left, box.bottom ]);

        // right border
        drawEdge(right.color,
                 box.height, right.width, top.width, bottom.width,
                 inv(rTR), inv(rBR),
                 [ 0, 1, -1, 0, box.right, box.top ]);
    }
}

function gradientRenderer(gradient) {
    return function(group, rect) {
        var width = rect.width(), height = rect.height();

        switch (gradient.type) {
          case "linear":

            // figure out the angle.
            var angle = gradient.angle != null ? gradient.angle : Math.PI;
            switch (gradient.to) {
              case "top":
                angle = 0;
                break;
              case "left":
                angle = -Math.PI / 2;
                break;
              case "bottom":
                angle = Math.PI;
                break;
              case "right":
                angle = Math.PI / 2;
                break;
              case "top left": case "left top":
                angle = -Math.atan2(height, width);
                break;
              case "top right": case "right top":
                angle = Math.atan2(height, width);
                break;
              case "bottom left": case "left bottom":
                angle = Math.PI + Math.atan2(height, width);
                break;
              case "bottom right": case "right bottom":
                angle = Math.PI - Math.atan2(height, width);
                break;
            }

            if (gradient.reverse) {
                angle -= Math.PI;
            }

            // limit the angle between 0..2PI
            angle %= 2 * Math.PI;
            if (angle < 0) {
                angle += 2 * Math.PI;
            }

            // compute gradient's start/end points.  here len is the length of the gradient line
            // and x,y is the end point relative to the center of the rectangle in conventional
            // (math) axis direction.

            // this is the original (unscaled) length of the gradient line.  needed to deal with
            // absolutely positioned color stops.  formula from the CSS spec:
            // http://dev.w3.org/csswg/css-images-3/#linear-gradient-syntax
            var pxlen = Math.abs(width * Math.sin(angle)) + Math.abs(height * Math.cos(angle));

            // The math below is pretty simple, but it took a while to figure out.  We compute x
            // and y, the *end* of the gradient line.  However, we want to transform them into
            // element-based coordinates (SVG's gradientUnits="objectBoundingBox").  That means,
            // x=0 is the left edge, x=1 is the right edge, y=0 is the top edge and y=1 is the
            // bottom edge.
            //
            // A naive approach would use the original angle for these calculations.  Say we'd
            // like to draw a gradient angled at 45deg in a 100x400 box.  When we use
            // objectBoundingBox, the renderer will draw it in a 1x1 *square* box, and then
            // scale that to the desired dimensions.  The 45deg angle will look more like 70deg
            // after scaling.  SVG (http://www.w3.org/TR/SVG/pservers.html#LinearGradients) says
            // the following:
            //
            //     When gradientUnits="objectBoundingBox" and 'gradientTransform' is the
            //     identity matrix, the normal of the linear gradient is perpendicular to the
            //     gradient vector in object bounding box space (i.e., the abstract coordinate
            //     system where (0,0) is at the top/left of the object bounding box and (1,1) is
            //     at the bottom/right of the object bounding box). When the object's bounding
            //     box is not square, the gradient normal which is initially perpendicular to
            //     the gradient vector within object bounding box space may render
            //     non-perpendicular relative to the gradient vector in user space. If the
            //     gradient vector is parallel to one of the axes of the bounding box, the
            //     gradient normal will remain perpendicular. This transformation is due to
            //     application of the non-uniform scaling transformation from bounding box space
            //     to user space.
            //
            // which is an extremely long and confusing way to tell what I just said above.
            //
            // For this reason we need to apply the reverse scaling to the original angle, so
            // that when it'll finally be rendered it'll actually be at the desired slope.  Now
            // I'll let you figure out the math yourself.

            var scaledAngle = Math.atan(width * Math.tan(angle) / height);
            var sin = Math.sin(scaledAngle), cos = Math.cos(scaledAngle);
            var len = Math.abs(sin) + Math.abs(cos);
            var x = len/2 * sin;
            var y = len/2 * cos;

            // Because of the arctangent, our scaledAngle ends up between -PI/2..PI/2, possibly
            // losing the intended direction of the gradient.  The following fixes it.
            if (angle > Math.PI/2 && angle <= 3*Math.PI/2) {
                x = -x;
                y = -y;
            }

            // compute the color stops.
            var implicit = [], right = 0;
            var stops = gradient.stops.map(function(s, i){
                var offset = s.percent;
                if (offset) {
                    offset = parseFloat(offset) / 100;
                } else if (s.length) {
                    offset = parseFloat(s.length) / pxlen;
                } else if (i === 0) {
                    offset = 0;
                } else if (i == gradient.stops.length - 1) {
                    offset = 1;
                }
                var stop = {
                    color: s.color.toCssRgba(),
                    offset: offset
                };
                if (offset != null) {
                    right = offset;
                    // fix implicit offsets
                    implicit.forEach(function(s, i){
                        var stop = s.stop;
                        stop.offset = s.left + (right - s.left) * (i + 1) / (implicit.length + 1);
                    });
                    implicit = [];
                } else {
                    implicit.push({ left: right, stop: stop });
                }
                return stop;
            });

            var start = [ 0.5 - x, 0.5 + y ];
            var end = [ 0.5 + x, 0.5 - y ];

            // finally, draw it.
            group.append(
                Path.fromRect(rect)
                    .stroke(null)
                    .fill(new LinearGradient({
                        start     : start,
                        end       : end,
                        stops     : stops,
                        userSpace : false
                    }))
            );
            break;
          case "radial":
            // XXX:
            if (window.console && window.console.log) {
                window.console.log("Radial gradients are not yet supported in HTML renderer");
            }
            break;
        }
    };
}

function maybeRenderWidget(element, group) {
    var visual;

    if (element._kendoExportVisual) {
        visual = element._kendoExportVisual();
    } else if (window.kendo && window.kendo.jQuery && element.getAttribute(window.kendo.attr("role"))) {
        var widget = window.kendo.widgetInstance(window.kendo.jQuery(element));
        if (widget && (widget.exportDOMVisual || widget.exportVisual)) {
            if (widget.exportDOMVisual) {
                visual = widget.exportDOMVisual();
            } else {
                visual = widget.exportVisual();
            }
        }
    }

    if (!visual) {
        return false;
    }

    var wrap$$1 = new Group();
    wrap$$1.children.push(visual);

    var bbox = element.getBoundingClientRect();
    wrap$$1.transform(transform$1().translate(bbox.left, bbox.top));

    group.append(wrap$$1);

    return true;
}

function renderImage(element, url, group) {
    var box = getContentBox(element);
    var rect = new Rect([ box.left, box.top ], [ box.width, box.height ]);
    var image = new Image$1(url, rect);
    setClipping$1(image, elementRoundBox(element, box, "content"));
    group.append(image);
}

function zIndexSort(a, b) {
    var sa = getComputedStyle$1(a);
    var sb = getComputedStyle$1(b);
    var za = parseFloat(getPropertyValue(sa, "z-index"));
    var zb = parseFloat(getPropertyValue(sb, "z-index"));
    var pa = getPropertyValue(sa, "position");
    var pb = getPropertyValue(sb, "position");
    if (isNaN(za) && isNaN(zb)) {
        if ((/static|absolute/.test(pa)) && (/static|absolute/.test(pb))) {
            return 0;
        }
        if (pa == "static") {
            return -1;
        }
        if (pb == "static") {
            return 1;
        }
        return 0;
    }
    if (isNaN(za)) {
        return zb === 0 ? 0 : zb > 0 ? -1 : 1;
    }
    if (isNaN(zb)) {
        return za === 0 ? 0 : za > 0 ? 1 : -1;
    }
    return parseFloat(za) - parseFloat(zb);
}

function isFormField(element) {
    return /^(?:textarea|select|input)$/i.test(element.tagName);
}

function getSelectedOption(element) {
    if (element.selectedOptions && element.selectedOptions.length > 0) {
        return element.selectedOptions[0];
    }
    return element.options[element.selectedIndex];
}

function renderCheckbox(element, group) {
    var style = getComputedStyle$1(element);
    var color = getPropertyValue(style, "color");
    var box = element.getBoundingClientRect();
    if (element.type == "checkbox") {
        group.append(
            Path.fromRect(
                new Rect([ box.left+1, box.top+1 ],
                             [ box.width-2, box.height-2 ])
            ).stroke(color, 1)
        );
        if (element.checked) {
            // fill a rectangle inside?  looks kinda ugly.
            // group.append(
            //     Path.fromRect(
            //         new geo.Rect([ box.left+4, box.top+4 ],
            //                      [ box.width-8, box.height-8])
            //     ).fill(color).stroke(null)
            // );

            // let's draw a checkmark instead.  artistic, eh?
            group.append(
                new Path()
                    .stroke(color, 1.2)
                    .moveTo(box.left + 0.22 * box.width,
                            box.top + 0.55 * box.height)
                    .lineTo(box.left + 0.45 * box.width,
                            box.top + 0.75 * box.height)
                    .lineTo(box.left + 0.78 * box.width,
                            box.top + 0.22 * box.width)
            );
        }
    } else {
        group.append(
            new Circle(
                new Circle$2([
                    (box.left + box.right) / 2,
                    (box.top + box.bottom) / 2
                ], Math.min(box.width-2, box.height-2) / 2)
            ).stroke(color, 1)
        );
        if (element.checked) {
            group.append(
                new Circle(
                    new Circle$2([
                        (box.left + box.right) / 2,
                        (box.top + box.bottom) / 2
                    ], Math.min(box.width-8, box.height-8) / 2)
                ).fill(color).stroke(null)
            );
        }
    }
}

function renderFormField(element, group) {
    var tag = element.tagName.toLowerCase();
    if (tag == "input" && (element.type == "checkbox" || element.type == "radio")) {
        return renderCheckbox(element, group);
    }
    var p = element.parentNode;
    var doc = element.ownerDocument;
    var el = doc.createElement(KENDO_PSEUDO_ELEMENT);
    var option;
    el.style.cssText = getCssText(getComputedStyle$1(element));
    if (tag == "input") {
        el.style.whiteSpace = "pre";
    }
    if (tag == "select" || tag == "textarea") {
        el.style.overflow = "auto";
    }
    if (tag == "select") {
        if (element.multiple) {
            for (var i = 0; i < element.options.length; ++i) {
                option = doc.createElement(KENDO_PSEUDO_ELEMENT);
                option.style.cssText = getCssText(getComputedStyle$1(element.options[i]));
                option.style.display = "block"; // IE9 messes up without this
                option.textContent = element.options[i].textContent;
                el.appendChild(option);
            }
        } else {
            option = getSelectedOption(element);
            if (option) {
                el.textContent = option.textContent;
            }
        }
    } else {
        el.textContent = element.value;
    }
    p.insertBefore(el, element);
    el.scrollLeft = element.scrollLeft;
    el.scrollTop = element.scrollTop;

    // must temporarily hide the original element, otherwise it
    // may affect layout of the fake element we want to render.
    element.style.display = "none";

    renderContents(el, group);
    element.style.display = "";
    p.removeChild(el);
}

function serializeSVG(element) {
    var serializer = new window.XMLSerializer();
    var xml = serializer.serializeToString(element);

    if (browser$3.mozilla && !(element.getAttribute("width") && element.getAttribute("height"))) {
        var doc = new window.DOMParser().parseFromString(xml, "image/svg+xml");
        var svg$$1 = doc.documentElement;
        var box = getContentBox(element);
        svg$$1.setAttribute("width", box.width);
        svg$$1.setAttribute("height", box.height);
        xml = serializer.serializeToString(svg$$1);
    }

    return xml;
}

function renderContents(element, group) {
    if (nodeInfo._stackingContext.element === element) {
        // the group that was set in pushNodeInfo might have
        // changed due to clipping/transforms, update it here.
        nodeInfo._stackingContext.group = group;
    }
    switch (element.tagName.toLowerCase()) {
      case "img":
        renderImage(element, element.src, group);
        break;

      case "svg":
        var xml = serializeSVG(element);
        var dataURL = "data:image/svg+xml;base64," + (encodeBase64(xml));
        renderImage(element, dataURL, group);
        break;

      case "canvas":
        try {
            renderImage(element, element.toDataURL("image/png"), group);
        } catch (ex) {
            // tainted; can't draw it, ignore.
        }
        break;

      case "textarea":
      case "input":
      case "select":
        renderFormField(element, group);
        break;

      default:
        var children = [], floats = [], positioned = [];
        for (var i = element.firstChild; i; i = i.nextSibling) {
            switch (i.nodeType) {
              case 3:         // Text
                if (/\S/.test(i.data)) {
                    renderText(element, i, group);
                }
                break;
              case 1:         // Element
                var style = getComputedStyle$1(i);
                var floating = getPropertyValue(style, "float");
                var position = getPropertyValue(style, "position");
                if (position != "static") {
                    positioned.push(i);
                }
                else if (floating != "none") {
                    floats.push(i);
                } else {
                    children.push(i);
                }
                break;
            }
        }

        mergeSort(children, zIndexSort).forEach(function(el){ renderElement(el, group); });
        mergeSort(floats, zIndexSort).forEach(function(el){ renderElement(el, group); });
        mergeSort(positioned, zIndexSort).forEach(function(el){ renderElement(el, group); });
    }
}

function renderText(element, node, group) {
    if (emptyClipbox()) {
        return;
    }
    var style = getComputedStyle$1(element);

    if (parseFloat(getPropertyValue(style, "text-indent")) < -500) {
        // assume it should not be displayed.  the slider's
        // draggable handle displays a Drag text for some reason,
        // having text-indent: -3333px.
        return;
    }

    var text = node.data;
    var start = 0;
    var end = text.search(/\S\s*$/) + 1;

    if (!end) {
        return; // whitespace-only node
    }

    var fontSize = getPropertyValue(style, "font-size");
    var lineHeight = getPropertyValue(style, "line-height");

    // simply getPropertyValue("font") doesn't work in Firefox :-\
    var font = [
        getPropertyValue(style, "font-style"),
        getPropertyValue(style, "font-variant"),
        getPropertyValue(style, "font-weight"),
        fontSize, // no need for line height here; it breaks layout in FF
        getPropertyValue(style, "font-family")
    ].join(" ");

    fontSize = parseFloat(fontSize);
    lineHeight = parseFloat(lineHeight);

    if (fontSize === 0 || isNaN(fontSize)) {
        return;
    }

    var color = getPropertyValue(style, "color");
    var range = element.ownerDocument.createRange();
    var align$$1 = getPropertyValue(style, "text-align");
    var isJustified = align$$1 == "justify";
    var columnCount = getPropertyValue(style, "column-count", 1);
    var whiteSpace = getPropertyValue(style, "white-space");
    var textTransform = getPropertyValue(style, "text-transform");

    // A line of 500px, with a font of 12px, contains an average of 80 characters, but since we
    // err, we'd like to guess a bigger number rather than a smaller one.  Multiplying by 5
    // seems to be a good option.
    var estimateLineLength = element.getBoundingClientRect().width / fontSize * 5;
    if (estimateLineLength === 0) {
        estimateLineLength = 500;
    }

    // we'll maintain this so we can workaround bugs in Chrome's Range.getClientRects
    // https://github.com/telerik/kendo/issues/5740
    var prevLineBottom = null;

    var underline = nodeInfo["underline"];
    var lineThrough = nodeInfo["line-through"];
    var overline = nodeInfo["overline"];
    var underlineOffset = nodeInfo["underline-offset"];

    if (underline) {
        forEachRect(decorateUnder);
    }

    // doChunk returns true when all text has been rendered
    while (!doChunk()) {}

    if (lineThrough || overline) {
        forEachRect(decorateOver);
    }

    return;                 // only function declarations after this line

    function forEachRect(callback) {
        range.selectNode(node);
        var clientRects = slice$1$1(range.getClientRects());

        forEachRect = function (cb) { return clientRects.forEach(cb); };
        forEachRect(callback);
    }

    function actuallyGetRangeBoundingRect(range) {
        // XXX: to be revised when this Chrome bug is fixed:
        // https://bugs.chromium.org/p/chromium/issues/detail?id=612459
        if (microsoft || browser$3.chrome || browser$3.safari) {
            // Workaround browser bugs: IE and Chrome would sometimes
            // return 0 or 1-width rectangles before or after the main
            // one.  https://github.com/telerik/kendo/issues/4674

            // Actually Chrome 50 got worse, since the rectangles can now have the width of a
            // full character, making it hard to tell whether it's a bogus rectangle or valid
            // selection location.  The workaround is to ignore rectangles that fall on the
            // previous line.  https://github.com/telerik/kendo/issues/5740
            var rectangles = range.getClientRects(), box = {
                top    :  Infinity,
                right  : -Infinity,
                bottom : -Infinity,
                left   :  Infinity
            }, done = false;
            for (var i = 0; i < rectangles.length; ++i) {
                var b = rectangles[i];
                if (b.width <= 1 || b.bottom === prevLineBottom) {
                    continue;   // bogus rectangle
                }
                box.left   = Math.min(b.left   , box.left);
                box.top    = Math.min(b.top    , box.top);
                box.right  = Math.max(b.right  , box.right);
                box.bottom = Math.max(b.bottom , box.bottom);
                done = true;
            }
            if (!done) {
                return range.getBoundingClientRect();
            }
            box.width = box.right - box.left;
            box.height = box.bottom - box.top;
            return box;
        }
        return range.getBoundingClientRect();
    }

    // Render a chunk of text, typically one line (but for justified text we render each word as
    // a separate Text object, because spacing is variable).  Returns true when it finished the
    // current node.  After each chunk it updates `start` to just after the last rendered
    // character.
    function doChunk() {
        var origStart = start;
        var box, pos = text.substr(start).search(/\S/);
        start += pos;
        if (pos < 0 || start >= end) {
            return true;
        }

        // Select a single character to determine the height of a line of text.  The box.bottom
        // will be essential for us to figure out where the next line begins.
        range.setStart(node, start);
        range.setEnd(node, start + 1);
        box = actuallyGetRangeBoundingRect(range);

        // for justified text we must split at each space, because space has variable width.
        var found = false;
        if (isJustified || columnCount > 1) {
            pos = text.substr(start).search(/\s/);
            if (pos >= 0) {
                // we can only split there if it's on the same line, otherwise we'll fall back
                // to the default mechanism (see findEOL below).
                range.setEnd(node, start + pos);
                var r = actuallyGetRangeBoundingRect(range);
                if (r.bottom == box.bottom) {
                    box = r;
                    found = true;
                    start += pos;
                }
            }
        }

        if (!found) {
            // This code does three things: (1) it selects one line of text in `range`, (2) it
            // leaves the bounding rect of that line in `box` and (3) it returns the position
            // just after the EOL.  We know where the line starts (`start`) but we don't know
            // where it ends.  To figure this out, we select a piece of text and look at the
            // bottom of the bounding box.  If it changes, we have more than one line selected
            // and should retry with a smaller selection.
            //
            // To speed things up, we first try to select all text in the node (`start` ->
            // `end`).  If there's more than one line there, then select only half of it.  And
            // so on.  When we find a value for `end` that fits in one line, we try increasing
            // it (also in halves) until we get to the next line.  The algorithm stops when the
            // right side of the bounding box does not change.
            //
            // One more thing to note is that everything happens in a single Text DOM node.
            // There's no other tags inside it, therefore the left/top coordinates of the
            // bounding box will not change.
            pos = (function findEOL(min, eol, max){
                range.setEnd(node, eol);
                var r = actuallyGetRangeBoundingRect(range);
                if (r.bottom != box.bottom && min < eol) {
                    return findEOL(min, (min + eol) >> 1, eol);
                } else if (r.right != box.right) {
                    box = r;
                    if (eol < max) {
                        return findEOL(eol, (eol + max) >> 1, max);
                    } else {
                        return eol;
                    }
                } else {
                    return eol;
                }
            })(start, Math.min(end, start + estimateLineLength), end);

            if (pos == start) {
                // if EOL is at the start, then no more text fits on this line.  Skip the
                // remainder of this node entirely to avoid a stack overflow.
                return true;
            }
            start = pos;

            pos = range.toString().search(/\s+$/);
            if (pos === 0) {
                return false; // whitespace only; we should not get here.
            }
            if (pos > 0) {
                // eliminate trailing whitespace
                range.setEnd(node, range.startOffset + pos);
                box = actuallyGetRangeBoundingRect(range);
            }
        }

        // another workaround for IE: if we rely on getBoundingClientRect() we'll overlap with the bullet for LI
        // elements.  Calling getClientRects() and using the *first* rect appears to give us the correct location.
        // Note: not to be used in Chrome as it randomly returns a zero-width rectangle from the previous line.
        if (microsoft) {
            box = range.getClientRects()[0];
        }

        var str = range.toString();
        if (!/^(?:pre|pre-wrap)$/i.test(whiteSpace)) {
            // node with non-significant space -- collapse whitespace.
            str = str.replace(/\s+/g, " ");
        }
        else if (/\t/.test(str)) {
            // with significant whitespace we need to do something about literal TAB characters.
            // There's no TAB glyph in a font so they would be rendered in PDF as an empty box,
            // and the whole text will stretch to fill the original width.  The core PDF lib
            // does not have sufficient context to deal with it.

            // calculate the starting column here, since we initially discarded any whitespace.
            var cc = 0;
            for (pos = origStart; pos < range.startOffset; ++pos) {
                var code = text.charCodeAt(pos);
                if (code == 9) {
                    // when we meet a TAB we must round up to the next tab stop.
                    // in all browsers TABs seem to be 8 characters.
                    cc += 8 - cc % 8;
                } else if (code == 10 || code == 13) {
                    // just in case we meet a newline we must restart.
                    cc = 0;
                } else {
                    // ordinary character --> advance one column
                    cc++;
                }
            }

            // based on starting column, replace any TAB characters in the string we actually
            // have to display with spaces so that they align to columns multiple of 8.
            while ((pos = str.search("\t")) >= 0) {
                var indent = "        ".substr(0, 8 - (cc + pos) % 8);
                str = str.substr(0, pos) + indent + str.substr(pos + 1);
            }
        }

        if (!found) {
            prevLineBottom = box.bottom;
        }
        drawText(str, box);
    }

    function drawText(str, box) {
        // In IE the box height will be approximately lineHeight, while in
        // other browsers it'll (correctly) be the height of the bounding
        // box for the current text/font.  Which is to say, IE sucks again.
        // The only good solution I can think of is to measure the text
        // ourselves and center the bounding box.
        if (microsoft && !isNaN(lineHeight)) {
            var height = getFontHeight(font);
            var top = (box.top + box.bottom - height) / 2;
            box = {
                top    : top,
                right  : box.right,
                bottom : top + height,
                left   : box.left,
                height : height,
                width  : box.right - box.left
            };
        }

        // var path = new Path({ stroke: { color: "red" }});
        // path.moveTo(box.left, box.top)
        //     .lineTo(box.right, box.top)
        //     .lineTo(box.right, box.bottom)
        //     .lineTo(box.left, box.bottom)
        //     .close();
        // group.append(path);

        switch (textTransform) {
          case "uppercase":
            str = str.toUpperCase();
            break;
          case "lowercase":
            str = str.toLowerCase();
            break;
          case "capitalize":
            str = str.replace(/(?:^|\s)\S/g, function (l) { return l.toUpperCase(); });
            break;
        }

        var text = new TextRect(
            str, new Rect([ box.left, box.top ],
                              [ box.width, box.height ]),
            {
                font: font,
                fill: { color: color }
            }
        );
        group.append(text);
    }

    function drawTextLine(lineWidth, textBox, color, ypos) {
        if (color) {
            var path = new Path({ stroke: {
                width: lineWidth,
                color: color
            }});

            ypos -= lineWidth;
            path.moveTo(textBox.left, ypos)
                .lineTo(textBox.right, ypos);
            group.append(path);
        }
    }

    function decorateOver(box) {
        var width = fontSize / 12;
        drawTextLine(width, box, lineThrough, box.bottom - box.height / 2.7);
        drawTextLine(width, box, overline, box.top);
    }

    function decorateUnder(box) {
        var width = fontSize / 12;
        var underlinePos = box.bottom;
        if (underlineOffset != null) {
            underlinePos += underlineOffset;
        } else {
            underlinePos += width; // for "auto" it seems better to add line width
        }
        drawTextLine(width, box, underline, underlinePos);
    }
}

function groupInStackingContext(element, group, zIndex) {
    var main;
    if (zIndex != "auto") {
        // use the current stacking context
        main = nodeInfo._stackingContext.group;
        zIndex = parseFloat(zIndex);
    } else {
        // normal flow — use given container.  we still have to
        // figure out where should we insert this element with the
        // assumption that its z-index is zero, as the group might
        // already contain elements with higher z-index.
        main = group;
        zIndex = 0;
    }
    var a = main.children;
    for (var i = 0; i < a.length; ++i) {
        if (a[i]._dom_zIndex != null && a[i]._dom_zIndex > zIndex) {
            break;
        }
    }

    var tmp = new Group();
    main.insert(i, tmp);
    tmp._dom_zIndex = zIndex;

    if (main !== group) {
        // console.log("Placing", element, "in", nodeInfo._stackingContext.element, "at position", i, " / ", a.length);
        // console.log(a.slice(i+1));

        // if (nodeInfo._matrix) {
        //     tmp.transform(nodeInfo._matrix);
        // }
        if (nodeInfo._clipbox) {
            var m = nodeInfo._matrix.invert();
            var r = nodeInfo._clipbox.transformCopy(m);
            setClipping$1(tmp, Path.fromRect(r));
            // console.log(r);
            // tmp.append(Path.fromRect(r));
            // tmp.append(new Text(element.className || element.id, r.topLeft()));
        }
    }

    return tmp;
}

function renderElement(element, container) {
    var style = getComputedStyle$1(element);

    updateCounters(style);

    if (/^(style|script|link|meta|iframe|col|colgroup)$/i.test(element.tagName)) {
        return;
    }

    if (nodeInfo._clipbox == null) {
        return;
    }

    var opacity = parseFloat(getPropertyValue(style, "opacity"));
    var visibility = getPropertyValue(style, "visibility");
    var display = getPropertyValue(style, "display");

    if (opacity === 0 || visibility == "hidden" || display == "none") {
        return;
    }

    var tr = getTransform(style);
    var group;

    var zIndex = getPropertyValue(style, "z-index");
    if ((tr || opacity < 1) && zIndex == "auto") {
        zIndex = 0;
    }
    group = groupInStackingContext(element, container, zIndex);

    // XXX: remove at some point
    // group._pdfElement = element;
    // group.options._pdfDebug = "";
    // if (element.id) {
    //     group.options._pdfDebug = "#" + element.id;
    // }
    // if (element.className) {
    //     group.options._pdfDebug += "." + element.className.split(" ").join(".");
    // }

    if (opacity < 1) {
        group.opacity(opacity * group.opacity());
    }

    pushNodeInfo(element, style, group);

    if (!tr) {
        _renderWithPseudoElements(element, group);
    }
    else {
        saveStyle(element, function(){
            // must clear transform, so getBoundingClientRect returns correct values.
            pleaseSetPropertyValue(element.style, "transform", "none", "important");

            // must also clear transitions, so correct values are returned *immediately*
            pleaseSetPropertyValue(element.style, "transition", "none", "important");

            // the presence of any transform makes it behave like it had position: relative,
            // because why not.
            // http://meyerweb.com/eric/thoughts/2011/09/12/un-fixing-fixed-elements-with-css-transforms/
            if (getPropertyValue(style, "position") == "static") {
                // but only if it's not already positioned. :-/
                pleaseSetPropertyValue(element.style, "position", "relative", "important");
            }

            // must translate to origin before applying the CSS
            // transformation, then translate back.
            var bbox = element.getBoundingClientRect();
            var x = bbox.left + tr.origin[0];
            var y = bbox.top + tr.origin[1];
            var m = [ 1, 0, 0, 1, -x, -y ];
            m = mmul$1(m, tr.matrix);
            m = mmul$1(m, [ 1, 0, 0, 1, x, y ]);
            m = setTransform$1(group, m);

            nodeInfo._matrix = nodeInfo._matrix.multiplyCopy(m);

            _renderWithPseudoElements(element, group);
        });
    }

    popNodeInfo();

    //drawDebugBox(element.getBoundingClientRect(), container);
}

// function drawDebugBox(box, group, color) {
//     var path = Path.fromRect(new geo.Rect([ box.left, box.top ], [ box.width, box.height ]));
//     if (color) {
//         path.stroke(color);
//     }
//     group.append(path);
// }

// function dumpTextNode(node) {
//     var txt = node.data.replace(/^\s+/, "");
//     if (txt.length < 100) {
//         console.log(node.data.length + ": |" + txt);
//     } else {
//         console.log(node.data.length + ": |" + txt.substr(0, 50) + "|...|" + txt.substr(-50));
//     }
// }

function mmul$1(a, b) {
    var a1 = a[0], b1 = a[1], c1 = a[2], d1 = a[3], e1 = a[4], f1 = a[5];
    var a2 = b[0], b2 = b[1], c2 = b[2], d2 = b[3], e2 = b[4], f2 = b[5];
    return [
        a1*a2 + b1*c2,          a1*b2 + b1*d2,
        c1*a2 + d1*c2,          c1*b2 + d1*d2,
        e1*a2 + f1*c2 + e2,     e1*b2 + f1*d2 + f2
    ];
}

exports.drawing = drawing;
exports.geometry = geometry;
exports.pdf = pdf;
exports.exportPDF = exportPDF;
exports.exportImage = exportImage;
exports.exportSVG = exportSVG;
exports.animationFrame = animationFrame;
exports.Class = Class;
exports.Color = Color;
exports.htmlEncode = htmlEncode;
exports.logToConsole = logToConsole;
exports.Observable = Observable;
exports.saveAs = saveAs;
exports.support = support;
exports.template = template$1;
exports.throttle = throttle;
exports.parseColor = parseColor;
exports.namedColors = namedColors;
exports.Animation = Animation;
exports.AnimationFactory = AnimationFactory;
exports.Arc = Arc;
exports.BaseNode = BaseNode;
exports.Circle = Circle;
exports.Element = Element$1;
exports.Gradient = Gradient;
exports.GradientStop = GradientStop;
exports.Group = Group;
exports.Image = Image$1;
exports.Layout = Layout;
exports.LinearGradient = LinearGradient;
exports.MultiPath = MultiPath;
exports.HasObservers = HasObservers;
exports.OptionsStore = OptionsStore;
exports.Path = Path;
exports.PathParser = PathParser;
exports.QuadNode = QuadNode;
exports.RadialGradient = RadialGradient;
exports.Rect = Rect$2;
exports.ShapesQuadTree = ShapesQuadTree;
exports.Surface = Surface;
exports.SurfaceFactory = SurfaceFactory;
exports.Text = Text;
exports.align = align;
exports.fit = fit;
exports.stack = stack;
exports.vAlign = vAlign;
exports.vStack = vStack;
exports.vWrap = vWrap;
exports.wrap = wrap;
exports.drawDOM = drawDOM;
exports.drawText = drawText$1;
exports.getFontFaces = getFontFaces;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9jb21tb24vY2xhc3MuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvY29tbW9uL29ic2VydmFibGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvY29tbW9uL2FuaW1hdGlvbi1mcmFtZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9jb21tb24vaHRtbC1lbmNvZGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvY29tbW9uL2xvZy10by1jb25zb2xlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2NvbW1vbi9zYXZlLWFzLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2NvbW1vbi9zdXBwb3J0LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2NvbW1vbi90ZW1wbGF0ZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy91dGlsL25vdy5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9jb21tb24vdGhyb3R0bGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvY29tbW9uL2NvbG9yL25hbWVkLWNvbG9ycy5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9jb21tb24vY29sb3IvcGFyc2UtY29sb3IuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvY29tbW9uL2NvbG9yL2NvbG9yLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2NvcmUvaGFzLW9ic2VydmVycy5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2FwcGVuZC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2FyYWJpYy10by1yb21hbi5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2NyZWF0ZS1wcm9taXNlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvZGVmaW5lZC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2RlZmluaXRpb24taWQuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvdXRpbC9jb25zdGFudHMuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvdXRpbC9kZWcuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvdXRpbC9lbmNvZGUtdXRmLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvZW5jb2RlLWJhc2U2NC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2V2ZW50LWNvb3JkaW5hdGVzLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvZXZlbnQtZWxlbWVudC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2lzLXRyYW5zcGFyZW50LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvbGFzdC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2xpbWl0LXZhbHVlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvbWVyZ2Utc29ydC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy91dGlsL3Byb21pc2UtYWxsLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvcmFkLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvcm91bmQuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvdXRpbC92YWx1ZS1vci1kZWZhdWx0LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvYmluZC1ldmVudHMuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvdXRpbC9lbGVtZW50LW9mZnNldC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2VsZW1lbnQtc3R5bGVzLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvZWxlbWVudC1zaXplLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvdW5iaW5kLWV2ZW50cy5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2VsZW1lbnQtcGFkZGluZy5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS9tYXRyaXguanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvdXRpbC9lbGVtZW50LXNjYWxlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3RleHQtbWV0cmljcy9scnUtY2FjaGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvdGV4dC1tZXRyaWNzL3V0aWwuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvdGV4dC1tZXRyaWNzL3RleHQtbWV0cmljcy5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy90ZXh0LW1ldHJpY3MvbWVhc3VyZS10ZXh0LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2NvcmUvb3B0aW9ucy1zdG9yZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9taXhpbnMvd2l0aC1hY2Nlc3NvcnMuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvdG8tbWF0cml4LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L3BvaW50LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L3NpemUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvcmVjdC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS90cmFuc2Zvcm1hdGlvbi5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS90cmFuc2Zvcm0uanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc2hhcGVzL2VsZW1lbnQuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvbWF0aC9lbGxpcHNlLWV4dHJlbWUtYW5nbGVzLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L2NpcmNsZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9taXhpbnMvcGFpbnRhYmxlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL21peGlucy9tZWFzdXJhYmxlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL21peGlucy93aXRoLWdlb21ldHJ5LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3NoYXBlcy9jaXJjbGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvY29uc3RhbnRzLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L21hdGgvY2xvc2UuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvbWF0aC9jbG9zZS1vci1sZXNzLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L21hdGgvbGluZS1pbnRlcnNlY3Rpb24uanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvYXJjLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3NoYXBlcy9lbGVtZW50cy1hcnJheS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9zaGFwZXMvZ2VvbWV0cnktZWxlbWVudHMtYXJyYXkuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvbWF0aC9pcy1vdXQtb2YtZW5kLXBvaW50LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L21hdGgvY2FsY3VsYXRlLWN1cnZlLWF0LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L21hdGgvdG8tY3ViaWMtcG9seW5vbWlhbC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS9tYXRoL2NvbXBsZXgtbnVtYmVyLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L21hdGgvc29sdmUtY3ViaWMtZXF1YXRpb24uanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvbWF0aC9oYXMtcm9vdHMtaW4tcmFuZ2UuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvbWF0aC9jdXJ2ZS1pbnRlcnNlY3Rpb25zLWNvdW50LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L21hdGgvbGluZS1pbnRlcnNlY3Rpb25zLWNvdW50LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL21peGlucy93aXRoLXBvaW50cy5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS9zZWdtZW50LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3NoYXBlcy91dGlscy9wb2ludHMtdG8tY3VydmUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvcGFyc2luZy9zaGFwZS1tYXAuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvcGFyc2luZy9wYXJzZS1wYXRoLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3NoYXBlcy91dGlscy9lbGVtZW50cy1ib3VuZGluZy1ib3guanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc2hhcGVzL3V0aWxzL2VsZW1lbnRzLWNsaXBwZW5kLWJvdW5kaW5nLWJveC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9zaGFwZXMvcGF0aC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9zaGFwZXMvYXJjLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3NoYXBlcy90ZXh0LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3NoYXBlcy9pbWFnZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9taXhpbnMvdHJhdmVyc2FibGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc2hhcGVzL2dyb3VwLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2FsaWdubWVudC90cmFuc2xhdGUtdG8tcG9pbnQuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvYWxpZ25tZW50L2FsaWduLXN0YXJ0LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2FsaWdubWVudC9hbGlnbi1zdGFydC1yZXZlcnNlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3NoYXBlcy9sYXlvdXQuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc2hhcGVzL3JlY3QuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvYWxpZ25tZW50L2FsaWduLWVsZW1lbnRzLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2FsaWdubWVudC9hbGlnbi5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9hbGlnbm1lbnQvdi1hbGlnbi5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9hbGlnbm1lbnQvc3RhY2stZWxlbWVudHMuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvYWxpZ25tZW50L2NyZWF0ZS1zdGFjay1lbGVtZW50cy5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9hbGlnbm1lbnQvc3RhY2suanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvYWxpZ25tZW50L3Ytc3RhY2suanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvYWxpZ25tZW50L3dyYXAtZWxlbWVudHMuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvYWxpZ25tZW50L3dyYXAuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvYWxpZ25tZW50L3Ytd3JhcC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9hbGlnbm1lbnQvZml0LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2dyYWRpZW50cy9zdG9wcy1hcnJheS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9taXhpbnMvd2l0aC1vcHRpb25zLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2dyYWRpZW50cy9ncmFkaWVudC1zdG9wLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2dyYWRpZW50cy9ncmFkaWVudC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9ncmFkaWVudHMvbGluZWFyLWdyYWRpZW50LmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2dyYWRpZW50cy9yYWRpYWwtZ3JhZGllbnQuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvYW5pbWF0aW9ucy9lYXNpbmctZnVuY3Rpb25zLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2FuaW1hdGlvbnMvYW5pbWF0aW9uLWZhY3RvcnkuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvYW5pbWF0aW9ucy9hbmltYXRpb24uanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvcGFyc2luZy9wYXRoLXBhcnNlci5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9jb3JlL2Jhc2Utbm9kZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9jb3JlL3N1cmZhY2UuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc3ZnL3V0aWxzL3JlbmRlci1hdHRyaWJ1dGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc3ZnL3V0aWxzL3JlbmRlci1hbGwtYXR0cmlidXRlcy5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9zdmcvdXRpbHMvcmVuZGVyLXN0eWxlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy9ub2RlLW1hcC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9zdmcvY29uc3RhbnRzLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy91dGlscy9yZW5kZXItc3ZnLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy9ub2RlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy9ncmFkaWVudC1zdG9wLW5vZGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc3ZnL2dyYWRpZW50LW5vZGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc3ZnL2xpbmVhci1ncmFkaWVudC1ub2RlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy9yYWRpYWwtZ3JhZGllbnQtbm9kZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9zdmcvY2xpcC1ub2RlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy9kZWZpbml0aW9uLW5vZGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc3ZnL3Jvb3Qtbm9kZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9jb3JlL2NvbnN0YW50cy5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9zdmcvcGF0aC1ub2RlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy9hcmMtbm9kZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9zdmcvY2lyY2xlLW5vZGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc3ZnL2dyb3VwLW5vZGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc3ZnL2ltYWdlLW5vZGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc3ZnL211bHRpLXBhdGgtbm9kZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9zdmcvcmVjdC1ub2RlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy90ZXh0LW5vZGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc3ZnL3N1cmZhY2UuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvY2FudmFzL25vZGUtbWFwLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2NhbnZhcy91dGlscy9yZW5kZXItcGF0aC5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9jYW52YXMvbm9kZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9jYW52YXMvZ3JvdXAtbm9kZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9jYW52YXMvcm9vdC1ub2RlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3NlYXJjaC9xdWFkLXJvb3QuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvc2VhcmNoL3F1YWQtbm9kZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9zZWFyY2gvc2hhcGVzLXF1YWQtdHJlZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9jYW52YXMvc3VyZmFjZS1jdXJzb3IuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvY2FudmFzL3BhdGgtbm9kZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9jYW52YXMvYXJjLW5vZGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvY2FudmFzL2NpcmNsZS1ub2RlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2NhbnZhcy9pbWFnZS1ub2RlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2NhbnZhcy9tdWx0aS1wYXRoLW5vZGUuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvY2FudmFzL3JlY3Qtbm9kZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9jYW52YXMvdGV4dC1ub2RlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL2NhbnZhcy9zdXJmYWNlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3N1cmZhY2UtZmFjdG9yeS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9zdXJmYWNlLmpzIiwiL19fdy9rZW5kby1kcmF3aW5nL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy9leHBvcnQtZ3JvdXAuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvY2FudmFzL2V4cG9ydC1pbWFnZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9zdmcvZXhwb3J0LXN2Zy5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9wZGYvdXRpbHMuanMiLCIvX193L2tlbmRvLWRyYXdpbmcva2VuZG8tZHJhd2luZy9zcmMvcGRmL3R0Zi5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9wZGYvZGVmbGF0ZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9wZGYvY29yZS5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9wZGYvZHJhd2luZy5qcyIsIi9fX3cva2VuZG8tZHJhd2luZy9rZW5kby1kcmF3aW5nL3NyYy9odG1sL2NvcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xhc3Mge1xuICAgIC8vIEVtcHR5IGJhc2UgY2xhc3MgbmVlZGVkIGZvciBjb21wYXRpYmlsaXR5IHdpdGggS2VuZG8gVUkgZm9yIGpRdWVyeVxufVxuIiwiaW1wb3J0IENsYXNzIGZyb20gJy4vY2xhc3MnO1xuXG5jbGFzcyBPYnNlcnZhYmxlIGV4dGVuZHMgQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIH1cblxuICAgIGJpbmQoZXZlbnROYW1lLCBoYW5kbGVycywgb25lKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50TmFtZXMgPSBnZXRBcnJheShldmVudE5hbWUpO1xuICAgICAgICBjb25zdCBoYW5kbGVyc0lzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKGhhbmRsZXJzKTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gZXZlbnROYW1lcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGhhbmRsZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGZpZWxkIGluIGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYmluZChmaWVsZCwgZXZlbnROYW1lW2ZpZWxkXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50TmFtZSA9IGV2ZW50TmFtZXNbaWR4XTtcblxuICAgICAgICAgICAgbGV0IGhhbmRsZXIgPSBoYW5kbGVyc0lzRnVuY3Rpb24gPyBoYW5kbGVycyA6IGhhbmRsZXJzW2V2ZW50TmFtZV07XG5cbiAgICAgICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbCA9IGhhbmRsZXI7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSAoKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuYmluZChldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5vcmlnaW5hbCA9IG9yaWdpbmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgZXZlbnRzID0gdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0gPSB0aGlzLl9ldmVudHNbZXZlbnROYW1lXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBldmVudHMucHVzaChoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9uZShldmVudE5hbWVzLCBoYW5kbGVycykge1xuICAgICAgICByZXR1cm4gdGhpcy5iaW5kKGV2ZW50TmFtZXMsIGhhbmRsZXJzLCB0cnVlKTtcbiAgICB9XG5cbiAgICBmaXJzdChldmVudE5hbWUsIGhhbmRsZXJzKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50TmFtZXMgPSBnZXRBcnJheShldmVudE5hbWUpO1xuICAgICAgICBjb25zdCBoYW5kbGVyc0lzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKGhhbmRsZXJzKTtcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAwLCBsZW5ndGggPSBldmVudE5hbWVzLmxlbmd0aDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgY29uc3QgZXZlbnROYW1lID0gZXZlbnROYW1lc1tpZHhdO1xuXG4gICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNJc0Z1bmN0aW9uID8gaGFuZGxlcnMgOiBoYW5kbGVyc1tldmVudE5hbWVdO1xuXG4gICAgICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50cyA9IHRoaXMuX2V2ZW50c1tldmVudE5hbWVdID0gdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0gfHwgW107XG4gICAgICAgICAgICAgICAgZXZlbnRzLnVuc2hpZnQoaGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0cmlnZ2VyKGV2ZW50TmFtZSwgZSA9IHt9KSB7XG4gICAgICAgIGxldCBldmVudHMgPSB0aGlzLl9ldmVudHNbZXZlbnROYW1lXTtcblxuICAgICAgICBpZiAoZXZlbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBldmVudHMubGVuZ3RoO1xuXG4gICAgICAgICAgICBlLnNlbmRlciA9IHRoaXM7XG4gICAgICAgICAgICBlLl9kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQ7XG4gICAgICAgICAgICBlLmlzRGVmYXVsdFByZXZlbnRlZCA9IGlzRGVmYXVsdFByZXZlbnRlZDtcblxuICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLnNsaWNlKCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICBldmVudHNbaWR4XS5jYWxsKHRoaXMsIGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZS5fZGVmYXVsdFByZXZlbnRlZCA9PT0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB1bmJpbmQoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50cyA9IHRoaXMuX2V2ZW50c1tldmVudE5hbWVdO1xuXG4gICAgICAgIGlmIChldmVudE5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IGV2ZW50cy5sZW5ndGggLSAxOyBpZHggPj0gMDsgaWR4LS0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50c1tpZHhdID09PSBoYW5kbGVyIHx8IGV2ZW50c1tpZHhdLm9yaWdpbmFsID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1tldmVudE5hbWVdID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbmZ1bmN0aW9uIGdldEFycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IFsgdmFsdWUgXSA6IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICB0aGlzLl9kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNEZWZhdWx0UHJldmVudGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWZhdWx0UHJldmVudGVkID09PSB0cnVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBPYnNlcnZhYmxlOyIsImxldCBhbmltYXRpb25GcmFtZVByb3h5ID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgY29uc3Qgd25kID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9O1xuICAgIGNvbnN0IGFuaW1hdGlvbkZyYW1lID0gd25kLnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgd25kLndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgd25kLm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgd25kLm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHduZC5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHsgc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTsgfTtcblxuICAgIGFuaW1hdGlvbkZyYW1lUHJveHkgPSBjYWxsYmFjayA9PiBhbmltYXRpb25GcmFtZS5jYWxsKHduZCwgY2FsbGJhY2spO1xuICAgIGFuaW1hdGlvbkZyYW1lUHJveHkoY2FsbGJhY2spO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYW5pbWF0aW9uRnJhbWVQcm94eTtcbiIsImNvbnN0IGFtcFJlZ0V4cCA9IC8mL2c7XG5jb25zdCBsdFJlZ0V4cCA9IC88L2c7XG5jb25zdCBxdW90ZVJlZ0V4cCA9IC9cIi9nO1xuY29uc3QgYXBvc1JlZ0V4cCA9IC8nL2c7XG5jb25zdCBndFJlZ0V4cCA9IC8+L2c7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGh0bWxFbmNvZGUodmFsdWUpIHtcbiAgICByZXR1cm4gU3RyaW5nKHZhbHVlKS5yZXBsYWNlKGFtcFJlZ0V4cCwgXCImYW1wO1wiKS5yZXBsYWNlKGx0UmVnRXhwLCBcIiZsdDtcIikucmVwbGFjZShndFJlZ0V4cCwgXCImZ3Q7XCIpLnJlcGxhY2UocXVvdGVSZWdFeHAsIFwiJnF1b3Q7XCIpLnJlcGxhY2UoYXBvc1JlZ0V4cCwgXCImIzM5O1wiKTtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvZ1RvQ29uc29sZShtZXNzYWdlKSB7XG4gICAgY29uc3QgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xuXG4gICAgaWYgKHR5cGVvZihjb25zb2xlKSAhPSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUubG9nKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgIH1cbn0iLCIvLyBYWFg6IHRoZSBmb2xsb3dpbmcgd2lsbCBub3Qgd29yayB3aXRoIElFOSAocmVxdWlyZXMgc2VydmVyIHByb3h5KS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNhdmVBcyhvcHRpb25zKSB7XG4gICAgY29uc3QgeyBkYXRhVVJJLCBmaWxlTmFtZSB9ID0gb3B0aW9ucztcbiAgICBsZXQgZGF0YSA9IGRhdGFVUkk7XG5cbiAgICBpZiAodHlwZW9mIGRhdGEgPT0gXCJzdHJpbmdcIiAmJiB3aW5kb3cuQmxvYikge1xuICAgICAgICBjb25zdCBwYXJ0cyA9IGRhdGEuc3BsaXQoXCI7YmFzZTY0LFwiKTtcbiAgICAgICAgY29uc3QgY29udGVudFR5cGUgPSBwYXJ0c1swXTtcbiAgICAgICAgY29uc3QgYmFzZTY0ID0gYXRvYihwYXJ0c1sxXSk7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYmFzZTY0Lmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGJhc2U2NC5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBhcnJheVtpZHhdID0gYmFzZTY0LmNoYXJDb2RlQXQoaWR4KTtcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gbmV3IEJsb2IoWyBhcnJheS5idWZmZXIgXSwgeyB0eXBlOiBjb250ZW50VHlwZSB9KTtcbiAgICB9XG4gICAgaWYgKG5hdmlnYXRvci5tc1NhdmVCbG9iKSB7XG4gICAgICAgIG5hdmlnYXRvci5tc1NhdmVCbG9iKGRhdGEsIGZpbGVOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgIGxpbmsuZG93bmxvYWQgPSBmaWxlTmFtZTtcbiAgICAgICAgZGF0YSA9IGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZGF0YSk7XG4gICAgICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpO1xuICAgICAgICBlLmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwgdHJ1ZSwgZmFsc2UsIHdpbmRvdywgMCwgMCwgMCwgMCwgMCwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpO1xuICAgICAgICBsaW5rLmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKGRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJmdW5jdGlvbiBtYXRjaFVzZXJBZ2VudCh1c2VyQWdlbnQpIHtcbiAgICBjb25zdCBicm93c2VyUnhzID0ge1xuICAgICAgICBlZGdlOiAvKGVkZ2UpWyBcXC9dKFtcXHcuXSspL2ksXG4gICAgICAgIHdlYmtpdDogLyhjaHJvbWUpWyBcXC9dKFtcXHcuXSspL2ksXG4gICAgICAgIHNhZmFyaTogLyh3ZWJraXQpWyBcXC9dKFtcXHcuXSspL2ksXG4gICAgICAgIG9wZXJhOiAvKG9wZXJhKSg/Oi4qdmVyc2lvbnwpWyBcXC9dKFtcXHcuXSspL2ksXG4gICAgICAgIG1zaWU6IC8obXNpZVxcc3x0cmlkZW50Lio/IHJ2OikoW1xcdy5dKykvaSxcbiAgICAgICAgbW96aWxsYTogLyhtb3ppbGxhKSg/Oi4qPyBydjooW1xcdy5dKykpL2lcbiAgICB9O1xuXG4gICAgbGV0IGJyb3dzZXIgPSB7fTtcblxuICAgIGZvciAobGV0IGFnZW50IGluIGJyb3dzZXJSeHMpIHtcbiAgICAgICAgaWYgKGJyb3dzZXJSeHMuaGFzT3duUHJvcGVydHkoYWdlbnQpKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaChicm93c2VyUnhzW2FnZW50XSk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBicm93c2VyW2FnZW50XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJvd3NlclttYXRjaFsxXS50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiIFwiKVswXS5zcGxpdChcIi9cIilbMF1dID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicm93c2VyLnZlcnNpb24gPSBwYXJzZUludChkb2N1bWVudC5kb2N1bWVudE1vZGUgfHwgbWF0Y2hbMl0sIDEwKTtcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJyb3dzZXI7XG59XG5cbmxldCBicm93c2VyID0gbnVsbDtcblxuY29uc3Qgc3VwcG9ydCA9IHtcbiAgICBnZXQgYnJvd3NlcigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8IGJyb3dzZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBicm93c2VyO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJvd3NlciA9IG1hdGNoVXNlckFnZW50KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgICAgcmV0dXJuIGJyb3dzZXI7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgc3VwcG9ydDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRlbXBsYXRlKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRlbXBsYXRlIGltcGxlbWVudGF0aW9uIG1pc3NpbmcuXCIpO1xufVxuIiwiY29uc3Qgbm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbm93O1xuIiwiaW1wb3J0IG5vdyBmcm9tICcuLi91dGlsL25vdyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRocm90dGxlKGZuLCBkZWxheSkge1xuICAgIGxldCBsYXN0RXhlY1RpbWUgPSAwO1xuICAgIGxldCB0aW1lb3V0O1xuXG4gICAgaWYgKCFkZWxheSB8fCBkZWxheSA8PSAwKSB7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICB9XG5cbiAgICBjb25zdCB0aHJvdHRsZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgZWxhcHNlZCA9IG5vdygpIC0gbGFzdEV4ZWNUaW1lO1xuICAgICAgICBjb25zdCBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICAgIGNvbnN0IGV4ZWMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICAgICAgbGFzdEV4ZWNUaW1lID0gbm93KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZmlyc3QgZXhlY3V0aW9uXG4gICAgICAgIGlmICghbGFzdEV4ZWNUaW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhlYygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbGFwc2VkID4gZGVsYXkpIHtcbiAgICAgICAgICAgIGV4ZWMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGV4ZWMsIGRlbGF5IC0gZWxhcHNlZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhyb3R0bGVkLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgfTtcblxuICAgIHJldHVybiB0aHJvdHRsZWQ7XG59XG4iLCJjb25zdCBuYW1lZENvbG9ycyA9IHtcbiAgICBhbGljZWJsdWU6IFwiZjBmOGZmXCIsIGFudGlxdWV3aGl0ZTogXCJmYWViZDdcIiwgYXF1YTogXCIwMGZmZmZcIixcbiAgICBhcXVhbWFyaW5lOiBcIjdmZmZkNFwiLCBhenVyZTogXCJmMGZmZmZcIiwgYmVpZ2U6IFwiZjVmNWRjXCIsXG4gICAgYmlzcXVlOiBcImZmZTRjNFwiLCBibGFjazogXCIwMDAwMDBcIiwgYmxhbmNoZWRhbG1vbmQ6IFwiZmZlYmNkXCIsXG4gICAgYmx1ZTogXCIwMDAwZmZcIiwgYmx1ZXZpb2xldDogXCI4YTJiZTJcIiwgYnJvd246IFwiYTUyYTJhXCIsXG4gICAgYnVybHl3b29kOiBcImRlYjg4N1wiLCBjYWRldGJsdWU6IFwiNWY5ZWEwXCIsIGNoYXJ0cmV1c2U6IFwiN2ZmZjAwXCIsXG4gICAgY2hvY29sYXRlOiBcImQyNjkxZVwiLCBjb3JhbDogXCJmZjdmNTBcIiwgY29ybmZsb3dlcmJsdWU6IFwiNjQ5NWVkXCIsXG4gICAgY29ybnNpbGs6IFwiZmZmOGRjXCIsIGNyaW1zb246IFwiZGMxNDNjXCIsIGN5YW46IFwiMDBmZmZmXCIsXG4gICAgZGFya2JsdWU6IFwiMDAwMDhiXCIsIGRhcmtjeWFuOiBcIjAwOGI4YlwiLCBkYXJrZ29sZGVucm9kOiBcImI4ODYwYlwiLFxuICAgIGRhcmtncmF5OiBcImE5YTlhOVwiLCBkYXJrZ3JleTogXCJhOWE5YTlcIiwgZGFya2dyZWVuOiBcIjAwNjQwMFwiLFxuICAgIGRhcmtraGFraTogXCJiZGI3NmJcIiwgZGFya21hZ2VudGE6IFwiOGIwMDhiXCIsIGRhcmtvbGl2ZWdyZWVuOiBcIjU1NmIyZlwiLFxuICAgIGRhcmtvcmFuZ2U6IFwiZmY4YzAwXCIsIGRhcmtvcmNoaWQ6IFwiOTkzMmNjXCIsIGRhcmtyZWQ6IFwiOGIwMDAwXCIsXG4gICAgZGFya3NhbG1vbjogXCJlOTk2N2FcIiwgZGFya3NlYWdyZWVuOiBcIjhmYmM4ZlwiLCBkYXJrc2xhdGVibHVlOiBcIjQ4M2Q4YlwiLFxuICAgIGRhcmtzbGF0ZWdyYXk6IFwiMmY0ZjRmXCIsIGRhcmtzbGF0ZWdyZXk6IFwiMmY0ZjRmXCIsIGRhcmt0dXJxdW9pc2U6IFwiMDBjZWQxXCIsXG4gICAgZGFya3Zpb2xldDogXCI5NDAwZDNcIiwgZGVlcHBpbms6IFwiZmYxNDkzXCIsIGRlZXBza3libHVlOiBcIjAwYmZmZlwiLFxuICAgIGRpbWdyYXk6IFwiNjk2OTY5XCIsIGRpbWdyZXk6IFwiNjk2OTY5XCIsIGRvZGdlcmJsdWU6IFwiMWU5MGZmXCIsXG4gICAgZmlyZWJyaWNrOiBcImIyMjIyMlwiLCBmbG9yYWx3aGl0ZTogXCJmZmZhZjBcIiwgZm9yZXN0Z3JlZW46IFwiMjI4YjIyXCIsXG4gICAgZnVjaHNpYTogXCJmZjAwZmZcIiwgZ2FpbnNib3JvOiBcImRjZGNkY1wiLCBnaG9zdHdoaXRlOiBcImY4ZjhmZlwiLFxuICAgIGdvbGQ6IFwiZmZkNzAwXCIsIGdvbGRlbnJvZDogXCJkYWE1MjBcIiwgZ3JheTogXCI4MDgwODBcIixcbiAgICBncmV5OiBcIjgwODA4MFwiLCBncmVlbjogXCIwMDgwMDBcIiwgZ3JlZW55ZWxsb3c6IFwiYWRmZjJmXCIsXG4gICAgaG9uZXlkZXc6IFwiZjBmZmYwXCIsIGhvdHBpbms6IFwiZmY2OWI0XCIsIGluZGlhbnJlZDogXCJjZDVjNWNcIixcbiAgICBpbmRpZ286IFwiNGIwMDgyXCIsIGl2b3J5OiBcImZmZmZmMFwiLCBraGFraTogXCJmMGU2OGNcIixcbiAgICBsYXZlbmRlcjogXCJlNmU2ZmFcIiwgbGF2ZW5kZXJibHVzaDogXCJmZmYwZjVcIiwgbGF3bmdyZWVuOiBcIjdjZmMwMFwiLFxuICAgIGxlbW9uY2hpZmZvbjogXCJmZmZhY2RcIiwgbGlnaHRibHVlOiBcImFkZDhlNlwiLCBsaWdodGNvcmFsOiBcImYwODA4MFwiLFxuICAgIGxpZ2h0Y3lhbjogXCJlMGZmZmZcIiwgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IFwiZmFmYWQyXCIsIGxpZ2h0Z3JheTogXCJkM2QzZDNcIixcbiAgICBsaWdodGdyZXk6IFwiZDNkM2QzXCIsIGxpZ2h0Z3JlZW46IFwiOTBlZTkwXCIsIGxpZ2h0cGluazogXCJmZmI2YzFcIixcbiAgICBsaWdodHNhbG1vbjogXCJmZmEwN2FcIiwgbGlnaHRzZWFncmVlbjogXCIyMGIyYWFcIiwgbGlnaHRza3libHVlOiBcIjg3Y2VmYVwiLFxuICAgIGxpZ2h0c2xhdGVncmF5OiBcIjc3ODg5OVwiLCBsaWdodHNsYXRlZ3JleTogXCI3Nzg4OTlcIiwgbGlnaHRzdGVlbGJsdWU6IFwiYjBjNGRlXCIsXG4gICAgbGlnaHR5ZWxsb3c6IFwiZmZmZmUwXCIsIGxpbWU6IFwiMDBmZjAwXCIsIGxpbWVncmVlbjogXCIzMmNkMzJcIixcbiAgICBsaW5lbjogXCJmYWYwZTZcIiwgbWFnZW50YTogXCJmZjAwZmZcIiwgbWFyb29uOiBcIjgwMDAwMFwiLFxuICAgIG1lZGl1bWFxdWFtYXJpbmU6IFwiNjZjZGFhXCIsIG1lZGl1bWJsdWU6IFwiMDAwMGNkXCIsIG1lZGl1bW9yY2hpZDogXCJiYTU1ZDNcIixcbiAgICBtZWRpdW1wdXJwbGU6IFwiOTM3MGQ4XCIsIG1lZGl1bXNlYWdyZWVuOiBcIjNjYjM3MVwiLCBtZWRpdW1zbGF0ZWJsdWU6IFwiN2I2OGVlXCIsXG4gICAgbWVkaXVtc3ByaW5nZ3JlZW46IFwiMDBmYTlhXCIsIG1lZGl1bXR1cnF1b2lzZTogXCI0OGQxY2NcIiwgbWVkaXVtdmlvbGV0cmVkOiBcImM3MTU4NVwiLFxuICAgIG1pZG5pZ2h0Ymx1ZTogXCIxOTE5NzBcIiwgbWludGNyZWFtOiBcImY1ZmZmYVwiLCBtaXN0eXJvc2U6IFwiZmZlNGUxXCIsXG4gICAgbW9jY2FzaW46IFwiZmZlNGI1XCIsIG5hdmFqb3doaXRlOiBcImZmZGVhZFwiLCBuYXZ5OiBcIjAwMDA4MFwiLFxuICAgIG9sZGxhY2U6IFwiZmRmNWU2XCIsIG9saXZlOiBcIjgwODAwMFwiLCBvbGl2ZWRyYWI6IFwiNmI4ZTIzXCIsXG4gICAgb3JhbmdlOiBcImZmYTUwMFwiLCBvcmFuZ2VyZWQ6IFwiZmY0NTAwXCIsIG9yY2hpZDogXCJkYTcwZDZcIixcbiAgICBwYWxlZ29sZGVucm9kOiBcImVlZThhYVwiLCBwYWxlZ3JlZW46IFwiOThmYjk4XCIsIHBhbGV0dXJxdW9pc2U6IFwiYWZlZWVlXCIsXG4gICAgcGFsZXZpb2xldHJlZDogXCJkODcwOTNcIiwgcGFwYXlhd2hpcDogXCJmZmVmZDVcIiwgcGVhY2hwdWZmOiBcImZmZGFiOVwiLFxuICAgIHBlcnU6IFwiY2Q4NTNmXCIsIHBpbms6IFwiZmZjMGNiXCIsIHBsdW06IFwiZGRhMGRkXCIsXG4gICAgcG93ZGVyYmx1ZTogXCJiMGUwZTZcIiwgcHVycGxlOiBcIjgwMDA4MFwiLCByZWQ6IFwiZmYwMDAwXCIsXG4gICAgcm9zeWJyb3duOiBcImJjOGY4ZlwiLCByb3lhbGJsdWU6IFwiNDE2OWUxXCIsIHNhZGRsZWJyb3duOiBcIjhiNDUxM1wiLFxuICAgIHNhbG1vbjogXCJmYTgwNzJcIiwgc2FuZHlicm93bjogXCJmNGE0NjBcIiwgc2VhZ3JlZW46IFwiMmU4YjU3XCIsXG4gICAgc2Vhc2hlbGw6IFwiZmZmNWVlXCIsIHNpZW5uYTogXCJhMDUyMmRcIiwgc2lsdmVyOiBcImMwYzBjMFwiLFxuICAgIHNreWJsdWU6IFwiODdjZWViXCIsIHNsYXRlYmx1ZTogXCI2YTVhY2RcIiwgc2xhdGVncmF5OiBcIjcwODA5MFwiLFxuICAgIHNsYXRlZ3JleTogXCI3MDgwOTBcIiwgc25vdzogXCJmZmZhZmFcIiwgc3ByaW5nZ3JlZW46IFwiMDBmZjdmXCIsXG4gICAgc3RlZWxibHVlOiBcIjQ2ODJiNFwiLCB0YW46IFwiZDJiNDhjXCIsIHRlYWw6IFwiMDA4MDgwXCIsXG4gICAgdGhpc3RsZTogXCJkOGJmZDhcIiwgdG9tYXRvOiBcImZmNjM0N1wiLCB0dXJxdW9pc2U6IFwiNDBlMGQwXCIsXG4gICAgdmlvbGV0OiBcImVlODJlZVwiLCB3aGVhdDogXCJmNWRlYjNcIiwgd2hpdGU6IFwiZmZmZmZmXCIsXG4gICAgd2hpdGVzbW9rZTogXCJmNWY1ZjVcIiwgeWVsbG93OiBcImZmZmYwMFwiLCB5ZWxsb3dncmVlbjogXCI5YWNkMzJcIlxufTtcblxuZXhwb3J0IGRlZmF1bHQgbmFtZWRDb2xvcnM7IiwiaW1wb3J0IENsYXNzIGZyb20gJy4uL2NsYXNzJztcbmltcG9ydCBzdXBwb3J0IGZyb20gJy4uL3N1cHBvcnQnO1xuaW1wb3J0IG5hbWVkQ29sb3JzIGZyb20gJy4vbmFtZWQtY29sb3JzJztcblxuY29uc3QgYnJvd3NlciA9IHN1cHBvcnQuYnJvd3NlcjtcblxubGV0IG1hdGNoTmFtZWRDb2xvciA9IChjb2xvcikgPT4ge1xuICAgIGNvbnN0IGNvbG9yTmFtZXMgPSBPYmplY3Qua2V5cyhuYW1lZENvbG9ycyk7XG4gICAgY29sb3JOYW1lcy5wdXNoKFwidHJhbnNwYXJlbnRcIik7XG5cbiAgICBjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKFwiXihcIiArIGNvbG9yTmFtZXMuam9pbihcInxcIikgKyBcIikoXFxcXFd8JClcIiwgXCJpXCIpO1xuICAgIG1hdGNoTmFtZWRDb2xvciA9IChjb2xvcikgPT4gcmVnZXhwLmV4ZWMoY29sb3IpO1xuXG4gICAgcmV0dXJuIHJlZ2V4cC5leGVjKGNvbG9yKTtcbn07XG5cbmNsYXNzIEJhc2VDb2xvciBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgc3VwZXIoKTsgfVxuICAgIHRvSFNWKCkgeyByZXR1cm4gdGhpczsgfVxuXG4gICAgdG9SR0IoKSB7IHJldHVybiB0aGlzOyB9XG5cbiAgICB0b0hleChvcHRpb25zKSB7IHJldHVybiB0aGlzLnRvQnl0ZXMoKS50b0hleChvcHRpb25zKTsgfVxuXG4gICAgdG9CeXRlcygpIHsgcmV0dXJuIHRoaXM7IH1cblxuICAgIHRvQ3NzKG9wdGlvbnMpIHsgcmV0dXJuIFwiI1wiICsgdGhpcy50b0hleChvcHRpb25zKTsgfVxuXG4gICAgdG9Dc3NSZ2JhKCkge1xuICAgICAgICBjb25zdCByZ2IgPSB0aGlzLnRvQnl0ZXMoKTtcbiAgICAgICAgcmV0dXJuIGByZ2JhKCR7IHJnYi5yIH0sICR7IHJnYi5nIH0sICR7IHJnYi5iIH0sICR7IHBhcnNlRmxvYXQoKE51bWJlcih0aGlzLmEpKS50b0ZpeGVkKDMpKSB9KWA7XG4gICAgfVxuXG4gICAgdG9EaXNwbGF5KCkge1xuICAgICAgICBpZiAoYnJvd3Nlci5tc2llICYmIGJyb3dzZXIudmVyc2lvbiA8IDkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvQ3NzKCk7IC8vIG5vIFJHQkEgc3VwcG9ydDsgZG9lcyBpdCBzdXBwb3J0IGFueSBvcGFjaXR5IGluIGNvbG9ycz9cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50b0Nzc1JnYmEoKTtcbiAgICB9XG5cbiAgICBlcXVhbHMoYykge1xuICAgICAgICByZXR1cm4gYyA9PT0gdGhpcyB8fCAoKGMgIT09IG51bGwgJiYgYyAhPT0gdW5kZWZpbmVkKSAmJiB0aGlzLnRvQ3NzUmdiYSgpID09PSBwYXJzZUNvbG9yKGMpLnRvQ3NzUmdiYSgpKTtcbiAgICB9XG5cbiAgICBkaWZmKG90aGVyKSB7XG4gICAgICAgIGlmIChvdGhlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGMxID0gdGhpcy50b0J5dGVzKCk7XG4gICAgICAgIGNvbnN0IGMyID0gb3RoZXIudG9CeXRlcygpO1xuXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coKGMxLnIgLSBjMi5yKSAqIDAuMzAsIDIpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdygoYzEuZyAtIGMyLmcpICogMC41OSwgMikgK1xuICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucG93KChjMS5iIC0gYzIuYikgKiAwLjExLCAyKSk7XG4gICAgfVxuXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGxldCBjID0gdGhpcy50b0J5dGVzKCk7XG4gICAgICAgIGlmIChjID09PSB0aGlzKSB7XG4gICAgICAgICAgICBjID0gbmV3IEJ5dGVzKGMuciwgYy5nLCBjLmIsIGMuYSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYztcbiAgICB9XG59XG5cbmNsYXNzIFJHQiBleHRlbmRzIEJhc2VDb2xvciB7XG4gICAgY29uc3RydWN0b3IociwgZywgYiwgYSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuciA9IHI7XG4gICAgICAgIHRoaXMuZyA9IGc7XG4gICAgICAgIHRoaXMuYiA9IGI7XG4gICAgICAgIHRoaXMuYSA9IGE7XG4gICAgfVxuXG4gICAgdG9IU1YoKSB7XG4gICAgICAgIGNvbnN0IHsgciwgZywgYiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgICAgICBjb25zdCBkZWx0YSA9IG1heCAtIG1pbjtcbiAgICAgICAgY29uc3QgdiA9IG1heDtcbiAgICAgICAgbGV0IGgsIHM7XG5cbiAgICAgICAgaWYgKGRlbHRhID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEhTVigwLCAwLCB2LCB0aGlzLmEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1heCAhPT0gMCkge1xuICAgICAgICAgICAgcyA9IGRlbHRhIC8gbWF4O1xuICAgICAgICAgICAgaWYgKHIgPT09IG1heCkge1xuICAgICAgICAgICAgICAgIGggPSAoZyAtIGIpIC8gZGVsdGE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGcgPT09IG1heCkge1xuICAgICAgICAgICAgICAgIGggPSAyICsgKGIgLSByKSAvIGRlbHRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoID0gNCArIChyIC0gZykgLyBkZWx0YTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaCAqPSA2MDtcbiAgICAgICAgICAgIGlmIChoIDwgMCkge1xuICAgICAgICAgICAgICAgIGggKz0gMzYwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcyA9IDA7XG4gICAgICAgICAgICBoID0gLTE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEhTVihoLCBzLCB2LCB0aGlzLmEpO1xuICAgIH1cblxuICAgIHRvSFNMKCkge1xuICAgICAgICBjb25zdCB7IHIsIGcsIGIgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICAgICAgbGV0IGgsIHMsIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICAgICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICAgICAgICBoID0gcyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkID0gbWF4IC0gbWluO1xuICAgICAgICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgICAgICAgICAgc3dpdGNoIChtYXgpIHtcbiAgICAgICAgICAgIGNhc2UgcjogaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZzogaCA9IChiIC0gcikgLyBkICsgMjsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGI6IGggPSAociAtIGcpIC8gZCArIDQ7IGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDogYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEhTTChoICogNjAsIHMgKiAxMDAsIGwgKiAxMDAsIHRoaXMuYSk7XG4gICAgfVxuXG4gICAgdG9CeXRlcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCeXRlcyh0aGlzLnIgKiAyNTUsIHRoaXMuZyAqIDI1NSwgdGhpcy5iICogMjU1LCB0aGlzLmEpO1xuICAgIH1cbn1cblxuY2xhc3MgQnl0ZXMgZXh0ZW5kcyBSR0Ige1xuICAgIGNvbnN0cnVjdG9yKHIsIGcsIGIsIGEpIHtcbiAgICAgICAgc3VwZXIoTWF0aC5yb3VuZChyKSwgTWF0aC5yb3VuZChnKSwgTWF0aC5yb3VuZChiKSwgYSk7XG4gICAgfVxuXG4gICAgdG9SR0IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUkdCKHRoaXMuciAvIDI1NSwgdGhpcy5nIC8gMjU1LCB0aGlzLmIgLyAyNTUsIHRoaXMuYSk7XG4gICAgfVxuXG4gICAgdG9IU1YoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvUkdCKCkudG9IU1YoKTtcbiAgICB9XG5cbiAgICB0b0hTTCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9SR0IoKS50b0hTTCgpO1xuICAgIH1cblxuICAgIHRvSGV4KG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gaGV4KHRoaXMuciwgMikgKyBoZXgodGhpcy5nLCAyKSArIGhleCh0aGlzLmIsIDIpO1xuXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxwaGEpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IGhleChNYXRoLnJvdW5kKHRoaXMuYSAqIDI1NSksIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHRvQnl0ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaGV4KG4sIHdpZHRoLCBwYWQgPSBcIjBcIikge1xuICAgIGxldCByZXN1bHQgPSBuLnRvU3RyaW5nKDE2KTtcbiAgICB3aGlsZSAod2lkdGggPiByZXN1bHQubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IHBhZCArIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5jbGFzcyBIU1YgZXh0ZW5kcyBCYXNlQ29sb3Ige1xuICAgIGNvbnN0cnVjdG9yKGgsIHMsIHYsIGEpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmggPSBoO1xuICAgICAgICB0aGlzLnMgPSBzO1xuICAgICAgICB0aGlzLnYgPSB2O1xuICAgICAgICB0aGlzLmEgPSBhO1xuICAgIH1cblxuICAgIHRvUkdCKCkge1xuICAgICAgICBsZXQgeyBoLCBzLCB2IH0gPSB0aGlzO1xuICAgICAgICBsZXQgciwgZywgYjtcblxuICAgICAgICBpZiAocyA9PT0gMCkge1xuICAgICAgICAgICAgciA9IGcgPSBiID0gdjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGggLz0gNjA7XG5cbiAgICAgICAgICAgIGNvbnN0IGkgPSBNYXRoLmZsb29yKGgpO1xuICAgICAgICAgICAgY29uc3QgZiA9IGggLSBpO1xuICAgICAgICAgICAgY29uc3QgcCA9IHYgKiAoMSAtIHMpO1xuICAgICAgICAgICAgY29uc3QgcSA9IHYgKiAoMSAtIHMgKiBmKTtcbiAgICAgICAgICAgIGNvbnN0IHQgPSB2ICogKDEgLSBzICogKDEgLSBmKSk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICAgICAgY2FzZSAwOiByID0gdjsgZyA9IHQ7IGIgPSBwOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTogciA9IHE7IGcgPSB2OyBiID0gcDsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6IHIgPSBwOyBnID0gdjsgYiA9IHQ7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOiByID0gcDsgZyA9IHE7IGIgPSB2OyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDogciA9IHQ7IGcgPSBwOyBiID0gdjsgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiByID0gdjsgZyA9IHA7IGIgPSBxOyBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUkdCKHIsIGcsIGIsIHRoaXMuYSk7XG4gICAgfVxuXG4gICAgdG9IU0woKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvUkdCKCkudG9IU0woKTtcbiAgICB9XG5cbiAgICB0b0J5dGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b1JHQigpLnRvQnl0ZXMoKTtcbiAgICB9XG59XG5cbmNsYXNzIEhTTCBleHRlbmRzIEJhc2VDb2xvciB7XG4gICAgY29uc3RydWN0b3IoaCwgcywgbCwgYSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuaCA9IGg7XG4gICAgICAgIHRoaXMucyA9IHM7XG4gICAgICAgIHRoaXMubCA9IGw7XG4gICAgICAgIHRoaXMuYSA9IGE7XG4gICAgfVxuXG4gICAgdG9SR0IoKSB7XG4gICAgICAgIGxldCBoID0gdGhpcy5oIC8gMzYwO1xuICAgICAgICBsZXQgcyA9IHRoaXMucyAvIDEwMDtcbiAgICAgICAgbGV0IGwgPSB0aGlzLmwgLyAxMDA7XG4gICAgICAgIGxldCByLCBnLCBiO1xuXG4gICAgICAgIGlmIChzID09PSAwKSB7XG4gICAgICAgICAgICByID0gZyA9IGIgPSBsOyAvLyBhY2hyb21hdGljXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgICAgIGNvbnN0IHAgPSAyICogbCAtIHE7XG4gICAgICAgICAgICByID0gaHVlMnJnYihwLCBxLCBoICsgMSAvIDMpO1xuICAgICAgICAgICAgZyA9IGh1ZTJyZ2IocCwgcSwgaCk7XG4gICAgICAgICAgICBiID0gaHVlMnJnYihwLCBxLCBoIC0gMSAvIDMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBSR0IociwgZywgYiwgdGhpcy5hKTtcbiAgICB9XG5cbiAgICB0b0hTVigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9SR0IoKS50b0hTVigpO1xuICAgIH1cblxuICAgIHRvQnl0ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvUkdCKCkudG9CeXRlcygpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaHVlMnJnYihwLCBxLCBzKSB7XG4gICAgbGV0IHQgPSBzO1xuXG4gICAgaWYgKHQgPCAwKSB7XG4gICAgICAgIHQgKz0gMTtcbiAgICB9XG5cbiAgICBpZiAodCA+IDEpIHtcbiAgICAgICAgdCAtPSAxO1xuICAgIH1cblxuICAgIGlmICh0IDwgMSAvIDYpIHtcbiAgICAgICAgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gICAgfVxuXG4gICAgaWYgKHQgPCAxIC8gMikge1xuICAgICAgICByZXR1cm4gcTtcbiAgICB9XG5cbiAgICBpZiAodCA8IDIgLyAzKSB7XG4gICAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcbiAgICB9XG5cbiAgICByZXR1cm4gcDtcbn1cblxuZnVuY3Rpb24gYWxwaGFGcm9tSGV4KGEpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChwYXJzZUZsb2F0KHBhcnNlSW50KGEsIDE2KSAvIDI1NSApLnRvRml4ZWQoMykpO1xufVxuXG5leHBvcnQgeyBSR0IsIEJ5dGVzLCBIU1YsIEhTTCB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZUNvbG9yKHZhbHVlLCBzYWZlKSB7XG4gICAgbGV0IG0sIHJldDtcblxuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBcIm5vbmVcIikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBCYXNlQ29sb3IpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGxldCBjb2xvciA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKChtID0gbWF0Y2hOYW1lZENvbG9yKGNvbG9yKSkpIHtcbiAgICAgICAgaWYgKG1bMV0gPT09IFwidHJhbnNwYXJlbnRcIikge1xuICAgICAgICAgICAgY29sb3IgPSBuZXcgUkdCKDEsIDEsIDEsIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29sb3IgPSBwYXJzZUNvbG9yKG5hbWVkQ29sb3JzW21bMV1dLCBzYWZlKTtcbiAgICAgICAgfVxuICAgICAgICBjb2xvci5tYXRjaCA9IFsgbVsxXSBdO1xuICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxuICAgIGlmICgobSA9IC9eIz8oWzAtOWEtZl17Mn0pKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSlcXGIvaS5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0ID0gbmV3IEJ5dGVzKHBhcnNlSW50KG1bMV0sIDE2KSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1bMl0sIDE2KSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1bM10sIDE2KSwgMSk7XG4gICAgfSBlbHNlIGlmICgobSA9IC9eIz8oWzAtOWEtZl0pKFswLTlhLWZdKShbMC05YS1mXSlcXGIvaS5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0ID0gbmV3IEJ5dGVzKHBhcnNlSW50KG1bMV0gKyBtWzFdLCAxNiksXG4gICAgICAgICAgICBwYXJzZUludChtWzJdICsgbVsyXSwgMTYpLFxuICAgICAgICAgICAgcGFyc2VJbnQobVszXSArIG1bM10sIDE2KSwgMSk7XG4gICAgfSBlbHNlIGlmICgobSA9IC9eIz8oWzAtOWEtZl0pKFswLTlhLWZdKShbMC05YS1mXSkoWzAtOWEtZl0pXFxiL2kuZXhlYyhjb2xvcikpKSB7IC8vIFBhcnNlIDQgZGlnaXQgaGV4IGNvbG9yXG4gICAgICAgIHJldCA9IG5ldyBCeXRlcyhwYXJzZUludChtWzFdICsgbVsxXSwgMTYpLFxuICAgICAgICAgICAgcGFyc2VJbnQobVsyXSArIG1bMl0sIDE2KSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1bM10gKyBtWzNdLCAxNiksXG4gICAgICAgICAgICBhbHBoYUZyb21IZXgobVs0XSArIG1bNF0pKTtcbiAgICB9IGVsc2UgaWYgKChtID0gL14jPyhbMC05YS1mXXsyfSkoWzAtOWEtZl17Mn0pKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSlcXGIvaS5leGVjKGNvbG9yKSkpIHsgLy8gUGFyc2UgOCBkaWdpdCBoZXggY29sb3JcbiAgICAgICAgcmV0ID0gbmV3IEJ5dGVzKHBhcnNlSW50KG1bMV0sIDE2KSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1bMl0sIDE2KSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1bM10sIDE2KSxcbiAgICAgICAgICAgIGFscGhhRnJvbUhleChtWzRdKSk7XG4gICAgfSBlbHNlIGlmICgobSA9IC9ecmdiXFwoXFxzKihbMC05XSspXFxzKixcXHMqKFswLTldKylcXHMqLFxccyooWzAtOV0rKVxccypcXCkvLmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXQgPSBuZXcgQnl0ZXMocGFyc2VJbnQobVsxXSwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQobVsyXSwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQobVszXSwgMTApLCAxKTtcbiAgICB9IGVsc2UgaWYgKChtID0gL15yZ2JhXFwoXFxzKihbMC05XSspXFxzKixcXHMqKFswLTldKylcXHMqLFxccyooWzAtOV0rKVxccyosXFxzKihbMC05Ll0rKVxccypcXCkvLmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXQgPSBuZXcgQnl0ZXMocGFyc2VJbnQobVsxXSwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQobVsyXSwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQobVszXSwgMTApLCBwYXJzZUZsb2F0KG1bNF0pKTtcbiAgICB9IGVsc2UgaWYgKChtID0gL15yZ2JcXChcXHMqKFswLTldKlxcLj9bMC05XSspJVxccyosXFxzKihbMC05XSpcXC4/WzAtOV0rKSVcXHMqLFxccyooWzAtOV0qXFwuP1swLTldKyklXFxzKlxcKS8uZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldCA9IG5ldyBSR0IocGFyc2VGbG9hdChtWzFdKSAvIDEwMCxcbiAgICAgICAgICAgIHBhcnNlRmxvYXQobVsyXSkgLyAxMDAsXG4gICAgICAgICAgICBwYXJzZUZsb2F0KG1bM10pIC8gMTAwLCAxKTtcbiAgICB9IGVsc2UgaWYgKChtID0gL15yZ2JhXFwoXFxzKihbMC05XSpcXC4/WzAtOV0rKSVcXHMqLFxccyooWzAtOV0qXFwuP1swLTldKyklXFxzKixcXHMqKFswLTldKlxcLj9bMC05XSspJVxccyosXFxzKihbMC05Ll0rKVxccypcXCkvLmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXQgPSBuZXcgUkdCKHBhcnNlRmxvYXQobVsxXSkgLyAxMDAsXG4gICAgICAgICAgICBwYXJzZUZsb2F0KG1bMl0pIC8gMTAwLFxuICAgICAgICAgICAgcGFyc2VGbG9hdChtWzNdKSAvIDEwMCwgcGFyc2VGbG9hdChtWzRdKSk7XG4gICAgfVxuXG4gICAgaWYgKHJldCkge1xuICAgICAgICByZXQubWF0Y2ggPSBtO1xuICAgIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHBhcnNlIGNvbG9yOiBcIiArIGNvbG9yKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xufVxuIiwiaW1wb3J0IENsYXNzIGZyb20gJy4uL2NsYXNzJztcbmltcG9ydCBuYW1lZENvbG9ycyBmcm9tICcuL25hbWVkLWNvbG9ycyc7XG5pbXBvcnQgeyBCeXRlcywgUkdCLCBIU1YsIEhTTCB9IGZyb20gJy4vcGFyc2UtY29sb3InO1xuXG5jb25zdCBEQVJLX1RSRVNIT0xEID0gMTgwO1xuXG5jbGFzcyBDb2xvciBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtYXRzID0gQ29sb3IuZm9ybWF0cztcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkQ29sb3IgPSB0aGlzLnJlc29sdmVDb2xvcih2YWx1ZSk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGZvcm1hdHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdFJlZ2V4ID0gZm9ybWF0c1tpZHhdLnJlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NvciA9IGZvcm1hdHNbaWR4XS5wcm9jZXNzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gZm9ybWF0UmVnZXguZXhlYyhyZXNvbHZlZENvbG9yKTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFubmVscyA9IHByb2Nlc3NvcihwYXJ0cyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuciA9IGNoYW5uZWxzWzBdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmcgPSBjaGFubmVsc1sxXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iID0gY2hhbm5lbHNbMl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgdGhpcy5nID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgdGhpcy5iID0gYXJndW1lbnRzWzJdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yID0gdGhpcy5ub3JtYWxpemVCeXRlKHRoaXMucik7XG4gICAgICAgIHRoaXMuZyA9IHRoaXMubm9ybWFsaXplQnl0ZSh0aGlzLmcpO1xuICAgICAgICB0aGlzLmIgPSB0aGlzLm5vcm1hbGl6ZUJ5dGUodGhpcy5iKTtcbiAgICB9XG5cbiAgICB0b0hleCgpIHtcbiAgICAgICAgY29uc3QgcGFkID0gdGhpcy5wYWREaWdpdDtcbiAgICAgICAgY29uc3QgciA9IHRoaXMuci50b1N0cmluZygxNik7XG4gICAgICAgIGNvbnN0IGcgPSB0aGlzLmcudG9TdHJpbmcoMTYpO1xuICAgICAgICBjb25zdCBiID0gdGhpcy5iLnRvU3RyaW5nKDE2KTtcblxuICAgICAgICByZXR1cm4gXCIjXCIgKyBwYWQocikgKyBwYWQoZykgKyBwYWQoYik7XG4gICAgfVxuXG4gICAgcmVzb2x2ZUNvbG9yKHZhbHVlKSB7XG4gICAgICAgIGxldCBjb2xvciA9IHZhbHVlIHx8IFwiYmxhY2tcIjtcblxuICAgICAgICBpZiAoY29sb3IuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgICAgICAgY29sb3IgPSBjb2xvci5zdWJzdHIoMSwgNik7XG4gICAgICAgIH1cblxuICAgICAgICBjb2xvciA9IGNvbG9yLnJlcGxhY2UoLyAvZywgXCJcIik7XG4gICAgICAgIGNvbG9yID0gY29sb3IudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29sb3IgPSBDb2xvci5uYW1lZENvbG9yc1tjb2xvcl0gfHwgY29sb3I7XG5cbiAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cblxuICAgIG5vcm1hbGl6ZUJ5dGUodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCB8fCBpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlID4gMjU1ID8gMjU1IDogdmFsdWU7XG4gICAgfVxuXG4gICAgcGFkRGlnaXQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZS5sZW5ndGggPT09IDEpID8gXCIwXCIgKyB2YWx1ZSA6IHZhbHVlO1xuICAgIH1cblxuICAgIGJyaWdodG5lc3ModmFsdWUpIHtcbiAgICAgICAgY29uc3Qgcm91bmQgPSBNYXRoLnJvdW5kO1xuXG4gICAgICAgIHRoaXMuciA9IHJvdW5kKHRoaXMubm9ybWFsaXplQnl0ZSh0aGlzLnIgKiB2YWx1ZSkpO1xuICAgICAgICB0aGlzLmcgPSByb3VuZCh0aGlzLm5vcm1hbGl6ZUJ5dGUodGhpcy5nICogdmFsdWUpKTtcbiAgICAgICAgdGhpcy5iID0gcm91bmQodGhpcy5ub3JtYWxpemVCeXRlKHRoaXMuYiAqIHZhbHVlKSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcGVyY0JyaWdodG5lc3MoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoMC4yNDEgKiB0aGlzLnIgKiB0aGlzLnIgKyAwLjY5MSAqIHRoaXMuZyAqIHRoaXMuZyArIDAuMDY4ICogdGhpcy5iICogdGhpcy5iKTtcbiAgICB9XG5cbiAgICBpc0RhcmsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcmNCcmlnaHRuZXNzKCkgPCBEQVJLX1RSRVNIT0xEO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tQnl0ZXMociwgZywgYiwgYSkge1xuICAgICAgICByZXR1cm4gbmV3IEJ5dGVzKHIsIGcsIGIsIGEgIT0gbnVsbCA/IGEgOiAxKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVJHQihyLCBnLCBiLCBhKSB7XG4gICAgICAgIHJldHVybiBuZXcgUkdCKHIsIGcsIGIsIGEgIT0gbnVsbCA/IGEgOiAxKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUhTVihoLCBzLCB2LCBhKSB7XG4gICAgICAgIHJldHVybiBuZXcgSFNWKGgsIHMsIHYsIGEgIT0gbnVsbCA/IGEgOiAxKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUhTTChoLCBzLCBsLCBhKSB7XG4gICAgICAgIHJldHVybiBuZXcgSFNMKGgsIHMsIGwsIGEgIT0gbnVsbCA/IGEgOiAxKTtcbiAgICB9XG59XG5cbkNvbG9yLmZvcm1hdHMgPSBbIHtcbiAgICByZTogL15yZ2JcXCgoXFxkezEsM30pLFxccyooXFxkezEsM30pLFxccyooXFxkezEsM30pXFwpJC8sXG4gICAgcHJvY2VzczogZnVuY3Rpb24ocGFydHMpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHBhcnNlSW50KHBhcnRzWzFdLCAxMCksIHBhcnNlSW50KHBhcnRzWzJdLCAxMCksIHBhcnNlSW50KHBhcnRzWzNdLCAxMClcbiAgICAgICAgXTtcbiAgICB9XG59LCB7XG4gICAgcmU6IC9eKFxcd3syfSkoXFx3ezJ9KShcXHd7Mn0pJC8sXG4gICAgcHJvY2VzczogZnVuY3Rpb24ocGFydHMpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHBhcnNlSW50KHBhcnRzWzFdLCAxNiksIHBhcnNlSW50KHBhcnRzWzJdLCAxNiksIHBhcnNlSW50KHBhcnRzWzNdLCAxNilcbiAgICAgICAgXTtcbiAgICB9XG59LCB7XG4gICAgcmU6IC9eKFxcd3sxfSkoXFx3ezF9KShcXHd7MX0pJC8sXG4gICAgcHJvY2VzczogZnVuY3Rpb24ocGFydHMpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHBhcnNlSW50KHBhcnRzWzFdICsgcGFydHNbMV0sIDE2KSxcbiAgICAgICAgICAgIHBhcnNlSW50KHBhcnRzWzJdICsgcGFydHNbMl0sIDE2KSxcbiAgICAgICAgICAgIHBhcnNlSW50KHBhcnRzWzNdICsgcGFydHNbM10sIDE2KVxuICAgICAgICBdO1xuICAgIH1cbn0gXTtcblxuQ29sb3IubmFtZWRDb2xvcnMgPSBuYW1lZENvbG9ycztcblxuZXhwb3J0IGRlZmF1bHQgQ29sb3I7IiwiaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jbGFzcyBIYXNPYnNlcnZlcnMgZXh0ZW5kcyBDbGFzcyB7XG4gICAgb2JzZXJ2ZXJzKCkge1xuICAgICAgICB0aGlzLl9vYnNlcnZlcnMgPSB0aGlzLl9vYnNlcnZlcnMgfHwgW107XG4gICAgICAgIHJldHVybiB0aGlzLl9vYnNlcnZlcnM7XG4gICAgfVxuXG4gICAgYWRkT2JzZXJ2ZXIoZWxlbWVudCkge1xuICAgICAgICBpZiAoIXRoaXMuX29ic2VydmVycykge1xuICAgICAgICAgICAgdGhpcy5fb2JzZXJ2ZXJzID0gWyBlbGVtZW50IF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9vYnNlcnZlcnMucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZW1vdmVPYnNlcnZlcihlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzKCk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gb2JzZXJ2ZXJzLmluZGV4T2YoZWxlbWVudCk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRyaWdnZXIobWV0aG9kTmFtZSwgZXZlbnQpIHtcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXJzID0gdGhpcy5fb2JzZXJ2ZXJzO1xuXG4gICAgICAgIGlmIChvYnNlcnZlcnMgJiYgIXRoaXMuX3N1c3BlbmRlZCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgb2JzZXJ2ZXJzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICBsZXQgb2JzZXJ2ZXIgPSBvYnNlcnZlcnNbaWR4XTtcbiAgICAgICAgICAgICAgICBpZiAob2JzZXJ2ZXJbbWV0aG9kTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJbbWV0aG9kTmFtZV0oZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBvcHRpb25zQ2hhbmdlKGUgPSB7fSkge1xuICAgICAgICBlLmVsZW1lbnQgPSB0aGlzO1xuICAgICAgICB0aGlzLnRyaWdnZXIoXCJvcHRpb25zQ2hhbmdlXCIsIGUpO1xuICAgIH1cblxuICAgIGdlb21ldHJ5Q2hhbmdlKCkge1xuICAgICAgICB0aGlzLnRyaWdnZXIoXCJnZW9tZXRyeUNoYW5nZVwiLCB7XG4gICAgICAgICAgICBlbGVtZW50OiB0aGlzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN1c3BlbmQoKSB7XG4gICAgICAgIHRoaXMuX3N1c3BlbmRlZCA9ICh0aGlzLl9zdXNwZW5kZWQgfHwgMCkgKyAxO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXN1bWUoKSB7XG4gICAgICAgIHRoaXMuX3N1c3BlbmRlZCA9IE1hdGgubWF4KCh0aGlzLl9zdXNwZW5kZWQgfHwgMCkgLSAxLCAwKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgX29ic2VydmVyRmllbGQoZmllbGQsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzW2ZpZWxkXSkge1xuICAgICAgICAgICAgdGhpc1tmaWVsZF0ucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1tmaWVsZF0gPSB2YWx1ZTtcbiAgICAgICAgdmFsdWUuYWRkT2JzZXJ2ZXIodGhpcyk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIYXNPYnNlcnZlcnM7XG5cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcGVuZChmaXJzdCwgc2Vjb25kKSB7XG4gICAgZmlyc3QucHVzaC5hcHBseShmaXJzdCwgc2Vjb25kKTtcbiAgICByZXR1cm4gZmlyc3Q7XG59IiwiLyogZXNsaW50LWRpc2FibGUga2V5LXNwYWNpbmcsbm8tbXVsdGktc3BhY2VzLG5vLXBhcmFtLXJlYXNzaWduICovXG5cbmNvbnN0IGxpdGVyYWxzID0ge1xuICAgIDEgICAgOiBcImlcIiwgICAgICAgMTAgICA6IFwieFwiLCAgICAgICAxMDAgIDogXCJjXCIsXG4gICAgMiAgICA6IFwiaWlcIiwgICAgICAyMCAgIDogXCJ4eFwiLCAgICAgIDIwMCAgOiBcImNjXCIsXG4gICAgMyAgICA6IFwiaWlpXCIsICAgICAzMCAgIDogXCJ4eHhcIiwgICAgIDMwMCAgOiBcImNjY1wiLFxuICAgIDQgICAgOiBcIml2XCIsICAgICAgNDAgICA6IFwieGxcIiwgICAgICA0MDAgIDogXCJjZFwiLFxuICAgIDUgICAgOiBcInZcIiwgICAgICAgNTAgICA6IFwibFwiLCAgICAgICA1MDAgIDogXCJkXCIsXG4gICAgNiAgICA6IFwidmlcIiwgICAgICA2MCAgIDogXCJseFwiLCAgICAgIDYwMCAgOiBcImRjXCIsXG4gICAgNyAgICA6IFwidmlpXCIsICAgICA3MCAgIDogXCJseHhcIiwgICAgIDcwMCAgOiBcImRjY1wiLFxuICAgIDggICAgOiBcInZpaWlcIiwgICAgODAgICA6IFwibHh4eFwiLCAgICA4MDAgIDogXCJkY2NjXCIsXG4gICAgOSAgICA6IFwiaXhcIiwgICAgICA5MCAgIDogXCJ4Y1wiLCAgICAgIDkwMCAgOiBcImNtXCIsXG4gICAgMTAwMCA6IFwibVwiXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcmFiaWNUb1JvbWFuKG4pIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBbIDEwMDAsXG4gICAgICAgIDkwMCAsIDgwMCwgNzAwLCA2MDAsIDUwMCwgNDAwLCAzMDAsIDIwMCwgMTAwLFxuICAgICAgICA5MCAgLCA4MCAsIDcwICwgNjAgLCA1MCAsIDQwICwgMzAgLCAyMCAsIDEwICxcbiAgICAgICAgOSAgICwgOCAgLCA3ICAsIDYgICwgNSAgLCA0ICAsIDMgICwgMiAgLCAxIF07XG5cbiAgICBsZXQgcm9tYW4gPSBcIlwiO1xuICAgIHdoaWxlIChuID4gMCkge1xuICAgICAgICBpZiAobiA8IHZhbHVlc1swXSkge1xuICAgICAgICAgICAgdmFsdWVzLnNoaWZ0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByb21hbiArPSBsaXRlcmFsc1t2YWx1ZXNbMF1dO1xuICAgICAgICAgICAgbiAtPSB2YWx1ZXNbMF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJvbWFuO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUHJvbWlzZSgpIHtcbiAgICBsZXQgcmVzb2x2ZUZuLCByZWplY3RGbjtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICByZXNvbHZlRm4gPSAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgcHJvbWlzZS5fc3RhdGUgPSBcInJlc29sdmVkXCI7XG4gICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH07XG4gICAgICAgIHJlamVjdEZuID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHByb21pc2UuX3N0YXRlID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgICAgcmVqZWN0KGRhdGEpO1xuXG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBwcm9taXNlLl9zdGF0ZSA9IFwicGVuZGluZ1wiO1xuICAgIHByb21pc2UucmVzb2x2ZSA9IHJlc29sdmVGbjtcbiAgICBwcm9taXNlLnJlamVjdCA9IHJlamVjdEZuO1xuICAgIHByb21pc2Uuc3RhdGUgPSAoKSA9PiBwcm9taXNlLl9zdGF0ZTtcblxuICAgIHJldHVybiBwcm9taXNlO1xufVxuIiwiY29uc3QgVU5ERUZJTkVEID0gXCJ1bmRlZmluZWRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmaW5lZCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFVOREVGSU5FRDtcbn0iLCJsZXQgZGVmSWQgPSAxO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZpbml0aW9uSWQoKSB7XG4gICAgcmV0dXJuIFwia2RlZlwiICsgZGVmSWQrKztcbn0iLCJjb25zdCBERUdfVE9fUkFEID0gTWF0aC5QSSAvIDE4MDtcbmNvbnN0IE1BWF9OVU0gPSBOdW1iZXIuTUFYX1ZBTFVFO1xuY29uc3QgTUlOX05VTSA9IC1OdW1iZXIuTUFYX1ZBTFVFO1xuXG5leHBvcnQgeyBERUdfVE9fUkFELCBNQVhfTlVNLCBNSU5fTlVNIH07IiwiaW1wb3J0IHsgREVHX1RPX1JBRCB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVnKHJhZGlhbnMpIHtcbiAgICByZXR1cm4gcmFkaWFucyAvIERFR19UT19SQUQ7XG59IiwiY29uc3QgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuZXhwb3J0IGNvbnN0IEJPTSA9ICdcXHhmZVxceGZmJztcblxuLy8gRW5jb2RlcyBhIHN0cmluZyBhcyBVVEYtOFxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVVURjgoaW5wdXQpIHtcbiAgICBsZXQgb3V0cHV0ID0gXCJcIjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGNvZGUgPSBpbnB1dC5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICAgIGlmICgweEQ4MDAgPD0gY29kZSAmJiBjb2RlIDw9IDB4REJGRikge1xuICAgICAgICAgICAgY29uc3QgaGkgPSBjb2RlO1xuICAgICAgICAgICAgY29uc3QgbG93ID0gaW5wdXQuY2hhckNvZGVBdCgrK2kpO1xuXG4gICAgICAgICAgICBpZiAoIWlzTmFOKGxvdykpIHtcbiAgICAgICAgICAgICAgICAvLyBDb21iaW5lIGhpZ2ggYW5kIGxvdyBzdXJyb2dhdGVcbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2NoYXJDb2RlQXRcbiAgICAgICAgICAgICAgICBjb2RlID0gKGhpIC0gMHhEODAwKSAqIDB4NDAwICtcbiAgICAgICAgICAgICAgICAgICAgICAgKGxvdyAtIDB4REMwMCkgKyAweDEwMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvZGUgPCAweDgwKSB7XG4gICAgICAgICAgICAvLyBPbmUgYnl0ZVxuICAgICAgICAgICAgb3V0cHV0ICs9IGZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlIDwgMHg4MDApIHtcbiAgICAgICAgICAgIC8vIFR3byBieXRlc1xuICAgICAgICAgICAgb3V0cHV0ICs9IGZyb21DaGFyQ29kZSgweEMwIHwgKGNvZGUgPj4+IDYpKTtcbiAgICAgICAgICAgIG91dHB1dCArPSBmcm9tQ2hhckNvZGUoMHg4MCB8IChjb2RlICYgMHgzZikpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCAweDEwMDAwKSB7XG4gICAgICAgICAgICAvLyBUaHJlZSBieXRlc1xuICAgICAgICAgICAgb3V0cHV0ICs9IGZyb21DaGFyQ29kZSgweEUwIHwgKGNvZGUgPj4+IDEyKSk7XG4gICAgICAgICAgICBvdXRwdXQgKz0gZnJvbUNoYXJDb2RlKDB4ODAgfCAoY29kZSA+Pj4gNiAmIDB4M2YpKTtcbiAgICAgICAgICAgIG91dHB1dCArPSBmcm9tQ2hhckNvZGUoMHg4MCB8IChjb2RlICYgMHgzZikpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCAweDEwRkZGRikge1xuICAgICAgICAgICAgLy8gRm91ciBieXRlc1xuICAgICAgICAgICAgb3V0cHV0ICs9IGZyb21DaGFyQ29kZSgweEYwIHwgKGNvZGUgPj4+IDE4KSk7XG4gICAgICAgICAgICBvdXRwdXQgKz0gZnJvbUNoYXJDb2RlKDB4ODAgfCAoY29kZSA+Pj4gMTIgJiAweDNmKSk7XG4gICAgICAgICAgICBvdXRwdXQgKz0gZnJvbUNoYXJDb2RlKDB4ODAgfCAoY29kZSA+Pj4gNiAmIDB4M2YpKTtcbiAgICAgICAgICAgIG91dHB1dCArPSBmcm9tQ2hhckNvZGUoMHg4MCB8IChjb2RlICYgMHgzZikpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gZW5jb2RlVW5pdChjb2RlVW5pdCkge1xuICAgIHJldHVybiBmcm9tQ2hhckNvZGUoY29kZVVuaXQgPj4gOCkgKyBmcm9tQ2hhckNvZGUoY29kZVVuaXQgJiAweDAwZmYpO1xufVxuXG4vLyBFbmNvZGVzIGEgc3RyaW5nIGFzIFVURi0xNiBiaWctZW5kaWFuXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlVVRGMTZCRShpbnB1dCkge1xuICAgIGxldCBvdXRwdXQgPSAnJztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYyA9IGlucHV0LmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgaWYgKGMgPCAweEZGRkYpIHtcbiAgICAgICAgICAgIG91dHB1dCArPSBlbmNvZGVVbml0KGMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbGVhZCA9ICgoYyAtIDB4MTAwMDApID4+IDEwKSArIDB4RDgwMDtcbiAgICAgICAgICAgIGNvbnN0IHRyYWlsID0gKChjIC0gMHgxMDAwMCkgJiAweDNGRikgKyAweERDMDA7XG4gICAgICAgICAgICBvdXRwdXQgKz0gZW5jb2RlVW5pdChsZWFkKTtcbiAgICAgICAgICAgIG91dHB1dCArPSBlbmNvZGVVbml0KHRyYWlsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG59XG4iLCJpbXBvcnQgeyBlbmNvZGVVVEY4IH0gZnJvbSAnLi9lbmNvZGUtdXRmJztcblxuY29uc3QgS0VZX1NUUiA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZW5jb2RlQmFzZTY0KGlucHV0KSB7XG4gICAgbGV0IG91dHB1dCA9IFwiXCI7XG4gICAgbGV0IGkgPSAwO1xuXG4gICAgY29uc3QgdXRmSW5wdXQgPSBlbmNvZGVVVEY4KGlucHV0KTtcblxuICAgIHdoaWxlIChpIDwgdXRmSW5wdXQubGVuZ3RoKSB7XG4gICAgICAgIGxldCBjaHIxID0gdXRmSW5wdXQuY2hhckNvZGVBdChpKyspO1xuICAgICAgICBsZXQgY2hyMiA9IHV0ZklucHV0LmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgICAgbGV0IGNocjMgPSB1dGZJbnB1dC5jaGFyQ29kZUF0KGkrKyk7XG5cbiAgICAgICAgbGV0IGVuYzEgPSBjaHIxID4+IDI7XG4gICAgICAgIGxldCBlbmMyID0gKChjaHIxICYgMykgPDwgNCkgfCAoY2hyMiA+PiA0KTtcbiAgICAgICAgbGV0IGVuYzMgPSAoKGNocjIgJiAxNSkgPDwgMikgfCAoY2hyMyA+PiA2KTtcbiAgICAgICAgbGV0IGVuYzQgPSBjaHIzICYgNjM7XG5cbiAgICAgICAgaWYgKGlzTmFOKGNocjIpKSB7XG4gICAgICAgICAgICBlbmMzID0gZW5jNCA9IDY0O1xuICAgICAgICB9IGVsc2UgaWYgKGlzTmFOKGNocjMpKSB7XG4gICAgICAgICAgICBlbmM0ID0gNjQ7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXQgPSBvdXRwdXQgK1xuICAgICAgICAgICAgS0VZX1NUUi5jaGFyQXQoZW5jMSkgKyBLRVlfU1RSLmNoYXJBdChlbmMyKSArXG4gICAgICAgICAgICBLRVlfU1RSLmNoYXJBdChlbmMzKSArIEtFWV9TVFIuY2hhckF0KGVuYzQpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG59IiwiaW1wb3J0IGRlZmluZWQgZnJvbSAnLi9kZWZpbmVkJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXZlbnRDb29yZGluYXRlcyhlKSB7XG4gICAgaWYgKGRlZmluZWQoKGUueCB8fCB7fSkubG9jYXRpb24pKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBlLngubG9jYXRpb24sXG4gICAgICAgICAgICB5OiBlLnkubG9jYXRpb25cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBlLnBhZ2VYIHx8IGUuY2xpZW50WCB8fCAwLFxuICAgICAgICB5OiBlLnBhZ2VZIHx8IGUuY2xpZW50WSB8fCAwXG4gICAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBldmVudEVsZW1lbnQoZSA9IHt9KSB7XG4gICAgcmV0dXJuIGUudG91Y2ggPyBlLnRvdWNoLmluaXRpYWxUb3VjaCA6IGUudGFyZ2V0O1xufSIsImltcG9ydCBkZWZpbmVkIGZyb20gJy4vZGVmaW5lZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVHJhbnNwYXJlbnQoY29sb3IpIHtcbiAgICByZXR1cm4gY29sb3IgPT09IFwiXCIgfHwgY29sb3IgPT09IG51bGwgfHwgY29sb3IgPT09IFwibm9uZVwiIHx8IGNvbG9yID09PSBcInRyYW5zcGFyZW50XCIgfHwgIWRlZmluZWQoY29sb3IpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaW1pdFZhbHVlKHZhbHVlLCBtaW4sIG1heCkge1xuICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbih2YWx1ZSwgbWF4KSwgbWluKTtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1tdWx0aS1zcGFjZXMsIGtleS1zcGFjaW5nLCBpbmRlbnQsIGNhbWVsY2FzZSwgc3BhY2UtYmVmb3JlLWJsb2NrcywgZXFlcWVxLCBicmFjZS1zdHlsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgc3BhY2UtaW5maXgtb3BzLCBzcGFjZS1iZWZvcmUtZnVuY3Rpb24tcGFyZW4sIGFycmF5LWJyYWNrZXQtc3BhY2luZywgb2JqZWN0LWN1cmx5LXNwYWNpbmcgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLW5lc3RlZC10ZXJuYXJ5LCBtYXgtcGFyYW1zLCBkZWZhdWx0LWNhc2UsIG5vLWVsc2UtcmV0dXJuLCBuby1lbXB0eSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24sIG5vLXZhciwgYmxvY2stc2NvcGVkLXZhciAqL1xuXG4vLyBtZXJnZVNvcnQgaXMgc3RhYmxlLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VTb3J0KGEsIGNtcCkge1xuICAgIGlmIChhLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGEuc2xpY2UoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWVyZ2UoYSwgYikge1xuICAgICAgICB2YXIgciA9IFtdLCBhaSA9IDAsIGJpID0gMCwgaSA9IDA7XG4gICAgICAgIHdoaWxlIChhaSA8IGEubGVuZ3RoICYmIGJpIDwgYi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChjbXAoYVthaV0sIGJbYmldKSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgcltpKytdID0gYVthaSsrXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcltpKytdID0gYltiaSsrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWkgPCBhLmxlbmd0aCkge1xuICAgICAgICAgICAgci5wdXNoLmFwcGx5KHIsIGEuc2xpY2UoYWkpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgICAgICAgICAgci5wdXNoLmFwcGx5KHIsIGIuc2xpY2UoYmkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcjtcbiAgICB9XG4gICAgcmV0dXJuIChmdW5jdGlvbiBzb3J0KGEpIHtcbiAgICAgICAgaWYgKGEubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtID0gTWF0aC5mbG9vcihhLmxlbmd0aCAvIDIpO1xuICAgICAgICB2YXIgbGVmdCA9IGEuc2xpY2UoMCwgbSk7XG4gICAgICAgIHZhciByaWdodCA9IGEuc2xpY2UobSk7XG4gICAgICAgIGxlZnQgPSBzb3J0KGxlZnQpO1xuICAgICAgICByaWdodCA9IHNvcnQocmlnaHQpO1xuICAgICAgICByZXR1cm4gbWVyZ2UobGVmdCwgcmlnaHQpO1xuICAgIH0pKGEpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb21pc2VBbGwocHJvbWlzZXMpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufSIsImltcG9ydCB7IERFR19UT19SQUQgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJhZChkZWdyZWVzKSB7XG4gICAgcmV0dXJuIGRlZ3JlZXMgKiBERUdfVE9fUkFEO1xufVxuIiwiZnVuY3Rpb24gcG93KHApIHtcbiAgICBpZiAocCkge1xuICAgICAgICByZXR1cm4gTWF0aC5wb3coMTAsIHApO1xuICAgIH1cblxuICAgIHJldHVybiAxO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByb3VuZCh2YWx1ZSwgcHJlY2lzaW9uKSB7XG4gICAgY29uc3QgcG93ZXIgPSBwb3cocHJlY2lzaW9uKTtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIHBvd2VyKSAvIHBvd2VyO1xufSIsImltcG9ydCBkZWZpbmVkIGZyb20gJy4vZGVmaW5lZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZhbHVlT3JEZWZhdWx0KHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gZGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kRXZlbnRzKGVsZW1lbnQsIGV2ZW50cykge1xuICAgIGZvciAobGV0IGV2ZW50TmFtZSBpbiBldmVudHMpIHtcbiAgICAgICAgY29uc3QgZXZlbnROYW1lcyA9IGV2ZW50TmFtZS50cmltKCkuc3BsaXQoXCIgXCIpO1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBldmVudE5hbWVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWVzW2lkeF0sIGV2ZW50c1tldmVudE5hbWVdLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWxlbWVudE9mZnNldChlbGVtZW50KSB7XG4gICAgY29uc3QgYm94ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIGNvbnN0IGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogYm94LnRvcCArICh3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCkgLSAoZG9jdW1lbnRFbGVtZW50LmNsaWVudFRvcCB8fCAwKSxcbiAgICAgICAgbGVmdDogYm94LmxlZnQgKyAod2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0KSAtIChkb2N1bWVudEVsZW1lbnQuY2xpZW50TGVmdCB8fCAwKVxuICAgIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWxlbWVudFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHx8IHt9O1xuICAgIGNvbnN0IHN0eWxlc0FycmF5ID0gQXJyYXkuaXNBcnJheShzdHlsZXMpID8gc3R5bGVzIDogWyBzdHlsZXMgXTtcblxuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHN0eWxlc0FycmF5Lmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgbGV0IGZpZWxkID0gc3R5bGVzQXJyYXlbaWR4XTtcbiAgICAgICAgcmVzdWx0W2ZpZWxkXSA9IHN0eWxlW2ZpZWxkXTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCBlbGVtZW50U3R5bGVzIGZyb20gJy4vZWxlbWVudC1zdHlsZXMnO1xuaW1wb3J0IGRlZmluZWQgZnJvbSAnLi9kZWZpbmVkJztcblxuZnVuY3Rpb24gZ2V0UGl4ZWxzKHZhbHVlKSB7XG4gICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSArIFwicHhcIjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWxlbWVudFNpemUoZWxlbWVudCwgc2l6ZSkge1xuICAgIGlmIChzaXplKSB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gc2l6ZTtcblxuICAgICAgICBpZiAoZGVmaW5lZCh3aWR0aCkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSBnZXRQaXhlbHMod2lkdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZmluZWQoaGVpZ2h0KSkge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBnZXRQaXhlbHMoaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGVsZW1lbnRTdHlsZXMoZWxlbWVudCwgWyAnd2lkdGgnLCAnaGVpZ2h0JyBdKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2lkdGg6IHBhcnNlSW50KHNpemUud2lkdGgsIDEwKSxcbiAgICAgICAgICAgIGhlaWdodDogcGFyc2VJbnQoc2l6ZS5oZWlnaHQsIDEwKVxuICAgICAgICB9O1xuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bmJpbmRFdmVudHMoZWxlbWVudCwgZXZlbnRzID0ge30pIHtcbiAgICBmb3IgKGxldCBuYW1lIGluIGV2ZW50cykge1xuICAgICAgICBjb25zdCBldmVudE5hbWVzID0gbmFtZS50cmltKCkuc3BsaXQoXCIgXCIpO1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBldmVudE5hbWVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWVzW2lkeF0sIGV2ZW50c1tuYW1lXSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCB7IGRlZmF1bHQgYXMgZWxlbWVudFN0eWxlcyB9IGZyb20gJy4vZWxlbWVudC1zdHlsZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbGVtZW50UGFkZGluZyhlbGVtZW50KSB7XG4gICAgY29uc3QgeyBwYWRkaW5nTGVmdCwgcGFkZGluZ1RvcCB9ID0gZWxlbWVudFN0eWxlcyhlbGVtZW50LCBbIFwicGFkZGluZ0xlZnRcIiwgXCJwYWRkaW5nVG9wXCIgXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBwYXJzZUZsb2F0KHBhZGRpbmdUb3ApLFxuICAgICAgICBsZWZ0OiBwYXJzZUZsb2F0KHBhZGRpbmdMZWZ0KVxuICAgIH07XG59XG4iLCJpbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgZGVmaW5lZCBmcm9tICcuLi91dGlsL2RlZmluZWQnO1xuaW1wb3J0IHJhZCBmcm9tICcuLi91dGlsL3JhZCc7XG5pbXBvcnQgcm91bmQgZnJvbSAnLi4vdXRpbC9yb3VuZCc7XG5cbmNsYXNzIE1hdHJpeCBleHRlbmRzIENsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKGEgPSAwLCBiID0gMCwgYyA9IDAsIGQgPSAwLCBlID0gMCwgZiA9IDApIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmEgPSBhO1xuICAgICAgICB0aGlzLmIgPSBiO1xuICAgICAgICB0aGlzLmMgPSBjO1xuICAgICAgICB0aGlzLmQgPSBkO1xuICAgICAgICB0aGlzLmUgPSBlO1xuICAgICAgICB0aGlzLmYgPSBmO1xuICAgIH1cblxuICAgIG11bHRpcGx5Q29weShtYXRyaXgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgoXG4gICAgICAgICAgICB0aGlzLmEgKiBtYXRyaXguYSArIHRoaXMuYyAqIG1hdHJpeC5iLFxuICAgICAgICAgICAgdGhpcy5iICogbWF0cml4LmEgKyB0aGlzLmQgKiBtYXRyaXguYixcbiAgICAgICAgICAgIHRoaXMuYSAqIG1hdHJpeC5jICsgdGhpcy5jICogbWF0cml4LmQsXG4gICAgICAgICAgICB0aGlzLmIgKiBtYXRyaXguYyArIHRoaXMuZCAqIG1hdHJpeC5kLFxuICAgICAgICAgICAgdGhpcy5hICogbWF0cml4LmUgKyB0aGlzLmMgKiBtYXRyaXguZiArIHRoaXMuZSxcbiAgICAgICAgICAgIHRoaXMuYiAqIG1hdHJpeC5lICsgdGhpcy5kICogbWF0cml4LmYgKyB0aGlzLmZcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpbnZlcnQoKSB7XG4gICAgICAgIGNvbnN0IHsgYSwgYiwgYzogZCwgZDogZSwgZTogZywgZjogaCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZGV0ID0gYSAqIGUgLSBiICogZDtcblxuICAgICAgICBpZiAoZGV0ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgTWF0cml4KGUgLyBkZXQsIC1iIC8gZGV0LCAtZCAvIGRldCwgYSAvIGRldCxcbiAgICAgICAgICAgIChkICogaCAtIGUgKiBnKSAvIGRldCwgKGIgKiBnIC0gYSAqIGgpIC8gZGV0KTtcbiAgICB9XG5cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgodGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGhpcy5kLCB0aGlzLmUsIHRoaXMuZik7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIGlmICghb3RoZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmEgPT09IG90aGVyLmEgJiYgdGhpcy5iID09PSBvdGhlci5iICYmXG4gICAgICAgICAgICB0aGlzLmMgPT09IG90aGVyLmMgJiYgdGhpcy5kID09PSBvdGhlci5kICYmXG4gICAgICAgICAgICB0aGlzLmUgPT09IG90aGVyLmUgJiYgdGhpcy5mID09PSBvdGhlci5mO1xuICAgIH1cblxuICAgIHJvdW5kKHByZWNpc2lvbikge1xuICAgICAgICB0aGlzLmEgPSByb3VuZCh0aGlzLmEsIHByZWNpc2lvbik7XG4gICAgICAgIHRoaXMuYiA9IHJvdW5kKHRoaXMuYiwgcHJlY2lzaW9uKTtcbiAgICAgICAgdGhpcy5jID0gcm91bmQodGhpcy5jLCBwcmVjaXNpb24pO1xuICAgICAgICB0aGlzLmQgPSByb3VuZCh0aGlzLmQsIHByZWNpc2lvbik7XG4gICAgICAgIHRoaXMuZSA9IHJvdW5kKHRoaXMuZSwgcHJlY2lzaW9uKTtcbiAgICAgICAgdGhpcy5mID0gcm91bmQodGhpcy5mLCBwcmVjaXNpb24pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvQXJyYXkocHJlY2lzaW9uKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFsgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGhpcy5kLCB0aGlzLmUsIHRoaXMuZiBdO1xuXG4gICAgICAgIGlmIChkZWZpbmVkKHByZWNpc2lvbikpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gcm91bmQocmVzdWx0W2ldLCBwcmVjaXNpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB0b1N0cmluZyhwcmVjaXNpb24sIHNlcGFyYXRvciA9IFwiLFwiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvQXJyYXkocHJlY2lzaW9uKS5qb2luKHNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgc3RhdGljIHRyYW5zbGF0ZSh4LCB5KSB7XG4gICAgICAgIHJldHVybiBuZXcgTWF0cml4KDEsIDAsIDAsIDEsIHgsIHkpO1xuICAgIH1cblxuICAgIHN0YXRpYyB1bml0KCkge1xuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeCgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcm90YXRlKGFuZ2xlLCB4LCB5KSB7XG4gICAgICAgIGNvbnN0IG1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgbWF0cml4LmEgPSBNYXRoLmNvcyhyYWQoYW5nbGUpKTtcbiAgICAgICAgbWF0cml4LmIgPSBNYXRoLnNpbihyYWQoYW5nbGUpKTtcbiAgICAgICAgbWF0cml4LmMgPSAtbWF0cml4LmI7XG4gICAgICAgIG1hdHJpeC5kID0gbWF0cml4LmE7XG4gICAgICAgIG1hdHJpeC5lID0gKHggLSB4ICogbWF0cml4LmEgKyB5ICogbWF0cml4LmIpIHx8IDA7XG4gICAgICAgIG1hdHJpeC5mID0gKHkgLSB5ICogbWF0cml4LmEgLSB4ICogbWF0cml4LmIpIHx8IDA7XG5cbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2NhbGUoc2NhbGVYLCBzY2FsZVkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgoc2NhbGVYLCAwLCAwLCBzY2FsZVksIDAsIDApO1xuICAgIH1cbn1cblxuTWF0cml4LklERU5USVRZID0gTWF0cml4LnVuaXQoKTtcblxuZXhwb3J0IGRlZmF1bHQgTWF0cml4O1xuIiwiaW1wb3J0IE1hdHJpeCBmcm9tICcuLi9nZW9tZXRyeS9tYXRyaXgnO1xuXG5jb25zdCBtYXRyaXhSZWdleHAgPSAvbWF0cml4XFwoKC4qKVxcKS87XG5cbmZ1bmN0aW9uIHBhcnNlTWF0cml4KG1hdHJpeFN0cmluZykge1xuICAgIGNvbnN0IG1hdGNoID0gbWF0cml4U3RyaW5nLm1hdGNoKG1hdHJpeFJlZ2V4cCk7XG4gICAgaWYgKG1hdGNoID09PSBudWxsIHx8IG1hdGNoLmxlbmd0aCAhPT0gMikge1xuICAgICAgICByZXR1cm4gTWF0cml4LnVuaXQoKTtcbiAgICB9XG5cbiAgICBjb25zdCBtZW1iZXJzID0gbWF0Y2hbMV0uc3BsaXQoJywnKS5tYXAoeCA9PiBwYXJzZUZsb2F0KHgpKTtcbiAgICByZXR1cm4gbmV3IE1hdHJpeCguLi5tZW1iZXJzKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtTWF0cml4KGVsZW1lbnQpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnRyYW5zZm9ybTtcblxuICAgIGlmICh0cmFuc2Zvcm0gPT09ICdub25lJykge1xuICAgICAgICByZXR1cm4gTWF0cml4LnVuaXQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VNYXRyaXgodHJhbnNmb3JtKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWxlbWVudFNjYWxlKGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIE1hdHJpeC51bml0KCk7XG4gICAgfVxuXG4gICAgbGV0IG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeChlbGVtZW50KTtcbiAgICBsZXQgcGFyZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgY29uc3QgcGFyZW50TWF0cml4ID0gdHJhbnNmb3JtTWF0cml4KHBhcmVudCk7XG4gICAgICAgIG1hdHJpeCA9IG1hdHJpeC5tdWx0aXBseUNvcHkocGFyZW50TWF0cml4KTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgbWF0cml4LmIgPSBtYXRyaXguYyA9IG1hdHJpeC5lID0gbWF0cml4LmYgPSAwO1xuICAgIHJldHVybiBtYXRyaXg7XG59XG4iLCJpbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNsYXNzIExSVUNhY2hlIGV4dGVuZHMgQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKHNpemUpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fbWFwID0ge307XG4gICAgfVxuXG4gICAgcHV0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWFwID0gdGhpcy5fbWFwO1xuICAgICAgICBjb25zdCBlbnRyeSA9IHsga2V5OiBrZXksIHZhbHVlOiB2YWx1ZSB9O1xuXG4gICAgICAgIG1hcFtrZXldID0gZW50cnk7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9oZWFkKSB7XG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gdGhpcy5fdGFpbCA9IGVudHJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdGFpbC5uZXdlciA9IGVudHJ5O1xuICAgICAgICAgICAgZW50cnkub2xkZXIgPSB0aGlzLl90YWlsO1xuICAgICAgICAgICAgdGhpcy5fdGFpbCA9IGVudHJ5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2xlbmd0aCA+PSB0aGlzLl9zaXplKSB7XG4gICAgICAgICAgICBtYXBbdGhpcy5faGVhZC5rZXldID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQgPSB0aGlzLl9oZWFkLm5ld2VyO1xuICAgICAgICAgICAgdGhpcy5faGVhZC5vbGRlciA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9sZW5ndGgrKztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldChrZXkpIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLl9tYXBba2V5XTtcblxuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgIGlmIChlbnRyeSA9PT0gdGhpcy5faGVhZCAmJiBlbnRyeSAhPT0gdGhpcy5fdGFpbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hlYWQgPSBlbnRyeS5uZXdlcjtcbiAgICAgICAgICAgICAgICB0aGlzLl9oZWFkLm9sZGVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVudHJ5ICE9PSB0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5Lm9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5Lm9sZGVyLm5ld2VyID0gZW50cnkubmV3ZXI7XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5Lm5ld2VyLm9sZGVyID0gZW50cnkub2xkZXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZW50cnkub2xkZXIgPSB0aGlzLl90YWlsO1xuICAgICAgICAgICAgICAgIGVudHJ5Lm5ld2VyID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3RhaWwubmV3ZXIgPSBlbnRyeTtcbiAgICAgICAgICAgICAgICB0aGlzLl90YWlsID0gZW50cnk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBlbnRyeS52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTFJVQ2FjaGU7IiwiY29uc3QgUkVQTEFDRV9SRUdFWCA9IC9cXHI/XFxufFxccnxcXHQvZztcbmNvbnN0IFNQQUNFID0gJyAnO1xuXG5mdW5jdGlvbiBub3JtYWxpemVUZXh0KHRleHQpIHtcbiAgICByZXR1cm4gU3RyaW5nKHRleHQpLnJlcGxhY2UoUkVQTEFDRV9SRUdFWCwgU1BBQ0UpO1xufVxuXG5mdW5jdGlvbiBvYmplY3RLZXkob2JqZWN0KSB7XG4gICAgY29uc3QgcGFydHMgPSBbXTtcbiAgICBmb3IgKGxldCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIHBhcnRzLnB1c2goa2V5ICsgb2JqZWN0W2tleV0pO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJ0cy5zb3J0KCkuam9pbihcIlwiKTtcbn1cblxuLy8gQ29tcHV0ZXMgRk5WLTEgaGFzaFxuLy8gU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRm93bGVyJUUyJTgwJTkzTm9sbCVFMiU4MCU5M1ZvX2hhc2hfZnVuY3Rpb25cbmZ1bmN0aW9uIGhhc2hLZXkoc3RyKSB7XG4gICAgLy8gMzItYml0IEZOVi0xIG9mZnNldCBiYXNpc1xuICAgIC8vIFNlZSBodHRwOi8vaXN0aGUuY29tL2Nob25nby90ZWNoL2NvbXAvZm52LyNGTlYtcGFyYW1cbiAgICBsZXQgaGFzaCA9IDB4ODExQzlEQzU7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgICAgICBoYXNoICs9IChoYXNoIDw8IDEpICsgKGhhc2ggPDwgNCkgKyAoaGFzaCA8PCA3KSArIChoYXNoIDw8IDgpICsgKGhhc2ggPDwgMjQpO1xuICAgICAgICBoYXNoIF49IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIH1cblxuICAgIHJldHVybiBoYXNoID4+PiAwO1xufVxuXG5leHBvcnQgeyBvYmplY3RLZXksIGhhc2hLZXksIG5vcm1hbGl6ZVRleHQgfTsiLCJpbXBvcnQgTFJVQ2FjaGUgZnJvbSAnLi9scnUtY2FjaGUnO1xuaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgb2JqZWN0S2V5LCBoYXNoS2V5LCBub3JtYWxpemVUZXh0IH0gZnJvbSAnLi91dGlsJztcblxuZnVuY3Rpb24gemVyb1NpemUoKSB7XG4gICAgcmV0dXJuIHsgd2lkdGg6IDAsIGhlaWdodDogMCwgYmFzZWxpbmU6IDAgfTtcbn1cblxuY29uc3QgREVGQVVMVF9PUFRJT05TID0ge1xuICAgIGJhc2VsaW5lTWFya2VyU2l6ZTogMVxufTtcblxubGV0IGRlZmF1bHRNZWFzdXJlQm94O1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZGVmYXVsdE1lYXN1cmVCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGRlZmF1bHRNZWFzdXJlQm94LnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50OyB0b3A6IC00MDAwcHggIWltcG9ydGFudDsgd2lkdGg6IGF1dG8gIWltcG9ydGFudDsgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XCIgK1xuICAgICAgICAgICAgICBcInBhZGRpbmc6IDAgIWltcG9ydGFudDsgbWFyZ2luOiAwICFpbXBvcnRhbnQ7IGJvcmRlcjogMCAhaW1wb3J0YW50O1wiICtcbiAgICAgICAgICAgICAgXCJsaW5lLWhlaWdodDogbm9ybWFsICFpbXBvcnRhbnQ7IHZpc2liaWxpdHk6IGhpZGRlbiAhaW1wb3J0YW50OyB3aGl0ZS1zcGFjZTogcHJlIWltcG9ydGFudDtcIjtcbn1cblxuY2xhc3MgVGV4dE1ldHJpY3MgZXh0ZW5kcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX2NhY2hlID0gbmV3IExSVUNhY2hlKDEwMDApO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIG1lYXN1cmUodGV4dCwgc3R5bGUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAodHlwZW9mIHRleHQgPT09ICd1bmRlZmluZWQnIHx8IHRleHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB6ZXJvU2l6ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3R5bGVLZXkgPSBvYmplY3RLZXkoc3R5bGUpO1xuICAgICAgICBjb25zdCBjYWNoZUtleSA9IGhhc2hLZXkodGV4dCArIHN0eWxlS2V5KTtcbiAgICAgICAgY29uc3QgY2FjaGVkUmVzdWx0ID0gdGhpcy5fY2FjaGUuZ2V0KGNhY2hlS2V5KTtcblxuICAgICAgICBpZiAoY2FjaGVkUmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkUmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2l6ZSA9IHplcm9TaXplKCk7XG4gICAgICAgIGNvbnN0IG1lYXN1cmVCb3ggPSBvcHRpb25zLmJveCB8fCBkZWZhdWx0TWVhc3VyZUJveDtcbiAgICAgICAgY29uc3QgYmFzZWxpbmVNYXJrZXIgPSB0aGlzLl9iYXNlbGluZU1hcmtlcigpLmNsb25lTm9kZShmYWxzZSk7XG5cbiAgICAgICAgZm9yIChsZXQga2V5IGluIHN0eWxlKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBzdHlsZVtrZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIG1lYXN1cmVCb3guc3R5bGVba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGV4dFN0ciA9IG9wdGlvbnMubm9ybWFsaXplVGV4dCAhPT0gZmFsc2UgPyBub3JtYWxpemVUZXh0KHRleHQpIDogU3RyaW5nKHRleHQpO1xuXG4gICAgICAgIG1lYXN1cmVCb3gudGV4dENvbnRlbnQgPSB0ZXh0U3RyO1xuICAgICAgICBtZWFzdXJlQm94LmFwcGVuZENoaWxkKGJhc2VsaW5lTWFya2VyKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtZWFzdXJlQm94KTtcblxuICAgICAgICBpZiAodGV4dFN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNpemUud2lkdGggPSBtZWFzdXJlQm94Lm9mZnNldFdpZHRoIC0gdGhpcy5vcHRpb25zLmJhc2VsaW5lTWFya2VyU2l6ZTtcbiAgICAgICAgICAgIHNpemUuaGVpZ2h0ID0gbWVhc3VyZUJveC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICBzaXplLmJhc2VsaW5lID0gYmFzZWxpbmVNYXJrZXIub2Zmc2V0VG9wICsgdGhpcy5vcHRpb25zLmJhc2VsaW5lTWFya2VyU2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaXplLndpZHRoID4gMCAmJiBzaXplLmhlaWdodCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlLnB1dChjYWNoZUtleSwgc2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBtZWFzdXJlQm94LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobWVhc3VyZUJveCk7XG5cbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuXG4gICAgX2Jhc2VsaW5lTWFya2VyKCkge1xuICAgICAgICBjb25zdCBtYXJrZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBtYXJrZXIuc3R5bGUuY3NzVGV4dCA9IFwiZGlzcGxheTogaW5saW5lLWJsb2NrOyB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7d2lkdGg6IFwiICtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5iYXNlbGluZU1hcmtlclNpemUgKyBcInB4OyBoZWlnaHQ6IFwiICsgdGhpcy5vcHRpb25zLmJhc2VsaW5lTWFya2VyU2l6ZSArIFwicHg7b3ZlcmZsb3c6IGhpZGRlbjtcIjtcblxuICAgICAgICByZXR1cm4gbWFya2VyO1xuICAgIH1cbn1cblxuVGV4dE1ldHJpY3MuY3VycmVudCA9IG5ldyBUZXh0TWV0cmljcygpO1xuXG5leHBvcnQgZGVmYXVsdCBUZXh0TWV0cmljcztcbiIsImltcG9ydCBUZXh0TWV0cmljcyBmcm9tICcuL3RleHQtbWV0cmljcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lYXN1cmVUZXh0KHRleHQsIHN0eWxlLCBtZWFzdXJlQm94KSB7XG4gICAgcmV0dXJuIFRleHRNZXRyaWNzLmN1cnJlbnQubWVhc3VyZSh0ZXh0LCBzdHlsZSwgbWVhc3VyZUJveCk7XG59XG4iLCJpbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgSGFzT2JzZXJ2ZXJzIGZyb20gJy4vaGFzLW9ic2VydmVycyc7XG5pbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cblxuY29uc3QgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxuY2xhc3MgT3B0aW9uc1N0b3JlIGV4dGVuZHMgSGFzT2JzZXJ2ZXJzIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBwcmVmaXggPSBcIlwiKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5wcmVmaXggPSBwcmVmaXg7XG5cbiAgICAgICAgZm9yIChsZXQgZmllbGQgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgbGV0IG1lbWJlciA9IG9wdGlvbnNbZmllbGRdO1xuICAgICAgICAgICAgbWVtYmVyID0gdGhpcy5fd3JhcChtZW1iZXIsIGZpZWxkKTtcbiAgICAgICAgICAgIHRoaXNbZmllbGRdID0gbWVtYmVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0KGZpZWxkKSB7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gZmllbGQuc3BsaXQoXCIuXCIpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcztcblxuICAgICAgICB3aGlsZSAocGFydHMubGVuZ3RoICYmIHJlc3VsdCkge1xuICAgICAgICAgICAgbGV0IHBhcnQgPSBwYXJ0cy5zaGlmdCgpO1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0W3BhcnRdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBzZXQoZmllbGQsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmdldChmaWVsZCk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXQoZmllbGQsIHRoaXMuX3dyYXAodmFsdWUsIGZpZWxkKSk7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNDaGFuZ2Uoe1xuICAgICAgICAgICAgICAgIGZpZWxkOiB0aGlzLnByZWZpeCArIGZpZWxkLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0KGZpZWxkLCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBjb21wb3NpdGUgPSBmaWVsZC5pbmRleE9mKFwiLlwiKSA+PSAwO1xuICAgICAgICBsZXQgcGFyZW50T2JqID0gdGhpcztcbiAgICAgICAgbGV0IGZpZWxkTmFtZSA9IGZpZWxkO1xuXG4gICAgICAgIGlmIChjb21wb3NpdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gZmllbGROYW1lLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgICAgIGxldCBwcmVmaXggPSB0aGlzLnByZWZpeDtcblxuICAgICAgICAgICAgd2hpbGUgKHBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBmaWVsZE5hbWUgPSBwYXJ0cy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIHByZWZpeCArPSBmaWVsZE5hbWUgKyBcIi5cIjtcblxuICAgICAgICAgICAgICAgIGxldCBvYmogPSBwYXJlbnRPYmpbZmllbGROYW1lXTtcblxuICAgICAgICAgICAgICAgIGlmICghb2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IG5ldyBPcHRpb25zU3RvcmUoe30sIHByZWZpeCk7XG4gICAgICAgICAgICAgICAgICAgIG9iai5hZGRPYnNlcnZlcih0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50T2JqW2ZpZWxkTmFtZV0gPSBvYmo7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcmVudE9iaiA9IG9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpZWxkTmFtZSA9IHBhcnRzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyZW50T2JqLl9jbGVhcihmaWVsZE5hbWUpO1xuICAgICAgICBwYXJlbnRPYmpbZmllbGROYW1lXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIF9jbGVhcihmaWVsZCkge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpc1tmaWVsZF07XG4gICAgICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnQucmVtb3ZlT2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIGN1cnJlbnQucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfd3JhcChvYmplY3QsIGZpZWxkKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0b1N0cmluZy5jYWxsKG9iamVjdCk7XG4gICAgICAgIGxldCB3cmFwcGVkID0gb2JqZWN0O1xuXG4gICAgICAgIGlmICh3cmFwcGVkICE9PSBudWxsICYmIGRlZmluZWQod3JhcHBlZCkgJiYgdHlwZSA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIikge1xuICAgICAgICAgICAgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgT3B0aW9uc1N0b3JlKSAmJiAhKG9iamVjdCBpbnN0YW5jZW9mIENsYXNzKSkge1xuICAgICAgICAgICAgICAgIHdyYXBwZWQgPSBuZXcgT3B0aW9uc1N0b3JlKHdyYXBwZWQsIHRoaXMucHJlZml4ICsgZmllbGQgKyBcIi5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdyYXBwZWQuYWRkT2JzZXJ2ZXIodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gd3JhcHBlZDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE9wdGlvbnNTdG9yZTtcbiIsImZ1bmN0aW9uIHNldEFjY2Vzc29yKGZpZWxkKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzW2ZpZWxkXSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXNbZmllbGRdID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmdlb21ldHJ5Q2hhbmdlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRBY2Nlc3NvcihmaWVsZCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbZmllbGRdO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGRlZmluZUFjY2Vzc29ycyhmbiwgZmllbGRzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IG5hbWUgPSBmaWVsZHNbaV07XG4gICAgICAgIGxldCBjYXBpdGFsaXplZCA9IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLnN1YnN0cmluZygxLCBuYW1lLmxlbmd0aCk7XG5cbiAgICAgICAgZm5bXCJzZXRcIiArIGNhcGl0YWxpemVkXSA9IHNldEFjY2Vzc29yKG5hbWUpO1xuICAgICAgICBmbltcImdldFwiICsgY2FwaXRhbGl6ZWRdID0gZ2V0QWNjZXNzb3IobmFtZSk7XG4gICAgfVxufVxuXG5jb25zdCB3aXRoQWNjZXNzb3JzID0gKFRCYXNlLCBuYW1lcykgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGNsYXNzIGV4dGVuZHMgVEJhc2Uge307XG4gICAgZGVmaW5lQWNjZXNzb3JzKHJlc3VsdC5wcm90b3R5cGUsIG5hbWVzKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoQWNjZXNzb3JzO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9NYXRyaXgodHJhbnNmb3JtYXRpb24pIHtcbiAgICBpZiAodHJhbnNmb3JtYXRpb24gJiYgdHlwZW9mIHRyYW5zZm9ybWF0aW9uLm1hdHJpeCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1hdGlvbi5tYXRyaXgoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNmb3JtYXRpb247XG59IiwiaW1wb3J0IHdpdGhBY2Nlc3NvcnMgZnJvbSAnLi4vbWl4aW5zL3dpdGgtYWNjZXNzb3JzJztcbmltcG9ydCBIYXNPYnNlcnZlcnMgZnJvbSAnLi4vY29yZS9oYXMtb2JzZXJ2ZXJzJztcbmltcG9ydCB7IGRlZmluZWQsIE1JTl9OVU0sIE1BWF9OVU0sIHJvdW5kIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgTWF0cml4IGZyb20gJy4vbWF0cml4JztcbmltcG9ydCB0b01hdHJpeCBmcm9tICcuL3RvLW1hdHJpeCc7XG5cblxuY2xhc3MgUG9pbnQgZXh0ZW5kcyB3aXRoQWNjZXNzb3JzKEhhc09ic2VydmVycywgWyBcInhcIiwgXCJ5XCIgXSkge1xuICAgIGNvbnN0cnVjdG9yKHgsIHkpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnggPSB4IHx8IDA7XG4gICAgICAgIHRoaXMueSA9IHkgfHwgMDtcbiAgICB9XG5cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG90aGVyICYmIG90aGVyLnggPT09IHRoaXMueCAmJiBvdGhlci55ID09PSB0aGlzLnk7XG4gICAgfVxuXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54LCB0aGlzLnkpO1xuICAgIH1cblxuICAgIHJvdGF0ZShhbmdsZSwgb3JpZ2luKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpblBvaW50ID0gUG9pbnQuY3JlYXRlKG9yaWdpbikgfHwgUG9pbnQuWkVSTztcblxuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oTWF0cml4LnJvdGF0ZShhbmdsZSwgb3JpZ2luUG9pbnQueCwgb3JpZ2luUG9pbnQueSkpO1xuICAgIH1cblxuICAgIHRyYW5zbGF0ZSh4LCB5KSB7XG4gICAgICAgIHRoaXMueCArPSB4O1xuICAgICAgICB0aGlzLnkgKz0geTtcblxuICAgICAgICB0aGlzLmdlb21ldHJ5Q2hhbmdlKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlV2l0aChwb2ludCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGUocG9pbnQueCwgcG9pbnQueSk7XG4gICAgfVxuXG4gICAgbW92ZSh4LCB5KSB7XG4gICAgICAgIHRoaXMueCA9IHRoaXMueSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZSh4LCB5KTtcbiAgICB9XG5cbiAgICBzY2FsZShzY2FsZVgsIHNjYWxlWSA9IHNjYWxlWCkge1xuICAgICAgICB0aGlzLnggKj0gc2NhbGVYO1xuICAgICAgICB0aGlzLnkgKj0gc2NhbGVZO1xuXG4gICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzY2FsZUNvcHkoc2NhbGVYLCBzY2FsZVkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5zY2FsZShzY2FsZVgsIHNjYWxlWSk7XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtKHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgIGNvbnN0IG1hdHJpeCA9IHRvTWF0cml4KHRyYW5zZm9ybWF0aW9uKTtcbiAgICAgICAgY29uc3QgeyB4LCB5IH0gPSB0aGlzO1xuXG4gICAgICAgIHRoaXMueCA9IG1hdHJpeC5hICogeCArIG1hdHJpeC5jICogeSArIG1hdHJpeC5lO1xuICAgICAgICB0aGlzLnkgPSBtYXRyaXguYiAqIHggKyBtYXRyaXguZCAqIHkgKyBtYXRyaXguZjtcblxuICAgICAgICB0aGlzLmdlb21ldHJ5Q2hhbmdlKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtQ29weSh0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCBwb2ludCA9IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAodHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgICAgIHBvaW50LnRyYW5zZm9ybSh0cmFuc2Zvcm1hdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxuXG4gICAgZGlzdGFuY2VUbyhwb2ludCkge1xuICAgICAgICBjb25zdCBkeCA9IHRoaXMueCAtIHBvaW50Lng7XG4gICAgICAgIGNvbnN0IGR5ID0gdGhpcy55IC0gcG9pbnQueTtcblxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICB9XG5cbiAgICByb3VuZChkaWdpdHMpIHtcbiAgICAgICAgdGhpcy54ID0gcm91bmQodGhpcy54LCBkaWdpdHMpO1xuICAgICAgICB0aGlzLnkgPSByb3VuZCh0aGlzLnksIGRpZ2l0cyk7XG5cbiAgICAgICAgdGhpcy5nZW9tZXRyeUNoYW5nZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvQXJyYXkoZGlnaXRzKSB7XG4gICAgICAgIGNvbnN0IGRvUm91bmQgPSBkZWZpbmVkKGRpZ2l0cyk7XG4gICAgICAgIGNvbnN0IHggPSBkb1JvdW5kID8gcm91bmQodGhpcy54LCBkaWdpdHMpIDogdGhpcy54O1xuICAgICAgICBjb25zdCB5ID0gZG9Sb3VuZCA/IHJvdW5kKHRoaXMueSwgZGlnaXRzKSA6IHRoaXMueTtcblxuICAgICAgICByZXR1cm4gWyB4LCB5IF07XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoZGlnaXRzLCBzZXBhcmF0b3IgPSBcIiBcIikge1xuICAgICAgICBsZXQgeyB4LCB5IH0gPSB0aGlzO1xuXG4gICAgICAgIGlmIChkZWZpbmVkKGRpZ2l0cykpIHtcbiAgICAgICAgICAgIHggPSByb3VuZCh4LCBkaWdpdHMpO1xuICAgICAgICAgICAgeSA9IHJvdW5kKHksIGRpZ2l0cyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geCArIHNlcGFyYXRvciArIHk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZShhcmcwLCBhcmcxKSB7XG4gICAgICAgIGlmIChkZWZpbmVkKGFyZzApKSB7XG4gICAgICAgICAgICBpZiAoYXJnMCBpbnN0YW5jZW9mIFBvaW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZzA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgYXJnMC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50KGFyZzBbMF0sIGFyZzBbMV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50KGFyZzAsIGFyZzEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIG1pbigpIHtcbiAgICAgICAgbGV0IG1pblggPSBNQVhfTlVNO1xuICAgICAgICBsZXQgbWluWSA9IE1BWF9OVU07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwb2ludCA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIG1pblggPSBNYXRoLm1pbihwb2ludC54LCBtaW5YKTtcbiAgICAgICAgICAgIG1pblkgPSBNYXRoLm1pbihwb2ludC55LCBtaW5ZKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQobWluWCwgbWluWSk7XG4gICAgfVxuXG4gICAgc3RhdGljIG1heCgpIHtcbiAgICAgICAgbGV0IG1heFggPSBNSU5fTlVNO1xuICAgICAgICBsZXQgbWF4WSA9IE1JTl9OVU07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgbWF4WCA9IE1hdGgubWF4KHBvaW50LngsIG1heFgpO1xuICAgICAgICAgICAgbWF4WSA9IE1hdGgubWF4KHBvaW50LnksIG1heFkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludChtYXhYLCBtYXhZKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbWluUG9pbnQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQoTUlOX05VTSwgTUlOX05VTSk7XG4gICAgfVxuXG4gICAgc3RhdGljIG1heFBvaW50KCkge1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KE1BWF9OVU0sIE1BWF9OVU0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgWkVSTygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludCgwLCAwKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvaW50O1xuIiwiaW1wb3J0IEhhc09ic2VydmVycyBmcm9tICcuLi9jb3JlL2hhcy1vYnNlcnZlcnMnO1xuaW1wb3J0IHdpdGhBY2Nlc3NvcnMgZnJvbSAnLi4vbWl4aW5zL3dpdGgtYWNjZXNzb3JzJztcbmltcG9ydCB7IGRlZmluZWQsIHJvdW5kIH0gZnJvbSAnLi4vdXRpbCc7XG5cblxuY2xhc3MgU2l6ZSBleHRlbmRzIHdpdGhBY2Nlc3NvcnMoSGFzT2JzZXJ2ZXJzLCBbIFwid2lkdGhcIiwgXCJoZWlnaHRcIiBdKSB7XG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aCB8fCAwO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodCB8fCAwO1xuICAgIH1cblxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICByZXR1cm4gb3RoZXIgJiYgb3RoZXIud2lkdGggPT09IHRoaXMud2lkdGggJiYgb3RoZXIuaGVpZ2h0ID09PSB0aGlzLmhlaWdodDtcbiAgICB9XG5cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaXplKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICB9XG5cbiAgICB0b0FycmF5KGRpZ2l0cykge1xuICAgICAgICBjb25zdCBkb1JvdW5kID0gZGVmaW5lZChkaWdpdHMpO1xuICAgICAgICBjb25zdCB3aWR0aCA9IGRvUm91bmQgPyByb3VuZCh0aGlzLndpZHRoLCBkaWdpdHMpIDogdGhpcy53aWR0aDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gZG9Sb3VuZCA/IHJvdW5kKHRoaXMuaGVpZ2h0LCBkaWdpdHMpIDogdGhpcy5oZWlnaHQ7XG5cbiAgICAgICAgcmV0dXJuIFsgd2lkdGgsIGhlaWdodCBdO1xuICAgIH1cblxuICAgIHN0YXRpYyBjcmVhdGUoYXJnMCwgYXJnMSkge1xuICAgICAgICBpZiAoZGVmaW5lZChhcmcwKSkge1xuICAgICAgICAgICAgaWYgKGFyZzAgaW5zdGFuY2VvZiBTaXplKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZzA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgYXJnMC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNpemUoYXJnMFswXSwgYXJnMFsxXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgU2l6ZShhcmcwLCBhcmcxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgWkVSTygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaXplKDAsIDApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2l6ZTtcbiIsImltcG9ydCBIYXNPYnNlcnZlcnMgZnJvbSAnLi4vY29yZS9oYXMtb2JzZXJ2ZXJzJztcbmltcG9ydCBQb2ludCBmcm9tICcuL3BvaW50JztcbmltcG9ydCBTaXplIGZyb20gJy4vc2l6ZSc7XG5cbmNsYXNzIFJlY3QgZXh0ZW5kcyBIYXNPYnNlcnZlcnMge1xuICAgIGNvbnN0cnVjdG9yKG9yaWdpbiA9IG5ldyBQb2ludCgpLCBzaXplID0gbmV3IFNpemUoKSwgY29ybmVyUmFkaXVzID0gMCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuc2V0T3JpZ2luKG9yaWdpbik7XG4gICAgICAgIHRoaXMuc2V0U2l6ZShzaXplKTtcbiAgICAgICAgdGhpcy5zZXRDb3JuZXJSYWRpdXMoY29ybmVyUmFkaXVzKTtcbiAgICB9XG5cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWN0KFxuICAgICAgICAgICAgdGhpcy5vcmlnaW4uY2xvbmUoKSxcbiAgICAgICAgICAgIHRoaXMuc2l6ZS5jbG9uZSgpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBvdGhlciAmJlxuICAgICAgICAgICAgICAgb3RoZXIub3JpZ2luLmVxdWFscyh0aGlzLm9yaWdpbikgJiZcbiAgICAgICAgICAgICAgIG90aGVyLnNpemUuZXF1YWxzKHRoaXMuc2l6ZSk7XG4gICAgfVxuXG4gICAgc2V0T3JpZ2luKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX29ic2VydmVyRmllbGQoXCJvcmlnaW5cIiwgUG9pbnQuY3JlYXRlKHZhbHVlKSk7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0T3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW47XG4gICAgfVxuXG4gICAgc2V0Q29ybmVyUmFkaXVzKHJhZGl1cykge1xuICAgICAgICB0aGlzLmNvcm5lclJhZGl1cyA9IEFycmF5LmlzQXJyYXkocmFkaXVzKSA/IHJhZGl1cyA6IFsgcmFkaXVzLCByYWRpdXMgXTtcblxuICAgICAgICB0aGlzLmdlb21ldHJ5Q2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldENvcm5lclJhZGl1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ybmVyUmFkaXVzO1xuICAgIH1cblxuICAgIHNldFNpemUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXJGaWVsZChcInNpemVcIiwgU2l6ZS5jcmVhdGUodmFsdWUpKTtcbiAgICAgICAgdGhpcy5nZW9tZXRyeUNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaXplO1xuICAgIH1cblxuICAgIHdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaXplLndpZHRoO1xuICAgIH1cblxuICAgIGhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZS5oZWlnaHQ7XG4gICAgfVxuXG4gICAgdG9wTGVmdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luLmNsb25lKCk7XG4gICAgfVxuXG4gICAgYm90dG9tUmlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbi5jbG9uZSgpLnRyYW5zbGF0ZSh0aGlzLndpZHRoKCksIHRoaXMuaGVpZ2h0KCkpO1xuICAgIH1cblxuICAgIHRvcFJpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW4uY2xvbmUoKS50cmFuc2xhdGUodGhpcy53aWR0aCgpLCAwKTtcbiAgICB9XG5cbiAgICBib3R0b21MZWZ0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW4uY2xvbmUoKS50cmFuc2xhdGUoMCwgdGhpcy5oZWlnaHQoKSk7XG4gICAgfVxuXG4gICAgY2VudGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW4uY2xvbmUoKS50cmFuc2xhdGUodGhpcy53aWR0aCgpIC8gMiwgdGhpcy5oZWlnaHQoKSAvIDIpO1xuICAgIH1cblxuICAgIGJib3gobWF0cml4KSB7XG4gICAgICAgIGNvbnN0IHRsID0gdGhpcy50b3BMZWZ0KCkudHJhbnNmb3JtQ29weShtYXRyaXgpO1xuICAgICAgICBjb25zdCB0ciA9IHRoaXMudG9wUmlnaHQoKS50cmFuc2Zvcm1Db3B5KG1hdHJpeCk7XG4gICAgICAgIGNvbnN0IGJyID0gdGhpcy5ib3R0b21SaWdodCgpLnRyYW5zZm9ybUNvcHkobWF0cml4KTtcbiAgICAgICAgY29uc3QgYmwgPSB0aGlzLmJvdHRvbUxlZnQoKS50cmFuc2Zvcm1Db3B5KG1hdHJpeCk7XG5cbiAgICAgICAgcmV0dXJuIFJlY3QuZnJvbVBvaW50cyh0bCwgdHIsIGJyLCBibCk7XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtQ29weShtKSB7XG4gICAgICAgIHJldHVybiBSZWN0LmZyb21Qb2ludHMoXG4gICAgICAgICAgICB0aGlzLnRvcExlZnQoKS50cmFuc2Zvcm0obSksXG4gICAgICAgICAgICB0aGlzLmJvdHRvbVJpZ2h0KCkudHJhbnNmb3JtKG0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZXhwYW5kKHgsIHkgPSB4KSB7XG5cbiAgICAgICAgdGhpcy5zaXplLndpZHRoICs9IDIgKiB4O1xuICAgICAgICB0aGlzLnNpemUuaGVpZ2h0ICs9IDIgKiB5O1xuXG4gICAgICAgIHRoaXMub3JpZ2luLnRyYW5zbGF0ZSgteCwgLXkpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGV4cGFuZENvcHkoeCwgeSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmV4cGFuZCh4LCB5KTtcbiAgICB9XG5cbiAgICBjb250YWluc1BvaW50KHBvaW50KSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbiA9IHRoaXMub3JpZ2luO1xuICAgICAgICBjb25zdCBib3R0b21SaWdodCA9IHRoaXMuYm90dG9tUmlnaHQoKTtcbiAgICAgICAgcmV0dXJuICEocG9pbnQueCA8IG9yaWdpbi54IHx8IHBvaW50LnkgPCBvcmlnaW4ueSB8fCBib3R0b21SaWdodC54IDwgcG9pbnQueCB8fCBib3R0b21SaWdodC55IDwgcG9pbnQueSk7XG4gICAgfVxuXG4gICAgX2lzT25QYXRoKHBvaW50LCB3aWR0aCkge1xuICAgICAgICBjb25zdCByZWN0T3V0ZXIgPSB0aGlzLmV4cGFuZENvcHkod2lkdGgsIHdpZHRoKTtcbiAgICAgICAgY29uc3QgcmVjdElubmVyID0gdGhpcy5leHBhbmRDb3B5KC13aWR0aCwgLXdpZHRoKTtcblxuICAgICAgICByZXR1cm4gcmVjdE91dGVyLmNvbnRhaW5zUG9pbnQocG9pbnQpICYmICFyZWN0SW5uZXIuY29udGFpbnNQb2ludChwb2ludCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21Qb2ludHMoKSB7XG4gICAgICAgIGNvbnN0IHRvcExlZnQgPSBQb2ludC5taW4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc3QgYm90dG9tUmlnaHQgPSBQb2ludC5tYXguYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IG5ldyBTaXplKFxuICAgICAgICAgICAgYm90dG9tUmlnaHQueCAtIHRvcExlZnQueCxcbiAgICAgICAgICAgIGJvdHRvbVJpZ2h0LnkgLSB0b3BMZWZ0LnlcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gbmV3IFJlY3QodG9wTGVmdCwgc2l6ZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHVuaW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIFJlY3QuZnJvbVBvaW50cyhcbiAgICAgICAgICAgIFBvaW50Lm1pbihhLnRvcExlZnQoKSwgYi50b3BMZWZ0KCkpLFxuICAgICAgICAgICAgUG9pbnQubWF4KGEuYm90dG9tUmlnaHQoKSwgYi5ib3R0b21SaWdodCgpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcnNlY3QoYSwgYikge1xuICAgICAgICBjb25zdCByZWN0MSA9IHtcbiAgICAgICAgICAgIGxlZnQ6IGEudG9wTGVmdCgpLngsXG4gICAgICAgICAgICB0b3A6IGEudG9wTGVmdCgpLnksXG4gICAgICAgICAgICByaWdodDogYS5ib3R0b21SaWdodCgpLngsXG4gICAgICAgICAgICBib3R0b206IGEuYm90dG9tUmlnaHQoKS55XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVjdDIgPSB7XG4gICAgICAgICAgICBsZWZ0OiBiLnRvcExlZnQoKS54LFxuICAgICAgICAgICAgdG9wOiBiLnRvcExlZnQoKS55LFxuICAgICAgICAgICAgcmlnaHQ6IGIuYm90dG9tUmlnaHQoKS54LFxuICAgICAgICAgICAgYm90dG9tOiBiLmJvdHRvbVJpZ2h0KCkueVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChyZWN0MS5sZWZ0IDw9IHJlY3QyLnJpZ2h0ICYmXG4gICAgICAgICAgICByZWN0Mi5sZWZ0IDw9IHJlY3QxLnJpZ2h0ICYmXG4gICAgICAgICAgICByZWN0MS50b3AgPD0gcmVjdDIuYm90dG9tICYmXG4gICAgICAgICAgICByZWN0Mi50b3AgPD0gcmVjdDEuYm90dG9tKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVjdC5mcm9tUG9pbnRzKFxuICAgICAgICAgICAgICAgIG5ldyBQb2ludChNYXRoLm1heChyZWN0MS5sZWZ0LCByZWN0Mi5sZWZ0KSwgTWF0aC5tYXgocmVjdDEudG9wLCByZWN0Mi50b3ApKSxcbiAgICAgICAgICAgICAgICBuZXcgUG9pbnQoTWF0aC5taW4ocmVjdDEucmlnaHQsIHJlY3QyLnJpZ2h0KSwgTWF0aC5taW4ocmVjdDEuYm90dG9tLCByZWN0Mi5ib3R0b20pKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVjdDtcbiIsImltcG9ydCBIYXNPYnNlcnZlcnMgZnJvbSAnLi4vY29yZS9oYXMtb2JzZXJ2ZXJzJztcbmltcG9ydCB0b01hdHJpeCBmcm9tICcuL3RvLW1hdHJpeCc7XG5pbXBvcnQgTWF0cml4IGZyb20gJy4vbWF0cml4JztcbmltcG9ydCBQb2ludCBmcm9tICcuL3BvaW50JztcblxuY2xhc3MgVHJhbnNmb3JtYXRpb24gZXh0ZW5kcyBIYXNPYnNlcnZlcnMge1xuICAgIGNvbnN0cnVjdG9yKG1hdHJpeCA9IE1hdHJpeC51bml0KCkpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLl9tYXRyaXggPSBtYXRyaXg7XG4gICAgfVxuXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNmb3JtYXRpb24oXG4gICAgICAgICAgICB0aGlzLl9tYXRyaXguY2xvbmUoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICByZXR1cm4gb3RoZXIgJiZcbiAgICAgICAgICAgICAgIG90aGVyLl9tYXRyaXguZXF1YWxzKHRoaXMuX21hdHJpeCk7XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlKHgsIHkpIHtcbiAgICAgICAgdGhpcy5fbWF0cml4ID0gdGhpcy5fbWF0cml4Lm11bHRpcGx5Q29weShNYXRyaXgudHJhbnNsYXRlKHgsIHkpKTtcblxuICAgICAgICB0aGlzLl9vcHRpb25zQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNjYWxlKHNjYWxlWCwgc2NhbGVZID0gc2NhbGVYLCBvcmlnaW4gPSBudWxsKSB7XG4gICAgICAgIGxldCBvcmlnaW5Qb2ludCA9IG9yaWdpbjtcblxuICAgICAgICBpZiAob3JpZ2luUG9pbnQpIHtcbiAgICAgICAgICAgIG9yaWdpblBvaW50ID0gUG9pbnQuY3JlYXRlKG9yaWdpblBvaW50KTtcbiAgICAgICAgICAgIHRoaXMuX21hdHJpeCA9IHRoaXMuX21hdHJpeC5tdWx0aXBseUNvcHkoTWF0cml4LnRyYW5zbGF0ZShvcmlnaW5Qb2ludC54LCBvcmlnaW5Qb2ludC55KSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tYXRyaXggPSB0aGlzLl9tYXRyaXgubXVsdGlwbHlDb3B5KE1hdHJpeC5zY2FsZShzY2FsZVgsIHNjYWxlWSkpO1xuXG4gICAgICAgIGlmIChvcmlnaW5Qb2ludCkge1xuICAgICAgICAgICAgdGhpcy5fbWF0cml4ID0gdGhpcy5fbWF0cml4Lm11bHRpcGx5Q29weShNYXRyaXgudHJhbnNsYXRlKC1vcmlnaW5Qb2ludC54LCAtb3JpZ2luUG9pbnQueSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb3B0aW9uc0NoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGUoYW5nbGUsIG9yaWdpbikge1xuICAgICAgICBjb25zdCBvcmlnaW5Qb2ludCA9IFBvaW50LmNyZWF0ZShvcmlnaW4pIHx8IFBvaW50LlpFUk87XG5cbiAgICAgICAgdGhpcy5fbWF0cml4ID0gdGhpcy5fbWF0cml4Lm11bHRpcGx5Q29weShNYXRyaXgucm90YXRlKGFuZ2xlLCBvcmlnaW5Qb2ludC54LCBvcmlnaW5Qb2ludC55KSk7XG5cbiAgICAgICAgdGhpcy5fb3B0aW9uc0NoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseSh0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCBtYXRyaXggPSB0b01hdHJpeCh0cmFuc2Zvcm1hdGlvbik7XG5cbiAgICAgICAgdGhpcy5fbWF0cml4ID0gdGhpcy5fbWF0cml4Lm11bHRpcGx5Q29weShtYXRyaXgpO1xuXG4gICAgICAgIHRoaXMuX29wdGlvbnNDaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbWF0cml4KHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fbWF0cml4ID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zQ2hhbmdlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXRyaXg7XG4gICAgfVxuXG4gICAgX29wdGlvbnNDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMub3B0aW9uc0NoYW5nZSh7XG4gICAgICAgICAgICBmaWVsZDogXCJ0cmFuc2Zvcm1cIixcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVHJhbnNmb3JtYXRpb247XG4iLCJpbXBvcnQgVHJhbnNmb3JtYXRpb24gZnJvbSAnLi90cmFuc2Zvcm1hdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybShtYXRyaXgpIHtcbiAgICBpZiAobWF0cml4ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChtYXRyaXggaW5zdGFuY2VvZiBUcmFuc2Zvcm1hdGlvbikge1xuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgVHJhbnNmb3JtYXRpb24obWF0cml4KTtcbn0iLCJpbXBvcnQgT3B0aW9uc1N0b3JlIGZyb20gJy4uL2NvcmUvb3B0aW9ucy1zdG9yZSc7XG5pbXBvcnQgUmVjdCBmcm9tICcuLi9nZW9tZXRyeS9yZWN0JztcbmltcG9ydCBNYXRyaXggZnJvbSAnLi4vZ2VvbWV0cnkvbWF0cml4JztcbmltcG9ydCBjcmVhdGVUcmFuc2Zvcm0gZnJvbSAnLi4vZ2VvbWV0cnkvdHJhbnNmb3JtJztcbmltcG9ydCB0b01hdHJpeCBmcm9tICcuLi9nZW9tZXRyeS90by1tYXRyaXgnO1xuaW1wb3J0IEhhc09ic2VydmVycyBmcm9tICcuLi9jb3JlL2hhcy1vYnNlcnZlcnMnO1xuaW1wb3J0IHsgZGVmaW5lZCwgZGVmaW5pdGlvbklkLCBpc1RyYW5zcGFyZW50LCB2YWx1ZU9yRGVmYXVsdCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jbGFzcyBFbGVtZW50IGV4dGVuZHMgSGFzT2JzZXJ2ZXJzIHtcbiAgICBnZXQgbm9kZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcIlJlY3RcIjtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5faW5pdE9wdGlvbnMob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgX2luaXRPcHRpb25zKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IGNsaXAsIHRyYW5zZm9ybSB9ID0gb3B0aW9ucztcblxuICAgICAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgICAgICBvcHRpb25zLnRyYW5zZm9ybSA9IGNyZWF0ZVRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNsaXAgJiYgIWNsaXAuaWQpIHtcbiAgICAgICAgICAgIGNsaXAuaWQgPSBkZWZpbml0aW9uSWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG5ldyBPcHRpb25zU3RvcmUob3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5hZGRPYnNlcnZlcih0aGlzKTtcbiAgICB9XG5cbiAgICB0cmFuc2Zvcm0odmFsdWUpIHtcbiAgICAgICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0KFwidHJhbnNmb3JtXCIsIGNyZWF0ZVRyYW5zZm9ybSh2YWx1ZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5nZXQoXCJ0cmFuc2Zvcm1cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJlbnRUcmFuc2Zvcm0oKSB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gdGhpcztcbiAgICAgICAgbGV0IHBhcmVudE1hdHJpeDtcblxuICAgICAgICB3aGlsZSAoZWxlbWVudC5wYXJlbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudDtcbiAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1hdGlvbiA9IGVsZW1lbnQudHJhbnNmb3JtKCk7XG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRNYXRyaXggPSB0cmFuc2Zvcm1hdGlvbi5tYXRyaXgoKS5tdWx0aXBseUNvcHkocGFyZW50TWF0cml4IHx8IE1hdHJpeC51bml0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmVudE1hdHJpeCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVRyYW5zZm9ybShwYXJlbnRNYXRyaXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3VycmVudFRyYW5zZm9ybShwYXJlbnRUcmFuc2Zvcm0gPSB0aGlzLnBhcmVudFRyYW5zZm9ybSgpKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRUcmFuc2Zvcm0gPSB0aGlzLnRyYW5zZm9ybSgpO1xuICAgICAgICBjb25zdCBlbGVtZW50TWF0cml4ID0gdG9NYXRyaXgoZWxlbWVudFRyYW5zZm9ybSk7XG5cbiAgICAgICAgbGV0IHBhcmVudE1hdHJpeCA9IHRvTWF0cml4KHBhcmVudFRyYW5zZm9ybSk7XG4gICAgICAgIGxldCBjb21iaW5lZE1hdHJpeDtcblxuICAgICAgICBpZiAoZWxlbWVudE1hdHJpeCAmJiBwYXJlbnRNYXRyaXgpIHtcbiAgICAgICAgICAgIGNvbWJpbmVkTWF0cml4ID0gcGFyZW50TWF0cml4Lm11bHRpcGx5Q29weShlbGVtZW50TWF0cml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbWJpbmVkTWF0cml4ID0gZWxlbWVudE1hdHJpeCB8fCBwYXJlbnRNYXRyaXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29tYmluZWRNYXRyaXgpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVUcmFuc2Zvcm0oY29tYmluZWRNYXRyaXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmlzaWJsZSh2YWx1ZSkge1xuICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zZXQoXCJ2aXNpYmxlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5nZXQoXCJ2aXNpYmxlXCIpICE9PSBmYWxzZTtcbiAgICB9XG5cbiAgICBjbGlwKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICYmICF2YWx1ZS5pZCkge1xuICAgICAgICAgICAgICAgIHZhbHVlLmlkID0gZGVmaW5pdGlvbklkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLnNldChcImNsaXBcIiwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3B0aW9ucy5nZXQoXCJjbGlwXCIpO1xuICAgIH1cblxuICAgIG9wYWNpdHkodmFsdWUpIHtcbiAgICAgICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0KFwib3BhY2l0eVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZU9yRGVmYXVsdCh0aGlzLm9wdGlvbnMuZ2V0KFwib3BhY2l0eVwiKSwgMSk7XG4gICAgfVxuXG4gICAgY2xpcHBlZEJCb3godHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgY29uc3QgYmJveCA9IHRoaXMuX2NsaXBwZWRCQm94KHRyYW5zZm9ybWF0aW9uKTtcbiAgICAgICAgaWYgKGJib3gpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsaXAgPSB0aGlzLmNsaXAoKTtcbiAgICAgICAgICAgIHJldHVybiBjbGlwID8gUmVjdC5pbnRlcnNlY3QoYmJveCwgY2xpcC5iYm94KHRyYW5zZm9ybWF0aW9uKSkgOiBiYm94O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29udGFpbnNQb2ludChwb2ludCwgcGFyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgIGlmICh0aGlzLnZpc2libGUoKSkge1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gdGhpcy5jdXJyZW50VHJhbnNmb3JtKHBhcmVudFRyYW5zZm9ybSk7XG4gICAgICAgICAgICBsZXQgdHJhbnNmb3JtZWRQb2ludCA9IHBvaW50O1xuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkUG9pbnQgPSBwb2ludC50cmFuc2Zvcm1Db3B5KHRyYW5zZm9ybS5tYXRyaXgoKS5pbnZlcnQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuX2hhc0ZpbGwoKSAmJiB0aGlzLl9jb250YWluc1BvaW50KHRyYW5zZm9ybWVkUG9pbnQpKSB8fCAodGhpcy5faXNPblBhdGggJiYgdGhpcy5faGFzU3Ryb2tlKCkgJiYgdGhpcy5faXNPblBhdGgodHJhbnNmb3JtZWRQb2ludCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBfaGFzRmlsbCgpIHtcbiAgICAgICAgY29uc3QgZmlsbCA9IHRoaXMub3B0aW9ucy5maWxsO1xuICAgICAgICByZXR1cm4gZmlsbCAmJiAhaXNUcmFuc3BhcmVudChmaWxsLmNvbG9yKTtcbiAgICB9XG5cbiAgICBfaGFzU3Ryb2tlKCkge1xuICAgICAgICBjb25zdCBzdHJva2UgPSB0aGlzLm9wdGlvbnMuc3Ryb2tlO1xuICAgICAgICByZXR1cm4gc3Ryb2tlICYmIHN0cm9rZS53aWR0aCA+IDAgJiYgIWlzVHJhbnNwYXJlbnQoc3Ryb2tlLmNvbG9yKTtcbiAgICB9XG5cbiAgICBfY2xpcHBlZEJCb3godHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmJveCh0cmFuc2Zvcm1hdGlvbik7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFbGVtZW50O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWxsaXBzZUV4dHJlbWVBbmdsZXMoY2VudGVyLCByeCwgcnksIG1hdHJpeCkge1xuICAgIGxldCBleHRyZW1lWCA9IDA7XG4gICAgbGV0IGV4dHJlbWVZID0gMDtcblxuICAgIGlmIChtYXRyaXgpIHtcbiAgICAgICAgZXh0cmVtZVggPSBNYXRoLmF0YW4yKG1hdHJpeC5jICogcnksIG1hdHJpeC5hICogcngpO1xuICAgICAgICBpZiAobWF0cml4LmIgIT09IDApIHtcbiAgICAgICAgICAgIGV4dHJlbWVZID0gTWF0aC5hdGFuMihtYXRyaXguZCAqIHJ5LCBtYXRyaXguYiAqIHJ4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IGV4dHJlbWVYLFxuICAgICAgICB5OiBleHRyZW1lWVxuICAgIH07XG59IiwiaW1wb3J0IHdpdGhBY2Nlc3NvcnMgZnJvbSAnLi4vbWl4aW5zL3dpdGgtYWNjZXNzb3JzJztcbmltcG9ydCBQb2ludCBmcm9tICcuL3BvaW50JztcbmltcG9ydCBSZWN0IGZyb20gJy4vcmVjdCc7XG5pbXBvcnQgZWxsaXBzZUV4dHJlbWVBbmdsZXMgZnJvbSAnLi9tYXRoL2VsbGlwc2UtZXh0cmVtZS1hbmdsZXMnO1xuaW1wb3J0IEhhc09ic2VydmVycyBmcm9tICcuLi9jb3JlL2hhcy1vYnNlcnZlcnMnO1xuaW1wb3J0IHsgcmFkIH0gZnJvbSAnLi4vdXRpbCc7XG5cblxuY29uc3QgUElfRElWXzIgPSBNYXRoLlBJIC8gMjtcblxuY2xhc3MgQ2lyY2xlIGV4dGVuZHMgd2l0aEFjY2Vzc29ycyhIYXNPYnNlcnZlcnMsIFsgXCJyYWRpdXNcIiBdKSB7XG4gICAgY29uc3RydWN0b3IoY2VudGVyID0gbmV3IFBvaW50KCksIHJhZGl1cyA9IDApIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnNldENlbnRlcihjZW50ZXIpO1xuICAgICAgICB0aGlzLnNldFJhZGl1cyhyYWRpdXMpO1xuICAgIH1cblxuICAgIHNldENlbnRlcih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9vYnNlcnZlckZpZWxkKFwiY2VudGVyXCIsIFBvaW50LmNyZWF0ZSh2YWx1ZSkpO1xuICAgICAgICB0aGlzLmdlb21ldHJ5Q2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldENlbnRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2VudGVyO1xuICAgIH1cblxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICByZXR1cm4gb3RoZXIgJiZcbiAgICAgICAgICAgICAgIG90aGVyLmNlbnRlci5lcXVhbHModGhpcy5jZW50ZXIpICYmXG4gICAgICAgICAgICAgICBvdGhlci5yYWRpdXMgPT09IHRoaXMucmFkaXVzO1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IENpcmNsZSh0aGlzLmNlbnRlci5jbG9uZSgpLCB0aGlzLnJhZGl1cyk7XG4gICAgfVxuXG4gICAgcG9pbnRBdChhbmdsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRBdChyYWQoYW5nbGUpKTtcbiAgICB9XG5cbiAgICBiYm94KG1hdHJpeCkge1xuICAgICAgICBjb25zdCBleHRyZW1lQW5nbGVzID0gZWxsaXBzZUV4dHJlbWVBbmdsZXModGhpcy5jZW50ZXIsIHRoaXMucmFkaXVzLCB0aGlzLnJhZGl1cywgbWF0cml4KTtcbiAgICAgICAgbGV0IG1pblBvaW50ID0gUG9pbnQubWF4UG9pbnQoKTtcbiAgICAgICAgbGV0IG1heFBvaW50ID0gUG9pbnQubWluUG9pbnQoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRQb2ludFggPSB0aGlzLl9wb2ludEF0KGV4dHJlbWVBbmdsZXMueCArIGkgKiBQSV9ESVZfMikudHJhbnNmb3JtQ29weShtYXRyaXgpO1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRQb2ludFkgPSB0aGlzLl9wb2ludEF0KGV4dHJlbWVBbmdsZXMueSArIGkgKiBQSV9ESVZfMikudHJhbnNmb3JtQ29weShtYXRyaXgpO1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRQb2ludCA9IG5ldyBQb2ludChjdXJyZW50UG9pbnRYLngsIGN1cnJlbnRQb2ludFkueSk7XG5cbiAgICAgICAgICAgIG1pblBvaW50ID0gUG9pbnQubWluKG1pblBvaW50LCBjdXJyZW50UG9pbnQpO1xuICAgICAgICAgICAgbWF4UG9pbnQgPSBQb2ludC5tYXgobWF4UG9pbnQsIGN1cnJlbnRQb2ludCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUmVjdC5mcm9tUG9pbnRzKG1pblBvaW50LCBtYXhQb2ludCk7XG4gICAgfVxuXG4gICAgX3BvaW50QXQoYW5nbGUpIHtcbiAgICAgICAgY29uc3QgeyBjZW50ZXIsIHJhZGl1cyB9ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gbmV3IFBvaW50KFxuICAgICAgICAgICAgY2VudGVyLnggKyByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgICAgICBjZW50ZXIueSArIHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGNvbnRhaW5zUG9pbnQocG9pbnQpIHtcbiAgICAgICAgY29uc3QgeyBjZW50ZXIsIHJhZGl1cyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaW5DaXJjbGUgPSBNYXRoLnBvdyhwb2ludC54IC0gY2VudGVyLngsIDIpICtcbiAgICAgICAgICAgIE1hdGgucG93KHBvaW50LnkgLSBjZW50ZXIueSwgMikgPD0gTWF0aC5wb3cocmFkaXVzLCAyKTtcbiAgICAgICAgcmV0dXJuIGluQ2lyY2xlO1xuICAgIH1cblxuICAgIF9pc09uUGF0aChwb2ludCwgd2lkdGgpIHtcbiAgICAgICAgY29uc3QgeyBjZW50ZXIsIHJhZGl1cyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgcG9pbnREaXN0YW5jZSA9IGNlbnRlci5kaXN0YW5jZVRvKHBvaW50KTtcblxuICAgICAgICByZXR1cm4gcmFkaXVzIC0gd2lkdGggPD0gcG9pbnREaXN0YW5jZSAmJiBwb2ludERpc3RhbmNlIDw9IHJhZGl1cyArIHdpZHRoO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2lyY2xlO1xuIiwiaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBHUkFESUVOVCA9IFwiR3JhZGllbnRcIjtcblxuY29uc3QgcGFpbnRhYmxlID0gVEJhc2UgPT4gKFxuICAgIGNsYXNzIGV4dGVuZHMgVEJhc2Uge1xuICAgICAgICBmaWxsKGNvbG9yLCBvcGFjaXR5KSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgICAgICBpZiAoZGVmaW5lZChjb2xvcikpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29sb3IgJiYgY29sb3Iubm9kZVR5cGUgIT09IEdSQURJRU5UKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0ZpbGwgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluZWQob3BhY2l0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ZpbGwub3BhY2l0eSA9IG9wYWNpdHk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zZXQoXCJmaWxsXCIsIG5ld0ZpbGwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc2V0KFwiZmlsbFwiLCBjb2xvcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmdldChcImZpbGxcIik7XG4gICAgICAgIH1cblxuICAgICAgICBzdHJva2UoY29sb3IsIHdpZHRoLCBvcGFjaXR5KSB7XG4gICAgICAgICAgICBpZiAoZGVmaW5lZChjb2xvcikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0KFwic3Ryb2tlLmNvbG9yXCIsIGNvbG9yKTtcblxuICAgICAgICAgICAgICAgIGlmIChkZWZpbmVkKHdpZHRoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0KFwic3Ryb2tlLndpZHRoXCIsIHdpZHRoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZGVmaW5lZChvcGFjaXR5KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0KFwic3Ryb2tlLm9wYWNpdHlcIiwgb3BhY2l0eSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZ2V0KFwic3Ryb2tlXCIpO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuZXhwb3J0IGRlZmF1bHQgcGFpbnRhYmxlO1xuIiwiaW1wb3J0IE1hdHJpeCBmcm9tICcuLi9nZW9tZXRyeS9tYXRyaXgnO1xuaW1wb3J0IHRvTWF0cml4IGZyb20gJy4uL2dlb21ldHJ5L3RvLW1hdHJpeCc7XG5cbmNvbnN0IElERU5USVRZX01BVFJJWF9IQVNIID0gTWF0cml4LklERU5USVRZLnRvU3RyaW5nKCk7XG5cbmNvbnN0IG1lYXN1cmFibGUgPSBUQmFzZSA9PiAoXG4gICAgY2xhc3MgZXh0ZW5kcyBUQmFzZSB7XG4gICAgICAgIGJib3godHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbWJpbmVkTWF0cml4ID0gdG9NYXRyaXgodGhpcy5jdXJyZW50VHJhbnNmb3JtKHRyYW5zZm9ybWF0aW9uKSk7XG4gICAgICAgICAgICBjb25zdCBtYXRyaXhIYXNoID0gY29tYmluZWRNYXRyaXggPyBjb21iaW5lZE1hdHJpeC50b1N0cmluZygpIDogSURFTlRJVFlfTUFUUklYX0hBU0g7XG4gICAgICAgICAgICBsZXQgYmJveDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2Jib3hDYWNoZSAmJiB0aGlzLl9tYXRyaXhIYXNoID09PSBtYXRyaXhIYXNoKSB7XG4gICAgICAgICAgICAgICAgYmJveCA9IHRoaXMuX2Jib3hDYWNoZS5jbG9uZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBiYm94ID0gdGhpcy5fYmJveChjb21iaW5lZE1hdHJpeCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYmJveENhY2hlID0gYmJveCA/IGJib3guY2xvbmUoKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWF0cml4SGFzaCA9IG1hdHJpeEhhc2g7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHN0cm9rZVdpZHRoID0gdGhpcy5vcHRpb25zLmdldChcInN0cm9rZS53aWR0aFwiKTtcbiAgICAgICAgICAgIGlmIChzdHJva2VXaWR0aCAmJiBiYm94KSB7XG4gICAgICAgICAgICAgICAgYmJveC5leHBhbmQoc3Ryb2tlV2lkdGggLyAyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGJib3g7XG4gICAgICAgIH1cblxuICAgICAgICBnZW9tZXRyeUNoYW5nZSgpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9iYm94Q2FjaGU7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoXCJnZW9tZXRyeUNoYW5nZVwiLCB7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBtZWFzdXJhYmxlOyIsImltcG9ydCB7IGRlZmluZWQgfSBmcm9tICcuLi91dGlsJztcblxuZnVuY3Rpb24gZ2VvbWV0cnlBY2Nlc3NvcihuYW1lKSB7XG4gICAgY29uc3QgZmllbGROYW1lID0gXCJfXCIgKyBuYW1lO1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX29ic2VydmVyRmllbGQoZmllbGROYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmdlb21ldHJ5Q2hhbmdlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzW2ZpZWxkTmFtZV07XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZGVmaW5lR2VvbWV0cnlBY2Nlc3NvcnMoZm4sIG5hbWVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmbltuYW1lc1tpXV0gPSBnZW9tZXRyeUFjY2Vzc29yKG5hbWVzW2ldKTtcbiAgICB9XG59XG5cbmNvbnN0IHdpdGhHZW9tZXRyeSA9IChUQmFzZSwgbmFtZXMgPSBbIFwiZ2VvbWV0cnlcIiBdKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gY2xhc3MgZXh0ZW5kcyBUQmFzZSB7fTtcbiAgICBkZWZpbmVHZW9tZXRyeUFjY2Vzc29ycyhyZXN1bHQucHJvdG90eXBlLCBuYW1lcyk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aEdlb21ldHJ5O1xuIiwiaW1wb3J0IEdlb21ldHJ5Q2lyY2xlIGZyb20gJy4uL2dlb21ldHJ5L2NpcmNsZSc7XG5pbXBvcnQgcGFpbnRhYmxlIGZyb20gJy4uL21peGlucy9wYWludGFibGUnO1xuaW1wb3J0IG1lYXN1cmFibGUgZnJvbSAnLi4vbWl4aW5zL21lYXN1cmFibGUnO1xuaW1wb3J0IHdpdGhHZW9tZXRyeSBmcm9tICcuLi9taXhpbnMvd2l0aC1nZW9tZXRyeSc7XG5pbXBvcnQgRWxlbWVudCBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBERUZBVUxUX1NUUk9LRSA9IFwiIzAwMFwiO1xuXG5jbGFzcyBDaXJjbGUgZXh0ZW5kcyBwYWludGFibGUobWVhc3VyYWJsZSh3aXRoR2VvbWV0cnkoRWxlbWVudCkpKSB7XG4gICAgZ2V0IG5vZGVUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJDaXJjbGVcIjtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihnZW9tZXRyeSA9IG5ldyBHZW9tZXRyeUNpcmNsZSgpLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5nZW9tZXRyeShnZW9tZXRyeSk7XG5cbiAgICAgICAgaWYgKCFkZWZpbmVkKHRoaXMub3B0aW9ucy5zdHJva2UpKSB7XG4gICAgICAgICAgICB0aGlzLnN0cm9rZShERUZBVUxUX1NUUk9LRSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByYXdCQm94KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2VvbWV0cnkuYmJveCgpO1xuICAgIH1cblxuICAgIF9iYm94KG1hdHJpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2VvbWV0cnkuYmJveChtYXRyaXgpO1xuICAgIH1cblxuICAgIF9jb250YWluc1BvaW50KHBvaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdlb21ldHJ5KCkuY29udGFpbnNQb2ludChwb2ludCk7XG4gICAgfVxuXG4gICAgX2lzT25QYXRoKHBvaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdlb21ldHJ5KCkuX2lzT25QYXRoKHBvaW50LCB0aGlzLm9wdGlvbnMuc3Ryb2tlLndpZHRoIC8gMik7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDaXJjbGU7XG4iLCJjb25zdCBQUkVDSVNJT04gPSAxMDtcblxuZXhwb3J0IHsgUFJFQ0lTSU9OIH07IiwiaW1wb3J0IHsgUFJFQ0lTSU9OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IHsgcm91bmQgfSBmcm9tICcuLi8uLi91dGlsJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xvc2UoYSwgYiwgdG9sZXJhbmNlID0gUFJFQ0lTSU9OKSB7XG4gICAgcmV0dXJuIHJvdW5kKE1hdGguYWJzKGEgLSBiKSwgdG9sZXJhbmNlKSA9PT0gMDtcbn0iLCJpbXBvcnQgY2xvc2UgZnJvbSAnLi9jbG9zZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsb3NlT3JMZXNzKGEsIGIsIHRvbGVyYW5jZSkge1xuICAgIHJldHVybiBhIDwgYiB8fCBjbG9zZShhLCBiLCB0b2xlcmFuY2UpO1xufSIsImltcG9ydCBQb2ludCBmcm9tICcuLi9wb2ludCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVJbnRlcnNlY3Rpb24ocDAsIHAxLCBwMiwgcDMpIHtcbiAgICBjb25zdCBzMXggPSBwMS54IC0gcDAueDtcbiAgICBjb25zdCBzMnggPSBwMy54IC0gcDIueDtcbiAgICBjb25zdCBzMXkgPSBwMS55IC0gcDAueTtcbiAgICBjb25zdCBzMnkgPSBwMy55IC0gcDIueTtcbiAgICBjb25zdCBueCA9IHAwLnggLSBwMi54O1xuICAgIGNvbnN0IG55ID0gcDAueSAtIHAyLnk7XG4gICAgY29uc3QgZCA9IHMxeCAqIHMyeSAtIHMyeCAqIHMxeTtcbiAgICBjb25zdCBzID0gKHMxeCAqIG55IC0gczF5ICogbngpIC8gZDtcbiAgICBjb25zdCB0ID0gKHMyeCAqIG55IC0gczJ5ICogbngpIC8gZDtcblxuICAgIGlmIChzID49IDAgJiYgcyA8PSAxICYmIHQgPj0gMCAmJiB0IDw9IDEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludChwMC54ICsgdCAqIHMxeCwgcDAueSArIHQgKiBzMXkpO1xuICAgIH1cbn0iLCJpbXBvcnQgSGFzT2JzZXJ2ZXJzIGZyb20gJy4uL2NvcmUvaGFzLW9ic2VydmVycyc7XG5pbXBvcnQgeyBkZWcsIHJhZCwgcm91bmQgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB3aXRoQWNjZXNzb3JzIGZyb20gJy4uL21peGlucy93aXRoLWFjY2Vzc29ycyc7XG5cbmltcG9ydCBjbG9zZU9yTGVzcyBmcm9tICcuL21hdGgvY2xvc2Utb3ItbGVzcyc7XG5pbXBvcnQgbGluZUludGVyc2VjdGlvbiBmcm9tICcuL21hdGgvbGluZS1pbnRlcnNlY3Rpb24nO1xuaW1wb3J0IGVsbGlwc2VFeHRyZW1lQW5nbGVzIGZyb20gJy4vbWF0aC9lbGxpcHNlLWV4dHJlbWUtYW5nbGVzJztcblxuaW1wb3J0IHsgUFJFQ0lTSU9OIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IFBvaW50IGZyb20gJy4vcG9pbnQnO1xuaW1wb3J0IFJlY3QgZnJvbSAnLi9yZWN0JztcbmltcG9ydCB0cmFuc2Zvcm0gZnJvbSAnLi90cmFuc2Zvcm0nO1xuXG5cbmNvbnN0IE1BWF9JTlRFUlZBTCA9IDQ1O1xuY29uc3QgcG93ID0gTWF0aC5wb3c7XG5jb25zdCBhY2Nlc3NvcnMgPSBbIFwicmFkaXVzWFwiLCBcInJhZGl1c1lcIiwgXCJzdGFydEFuZ2xlXCIsIFwiZW5kQW5nbGVcIiwgXCJhbnRpY2xvY2t3aXNlXCIgXTtcblxuY2xhc3MgQXJjIGV4dGVuZHMgd2l0aEFjY2Vzc29ycyhIYXNPYnNlcnZlcnMsIGFjY2Vzc29ycykge1xuICAgIGNvbnN0cnVjdG9yKGNlbnRlciA9IG5ldyBQb2ludCgpLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnNldENlbnRlcihjZW50ZXIpO1xuXG4gICAgICAgIHRoaXMucmFkaXVzWCA9IG9wdGlvbnMucmFkaXVzWDtcbiAgICAgICAgdGhpcy5yYWRpdXNZID0gb3B0aW9ucy5yYWRpdXNZIHx8IG9wdGlvbnMucmFkaXVzWDtcbiAgICAgICAgdGhpcy5zdGFydEFuZ2xlID0gb3B0aW9ucy5zdGFydEFuZ2xlO1xuICAgICAgICB0aGlzLmVuZEFuZ2xlID0gb3B0aW9ucy5lbmRBbmdsZTtcbiAgICAgICAgdGhpcy5hbnRpY2xvY2t3aXNlID0gb3B0aW9ucy5hbnRpY2xvY2t3aXNlIHx8IGZhbHNlO1xuICAgICAgICB0aGlzLnhSb3RhdGlvbiA9IG9wdGlvbnMueFJvdGF0aW9uO1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IEFyYyh0aGlzLmNlbnRlciwge1xuICAgICAgICAgICAgcmFkaXVzWDogdGhpcy5yYWRpdXNYLFxuICAgICAgICAgICAgcmFkaXVzWTogdGhpcy5yYWRpdXNZLFxuICAgICAgICAgICAgc3RhcnRBbmdsZTogdGhpcy5zdGFydEFuZ2xlLFxuICAgICAgICAgICAgZW5kQW5nbGU6IHRoaXMuZW5kQW5nbGUsXG4gICAgICAgICAgICBhbnRpY2xvY2t3aXNlOiB0aGlzLmFudGljbG9ja3dpc2VcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0Q2VudGVyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX29ic2VydmVyRmllbGQoXCJjZW50ZXJcIiwgUG9pbnQuY3JlYXRlKHZhbHVlKSk7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0Q2VudGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jZW50ZXI7XG4gICAgfVxuXG4gICAgcG9pbnRBdChhbmdsZSkge1xuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLmNlbnRlcjtcbiAgICAgICAgY29uc3QgcmFkaWFuID0gcmFkKGFuZ2xlKTtcblxuICAgICAgICByZXR1cm4gbmV3IFBvaW50KFxuICAgICAgICAgICAgY2VudGVyLnggKyB0aGlzLnJhZGl1c1ggKiBNYXRoLmNvcyhyYWRpYW4pLFxuICAgICAgICAgICAgY2VudGVyLnkgKyB0aGlzLnJhZGl1c1kgKiBNYXRoLnNpbihyYWRpYW4pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY3VydmVQb2ludHMoKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLnN0YXJ0QW5nbGU7XG4gICAgICAgIGNvbnN0IGRpciA9IHRoaXMuYW50aWNsb2Nrd2lzZSA/IC0xIDogMTtcbiAgICAgICAgY29uc3QgY3VydmVQb2ludHMgPSBbIHRoaXMucG9pbnRBdChzdGFydEFuZ2xlKSBdO1xuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHRoaXMuX2FyY0ludGVydmFsKCk7XG4gICAgICAgIGNvbnN0IGludGVydmFsQW5nbGUgPSBpbnRlcnZhbC5lbmRBbmdsZSAtIGludGVydmFsLnN0YXJ0QW5nbGU7XG4gICAgICAgIGNvbnN0IHN1YkludGVydmFsc0NvdW50ID0gTWF0aC5jZWlsKGludGVydmFsQW5nbGUgLyBNQVhfSU5URVJWQUwpO1xuICAgICAgICBjb25zdCBzdWJJbnRlcnZhbEFuZ2xlID0gaW50ZXJ2YWxBbmdsZSAvIHN1YkludGVydmFsc0NvdW50O1xuICAgICAgICBsZXQgY3VycmVudEFuZ2xlID0gc3RhcnRBbmdsZTtcbiAgICAgICAgbGV0IHRyYW5zZm9ybWF0aW9uO1xuICAgICAgICBpZiAodGhpcy54Um90YXRpb24pIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybWF0aW9uID0gdHJhbnNmb3JtKCkucm90YXRlKHRoaXMueFJvdGF0aW9uLCB0aGlzLmNlbnRlcik7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBzdWJJbnRlcnZhbHNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0QW5nbGUgPSBjdXJyZW50QW5nbGUgKyBkaXIgKiBzdWJJbnRlcnZhbEFuZ2xlO1xuICAgICAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5faW50ZXJ2YWxDdXJ2ZVBvaW50cyhjdXJyZW50QW5nbGUsIG5leHRBbmdsZSwgdHJhbnNmb3JtYXRpb24pO1xuXG4gICAgICAgICAgICBjdXJ2ZVBvaW50cy5wdXNoKHBvaW50cy5jcDEsIHBvaW50cy5jcDIsIHBvaW50cy5wMik7XG4gICAgICAgICAgICBjdXJyZW50QW5nbGUgPSBuZXh0QW5nbGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3VydmVQb2ludHM7XG4gICAgfVxuXG4gICAgYmJveChtYXRyaXgpIHtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSB0aGlzLl9hcmNJbnRlcnZhbCgpO1xuICAgICAgICBjb25zdCBzdGFydEFuZ2xlID0gaW50ZXJ2YWwuc3RhcnRBbmdsZTtcbiAgICAgICAgY29uc3QgZW5kQW5nbGUgPSBpbnRlcnZhbC5lbmRBbmdsZTtcbiAgICAgICAgY29uc3QgZXh0cmVtZUFuZ2xlcyA9IGVsbGlwc2VFeHRyZW1lQW5nbGVzKHRoaXMuY2VudGVyLCB0aGlzLnJhZGl1c1gsIHRoaXMucmFkaXVzWSwgbWF0cml4KTtcbiAgICAgICAgY29uc3QgZXh0cmVtZVggPSBkZWcoZXh0cmVtZUFuZ2xlcy54KTtcbiAgICAgICAgY29uc3QgZXh0cmVtZVkgPSBkZWcoZXh0cmVtZUFuZ2xlcy55KTtcbiAgICAgICAgY29uc3QgZW5kUG9pbnQgPSB0aGlzLnBvaW50QXQoZW5kQW5nbGUpLnRyYW5zZm9ybUNvcHkobWF0cml4KTtcbiAgICAgICAgbGV0IGN1cnJlbnRBbmdsZVggPSBiYm94U3RhcnRBbmdsZShleHRyZW1lWCwgc3RhcnRBbmdsZSk7XG4gICAgICAgIGxldCBjdXJyZW50QW5nbGVZID0gYmJveFN0YXJ0QW5nbGUoZXh0cmVtZVksIHN0YXJ0QW5nbGUpO1xuICAgICAgICBsZXQgY3VycmVudFBvaW50ID0gdGhpcy5wb2ludEF0KHN0YXJ0QW5nbGUpLnRyYW5zZm9ybUNvcHkobWF0cml4KTtcbiAgICAgICAgbGV0IG1pblBvaW50ID0gUG9pbnQubWluKGN1cnJlbnRQb2ludCwgZW5kUG9pbnQpO1xuICAgICAgICBsZXQgbWF4UG9pbnQgPSBQb2ludC5tYXgoY3VycmVudFBvaW50LCBlbmRQb2ludCk7XG5cbiAgICAgICAgd2hpbGUgKGN1cnJlbnRBbmdsZVggPCBlbmRBbmdsZSB8fCBjdXJyZW50QW5nbGVZIDwgZW5kQW5nbGUpIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50UG9pbnRYO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRBbmdsZVggPCBlbmRBbmdsZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQb2ludFggPSB0aGlzLnBvaW50QXQoY3VycmVudEFuZ2xlWCkudHJhbnNmb3JtQ29weShtYXRyaXgpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRBbmdsZVggKz0gOTA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBjdXJyZW50UG9pbnRZO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRBbmdsZVkgPCBlbmRBbmdsZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQb2ludFkgPSB0aGlzLnBvaW50QXQoY3VycmVudEFuZ2xlWSkudHJhbnNmb3JtQ29weShtYXRyaXgpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRBbmdsZVkgKz0gOTA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnRQb2ludCA9IG5ldyBQb2ludChjdXJyZW50UG9pbnRYLngsIGN1cnJlbnRQb2ludFkueSk7XG4gICAgICAgICAgICBtaW5Qb2ludCA9IFBvaW50Lm1pbihtaW5Qb2ludCwgY3VycmVudFBvaW50KTtcbiAgICAgICAgICAgIG1heFBvaW50ID0gUG9pbnQubWF4KG1heFBvaW50LCBjdXJyZW50UG9pbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlY3QuZnJvbVBvaW50cyhtaW5Qb2ludCwgbWF4UG9pbnQpO1xuICAgIH1cblxuICAgIF9hcmNJbnRlcnZhbCgpIHtcbiAgICAgICAgbGV0IHsgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGljbG9ja3dpc2UgfSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKGFudGljbG9ja3dpc2UpIHtcbiAgICAgICAgICAgIGxldCBvbGRTdGFydCA9IHN0YXJ0QW5nbGU7XG4gICAgICAgICAgICBzdGFydEFuZ2xlID0gZW5kQW5nbGU7XG4gICAgICAgICAgICBlbmRBbmdsZSA9IG9sZFN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0QW5nbGUgPiBlbmRBbmdsZSB8fCAoYW50aWNsb2Nrd2lzZSAmJiBzdGFydEFuZ2xlID09PSBlbmRBbmdsZSkpIHtcbiAgICAgICAgICAgIGVuZEFuZ2xlICs9IDM2MDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydEFuZ2xlOiBzdGFydEFuZ2xlLFxuICAgICAgICAgICAgZW5kQW5nbGU6IGVuZEFuZ2xlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX2ludGVydmFsQ3VydmVQb2ludHMoc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHAxID0gdGhpcy5wb2ludEF0KHN0YXJ0QW5nbGUpO1xuICAgICAgICBjb25zdCBwMiA9IHRoaXMucG9pbnRBdChlbmRBbmdsZSk7XG4gICAgICAgIGNvbnN0IHAxRGVyaXZhdGl2ZSA9IHRoaXMuX2Rlcml2YXRpdmVBdChzdGFydEFuZ2xlKTtcbiAgICAgICAgY29uc3QgcDJEZXJpdmF0aXZlID0gdGhpcy5fZGVyaXZhdGl2ZUF0KGVuZEFuZ2xlKTtcbiAgICAgICAgY29uc3QgdCA9IChyYWQoZW5kQW5nbGUpIC0gcmFkKHN0YXJ0QW5nbGUpKSAvIDM7XG4gICAgICAgIGNvbnN0IGNwMSA9IG5ldyBQb2ludChwMS54ICsgdCAqIHAxRGVyaXZhdGl2ZS54LCBwMS55ICsgdCAqIHAxRGVyaXZhdGl2ZS55KTtcbiAgICAgICAgY29uc3QgY3AyID0gbmV3IFBvaW50KHAyLnggLSB0ICogcDJEZXJpdmF0aXZlLngsIHAyLnkgLSB0ICogcDJEZXJpdmF0aXZlLnkpO1xuICAgICAgICBpZiAodHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgICAgIHAxLnRyYW5zZm9ybSh0cmFuc2Zvcm1hdGlvbik7XG4gICAgICAgICAgICBwMi50cmFuc2Zvcm0odHJhbnNmb3JtYXRpb24pO1xuICAgICAgICAgICAgY3AxLnRyYW5zZm9ybSh0cmFuc2Zvcm1hdGlvbik7XG4gICAgICAgICAgICBjcDIudHJhbnNmb3JtKHRyYW5zZm9ybWF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwMTogcDEsXG4gICAgICAgICAgICBjcDE6IGNwMSxcbiAgICAgICAgICAgIGNwMjogY3AyLFxuICAgICAgICAgICAgcDI6IHAyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX2Rlcml2YXRpdmVBdChhbmdsZSkge1xuICAgICAgICBjb25zdCByYWRpYW4gPSByYWQoYW5nbGUpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQoLXRoaXMucmFkaXVzWCAqIE1hdGguc2luKHJhZGlhbiksIHRoaXMucmFkaXVzWSAqIE1hdGguY29zKHJhZGlhbikpO1xuICAgIH1cblxuICAgIGNvbnRhaW5zUG9pbnQocG9pbnQpIHtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSB0aGlzLl9hcmNJbnRlcnZhbCgpO1xuICAgICAgICBjb25zdCBpbnRlcnZhbEFuZ2xlID0gaW50ZXJ2YWwuZW5kQW5nbGUgLSBpbnRlcnZhbC5zdGFydEFuZ2xlO1xuICAgICAgICBjb25zdCB7IGNlbnRlciwgcmFkaXVzWCwgcmFkaXVzWSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBjZW50ZXIuZGlzdGFuY2VUbyhwb2ludCk7XG4gICAgICAgIGNvbnN0IGFuZ2xlUmFkID0gTWF0aC5hdGFuMihwb2ludC55IC0gY2VudGVyLnksIHBvaW50LnggLSBjZW50ZXIueCk7XG4gICAgICAgIGNvbnN0IHBvaW50UmFkaXVzID0gKHJhZGl1c1ggKiByYWRpdXNZKSAvXG4gICAgICAgICAgICBNYXRoLnNxcnQocG93KHJhZGl1c1gsIDIpICogcG93KE1hdGguc2luKGFuZ2xlUmFkKSwgMikgKyBwb3cocmFkaXVzWSwgMikgKiBwb3coTWF0aC5jb3MoYW5nbGVSYWQpLCAyKSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0UG9pbnQgPSB0aGlzLnBvaW50QXQodGhpcy5zdGFydEFuZ2xlKS5yb3VuZChQUkVDSVNJT04pO1xuICAgICAgICBjb25zdCBlbmRQb2ludCA9IHRoaXMucG9pbnRBdCh0aGlzLmVuZEFuZ2xlKS5yb3VuZChQUkVDSVNJT04pO1xuICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBsaW5lSW50ZXJzZWN0aW9uKGNlbnRlciwgcG9pbnQucm91bmQoUFJFQ0lTSU9OKSwgc3RhcnRQb2ludCwgZW5kUG9pbnQpO1xuICAgICAgICBsZXQgY29udGFpbnNQb2ludDtcblxuICAgICAgICBpZiAoaW50ZXJ2YWxBbmdsZSA8IDE4MCkge1xuICAgICAgICAgICAgY29udGFpbnNQb2ludCA9IGludGVyc2VjdGlvbiAmJiBjbG9zZU9yTGVzcyhjZW50ZXIuZGlzdGFuY2VUbyhpbnRlcnNlY3Rpb24pLCBkaXN0YW5jZSkgJiYgY2xvc2VPckxlc3MoZGlzdGFuY2UsIHBvaW50UmFkaXVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBhbmdsZSA9IGNhbGN1bGF0ZUFuZ2xlKGNlbnRlci54LCBjZW50ZXIueSwgcmFkaXVzWCwgcmFkaXVzWSwgcG9pbnQueCwgcG9pbnQueSk7XG4gICAgICAgICAgICBpZiAoYW5nbGUgIT09IDM2MCkge1xuICAgICAgICAgICAgICAgIGFuZ2xlID0gKDM2MCArIGFuZ2xlKSAlIDM2MDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGluQW5nbGVSYW5nZSA9IGludGVydmFsLnN0YXJ0QW5nbGUgPD0gYW5nbGUgJiYgYW5nbGUgPD0gaW50ZXJ2YWwuZW5kQW5nbGU7XG4gICAgICAgICAgICBjb250YWluc1BvaW50ID0gKGluQW5nbGVSYW5nZSAmJiBjbG9zZU9yTGVzcyhkaXN0YW5jZSwgcG9pbnRSYWRpdXMpKSB8fCAoIWluQW5nbGVSYW5nZSAmJiAoIWludGVyc2VjdGlvbiB8fCBpbnRlcnNlY3Rpb24uZXF1YWxzKHBvaW50KSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250YWluc1BvaW50O1xuICAgIH1cblxuICAgIF9pc09uUGF0aChwb2ludCwgd2lkdGgpIHtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSB0aGlzLl9hcmNJbnRlcnZhbCgpO1xuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLmNlbnRlcjtcbiAgICAgICAgbGV0IGFuZ2xlID0gY2FsY3VsYXRlQW5nbGUoY2VudGVyLngsIGNlbnRlci55LCB0aGlzLnJhZGl1c1gsIHRoaXMucmFkaXVzWSwgcG9pbnQueCwgcG9pbnQueSk7XG4gICAgICAgIGlmIChhbmdsZSAhPT0gMzYwKSB7XG4gICAgICAgICAgICBhbmdsZSA9ICgzNjAgKyBhbmdsZSkgJSAzNjA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbkFuZ2xlUmFuZ2UgPSBpbnRlcnZhbC5zdGFydEFuZ2xlIDw9IGFuZ2xlICYmIGFuZ2xlIDw9IGludGVydmFsLmVuZEFuZ2xlO1xuXG4gICAgICAgIHJldHVybiBpbkFuZ2xlUmFuZ2UgJiYgdGhpcy5wb2ludEF0KGFuZ2xlKS5kaXN0YW5jZVRvKHBvaW50KSA8PSB3aWR0aDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVBvaW50cyhzdGFydCwgZW5kLCByeCwgcnksIGxhcmdlQXJjLCBzd2lwZSwgcm90YXRpb24pIHsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG1heC1wYXJhbXNcbiAgICAgICAgY29uc3QgYXJjUGFyYW1ldGVycyA9IG5vcm1hbGl6ZUFyY1BhcmFtZXRlcnMoe1xuICAgICAgICAgICAgeDE6IHN0YXJ0LngsXG4gICAgICAgICAgICB5MTogc3RhcnQueSxcbiAgICAgICAgICAgIHgyOiBlbmQueCxcbiAgICAgICAgICAgIHkyOiBlbmQueSxcbiAgICAgICAgICAgIHJ4OiByeCxcbiAgICAgICAgICAgIHJ5OiByeSxcbiAgICAgICAgICAgIGxhcmdlQXJjOiBsYXJnZUFyYyxcbiAgICAgICAgICAgIHN3aXBlOiBzd2lwZSxcbiAgICAgICAgICAgIHJvdGF0aW9uOiByb3RhdGlvblxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbmV3IEFyYyhhcmNQYXJhbWV0ZXJzLmNlbnRlciwge1xuICAgICAgICAgICAgc3RhcnRBbmdsZTogYXJjUGFyYW1ldGVycy5zdGFydEFuZ2xlLFxuICAgICAgICAgICAgZW5kQW5nbGU6IGFyY1BhcmFtZXRlcnMuZW5kQW5nbGUsXG4gICAgICAgICAgICByYWRpdXNYOiBhcmNQYXJhbWV0ZXJzLnJhZGl1c1gsXG4gICAgICAgICAgICByYWRpdXNZOiBhcmNQYXJhbWV0ZXJzLnJhZGl1c1ksXG4gICAgICAgICAgICB4Um90YXRpb246IGFyY1BhcmFtZXRlcnMueFJvdGF0aW9uLFxuICAgICAgICAgICAgYW50aWNsb2Nrd2lzZTogc3dpcGUgPT09IDBcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVBbmdsZShjeCwgY3ksIHJ4LCByeSwgeCwgeSkge1xuICAgIGNvbnN0IGNvcyA9IHJvdW5kKCh4IC0gY3gpIC8gcngsIDMpO1xuICAgIGNvbnN0IHNpbiA9IHJvdW5kKCh5IC0gY3kpIC8gcnksIDMpO1xuXG4gICAgcmV0dXJuIHJvdW5kKGRlZyhNYXRoLmF0YW4yKHNpbiwgY29zKSkpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcmNQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpIHtcbiAgICBsZXQgeyB4MSwgeTEsIHgyLCB5MiwgcngsIHJ5LCBsYXJnZUFyYywgc3dpcGUsIHJvdGF0aW9uID0gMCB9ID0gcGFyYW1ldGVycztcblxuICAgIGNvbnN0IHJhZGlhbnMgPSByYWQocm90YXRpb24pO1xuICAgIGNvbnN0IGNvc2luZSA9IE1hdGguY29zKHJhZGlhbnMpO1xuICAgIGNvbnN0IHNpbmUgPSBNYXRoLnNpbihyYWRpYW5zKTtcblxuICAgIGNvbnN0IHhUID0gY29zaW5lICogKHgxIC0geDIpIC8gMiArIHNpbmUgKiAoeTEgLSB5MikgLyAyO1xuICAgIGNvbnN0IHlUID0gLXNpbmUgKiAoeDEgLSB4MikgLyAyICsgY29zaW5lICogKHkxIC0geTIpIC8gMjtcblxuICAgIGNvbnN0IHNpZ24gPSBsYXJnZUFyYyAhPT0gc3dpcGUgPyAxIDogLTE7XG5cbiAgICBjb25zdCB4dDIgPSBNYXRoLnBvdyh4VCwgMik7XG4gICAgY29uc3QgeXQyID0gTWF0aC5wb3coeVQsIDIpO1xuICAgIGxldCByeDIgPSBNYXRoLnBvdyhyeCwgMik7XG4gICAgbGV0IHJ5MiA9IE1hdGgucG93KHJ5LCAyKTtcblxuICAgIGxldCBkZWx0YSA9IHh0MiAvIHJ4MiArIHl0MiAvIHJ5MjtcblxuICAgIGlmIChkZWx0YSA+IDEpIHtcbiAgICAgICAgZGVsdGEgPSBNYXRoLnNxcnQoeHQyIC8gcngyICsgeXQyIC8gcnkyKTtcbiAgICAgICAgcnggPSBkZWx0YSAqIHJ4O1xuICAgICAgICByeDIgPSBNYXRoLnBvdyhyeCwgMik7XG5cbiAgICAgICAgcnkgPSBkZWx0YSAqIHJ5O1xuICAgICAgICByeTIgPSBNYXRoLnBvdyhyeSwgMik7XG4gICAgfVxuXG4gICAgbGV0IGNvbnN0VCA9IHNpZ24gKiBNYXRoLnNxcnQoKHJ4MiAqIHJ5MiAtIHJ4MiAqIHl0MiAtIHJ5MiAqIHh0MikgLyAocngyICogeXQyICsgcnkyICogeHQyKSk7XG4gICAgLy8gZHVlIHRvIHJvdW5kaW5nIGVycm9ycyB0aGUgdmFsdWUgY291bGQgYmVjb21lIE5hTiBldmVuIGFmdGVyIHJhZGlpIGNvcnJlY3Rpb25cbiAgICBpZiAoaXNOYU4oY29uc3RUKSkge1xuICAgICAgICBjb25zdFQgPSAwO1xuICAgIH1cblxuICAgIGNvbnN0IGN4VCA9IGNvbnN0VCAqIChyeCAqIHlUKSAvIHJ5O1xuICAgIGNvbnN0IGN5VCA9IC0gY29uc3RUICogKHJ5ICogeFQpIC8gcng7XG5cbiAgICBjb25zdCBjeCA9IGNvc2luZSAqIGN4VCAtIHNpbmUgKiBjeVQgKyAoeDEgKyB4MikgLyAyO1xuICAgIGNvbnN0IGN5ID0gc2luZSAqIGN4VCArIGNvc2luZSAqIGN5VCArICh5MSArIHkyKSAvIDI7XG5cblxuICAgIGNvbnN0IHVYID0gKHhUIC0gY3hUKSAvIHJ4O1xuICAgIGNvbnN0IHVZID0gKHlUIC0gY3lUKSAvIHJ5O1xuICAgIGNvbnN0IHZYID0gLSh4VCArIGN4VCkgLyByeDtcbiAgICBjb25zdCB2WSA9IC0oeVQgKyBjeVQpIC8gcnk7XG5cbiAgICBjb25zdCBzdGFydEFuZ2xlID0gKHVZID49IDAgPyAxIDogLTEpICogZGVnKE1hdGguYWNvcyh1WCAvIE1hdGguc3FydCh1WCAqIHVYICsgdVkgKiB1WSkpKTtcblxuICAgIGNvbnN0IGFuZ2xlQ29zaW5lID0gcm91bmQoKHVYICogdlggKyB1WSAqIHZZKSAvIChNYXRoLnNxcnQodVggKiB1WCArIHVZICogdVkpICogTWF0aC5zcXJ0KHZYICogdlggKyB2WSAqIHZZKSksIDEwKTtcbiAgICBsZXQgYW5nbGUgPSAodVggKiB2WSAtIHVZICogdlggPj0gMCA/IDEgOiAtMSkgKiBkZWcoTWF0aC5hY29zKGFuZ2xlQ29zaW5lKSk7XG5cbiAgICBpZiAoIXN3aXBlICYmIGFuZ2xlID4gMCkge1xuICAgICAgICBhbmdsZSAtPSAzNjA7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlICYmIGFuZ2xlIDwgMCkge1xuICAgICAgICBhbmdsZSArPSAzNjA7XG4gICAgfVxuICAgIGxldCBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBhbmdsZTtcbiAgICBjb25zdCBzaWduRW5kQW5nbGUgPSBlbmRBbmdsZSA+PSAwID8gMSA6IC0xO1xuICAgIGVuZEFuZ2xlID0gKE1hdGguYWJzKGVuZEFuZ2xlKSAlIDM2MCkgKiBzaWduRW5kQW5nbGU7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBjZW50ZXI6IG5ldyBQb2ludChjeCwgY3kpLFxuICAgICAgICBzdGFydEFuZ2xlOiBzdGFydEFuZ2xlLFxuICAgICAgICBlbmRBbmdsZTogZW5kQW5nbGUsXG4gICAgICAgIHJhZGl1c1g6IHJ4LFxuICAgICAgICByYWRpdXNZOiByeSxcbiAgICAgICAgeFJvdGF0aW9uOiByb3RhdGlvblxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGJib3hTdGFydEFuZ2xlKGFuZ2xlLCBzdGFydCkge1xuICAgIGxldCBzdGFydEFuZ2xlID0gYW5nbGU7XG5cbiAgICB3aGlsZSAoc3RhcnRBbmdsZSA8IHN0YXJ0KSB7XG4gICAgICAgIHN0YXJ0QW5nbGUgKz0gOTA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXJ0QW5nbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFyYztcbiIsImltcG9ydCBIYXNPYnNlcnZlcnMgZnJvbSAnLi4vY29yZS9oYXMtb2JzZXJ2ZXJzJztcblxuY29uc3QgcHVzaCA9IFtdLnB1c2g7XG5jb25zdCBwb3AgPSBbXS5wb3A7XG5jb25zdCBzcGxpY2UgPSBbXS5zcGxpY2U7XG5jb25zdCBzaGlmdCA9IFtdLnNoaWZ0O1xuY29uc3Qgc2xpY2UgPSBbXS5zbGljZTtcbmNvbnN0IHVuc2hpZnQgPSBbXS51bnNoaWZ0O1xuXG5jbGFzcyBFbGVtZW50c0FycmF5IGV4dGVuZHMgSGFzT2JzZXJ2ZXJzIHtcbiAgICBjb25zdHJ1Y3RvcihhcnJheSA9IFtdKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9zcGxpY2UoMCwgYXJyYXkubGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuXG4gICAgZWxlbWVudHModmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9zcGxpY2UoMCwgdGhpcy5sZW5ndGgsIHZhbHVlKTtcblxuICAgICAgICAgICAgdGhpcy5fY2hhbmdlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNsaWNlKDApO1xuICAgIH1cblxuICAgIHB1c2goKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gYXJndW1lbnRzO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBwdXNoLmFwcGx5KHRoaXMsIGVsZW1lbnRzKTtcblxuICAgICAgICB0aGlzLl9hZGQoZWxlbWVudHMpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgc2xpY2UoKSB7XG4gICAgICAgIHJldHVybiBzbGljZS5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIHBvcCgpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHBvcC5hcHBseSh0aGlzKTtcblxuICAgICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmUoWyByZXN1bHQgXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHNwbGljZShpbmRleCwgaG93TWFueSkge1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fc3BsaWNlKGluZGV4LCBob3dNYW55LCBlbGVtZW50cyk7XG5cbiAgICAgICAgdGhpcy5fY2hhbmdlKCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBzaGlmdCgpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHNoaWZ0LmFwcGx5KHRoaXMpO1xuXG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZShbIHJlc3VsdCBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdW5zaGlmdCgpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBhcmd1bWVudHM7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHVuc2hpZnQuYXBwbHkodGhpcywgZWxlbWVudHMpO1xuXG4gICAgICAgIHRoaXMuX2FkZChlbGVtZW50cyk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBpbmRleE9mKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgaWYgKHRoaXNbaWR4XSA9PT0gZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpZHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIF9zcGxpY2UoaW5kZXgsIGhvd01hbnksIGVsZW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHNwbGljZS5hcHBseSh0aGlzLCBbIGluZGV4LCBob3dNYW55IF0uY29uY2F0KGVsZW1lbnRzKSk7XG5cbiAgICAgICAgdGhpcy5fY2xlYXJPYnNlcnZlcihyZXN1bHQpO1xuICAgICAgICB0aGlzLl9zZXRPYnNlcnZlcihlbGVtZW50cyk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBfYWRkKGVsZW1lbnRzKSB7XG4gICAgICAgIHRoaXMuX3NldE9ic2VydmVyKGVsZW1lbnRzKTtcbiAgICAgICAgdGhpcy5fY2hhbmdlKCk7XG4gICAgfVxuXG4gICAgX3JlbW92ZShlbGVtZW50cykge1xuICAgICAgICB0aGlzLl9jbGVhck9ic2VydmVyKGVsZW1lbnRzKTtcbiAgICAgICAgdGhpcy5fY2hhbmdlKCk7XG4gICAgfVxuXG4gICAgX3NldE9ic2VydmVyKGVsZW1lbnRzKSB7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVsZW1lbnRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGVsZW1lbnRzW2lkeF0uYWRkT2JzZXJ2ZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfY2xlYXJPYnNlcnZlcihlbGVtZW50cykge1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBlbGVtZW50cy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBlbGVtZW50c1tpZHhdLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NoYW5nZSgpIHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVsZW1lbnRzQXJyYXk7XG4iLCJpbXBvcnQgRWxlbWVudHNBcnJheSBmcm9tICcuL2VsZW1lbnRzLWFycmF5JztcblxuY2xhc3MgR2VvbWV0cnlFbGVtZW50c0FycmF5IGV4dGVuZHMgRWxlbWVudHNBcnJheSB7XG4gICAgX2NoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5nZW9tZXRyeUNoYW5nZSgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR2VvbWV0cnlFbGVtZW50c0FycmF5OyIsImltcG9ydCB7IGRlZyB9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHRyYW5zZm9ybSBmcm9tICcuLi90cmFuc2Zvcm0nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc091dE9mRW5kUG9pbnQoZW5kUG9pbnQsIGNvbnRyb2xQb2ludCwgcG9pbnQpIHtcbiAgICBjb25zdCBhbmdsZSA9IGRlZyhNYXRoLmF0YW4yKGNvbnRyb2xQb2ludC55IC0gZW5kUG9pbnQueSwgY29udHJvbFBvaW50LnggLSBlbmRQb2ludC54KSk7XG4gICAgY29uc3Qgcm90YXRlZFBvaW50ID0gcG9pbnQudHJhbnNmb3JtQ29weSh0cmFuc2Zvcm0oKS5yb3RhdGUoLWFuZ2xlLCBlbmRQb2ludCkpO1xuXG4gICAgcmV0dXJuIHJvdGF0ZWRQb2ludC54IDwgZW5kUG9pbnQueDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxjdWxhdGVDdXJ2ZUF0KHQsIGZpZWxkLCBwb2ludHMpIHtcbiAgICBjb25zdCB0MSA9IDEgLSB0O1xuICAgIHJldHVybiBNYXRoLnBvdyh0MSwgMykgKiBwb2ludHNbMF1bZmllbGRdICtcbiAgICAgICAgMyAqIE1hdGgucG93KHQxLCAyKSAqIHQgKiBwb2ludHNbMV1bZmllbGRdICtcbiAgICAgICAgMyAqIE1hdGgucG93KHQsIDIpICogdDEgKiBwb2ludHNbMl1bZmllbGRdICtcbiAgICAgICAgTWF0aC5wb3codCwgMykgKiBwb2ludHNbM11bZmllbGRdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvQ3ViaWNQb2x5bm9taWFsKHBvaW50cywgZmllbGQpIHtcbiAgICByZXR1cm4gWyAtcG9pbnRzWzBdW2ZpZWxkXSArIDMgKiBwb2ludHNbMV1bZmllbGRdIC0gMyAqIHBvaW50c1syXVtmaWVsZF0gKyBwb2ludHNbM11bZmllbGRdLFxuICAgICAgICAzICogKHBvaW50c1swXVtmaWVsZF0gLSAyICogcG9pbnRzWzFdW2ZpZWxkXSArIHBvaW50c1syXVtmaWVsZF0pLFxuICAgICAgICAzICogKC1wb2ludHNbMF1bZmllbGRdICsgcG9pbnRzWzFdW2ZpZWxkXSksXG4gICAgICAgIHBvaW50c1swXVtmaWVsZF1cbiAgICBdO1xufSIsImltcG9ydCB7IFBSRUNJU0lPTiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gJy4uLy4uL3V0aWwnO1xuXG5jbGFzcyBDb21wbGV4TnVtYmVyIGV4dGVuZHMgQ2xhc3Mge1xuXG4gICAgY29uc3RydWN0b3IocmVhbCA9IDAsIGltZyA9IDApIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnJlYWwgPSByZWFsO1xuICAgICAgICB0aGlzLmltZyA9IGltZztcbiAgICB9XG5cbiAgICBhZGQoY051bWJlcikge1xuICAgICAgICByZXR1cm4gbmV3IENvbXBsZXhOdW1iZXIocm91bmQodGhpcy5yZWFsICsgY051bWJlci5yZWFsLCBQUkVDSVNJT04pLCByb3VuZCh0aGlzLmltZyArIGNOdW1iZXIuaW1nLCBQUkVDSVNJT04pKTtcbiAgICB9XG5cbiAgICBhZGRDb25zdGFudCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IENvbXBsZXhOdW1iZXIodGhpcy5yZWFsICsgdmFsdWUsIHRoaXMuaW1nKTtcbiAgICB9XG5cbiAgICBuZWdhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29tcGxleE51bWJlcigtdGhpcy5yZWFsLCAtdGhpcy5pbWcpO1xuICAgIH1cblxuICAgIG11bHRpcGx5KGNOdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4TnVtYmVyKHRoaXMucmVhbCAqIGNOdW1iZXIucmVhbCAtIHRoaXMuaW1nICogY051bWJlci5pbWcsXG4gICAgICAgICAgICB0aGlzLnJlYWwgKiBjTnVtYmVyLmltZyArIHRoaXMuaW1nICogY051bWJlci5yZWFsKTtcbiAgICB9XG5cbiAgICBtdWx0aXBseUNvbnN0YW50KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29tcGxleE51bWJlcih0aGlzLnJlYWwgKiB2YWx1ZSwgdGhpcy5pbWcgKiB2YWx1ZSk7XG4gICAgfVxuXG4gICAgbnRoUm9vdChuKSB7XG4gICAgICAgIGNvbnN0IHJhZCA9IE1hdGguYXRhbjIodGhpcy5pbWcsIHRoaXMucmVhbCk7XG4gICAgICAgIGNvbnN0IHIgPSBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy5pbWcsIDIpICsgTWF0aC5wb3codGhpcy5yZWFsLCAyKSk7XG4gICAgICAgIGNvbnN0IG50aFIgPSBNYXRoLnBvdyhyLCAxIC8gbik7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4TnVtYmVyKG50aFIgKiBNYXRoLmNvcyhyYWQgLyBuKSwgbnRoUiAqIE1hdGguc2luKHJhZCAvIG4pKTsgLy9Nb2l2cmUncyBmb3JtdWxhXG4gICAgfVxuXG4gICAgZXF1YWxzKGNOdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhbCA9PT0gY051bWJlci5yZWFsICYmIHRoaXMuaW1nID09PSBjTnVtYmVyLmltZztcbiAgICB9XG5cbiAgICBpc1JlYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmltZyA9PT0gMDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBsZXhOdW1iZXI7IiwiaW1wb3J0IENvbXBsZXhOdW1iZXIgZnJvbSAnLi9jb21wbGV4LW51bWJlcic7XG5pbXBvcnQgeyBQUkVDSVNJT04gfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tICcuLi8uLi91dGlsJztcblxuZnVuY3Rpb24gbnVtYmVyU2lnbih4KSB7XG4gICAgcmV0dXJuIHggPCAwID8gLTEgOiAxO1xufVxuXG5mdW5jdGlvbiBzb2x2ZVF1YWRyYXRpY0VxdWF0aW9uKGEsIGIsIGMpIHtcbiAgICBjb25zdCBzcXVhcmVSb290ID0gTWF0aC5zcXJ0KE1hdGgucG93KGIsIDIpIC0gNCAqIGEgKiBjKTtcbiAgICByZXR1cm4gW1xuICAgICAgICAoLWIgKyBzcXVhcmVSb290KSAvICgyICogYSksXG4gICAgICAgICgtYiAtIHNxdWFyZVJvb3QpIC8gKDIgKiBhKVxuICAgIF07XG59XG5cbi8vQ2FyZGFubydzIGZvcm11bGFcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNvbHZlQ3ViaWNFcXVhdGlvbihhLCBiLCBjLCBkKSB7XG4gICAgaWYgKGEgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHNvbHZlUXVhZHJhdGljRXF1YXRpb24oYiwgYywgZCk7XG4gICAgfVxuXG4gICAgY29uc3QgcCA9ICgzICogYSAqIGMgLSBNYXRoLnBvdyhiLCAyKSkgLyAoMyAqIE1hdGgucG93KGEsIDIpKTtcbiAgICBjb25zdCBxID0gKDIgKiBNYXRoLnBvdyhiLCAzKSAtIDkgKiBhICogYiAqIGMgKyAyNyAqIE1hdGgucG93KGEsIDIpICogZCkgLyAoMjcgKiBNYXRoLnBvdyhhLCAzKSk7XG4gICAgY29uc3QgUSA9IE1hdGgucG93KHAgLyAzLCAzKSArIE1hdGgucG93KHEgLyAyLCAyKTtcbiAgICBjb25zdCBpID0gbmV3IENvbXBsZXhOdW1iZXIoMCwxKTtcbiAgICBjb25zdCBiM2EgPSAtYiAvICgzICogYSk7XG4gICAgbGV0IHgxLCB4MiwgeTEsIHkyLCB5MywgejEsIHoyO1xuXG4gICAgaWYgKFEgPCAwKSB7XG4gICAgICAgIHgxID0gbmV3IENvbXBsZXhOdW1iZXIoLXEgLyAyLCBNYXRoLnNxcnQoLVEpKS5udGhSb290KDMpO1xuICAgICAgICB4MiA9IG5ldyBDb21wbGV4TnVtYmVyKC1xIC8gMiwgLSBNYXRoLnNxcnQoLVEpKS5udGhSb290KDMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHgxID0gLXEgLyAyICsgTWF0aC5zcXJ0KFEpO1xuICAgICAgICB4MSA9IG5ldyBDb21wbGV4TnVtYmVyKG51bWJlclNpZ24oeDEpICogTWF0aC5wb3coTWF0aC5hYnMoeDEpLCAxIC8gMykpO1xuICAgICAgICB4MiA9IC1xIC8gMiAtIE1hdGguc3FydChRKTtcbiAgICAgICAgeDIgPSBuZXcgQ29tcGxleE51bWJlcihudW1iZXJTaWduKHgyKSAqIE1hdGgucG93KE1hdGguYWJzKHgyKSwgMSAvIDMpKTtcbiAgICB9XG5cbiAgICB5MSA9IHgxLmFkZCh4Mik7XG5cbiAgICB6MSA9IHgxLmFkZCh4MikubXVsdGlwbHlDb25zdGFudCgtMSAvIDIpO1xuICAgIHoyID0geDEuYWRkKHgyLm5lZ2F0ZSgpKS5tdWx0aXBseUNvbnN0YW50KE1hdGguc3FydCgzKSAvIDIpO1xuXG4gICAgeTIgPSB6MS5hZGQoaS5tdWx0aXBseSh6MikpO1xuICAgIHkzID0gejEuYWRkKGkubmVnYXRlKCkubXVsdGlwbHkoejIpKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgaWYgKHkxLmlzUmVhbCgpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHJvdW5kKHkxLnJlYWwgKyBiM2EsIFBSRUNJU0lPTikpO1xuICAgIH1cbiAgICBpZiAoeTIuaXNSZWFsKCkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocm91bmQoeTIucmVhbCArIGIzYSwgUFJFQ0lTSU9OKSk7XG4gICAgfVxuICAgIGlmICh5My5pc1JlYWwoKSkge1xuICAgICAgICByZXN1bHQucHVzaChyb3VuZCh5My5yZWFsICsgYjNhLCBQUkVDSVNJT04pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCB0b0N1YmljUG9seW5vbWlhbCBmcm9tICcuL3RvLWN1YmljLXBvbHlub21pYWwnO1xuaW1wb3J0IHNvbHZlQ3ViaWNFcXVhdGlvbiBmcm9tICcuL3NvbHZlLWN1YmljLWVxdWF0aW9uJztcbmltcG9ydCBjYWxjdWxhdGVDdXJ2ZUF0IGZyb20gJy4vY2FsY3VsYXRlLWN1cnZlLWF0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFzUm9vdHNJblJhbmdlKHBvaW50cywgcG9pbnQsIGZpZWxkLCByb290RmllbGQsIHJhbmdlKSB7XG4gICAgY29uc3QgcG9seW5vbWlhbCA9IHRvQ3ViaWNQb2x5bm9taWFsKHBvaW50cywgcm9vdEZpZWxkKTtcbiAgICBjb25zdCByb290cyA9IHNvbHZlQ3ViaWNFcXVhdGlvbihwb2x5bm9taWFsWzBdLCBwb2x5bm9taWFsWzFdLCBwb2x5bm9taWFsWzJdLCBwb2x5bm9taWFsWzNdIC0gcG9pbnRbcm9vdEZpZWxkXSk7XG4gICAgbGV0IGludGVyc2VjdGlvbjtcblxuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHJvb3RzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgaWYgKDAgPD0gcm9vdHNbaWR4XSAmJiByb290c1tpZHhdIDw9IDEpIHtcbiAgICAgICAgICAgIGludGVyc2VjdGlvbiA9IGNhbGN1bGF0ZUN1cnZlQXQocm9vdHNbaWR4XSwgZmllbGQsIHBvaW50cyk7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoaW50ZXJzZWN0aW9uIC0gcG9pbnRbZmllbGRdKSA8PSByYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCB0b0N1YmljUG9seW5vbWlhbCBmcm9tICcuL3RvLWN1YmljLXBvbHlub21pYWwnO1xuaW1wb3J0IHNvbHZlQ3ViaWNFcXVhdGlvbiBmcm9tICcuL3NvbHZlLWN1YmljLWVxdWF0aW9uJztcbmltcG9ydCBjYWxjdWxhdGVDdXJ2ZUF0IGZyb20gJy4vY2FsY3VsYXRlLWN1cnZlLWF0JztcbmltcG9ydCBjbG9zZSBmcm9tICcuL2Nsb3NlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3VydmVJbnRlcnNlY3Rpb25zQ291bnQocG9pbnRzLCBwb2ludCwgYmJveCkge1xuICAgIGNvbnN0IHBvbHlub21pYWwgPSB0b0N1YmljUG9seW5vbWlhbChwb2ludHMsIFwieFwiKTtcbiAgICBjb25zdCByb290cyA9IHNvbHZlQ3ViaWNFcXVhdGlvbihwb2x5bm9taWFsWzBdLCBwb2x5bm9taWFsWzFdLCBwb2x5bm9taWFsWzJdLCBwb2x5bm9taWFsWzNdIC0gcG9pbnQueCk7XG4gICAgbGV0IHJheUludGVyc2VjdGlvbiwgaW50ZXJzZWN0c1JheTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm9vdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmF5SW50ZXJzZWN0aW9uID0gY2FsY3VsYXRlQ3VydmVBdChyb290c1tpXSwgXCJ5XCIsIHBvaW50cyk7XG4gICAgICAgIGludGVyc2VjdHNSYXkgPSBjbG9zZShyYXlJbnRlcnNlY3Rpb24sIHBvaW50LnkpIHx8IHJheUludGVyc2VjdGlvbiA+IHBvaW50Lnk7XG4gICAgICAgIGlmIChpbnRlcnNlY3RzUmF5ICYmICgoKHJvb3RzW2ldID09PSAwIHx8IHJvb3RzW2ldID09PSAxKSAmJiBiYm94LmJvdHRvbVJpZ2h0KCkueCA+IHBvaW50LngpIHx8ICgwIDwgcm9vdHNbaV0gJiYgcm9vdHNbaV0gPCAxKSkpIHtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY291bnQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZUludGVyc2VjdGlvbnNDb3VudChhLCBiLCBwb2ludCkge1xuICAgIGxldCBpbnRlcnNlY3RzO1xuICAgIGlmIChhLnggIT09IGIueCkge1xuICAgICAgICBjb25zdCBtaW5YID0gTWF0aC5taW4oYS54LCBiLngpO1xuICAgICAgICBjb25zdCBtYXhYID0gTWF0aC5tYXgoYS54LCBiLngpO1xuICAgICAgICBjb25zdCBtaW5ZID0gTWF0aC5taW4oYS55LCBiLnkpO1xuICAgICAgICBjb25zdCBtYXhZID0gTWF0aC5tYXgoYS55LCBiLnkpO1xuICAgICAgICBjb25zdCBpblJhbmdlID0gbWluWCA8PSBwb2ludC54ICYmIHBvaW50LnggPCBtYXhYO1xuXG4gICAgICAgIGlmIChtaW5ZID09PSBtYXhZKSB7XG4gICAgICAgICAgICBpbnRlcnNlY3RzID0gcG9pbnQueSA8PSBtaW5ZICYmIGluUmFuZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnRlcnNlY3RzID0gaW5SYW5nZSAmJiAoKChtYXhZIC0gbWluWSkgKiAoKGEueCAtIGIueCkgKiAoYS55IC0gYi55KSA+IDAgPyBwb2ludC54IC0gbWluWCA6IG1heFggLSBwb2ludC54KSkgLyAobWF4WCAtIG1pblgpICsgbWluWSAtIHBvaW50LnkpID49IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJzZWN0cyA/IDEgOiAwO1xufSIsImltcG9ydCB7IGRlZmluZWQgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBQb2ludCBmcm9tICcuLi9nZW9tZXRyeS9wb2ludCc7XG5cbmZ1bmN0aW9uIHBvaW50QWNjZXNzb3IobmFtZSkge1xuICAgIGNvbnN0IGZpZWxkTmFtZSA9IFwiX1wiICsgbmFtZTtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9vYnNlcnZlckZpZWxkKGZpZWxkTmFtZSwgUG9pbnQuY3JlYXRlKHZhbHVlKSk7XG4gICAgICAgICAgICB0aGlzLmdlb21ldHJ5Q2hhbmdlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzW2ZpZWxkTmFtZV07XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZGVmaW5lUG9pbnRBY2Nlc3NvcnMoZm4sIG5hbWVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmbltuYW1lc1tpXV0gPSBwb2ludEFjY2Vzc29yKG5hbWVzW2ldKTtcbiAgICB9XG59XG5cbmNvbnN0IHdpdGhQb2ludHMgPSAoVEJhc2UsIG5hbWVzKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gY2xhc3MgZXh0ZW5kcyBUQmFzZSB7fTtcbiAgICBkZWZpbmVQb2ludEFjY2Vzc29ycyhyZXN1bHQucHJvdG90eXBlLCBuYW1lcyk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFBvaW50cztcbiIsImltcG9ydCBIYXNPYnNlcnZlcnMgZnJvbSAnLi4vY29yZS9oYXMtb2JzZXJ2ZXJzJztcbmltcG9ydCBSZWN0IGZyb20gJy4vcmVjdCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi9wb2ludCc7XG5pbXBvcnQgdHJhbnNmb3JtIGZyb20gJy4vdHJhbnNmb3JtJztcbmltcG9ydCB7IGRlZywgTUlOX05VTSwgTUFYX05VTSB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IGlzT3V0T2ZFbmRQb2ludCBmcm9tICcuL21hdGgvaXMtb3V0LW9mLWVuZC1wb2ludCc7XG5pbXBvcnQgY2FsY3VsYXRlQ3VydmVBdCBmcm9tICcuL21hdGgvY2FsY3VsYXRlLWN1cnZlLWF0JztcbmltcG9ydCBoYXNSb290c0luUmFuZ2UgZnJvbSAnLi9tYXRoL2hhcy1yb290cy1pbi1yYW5nZSc7XG5pbXBvcnQgY3VydmVJbnRlcnNlY3Rpb25zQ291bnQgZnJvbSAnLi9tYXRoL2N1cnZlLWludGVyc2VjdGlvbnMtY291bnQnO1xuaW1wb3J0IGxpbmVJbnRlcnNlY3Rpb25zQ291bnQgZnJvbSAnLi9tYXRoL2xpbmUtaW50ZXJzZWN0aW9ucy1jb3VudCc7XG5pbXBvcnQgd2l0aFBvaW50cyBmcm9tICcuLi9taXhpbnMvd2l0aC1wb2ludHMnO1xuXG5cbmNvbnN0IHBvaW50cyA9IFsgXCJhbmNob3JcIiwgXCJjb250cm9sSW5cIiwgXCJjb250cm9sT3V0XCIgXTtcblxuY2xhc3MgU2VnbWVudCBleHRlbmRzIHdpdGhQb2ludHMoSGFzT2JzZXJ2ZXJzLCBwb2ludHMpIHtcbiAgICBjb25zdHJ1Y3RvcihhbmNob3IsIGNvbnRyb2xJbiwgY29udHJvbE91dCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuYW5jaG9yKGFuY2hvciB8fCBuZXcgUG9pbnQoKSk7XG4gICAgICAgIHRoaXMuY29udHJvbEluKGNvbnRyb2xJbik7XG4gICAgICAgIHRoaXMuY29udHJvbE91dChjb250cm9sT3V0KTtcbiAgICB9XG5cbiAgICBiYm94VG8odG9TZWdtZW50LCBtYXRyaXgpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudEFuY2hvciA9IHRoaXMuYW5jaG9yKCkudHJhbnNmb3JtQ29weShtYXRyaXgpO1xuICAgICAgICBjb25zdCB0b1NlZ21lbnRBbmNob3IgPSB0b1NlZ21lbnQuYW5jaG9yKCkudHJhbnNmb3JtQ29weShtYXRyaXgpO1xuICAgICAgICBsZXQgcmVjdDtcblxuICAgICAgICBpZiAodGhpcy5jb250cm9sT3V0KCkgJiYgdG9TZWdtZW50LmNvbnRyb2xJbigpKSB7XG4gICAgICAgICAgICByZWN0ID0gdGhpcy5fY3VydmVCb3VuZGluZ0JveChcbiAgICAgICAgICAgICAgICBzZWdtZW50QW5jaG9yLCB0aGlzLmNvbnRyb2xPdXQoKS50cmFuc2Zvcm1Db3B5KG1hdHJpeCksXG4gICAgICAgICAgICAgICAgdG9TZWdtZW50LmNvbnRyb2xJbigpLnRyYW5zZm9ybUNvcHkobWF0cml4KSwgdG9TZWdtZW50QW5jaG9yXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVjdCA9IHRoaXMuX2xpbmVCb3VuZGluZ0JveChzZWdtZW50QW5jaG9yLCB0b1NlZ21lbnRBbmNob3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlY3Q7XG4gICAgfVxuXG4gICAgX2xpbmVCb3VuZGluZ0JveChwMSwgcDIpIHtcbiAgICAgICAgcmV0dXJuIFJlY3QuZnJvbVBvaW50cyhwMSwgcDIpO1xuICAgIH1cblxuICAgIF9jdXJ2ZUJvdW5kaW5nQm94KHAxLCBjcDEsIGNwMiwgcDIpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gWyBwMSwgY3AxLCBjcDIsIHAyIF07XG4gICAgICAgIGNvbnN0IGV4dHJlbWVzWCA9IHRoaXMuX2N1cnZlRXh0cmVtZXNGb3IocG9pbnRzLCBcInhcIik7XG4gICAgICAgIGNvbnN0IGV4dHJlbWVzWSA9IHRoaXMuX2N1cnZlRXh0cmVtZXNGb3IocG9pbnRzLCBcInlcIik7XG4gICAgICAgIGNvbnN0IHhMaW1pdHMgPSBhcnJheUxpbWl0cyhbIGV4dHJlbWVzWC5taW4sIGV4dHJlbWVzWC5tYXgsIHAxLngsIHAyLnggXSk7XG4gICAgICAgIGNvbnN0IHlMaW1pdHMgPSBhcnJheUxpbWl0cyhbIGV4dHJlbWVzWS5taW4sIGV4dHJlbWVzWS5tYXgsIHAxLnksIHAyLnkgXSk7XG5cbiAgICAgICAgcmV0dXJuIFJlY3QuZnJvbVBvaW50cyhuZXcgUG9pbnQoeExpbWl0cy5taW4sIHlMaW1pdHMubWluKSwgbmV3IFBvaW50KHhMaW1pdHMubWF4LCB5TGltaXRzLm1heCkpO1xuICAgIH1cblxuICAgIF9jdXJ2ZUV4dHJlbWVzRm9yKHBvaW50cywgZmllbGQpIHtcbiAgICAgICAgY29uc3QgZXh0cmVtZXMgPSB0aGlzLl9jdXJ2ZUV4dHJlbWVzKFxuICAgICAgICAgICAgcG9pbnRzWzBdW2ZpZWxkXSwgcG9pbnRzWzFdW2ZpZWxkXSxcbiAgICAgICAgICAgIHBvaW50c1syXVtmaWVsZF0sIHBvaW50c1szXVtmaWVsZF1cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluOiBjYWxjdWxhdGVDdXJ2ZUF0KGV4dHJlbWVzLm1pbiwgZmllbGQsIHBvaW50cyksXG4gICAgICAgICAgICBtYXg6IGNhbGN1bGF0ZUN1cnZlQXQoZXh0cmVtZXMubWF4LCBmaWVsZCwgcG9pbnRzKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9jdXJ2ZUV4dHJlbWVzKHgxLCB4MiwgeDMsIHg0KSB7XG4gICAgICAgIGNvbnN0IGEgPSB4MSAtIDMgKiB4MiArIDMgKiB4MyAtIHg0O1xuICAgICAgICBjb25zdCBiID0gLSAyICogKHgxIC0gMiAqIHgyICsgeDMpO1xuICAgICAgICBjb25zdCBjID0geDEgLSB4MjtcbiAgICAgICAgY29uc3Qgc3FydCA9IE1hdGguc3FydChiICogYiAtIDQgKiBhICogYyk7XG4gICAgICAgIGxldCB0MSA9IDA7XG4gICAgICAgIGxldCB0MiA9IDE7XG5cbiAgICAgICAgaWYgKGEgPT09IDApIHtcbiAgICAgICAgICAgIGlmIChiICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdDEgPSB0MiA9IC1jIC8gYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNOYU4oc3FydCkpIHtcbiAgICAgICAgICAgIHQxID0gKC0gYiArIHNxcnQpIC8gKDIgKiBhKTtcbiAgICAgICAgICAgIHQyID0gKC0gYiAtIHNxcnQpIC8gKDIgKiBhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBtaW4gPSBNYXRoLm1heChNYXRoLm1pbih0MSwgdDIpLCAwKTtcbiAgICAgICAgaWYgKG1pbiA8IDAgfHwgbWluID4gMSkge1xuICAgICAgICAgICAgbWluID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBtYXggPSBNYXRoLm1pbihNYXRoLm1heCh0MSwgdDIpLCAxKTtcbiAgICAgICAgaWYgKG1heCA+IDEgfHwgbWF4IDwgMCkge1xuICAgICAgICAgICAgbWF4ID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IG1pbixcbiAgICAgICAgICAgIG1heDogbWF4XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX2ludGVyc2VjdGlvbnNUbyhzZWdtZW50LCBwb2ludCkge1xuICAgICAgICBsZXQgaW50ZXJzZWN0aW9uc0NvdW50O1xuICAgICAgICBpZiAodGhpcy5jb250cm9sT3V0KCkgJiYgc2VnbWVudC5jb250cm9sSW4oKSkge1xuICAgICAgICAgICAgaW50ZXJzZWN0aW9uc0NvdW50ID0gY3VydmVJbnRlcnNlY3Rpb25zQ291bnQoWyB0aGlzLmFuY2hvcigpLCB0aGlzLmNvbnRyb2xPdXQoKSwgc2VnbWVudC5jb250cm9sSW4oKSwgc2VnbWVudC5hbmNob3IoKSBdLCBwb2ludCwgdGhpcy5iYm94VG8oc2VnbWVudCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW50ZXJzZWN0aW9uc0NvdW50ID0gbGluZUludGVyc2VjdGlvbnNDb3VudCh0aGlzLmFuY2hvcigpLCBzZWdtZW50LmFuY2hvcigpLCBwb2ludCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGludGVyc2VjdGlvbnNDb3VudDtcbiAgICB9XG5cbiAgICBfaXNPbkN1cnZlVG8oc2VnbWVudCwgcG9pbnQsIHdpZHRoLCBlbmRTZWdtZW50KSB7XG4gICAgICAgIGNvbnN0IGJib3ggPSB0aGlzLmJib3hUbyhzZWdtZW50KS5leHBhbmQod2lkdGgsIHdpZHRoKTtcbiAgICAgICAgaWYgKGJib3guY29udGFpbnNQb2ludChwb2ludCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHAxID0gdGhpcy5hbmNob3IoKTtcbiAgICAgICAgICAgIGNvbnN0IHAyID0gdGhpcy5jb250cm9sT3V0KCk7XG4gICAgICAgICAgICBjb25zdCBwMyA9IHNlZ21lbnQuY29udHJvbEluKCk7XG4gICAgICAgICAgICBjb25zdCBwNCA9IHNlZ21lbnQuYW5jaG9yKCk7XG5cbiAgICAgICAgICAgIGlmIChlbmRTZWdtZW50ID09PSBcInN0YXJ0XCIgJiYgcDEuZGlzdGFuY2VUbyhwb2ludCkgPD0gd2lkdGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlzT3V0T2ZFbmRQb2ludChwMSwgcDIsIHBvaW50KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZW5kU2VnbWVudCA9PT0gXCJlbmRcIiAmJiBwNC5kaXN0YW5jZVRvKHBvaW50KSA8PSB3aWR0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhaXNPdXRPZkVuZFBvaW50KHA0LCBwMywgcG9pbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3RoZSBhcHByb2FjaCBpcyBub3QgZW50aXJlbHkgY29ycmVjdCBidXQgaXMgY2xvc2UgYW5kIHRoZSBhbHRlcm5hdGl2ZXMgYXJlIHNvbHZpbmcgYSA2dGggZGVncmVlIHBvbHlub21pYWwgb3IgdGVzdGluZyB0aGUgc2VnbWVudCBwb2ludHNcbiAgICAgICAgICAgIGNvbnN0IHBvaW50cyA9IFsgcDEsIHAyLCBwMywgcDQgXTtcbiAgICAgICAgICAgIGlmIChoYXNSb290c0luUmFuZ2UocG9pbnRzLCBwb2ludCwgXCJ4XCIsIFwieVwiLCB3aWR0aCkgfHwgaGFzUm9vdHNJblJhbmdlKHBvaW50cywgcG9pbnQsIFwieVwiLCBcInhcIiwgd2lkdGgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByb3RhdGlvbiA9IHRyYW5zZm9ybSgpLnJvdGF0ZSg0NSwgcG9pbnQpO1xuICAgICAgICAgICAgY29uc3Qgcm90YXRlZFBvaW50cyA9IFsgcDEudHJhbnNmb3JtQ29weShyb3RhdGlvbiksIHAyLnRyYW5zZm9ybUNvcHkocm90YXRpb24pLCBwMy50cmFuc2Zvcm1Db3B5KHJvdGF0aW9uKSwgcDQudHJhbnNmb3JtQ29weShyb3RhdGlvbikgXTtcbiAgICAgICAgICAgIHJldHVybiBoYXNSb290c0luUmFuZ2Uocm90YXRlZFBvaW50cywgcG9pbnQsIFwieFwiLCBcInlcIiwgd2lkdGgpIHx8IGhhc1Jvb3RzSW5SYW5nZShyb3RhdGVkUG9pbnRzLCBwb2ludCwgXCJ5XCIsIFwieFwiLCB3aWR0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfaXNPbkxpbmVUbyhzZWdtZW50LCBwb2ludCwgd2lkdGgpIHtcbiAgICAgICAgY29uc3QgcDEgPSB0aGlzLmFuY2hvcigpO1xuICAgICAgICBjb25zdCBwMiA9IHNlZ21lbnQuYW5jaG9yKCk7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gZGVnKE1hdGguYXRhbjIocDIueSAtIHAxLnksIHAyLnggLSBwMS54KSk7XG4gICAgICAgIGNvbnN0IHJlY3QgPSBuZXcgUmVjdChbIHAxLngsIHAxLnkgLSB3aWR0aCAvIDIgXSwgWyBwMS5kaXN0YW5jZVRvKHAyKSwgd2lkdGggXSk7XG4gICAgICAgIHJldHVybiByZWN0LmNvbnRhaW5zUG9pbnQocG9pbnQudHJhbnNmb3JtQ29weSh0cmFuc2Zvcm0oKS5yb3RhdGUoLWFuZ2xlLCBwMSkpKTtcbiAgICB9XG5cbiAgICBfaXNPblBhdGhUbyhzZWdtZW50LCBwb2ludCwgd2lkdGgsIGVuZFNlZ21lbnQpIHtcbiAgICAgICAgbGV0IGlzT25QYXRoO1xuICAgICAgICBpZiAodGhpcy5jb250cm9sT3V0KCkgJiYgc2VnbWVudC5jb250cm9sSW4oKSkge1xuICAgICAgICAgICAgaXNPblBhdGggPSB0aGlzLl9pc09uQ3VydmVUbyhzZWdtZW50LCBwb2ludCwgd2lkdGggLyAyLCBlbmRTZWdtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlzT25QYXRoID0gdGhpcy5faXNPbkxpbmVUbyhzZWdtZW50LCBwb2ludCwgd2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc09uUGF0aDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFycmF5TGltaXRzKGFycikge1xuICAgIGxldCBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgIGxldCBtaW4gPSBNQVhfTlVNO1xuICAgIGxldCBtYXggPSBNSU5fTlVNO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKyspIHtcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBhcnJbaV0pO1xuICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIGFycltpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiBtaW4sXG4gICAgICAgIG1heDogbWF4XG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VnbWVudDtcbiIsImltcG9ydCB7IFBvaW50LCBTZWdtZW50IH0gZnJvbSAnLi4vLi4vZ2VvbWV0cnknO1xuaW1wb3J0IHsgbGFzdCwgcm91bmQgfSBmcm9tICcuLi8uLi91dGlsJztcblxuY29uc3QgV0VJR0hUID0gMC4zMzM7XG5jb25zdCBFWFRSRU1VTV9BTExPV0VEX0RFVklBVElPTiA9IDAuMDE7XG5jb25zdCBYID0gXCJ4XCI7XG5jb25zdCBZID0gXCJ5XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludHNUb0N1cnZlKHBvaW50c0luLCBjbG9zZWQpIHtcbiAgICBjb25zdCBwb2ludHMgPSBwb2ludHNJbi5zbGljZSgwKTtcbiAgICBjb25zdCBzZWdtZW50cyA9IFtdO1xuICAgIGxldCBsZW5ndGggPSBwb2ludHMubGVuZ3RoO1xuXG4gICAgaWYgKGxlbmd0aCA+IDIpIHtcbiAgICAgICAgcmVtb3ZlRHVwbGljYXRlcygwLCBwb2ludHMpO1xuICAgICAgICBsZW5ndGggPSBwb2ludHMubGVuZ3RoO1xuICAgIH1cblxuICAgIGlmIChsZW5ndGggPCAyIHx8IChsZW5ndGggPT09IDIgJiYgcG9pbnRzWzBdLmVxdWFscyhwb2ludHNbMV0pKSkge1xuICAgICAgICByZXR1cm4gc2VnbWVudHM7XG4gICAgfVxuXG4gICAgbGV0IHAwID0gcG9pbnRzWzBdO1xuICAgIGxldCBwMSA9IHBvaW50c1sxXTtcbiAgICBsZXQgcDIgPSBwb2ludHNbMl07XG5cbiAgICBzZWdtZW50cy5wdXNoKG5ldyBTZWdtZW50KHAwKSk7XG5cbiAgICB3aGlsZSAocDAuZXF1YWxzKHBvaW50c1tsZW5ndGggLSAxXSkpIHtcbiAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcG9pbnRzLnBvcCgpO1xuICAgICAgICBsZW5ndGgtLTtcbiAgICB9XG5cbiAgICBpZiAobGVuZ3RoID09PSAyKSB7XG4gICAgICAgIGNvbnN0IHRhbmdlbnQgPSBnZXRUYW5nZW50KHAwLHAxLCBYLCBZKTtcblxuICAgICAgICBsYXN0KHNlZ21lbnRzKS5jb250cm9sT3V0KFxuICAgICAgICAgICAgZmlyc3RDb250cm9sUG9pbnQodGFuZ2VudCwgcDAsIHAxLCBYLCBZKVxuICAgICAgICApO1xuXG4gICAgICAgIHNlZ21lbnRzLnB1c2gobmV3IFNlZ21lbnQoXG4gICAgICAgICAgICBwMSxcbiAgICAgICAgICAgIHNlY29uZENvbnRyb2xQb2ludCh0YW5nZW50LCBwMCwgcDEsIFgsIFkpXG4gICAgICAgICkpO1xuXG4gICAgICAgIHJldHVybiBzZWdtZW50cztcbiAgICB9XG5cbiAgICBsZXQgaW5pdGlhbENvbnRyb2xQb2ludCwgbGFzdENvbnRyb2xQb2ludDtcblxuICAgIGlmIChjbG9zZWQpIHtcbiAgICAgICAgcDAgPSBwb2ludHNbbGVuZ3RoIC0gMV07IHAxID0gcG9pbnRzWzBdOyBwMiA9IHBvaW50c1sxXTtcbiAgICAgICAgY29uc3QgY29udHJvbFBvaW50cyA9IGdldENvbnRyb2xQb2ludHMocDAsIHAxLCBwMik7XG4gICAgICAgIGluaXRpYWxDb250cm9sUG9pbnQgPSBjb250cm9sUG9pbnRzWzFdO1xuICAgICAgICBsYXN0Q29udHJvbFBvaW50ID0gY29udHJvbFBvaW50c1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB0YW5nZW50ID0gZ2V0VGFuZ2VudChwMCwgcDEsIFgsWSk7XG4gICAgICAgIGluaXRpYWxDb250cm9sUG9pbnQgPSBmaXJzdENvbnRyb2xQb2ludCh0YW5nZW50LCBwMCwgcDEsIFgsIFkpO1xuICAgIH1cblxuICAgIGxldCBjcDAgPSBpbml0aWFsQ29udHJvbFBvaW50O1xuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8PSBsZW5ndGggLSAzOyBpZHgrKykge1xuICAgICAgICByZW1vdmVEdXBsaWNhdGVzKGlkeCwgcG9pbnRzKTtcbiAgICAgICAgbGVuZ3RoID0gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgaWYgKGlkeCArIDMgPD0gbGVuZ3RoKSB7XG4gICAgICAgICAgICBwMCA9IHBvaW50c1tpZHhdOyBwMSA9IHBvaW50c1tpZHggKyAxXTsgcDIgPSBwb2ludHNbaWR4ICsgMl07XG4gICAgICAgICAgICBjb25zdCBjb250cm9sUG9pbnRzID0gZ2V0Q29udHJvbFBvaW50cyhwMCxwMSxwMik7XG5cbiAgICAgICAgICAgIGxhc3Qoc2VnbWVudHMpLmNvbnRyb2xPdXQoY3AwKTtcbiAgICAgICAgICAgIGNwMCA9IGNvbnRyb2xQb2ludHNbMV07XG5cbiAgICAgICAgICAgIGNvbnN0IGNwMSA9IGNvbnRyb2xQb2ludHNbMF07XG4gICAgICAgICAgICBzZWdtZW50cy5wdXNoKG5ldyBTZWdtZW50KHAxLCBjcDEpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjbG9zZWQpIHtcbiAgICAgICAgcDAgPSBwb2ludHNbbGVuZ3RoIC0gMl07IHAxID0gcG9pbnRzW2xlbmd0aCAtIDFdOyBwMiA9IHBvaW50c1swXTtcbiAgICAgICAgY29uc3QgY29udHJvbFBvaW50cyA9IGdldENvbnRyb2xQb2ludHMocDAsIHAxLCBwMik7XG5cbiAgICAgICAgbGFzdChzZWdtZW50cykuY29udHJvbE91dChjcDApO1xuICAgICAgICBzZWdtZW50cy5wdXNoKG5ldyBTZWdtZW50KFxuICAgICAgICAgICAgcDEsXG4gICAgICAgICAgICBjb250cm9sUG9pbnRzWzBdXG4gICAgICAgICkpO1xuXG4gICAgICAgIGxhc3Qoc2VnbWVudHMpLmNvbnRyb2xPdXQoY29udHJvbFBvaW50c1sxXSk7XG4gICAgICAgIHNlZ21lbnRzLnB1c2gobmV3IFNlZ21lbnQoXG4gICAgICAgICAgICBwMixcbiAgICAgICAgICAgIGxhc3RDb250cm9sUG9pbnRcbiAgICAgICAgKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdGFuZ2VudCA9IGdldFRhbmdlbnQocDEsIHAyLCBYLCBZKTtcblxuICAgICAgICBsYXN0KHNlZ21lbnRzKS5jb250cm9sT3V0KGNwMCk7XG4gICAgICAgIHNlZ21lbnRzLnB1c2gobmV3IFNlZ21lbnQoXG4gICAgICAgICAgICBwMixcbiAgICAgICAgICAgIHNlY29uZENvbnRyb2xQb2ludCh0YW5nZW50LCBwMSwgcDIsIFgsIFkpXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWdtZW50cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50c1RvQ2xvc2VkQ3VydmUocG9pbnRzSW4pIHtcbiAgICByZXR1cm4gcG9pbnRzVG9DdXJ2ZShwb2ludHNJbiwgdHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVEdXBsaWNhdGVzKGlkeCwgcG9pbnRzKSB7XG4gICAgd2hpbGUgKHBvaW50c1tpZHggKyAxXSAmJiAocG9pbnRzW2lkeF0uZXF1YWxzKHBvaW50c1tpZHggKyAxXSkgfHwgcG9pbnRzW2lkeCArIDFdLmVxdWFscyhwb2ludHNbaWR4ICsgMl0pKSkge1xuICAgICAgICBwb2ludHMuc3BsaWNlKGlkeCArIDEsIDEpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVydEF4aXMocDAsIHAxLCBwMikge1xuICAgIGxldCBpbnZlcnRBeGlzID0gZmFsc2U7XG5cbiAgICBpZiAocDAueCA9PT0gcDEueCkge1xuICAgICAgICBpbnZlcnRBeGlzID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHAxLnggPT09IHAyLngpIHtcbiAgICAgICAgaWYgKChwMS55IDwgcDIueSAmJiBwMC55IDw9IHAxLnkpIHx8IChwMi55IDwgcDEueSAmJiBwMS55IDw9IHAwLnkpKSB7XG4gICAgICAgICAgICBpbnZlcnRBeGlzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGZuID0gbGluZUZ1bmN0aW9uKHAwLHAxKTtcbiAgICAgICAgY29uc3QgeTIgPSBjYWxjdWxhdGVGdW5jdGlvbihmbiwgcDIueCk7XG4gICAgICAgIGlmICghKHAwLnkgPD0gcDEueSAmJiBwMi55IDw9IHkyKSAmJlxuICAgICAgICAgICAgIShwMS55IDw9IHAwLnkgJiYgcDIueSA+PSB5MikpIHtcbiAgICAgICAgICAgIGludmVydEF4aXMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGludmVydEF4aXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xpbmUocDAsIHAxLCBwMikge1xuICAgIGNvbnN0IGZuID0gbGluZUZ1bmN0aW9uKHAwLCBwMSk7XG4gICAgY29uc3QgeTIgPSBjYWxjdWxhdGVGdW5jdGlvbihmbiwgcDIueCk7XG5cbiAgICByZXR1cm4gKHAwLnggPT09IHAxLnggJiYgcDEueCA9PT0gcDIueCkgfHwgcm91bmQoeTIsIDEpID09PSByb3VuZChwMi55LCAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVGdW5jdGlvbihwMSwgcDIpIHtcbiAgICBjb25zdCBhID0gKHAyLnkgLSBwMS55KSAvIChwMi54IC0gcDEueCk7XG4gICAgY29uc3QgYiA9IHAxLnkgLSBhICogcDEueDtcblxuICAgIHJldHVybiBbIGIsIGEgXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRyb2xQb2ludHMocDAsIHAxLCBwMikge1xuICAgIGxldCB4RmllbGQgPSBYO1xuICAgIGxldCB5RmllbGQgPSBZO1xuICAgIGxldCByZXN0cmljdCA9IGZhbHNlO1xuICAgIGxldCBzd2l0Y2hPcmllbnRhdGlvbiA9IGZhbHNlO1xuICAgIGxldCB0YW5nZW50O1xuXG4gICAgaWYgKGlzTGluZShwMCwgcDEsIHAyKSkge1xuICAgICAgICB0YW5nZW50ID0gZ2V0VGFuZ2VudChwMCwgcDEsIFgsIFkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG1vbm90b25pYyA9IHtcbiAgICAgICAgICAgIHg6IGlzTW9ub3RvbmljQnlGaWVsZChwMCwgcDEsIHAyLCBYKSxcbiAgICAgICAgICAgIHk6IGlzTW9ub3RvbmljQnlGaWVsZChwMCwgcDEsIHAyLCBZKVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtb25vdG9uaWMueCAmJiBtb25vdG9uaWMueSkge1xuICAgICAgICAgICAgdGFuZ2VudCA9IGdldFRhbmdlbnQocDAsIHAyLCBYLCBZKTtcbiAgICAgICAgICAgIHJlc3RyaWN0ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpbnZlcnRBeGlzKHAwLCBwMSwgcDIpKSB7XG4gICAgICAgICAgICAgICAgeEZpZWxkID0gWTtcbiAgICAgICAgICAgICAgICB5RmllbGQgPSBYO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobW9ub3RvbmljW3hGaWVsZF0pIHtcbiAgICAgICAgICAgICAgICB0YW5nZW50ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHNpZ247XG4gICAgICAgICAgICAgICAgaWYgKChwMlt5RmllbGRdIDwgcDBbeUZpZWxkXSAmJiBwMFt5RmllbGRdIDw9IHAxW3lGaWVsZF0pIHx8XG4gICAgICAgICAgICAgICAgICAgIChwMFt5RmllbGRdIDwgcDJbeUZpZWxkXSAmJiBwMVt5RmllbGRdIDw9IHAwW3lGaWVsZF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpZ24gPSBudW1iZXJTaWduKChwMlt5RmllbGRdIC0gcDBbeUZpZWxkXSkgKiAocDFbeEZpZWxkXSAtIHAwW3hGaWVsZF0pKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzaWduID0gLW51bWJlclNpZ24oKHAyW3hGaWVsZF0gLSBwMFt4RmllbGRdKSAqIChwMVt5RmllbGRdIC0gcDBbeUZpZWxkXSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhbmdlbnQgPSBFWFRSRU1VTV9BTExPV0VEX0RFVklBVElPTiAqIHNpZ247XG4gICAgICAgICAgICAgICAgc3dpdGNoT3JpZW50YXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2Vjb25kQ1AgPSBzZWNvbmRDb250cm9sUG9pbnQodGFuZ2VudCwgcDAsIHAxLCB4RmllbGQsIHlGaWVsZCk7XG5cbiAgICBpZiAoc3dpdGNoT3JpZW50YXRpb24pIHtcbiAgICAgICAgY29uc3Qgb2xkWEZpZWxkID0geEZpZWxkO1xuICAgICAgICB4RmllbGQgPSB5RmllbGQ7XG4gICAgICAgIHlGaWVsZCA9IG9sZFhGaWVsZDtcbiAgICB9XG5cbiAgICBjb25zdCBmaXJzdENQID0gZmlyc3RDb250cm9sUG9pbnQodGFuZ2VudCwgcDEsIHAyLCB4RmllbGQsIHlGaWVsZCk7XG5cbiAgICBpZiAocmVzdHJpY3QpIHtcbiAgICAgICAgcmVzdHJpY3RDb250cm9sUG9pbnQocDAsIHAxLCBzZWNvbmRDUCwgdGFuZ2VudCk7XG4gICAgICAgIHJlc3RyaWN0Q29udHJvbFBvaW50KHAxLCBwMiwgZmlyc3RDUCwgdGFuZ2VudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFsgc2Vjb25kQ1AsIGZpcnN0Q1AgXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc3RyaWN0Q29udHJvbFBvaW50KHAxLCBwMiwgY3AsIHRhbmdlbnQpIHtcbiAgICBpZiAocDEueSA8IHAyLnkpIHtcbiAgICAgICAgaWYgKHAyLnkgPCBjcC55KSB7XG4gICAgICAgICAgICBjcC54ID0gcDEueCArIChwMi55IC0gcDEueSkgLyB0YW5nZW50O1xuICAgICAgICAgICAgY3AueSA9IHAyLnk7XG4gICAgICAgIH0gZWxzZSBpZiAoY3AueSA8IHAxLnkpIHtcbiAgICAgICAgICAgIGNwLnggPSBwMi54IC0gKHAyLnkgLSBwMS55KSAvIHRhbmdlbnQ7XG4gICAgICAgICAgICBjcC55ID0gcDEueTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjcC55IDwgcDIueSkge1xuICAgICAgICAgICAgY3AueCA9IHAxLnggLSAocDEueSAtIHAyLnkpIC8gdGFuZ2VudDtcbiAgICAgICAgICAgIGNwLnkgPSBwMi55O1xuICAgICAgICB9IGVsc2UgaWYgKHAxLnkgPCBjcC55KSB7XG4gICAgICAgICAgICBjcC54ID0gcDIueCArIChwMS55IC0gcDIueSkgLyB0YW5nZW50O1xuICAgICAgICAgICAgY3AueSA9IHAxLnk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUYW5nZW50KHAwLCBwMSwgeEZpZWxkLCB5RmllbGQpIHtcbiAgICBjb25zdCB4ID0gcDFbeEZpZWxkXSAtIHAwW3hGaWVsZF07XG4gICAgY29uc3QgeSA9IHAxW3lGaWVsZF0gLSBwMFt5RmllbGRdO1xuICAgIGxldCB0YW5nZW50O1xuXG4gICAgaWYgKHggPT09IDApIHtcbiAgICAgICAgdGFuZ2VudCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGFuZ2VudCA9IHkgLyB4O1xuICAgIH1cblxuICAgIHJldHVybiB0YW5nZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNb25vdG9uaWNCeUZpZWxkKHAwLCBwMSwgcDIsIGZpZWxkKSB7XG4gICAgcmV0dXJuIChwMltmaWVsZF0gPiBwMVtmaWVsZF0gJiYgcDFbZmllbGRdID4gcDBbZmllbGRdKSB8fFxuICAgICAgICAgICAgICAgIChwMltmaWVsZF0gPCBwMVtmaWVsZF0gJiYgcDFbZmllbGRdIDwgcDBbZmllbGRdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0Q29udHJvbFBvaW50KHRhbmdlbnQsIHAwLCBwMywgeEZpZWxkLCB5RmllbGQpIHtcbiAgICBjb25zdCB0MSA9IHAwW3hGaWVsZF07XG4gICAgY29uc3QgdDIgPSBwM1t4RmllbGRdO1xuICAgIGNvbnN0IGRpc3RhbmNlID0gKHQyIC0gdDEpICogV0VJR0hUO1xuXG4gICAgcmV0dXJuIHBvaW50KHQxICsgZGlzdGFuY2UsIHAwW3lGaWVsZF0gKyBkaXN0YW5jZSAqIHRhbmdlbnQsIHhGaWVsZCwgeUZpZWxkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlY29uZENvbnRyb2xQb2ludCh0YW5nZW50LCBwMCwgcDMsIHhGaWVsZCwgeUZpZWxkKSB7XG4gICAgY29uc3QgdDEgPSBwMFt4RmllbGRdO1xuICAgIGNvbnN0IHQyID0gcDNbeEZpZWxkXTtcbiAgICBjb25zdCBkaXN0YW5jZSA9ICh0MiAtIHQxKSAqIFdFSUdIVDtcblxuICAgIHJldHVybiBwb2ludCh0MiAtIGRpc3RhbmNlLCBwM1t5RmllbGRdIC0gZGlzdGFuY2UgKiB0YW5nZW50LCB4RmllbGQsIHlGaWVsZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludCh4VmFsdWUsIHlWYWx1ZSwgeEZpZWxkLCB5RmllbGQpIHtcbiAgICBjb25zdCBjb250cm9sUG9pbnQgPSBuZXcgUG9pbnQoKTtcbiAgICBjb250cm9sUG9pbnRbeEZpZWxkXSA9IHhWYWx1ZTtcbiAgICBjb250cm9sUG9pbnRbeUZpZWxkXSA9IHlWYWx1ZTtcblxuICAgIHJldHVybiBjb250cm9sUG9pbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVGdW5jdGlvbihmbiwgeCkge1xuICAgIGNvbnN0IGxlbmd0aCA9IGZuLmxlbmd0aDtcbiAgICBsZXQgcmVzdWx0ID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICs9IE1hdGgucG93KHgsaSkgKiBmbltpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG51bWJlclNpZ24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPD0gMCA/IC0xIDogMTtcbn1cbiIsImltcG9ydCBQb2ludCBmcm9tICcuLi9nZW9tZXRyeS9wb2ludCc7XG5pbXBvcnQgeyBsYXN0IH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IFNoYXBlTWFwID0ge1xuICAgIGw6IGZ1bmN0aW9uKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBwYXJhbWV0ZXJzLCBwb3NpdGlvbiB9ID0gb3B0aW9ucztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlcnMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGxldCBwb2ludCA9IG5ldyBQb2ludChwYXJhbWV0ZXJzW2ldLCBwYXJhbWV0ZXJzW2kgKyAxXSk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlzUmVsYXRpdmUpIHtcbiAgICAgICAgICAgICAgICBwb2ludC50cmFuc2xhdGVXaXRoKHBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGF0aC5saW5lVG8ocG9pbnQueCwgcG9pbnQueSk7XG5cbiAgICAgICAgICAgIHBvc2l0aW9uLnggPSBwb2ludC54O1xuICAgICAgICAgICAgcG9zaXRpb24ueSA9IHBvaW50Lnk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgYzogZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHBhcmFtZXRlcnMsIHBvc2l0aW9uIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVycy5sZW5ndGg7IGkgKz0gNikge1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xPdXQgPSBuZXcgUG9pbnQocGFyYW1ldGVyc1tpXSwgcGFyYW1ldGVyc1tpICsgMV0pO1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xJbiA9IG5ldyBQb2ludChwYXJhbWV0ZXJzW2kgKyAyXSwgcGFyYW1ldGVyc1tpICsgM10pO1xuICAgICAgICAgICAgbGV0IHBvaW50ID0gbmV3IFBvaW50KHBhcmFtZXRlcnNbaSArIDRdLCBwYXJhbWV0ZXJzW2kgKyA1XSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pc1JlbGF0aXZlKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbEluLnRyYW5zbGF0ZVdpdGgocG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xPdXQudHJhbnNsYXRlV2l0aChwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgcG9pbnQudHJhbnNsYXRlV2l0aChwb3NpdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhdGguY3VydmVUbyhjb250cm9sT3V0LCBjb250cm9sSW4sIHBvaW50KTtcblxuICAgICAgICAgICAgcG9zaXRpb24ueCA9IHBvaW50Lng7XG4gICAgICAgICAgICBwb3NpdGlvbi55ID0gcG9pbnQueTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB2OiBmdW5jdGlvbihwYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9ucy5pc1JlbGF0aXZlID8gMCA6IG9wdGlvbnMucG9zaXRpb24ueDtcblxuICAgICAgICB0b0xpbmVQYXJhbWF0ZXJzKG9wdGlvbnMucGFyYW1ldGVycywgdHJ1ZSwgdmFsdWUpO1xuICAgICAgICB0aGlzLmwocGF0aCwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIGg6IGZ1bmN0aW9uKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zLmlzUmVsYXRpdmUgPyAwIDogb3B0aW9ucy5wb3NpdGlvbi55O1xuXG4gICAgICAgIHRvTGluZVBhcmFtYXRlcnMob3B0aW9ucy5wYXJhbWV0ZXJzLCBmYWxzZSwgdmFsdWUpO1xuICAgICAgICB0aGlzLmwocGF0aCwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIGE6IGZ1bmN0aW9uKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBwYXJhbWV0ZXJzLCBwb3NpdGlvbiB9ID0gb3B0aW9ucztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlcnMubGVuZ3RoOyBpICs9IDcpIHtcbiAgICAgICAgICAgIGNvbnN0IHJhZGl1c1ggPSBwYXJhbWV0ZXJzW2ldO1xuICAgICAgICAgICAgY29uc3QgcmFkaXVzWSA9IHBhcmFtZXRlcnNbaSArIDFdO1xuICAgICAgICAgICAgY29uc3Qgcm90YXRpb24gPSBwYXJhbWV0ZXJzW2kgKyAyXTtcbiAgICAgICAgICAgIGNvbnN0IGxhcmdlQXJjID0gcGFyYW1ldGVyc1tpICsgM107XG4gICAgICAgICAgICBjb25zdCBzd2lwZSA9IHBhcmFtZXRlcnNbaSArIDRdO1xuICAgICAgICAgICAgY29uc3QgZW5kUG9pbnQgPSBuZXcgUG9pbnQocGFyYW1ldGVyc1tpICsgNV0sIHBhcmFtZXRlcnNbaSArIDZdKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaXNSZWxhdGl2ZSkge1xuICAgICAgICAgICAgICAgIGVuZFBvaW50LnRyYW5zbGF0ZVdpdGgocG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBvc2l0aW9uLnggIT09IGVuZFBvaW50LnggfHwgcG9zaXRpb24ueSAhPT0gZW5kUG9pbnQueSkge1xuICAgICAgICAgICAgICAgIHBhdGguYXJjVG8oZW5kUG9pbnQsIHJhZGl1c1gsIHJhZGl1c1ksIGxhcmdlQXJjLCBzd2lwZSwgcm90YXRpb24pO1xuXG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueCA9IGVuZFBvaW50Lng7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueSA9IGVuZFBvaW50Lnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgczogZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHBhcmFtZXRlcnMsIHBvc2l0aW9uLCBwcmV2aW91c0NvbW1hbmQgfSA9IG9wdGlvbnM7XG4gICAgICAgIGxldCBsYXN0Q29udHJvbEluO1xuXG4gICAgICAgIGlmIChwcmV2aW91c0NvbW1hbmQgPT09IFwic1wiIHx8IHByZXZpb3VzQ29tbWFuZCA9PT0gXCJjXCIpIHtcbiAgICAgICAgICAgIGxhc3RDb250cm9sSW4gPSBsYXN0KGxhc3QocGF0aC5wYXRocykuc2VnbWVudHMpLmNvbnRyb2xJbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJzLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgICAgICAgICBsZXQgY29udHJvbEluID0gbmV3IFBvaW50KHBhcmFtZXRlcnNbaV0sIHBhcmFtZXRlcnNbaSArIDFdKTtcbiAgICAgICAgICAgIGxldCBlbmRQb2ludCA9IG5ldyBQb2ludChwYXJhbWV0ZXJzW2kgKyAyXSwgcGFyYW1ldGVyc1tpICsgM10pO1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xPdXQ7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlzUmVsYXRpdmUpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sSW4udHJhbnNsYXRlV2l0aChwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgZW5kUG9pbnQudHJhbnNsYXRlV2l0aChwb3NpdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChsYXN0Q29udHJvbEluKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbE91dCA9IHJlZmxlY3Rpb25Qb2ludChsYXN0Q29udHJvbEluLCBwb3NpdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xPdXQgPSBwb3NpdGlvbi5jbG9uZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsYXN0Q29udHJvbEluID0gY29udHJvbEluO1xuXG4gICAgICAgICAgICBwYXRoLmN1cnZlVG8oY29udHJvbE91dCwgY29udHJvbEluLCBlbmRQb2ludCk7XG5cbiAgICAgICAgICAgIHBvc2l0aW9uLnggPSBlbmRQb2ludC54O1xuICAgICAgICAgICAgcG9zaXRpb24ueSA9IGVuZFBvaW50Lnk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcTogZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHBhcmFtZXRlcnMsIHBvc2l0aW9uIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVycy5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xQb2ludCA9IG5ldyBQb2ludChwYXJhbWV0ZXJzW2ldLCBwYXJhbWV0ZXJzW2kgKyAxXSk7XG4gICAgICAgICAgICBsZXQgZW5kUG9pbnQgPSBuZXcgUG9pbnQocGFyYW1ldGVyc1tpICsgMl0sIHBhcmFtZXRlcnNbaSArIDNdKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaXNSZWxhdGl2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xQb2ludC50cmFuc2xhdGVXaXRoKHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBlbmRQb2ludC50cmFuc2xhdGVXaXRoKHBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGN1YmljQ29udHJvbFBvaW50cyA9IHF1YWRyYXRpY1RvQ3ViaWNDb250cm9sUG9pbnRzKHBvc2l0aW9uLCBjb250cm9sUG9pbnQsIGVuZFBvaW50KTtcblxuICAgICAgICAgICAgcGF0aC5jdXJ2ZVRvKGN1YmljQ29udHJvbFBvaW50cy5jb250cm9sT3V0LCBjdWJpY0NvbnRyb2xQb2ludHMuY29udHJvbEluLCBlbmRQb2ludCk7XG5cbiAgICAgICAgICAgIHBvc2l0aW9uLnggPSBlbmRQb2ludC54O1xuICAgICAgICAgICAgcG9zaXRpb24ueSA9IGVuZFBvaW50Lnk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdDogZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHBhcmFtZXRlcnMsIHBvc2l0aW9uLCBwcmV2aW91c0NvbW1hbmQgfSA9IG9wdGlvbnM7XG4gICAgICAgIGxldCBjb250cm9sUG9pbnQ7XG5cbiAgICAgICAgaWYgKHByZXZpb3VzQ29tbWFuZCA9PT0gXCJxXCIgfHwgcHJldmlvdXNDb21tYW5kID09PSBcInRcIikge1xuICAgICAgICAgICAgbGV0IGxhc3RTZWdtZW50ID0gbGFzdChsYXN0KHBhdGgucGF0aHMpLnNlZ21lbnRzKTtcbiAgICAgICAgICAgIGNvbnRyb2xQb2ludCA9IGxhc3RTZWdtZW50LmNvbnRyb2xJbigpLmNsb25lKClcbiAgICAgICAgICAgICAgICAudHJhbnNsYXRlV2l0aChwb3NpdGlvbi5zY2FsZUNvcHkoLTEgLyAzKSlcbiAgICAgICAgICAgICAgICAuc2NhbGUoMyAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICBsZXQgZW5kUG9pbnQgPSBuZXcgUG9pbnQocGFyYW1ldGVyc1tpXSwgcGFyYW1ldGVyc1tpICsgMV0pO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaXNSZWxhdGl2ZSkge1xuICAgICAgICAgICAgICAgIGVuZFBvaW50LnRyYW5zbGF0ZVdpdGgocG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29udHJvbFBvaW50KSB7XG4gICAgICAgICAgICAgICAgY29udHJvbFBvaW50ID0gcmVmbGVjdGlvblBvaW50KGNvbnRyb2xQb2ludCwgcG9zaXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250cm9sUG9pbnQgPSBwb3NpdGlvbi5jbG9uZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY3ViaWNDb250cm9sUG9pbnRzID0gcXVhZHJhdGljVG9DdWJpY0NvbnRyb2xQb2ludHMocG9zaXRpb24sIGNvbnRyb2xQb2ludCwgZW5kUG9pbnQpO1xuXG4gICAgICAgICAgICBwYXRoLmN1cnZlVG8oY3ViaWNDb250cm9sUG9pbnRzLmNvbnRyb2xPdXQsIGN1YmljQ29udHJvbFBvaW50cy5jb250cm9sSW4sIGVuZFBvaW50KTtcblxuICAgICAgICAgICAgcG9zaXRpb24ueCA9IGVuZFBvaW50Lng7XG4gICAgICAgICAgICBwb3NpdGlvbi55ID0gZW5kUG9pbnQueTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIHRvTGluZVBhcmFtYXRlcnMocGFyYW1ldGVycywgaXNWZXJ0aWNhbCwgdmFsdWUpIHtcbiAgICBjb25zdCBpbnNlcnRQb3NpdGlvbiA9IGlzVmVydGljYWwgPyAwIDogMTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVycy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBwYXJhbWV0ZXJzLnNwbGljZShpICsgaW5zZXJ0UG9zaXRpb24sIDAsIHZhbHVlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlZmxlY3Rpb25Qb2ludChwb2ludCwgY2VudGVyKSB7XG4gICAgaWYgKHBvaW50ICYmIGNlbnRlcikge1xuICAgICAgICByZXR1cm4gY2VudGVyLnNjYWxlQ29weSgyKS50cmFuc2xhdGUoLXBvaW50LngsIC1wb2ludC55KTtcbiAgICB9XG59XG5cbmNvbnN0IHRoaXJkID0gMSAvIDM7XG5cbmZ1bmN0aW9uIHF1YWRyYXRpY1RvQ3ViaWNDb250cm9sUG9pbnRzKHBvc2l0aW9uLCBjb250cm9sUG9pbnQsIGVuZFBvaW50KSB7XG4gICAgY29uc3Qgc2NhbGVkUG9pbnQgPSBjb250cm9sUG9pbnQuY2xvbmUoKS5zY2FsZSgyIC8gMyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udHJvbE91dDogc2NhbGVkUG9pbnQuY2xvbmUoKS50cmFuc2xhdGVXaXRoKHBvc2l0aW9uLnNjYWxlQ29weSh0aGlyZCkpLFxuICAgICAgICBjb250cm9sSW46IHNjYWxlZFBvaW50LnRyYW5zbGF0ZVdpdGgoZW5kUG9pbnQuc2NhbGVDb3B5KHRoaXJkKSlcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBTaGFwZU1hcDsiLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi4vZ2VvbWV0cnkvcG9pbnQnO1xuaW1wb3J0IFNoYXBlTWFwIGZyb20gJy4vc2hhcGUtbWFwJztcblxuY29uc3QgU0VHTUVOVF9SRUdFWCA9IC8oW2EtZGYtel17MX0pKFteYS1kZi16XSopKHopPy9naTtcbmNvbnN0IFNQTElUX1JFR0VYID0gL1ssXFxzXT8oWytcXC1dPyg/OlxcZCpcXC5cXGQrfFxcZCspKD86W2VFXVsrXFwtXT9cXGQrKT8pL2c7XG5jb25zdCBNT1ZFID0gXCJtXCI7XG5jb25zdCBDTE9TRSA9IFwielwiO1xuXG5mdW5jdGlvbiBwYXJzZVBhcmFtZXRlcnMoc3RyKSB7XG4gICAgY29uc3QgcGFyYW1ldGVycyA9IFtdO1xuICAgIHN0ci5yZXBsYWNlKFNQTElUX1JFR0VYLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyKSB7XG4gICAgICAgIHBhcmFtZXRlcnMucHVzaChwYXJzZUZsb2F0KG51bWJlcikpO1xuICAgIH0pO1xuICAgIHJldHVybiBwYXJhbWV0ZXJzO1xufVxuXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aEluc3RhbmNlLCBzdHIpIHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IG5ldyBQb2ludCgpO1xuICAgIGxldCBwcmV2aW91c0NvbW1hbmQ7XG5cbiAgICBzdHIucmVwbGFjZShTRUdNRU5UX1JFR0VYLCAobWF0Y2gsIGVsZW1lbnQsIHBhcmFtcywgY2xvc2VQYXRoKSA9PiB7XG4gICAgICAgIGxldCBjb21tYW5kID0gZWxlbWVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCBpc1JlbGF0aXZlID0gY29tbWFuZCA9PT0gZWxlbWVudDtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHBhcnNlUGFyYW1ldGVycyhwYXJhbXMudHJpbSgpKTtcblxuICAgICAgICBpZiAoY29tbWFuZCA9PT0gTU9WRSkge1xuICAgICAgICAgICAgaWYgKGlzUmVsYXRpdmUpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi54ICs9IHBhcmFtZXRlcnNbMF07XG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueSArPSBwYXJhbWV0ZXJzWzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi54ID0gcGFyYW1ldGVyc1swXTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi55ID0gcGFyYW1ldGVyc1sxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGF0aEluc3RhbmNlLm1vdmVUbyhwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcblxuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgIGNvbW1hbmQgPSBcImxcIjtcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLnNwbGljZSgwLCAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChTaGFwZU1hcFtjb21tYW5kXSkge1xuICAgICAgICAgICAgU2hhcGVNYXBbY29tbWFuZF0oXG4gICAgICAgICAgICAgICAgcGF0aEluc3RhbmNlLCB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnM6IHBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgaXNSZWxhdGl2ZTogaXNSZWxhdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21tYW5kOiBwcmV2aW91c0NvbW1hbmRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoY2xvc2VQYXRoICYmIGNsb3NlUGF0aC50b0xvd2VyQ2FzZSgpID09PSBDTE9TRSkge1xuICAgICAgICAgICAgICAgIHBhdGhJbnN0YW5jZS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNvbW1hbmQgIT09IE1PVkUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIHdoaWxlIHBhcnNpbmcgU1ZHIHBhdGguIFVuc3VwcG9ydGVkIGNvbW1hbmQ6IFwiICsgY29tbWFuZCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2aW91c0NvbW1hbmQgPSBjb21tYW5kO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhdGhJbnN0YW5jZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VQYXRoO1xuXG4iLCJpbXBvcnQgUmVjdCBmcm9tICcuLi8uLi9nZW9tZXRyeS9yZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWxlbWVudHNCb3VuZGluZ0JveChlbGVtZW50cywgYXBwbHlUcmFuc2Zvcm0sIHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgbGV0IGJvdW5kaW5nQm94O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgICAgICBpZiAoZWxlbWVudC52aXNpYmxlKCkpIHtcbiAgICAgICAgICAgIGxldCBlbGVtZW50Qm91bmRpbmdCb3ggPSBhcHBseVRyYW5zZm9ybSA/IGVsZW1lbnQuYmJveCh0cmFuc2Zvcm1hdGlvbikgOiBlbGVtZW50LnJhd0JCb3goKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Qm91bmRpbmdCb3gpIHtcbiAgICAgICAgICAgICAgICBpZiAoYm91bmRpbmdCb3gpIHtcbiAgICAgICAgICAgICAgICAgICAgYm91bmRpbmdCb3ggPSBSZWN0LnVuaW9uKGJvdW5kaW5nQm94LCBlbGVtZW50Qm91bmRpbmdCb3gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kaW5nQm94ID0gZWxlbWVudEJvdW5kaW5nQm94O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBib3VuZGluZ0JveDtcbn1cblxuIiwiaW1wb3J0IFJlY3QgZnJvbSAnLi4vLi4vZ2VvbWV0cnkvcmVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsZW1lbnRzQ2xpcHBlZEJvdW5kaW5nQm94KGVsZW1lbnRzLCB0cmFuc2Zvcm1hdGlvbikge1xuICAgIGxldCBib3VuZGluZ0JveDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgICAgaWYgKGVsZW1lbnQudmlzaWJsZSgpKSB7XG4gICAgICAgICAgICBsZXQgZWxlbWVudEJvdW5kaW5nQm94ID0gZWxlbWVudC5jbGlwcGVkQkJveCh0cmFuc2Zvcm1hdGlvbik7XG4gICAgICAgICAgICBpZiAoZWxlbWVudEJvdW5kaW5nQm94KSB7XG4gICAgICAgICAgICAgICAgaWYgKGJvdW5kaW5nQm94KSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kaW5nQm94ID0gUmVjdC51bmlvbihib3VuZGluZ0JveCwgZWxlbWVudEJvdW5kaW5nQm94KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBib3VuZGluZ0JveCA9IGVsZW1lbnRCb3VuZGluZ0JveDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmRpbmdCb3g7XG59IiwiaW1wb3J0IEdlb21ldHJ5RWxlbWVudHNBcnJheSBmcm9tICcuL2dlb21ldHJ5LWVsZW1lbnRzLWFycmF5JztcbmltcG9ydCBFbGVtZW50IGZyb20gJy4vZWxlbWVudCc7XG5pbXBvcnQgeyBwb2ludHNUb0N1cnZlIH0gZnJvbSAnLi91dGlscy9wb2ludHMtdG8tY3VydmUnO1xuaW1wb3J0IHBhaW50YWJsZSBmcm9tICcuLi9taXhpbnMvcGFpbnRhYmxlJztcbmltcG9ydCBtZWFzdXJhYmxlIGZyb20gJy4uL21peGlucy9tZWFzdXJhYmxlJztcbmltcG9ydCBBcmMgZnJvbSAnLi4vZ2VvbWV0cnkvYXJjJztcbmltcG9ydCBSZWN0IGZyb20gJy4uL2dlb21ldHJ5L3JlY3QnO1xuaW1wb3J0IFNlZ21lbnQgZnJvbSAnLi4vZ2VvbWV0cnkvc2VnbWVudCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vZ2VvbWV0cnkvcG9pbnQnO1xuaW1wb3J0IFNpemUgZnJvbSAnLi4vZ2VvbWV0cnkvc2l6ZSc7XG5pbXBvcnQgbGluZUludGVyc2VjdGlvbnNDb3VudCBmcm9tICcuLi9nZW9tZXRyeS9tYXRoL2xpbmUtaW50ZXJzZWN0aW9ucy1jb3VudCc7XG5pbXBvcnQgeyBkZWZpbmVkLCBsYXN0LCByYWQgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBwYXJzZVBhdGggZnJvbSAnLi4vcGFyc2luZy9wYXJzZS1wYXRoJztcbmltcG9ydCBlbGVtZW50c0JvdW5kaW5nQm94IGZyb20gJy4vdXRpbHMvZWxlbWVudHMtYm91bmRpbmctYm94JztcbmltcG9ydCBlbGVtZW50c0NsaXBwZWRCb3VuZGluZ0JveCBmcm9tICcuL3V0aWxzL2VsZW1lbnRzLWNsaXBwZW5kLWJvdW5kaW5nLWJveCc7XG5pbXBvcnQgbGltaXRWYWx1ZSBmcm9tICcuLi91dGlsL2xpbWl0LXZhbHVlJztcblxuY29uc3QgU1BBQ0UgPSAnICc7XG5jb25zdCBwcmludFBvaW50cyA9IChwcmVjaXNpb24pID0+ICguLi5wb2ludHMpID0+IHBvaW50cy5tYXAocCA9PiBwLnRvU3RyaW5nKHByZWNpc2lvbikpLmpvaW4oU1BBQ0UpO1xuY29uc3Qgc2VnbWVudFR5cGUgPSAoc2VnbWVudFN0YXJ0LCBzZWdtZW50RW5kKSA9PiBzZWdtZW50U3RhcnQuY29udHJvbE91dCgpICYmIHNlZ21lbnRFbmQuY29udHJvbEluKCkgPyAnQycgOiAnTCc7XG5cbmV4cG9ydCBjbGFzcyBQYXRoIGV4dGVuZHMgcGFpbnRhYmxlKG1lYXN1cmFibGUoRWxlbWVudCkpIHtcbiAgICBnZXQgbm9kZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiAnUGF0aCc7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZWdtZW50cyA9IG5ldyBHZW9tZXRyeUVsZW1lbnRzQXJyYXkoKTtcbiAgICAgICAgdGhpcy5zZWdtZW50cy5hZGRPYnNlcnZlcih0aGlzKTtcblxuICAgICAgICBpZiAoIWRlZmluZWQodGhpcy5vcHRpb25zLnN0cm9rZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3Ryb2tlKCcjMDAwJyk7XG5cbiAgICAgICAgICAgIGlmICghZGVmaW5lZCh0aGlzLm9wdGlvbnMuc3Ryb2tlLmxpbmVKb2luKSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zZXQoJ3N0cm9rZS5saW5lSm9pbicsICdtaXRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbW92ZVRvKHgsIHkpIHtcbiAgICAgICAgdGhpcy5zdXNwZW5kKCk7XG4gICAgICAgIHRoaXMuc2VnbWVudHMuZWxlbWVudHMoW10pO1xuICAgICAgICB0aGlzLnJlc3VtZSgpO1xuXG4gICAgICAgIHRoaXMubGluZVRvKHgsIHkpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGxpbmVUbyh4LCB5KSB7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gZGVmaW5lZCh5KSA/IG5ldyBQb2ludCh4LCB5KSA6IHg7XG4gICAgICAgIGNvbnN0IHNlZ21lbnQgPSBuZXcgU2VnbWVudChwb2ludCk7XG5cbiAgICAgICAgdGhpcy5zZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGN1cnZlVG8oY29udHJvbE91dCwgY29udHJvbEluLCBwb2ludCkge1xuICAgICAgICBpZiAodGhpcy5zZWdtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0U2VnbWVudCA9IGxhc3QodGhpcy5zZWdtZW50cyk7XG4gICAgICAgICAgICBjb25zdCBzZWdtZW50ID0gbmV3IFNlZ21lbnQocG9pbnQsIGNvbnRyb2xJbik7XG4gICAgICAgICAgICB0aGlzLnN1c3BlbmQoKTtcbiAgICAgICAgICAgIGxhc3RTZWdtZW50LmNvbnRyb2xPdXQoY29udHJvbE91dCk7XG4gICAgICAgICAgICB0aGlzLnJlc3VtZSgpO1xuXG4gICAgICAgICAgICB0aGlzLnNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhcmMoc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHJhZGl1c1gsIHJhZGl1c1ksIGFudGljbG9ja3dpc2UpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VnbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgbGFzdFNlZ21lbnQgPSBsYXN0KHRoaXMuc2VnbWVudHMpO1xuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbGFzdFNlZ21lbnQuYW5jaG9yKCk7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHJhZChzdGFydEFuZ2xlKTtcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IG5ldyBQb2ludChhbmNob3IueCAtIHJhZGl1c1ggKiBNYXRoLmNvcyhzdGFydCksXG4gICAgICAgICAgICAgICAgYW5jaG9yLnkgLSByYWRpdXNZICogTWF0aC5zaW4oc3RhcnQpKTtcbiAgICAgICAgICAgIGNvbnN0IGFyYyA9IG5ldyBBcmMoY2VudGVyLCB7XG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogc3RhcnRBbmdsZSxcbiAgICAgICAgICAgICAgICBlbmRBbmdsZTogZW5kQW5nbGUsXG4gICAgICAgICAgICAgICAgcmFkaXVzWDogcmFkaXVzWCxcbiAgICAgICAgICAgICAgICByYWRpdXNZOiByYWRpdXNZLFxuICAgICAgICAgICAgICAgIGFudGljbG9ja3dpc2U6IGFudGljbG9ja3dpc2VcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9hZGRBcmNTZWdtZW50cyhhcmMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYXJjVG8oZW5kLCByeCwgcnksIGxhcmdlQXJjLCBzd2lwZSwgcm90YXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuc2VnbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgbGFzdFNlZ21lbnQgPSBsYXN0KHRoaXMuc2VnbWVudHMpO1xuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbGFzdFNlZ21lbnQuYW5jaG9yKCk7XG4gICAgICAgICAgICBjb25zdCBhcmMgPSBBcmMuZnJvbVBvaW50cyhhbmNob3IsIFBvaW50LmNyZWF0ZShlbmQpLCByeCwgcnksIGxhcmdlQXJjLCBzd2lwZSwgcm90YXRpb24pO1xuXG4gICAgICAgICAgICB0aGlzLl9hZGRBcmNTZWdtZW50cyhhcmMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIF9hZGRBcmNTZWdtZW50cyhhcmMpIHtcbiAgICAgICAgdGhpcy5zdXNwZW5kKCk7XG5cbiAgICAgICAgY29uc3QgY3VydmVQb2ludHMgPSBhcmMuY3VydmVQb2ludHMoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGN1cnZlUG9pbnRzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnZlVG8oY3VydmVQb2ludHNbaV0sIGN1cnZlUG9pbnRzW2kgKyAxXSwgY3VydmVQb2ludHNbaSArIDJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVzdW1lKCk7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByYXdCQm94KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmJveCgpO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKGRpZ2l0cykge1xuICAgICAgICBsZXQgb3V0cHV0ID0gJyc7XG5cbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgcHJpbnQgPSBwcmludFBvaW50cyhkaWdpdHMpO1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRUeXBlO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBzZWdtZW50VHlwZShzZWdtZW50c1tpIC0gMV0sIHNlZ21lbnRzW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gY3VycmVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHR5cGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnTCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydHMucHVzaChwcmludChzZWdtZW50c1tpXS5hbmNob3IoKSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRzLnB1c2gocHJpbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50c1tpIC0gMV0uY29udHJvbE91dCgpLCBzZWdtZW50c1tpXS5jb250cm9sSW4oKSwgc2VnbWVudHNbaV0uYW5jaG9yKClcbiAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvdXRwdXQgPSAnTScgKyBwcmludChzZWdtZW50c1swXS5hbmNob3IoKSkgKyBTUEFDRSArIHBhcnRzLmpvaW4oU1BBQ0UpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gJ1onO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICBfY29udGFpbnNQb2ludChwb2ludCkge1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgbGV0IGludGVyc2VjdGlvbnNDb3VudCA9IDA7XG4gICAgICAgIGxldCBwcmV2aW91cywgY3VycmVudDtcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAxOyBpZHggPCBsZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBwcmV2aW91cyA9IHNlZ21lbnRzW2lkeCAtIDFdO1xuICAgICAgICAgICAgY3VycmVudCA9IHNlZ21lbnRzW2lkeF07XG4gICAgICAgICAgICBpbnRlcnNlY3Rpb25zQ291bnQgKz0gcHJldmlvdXMuX2ludGVyc2VjdGlvbnNUbyhjdXJyZW50LCBwb2ludCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlZCB8fCAhc2VnbWVudHNbMF0uYW5jaG9yKCkuZXF1YWxzKHNlZ21lbnRzW2xlbmd0aCAtIDFdLmFuY2hvcigpKSkge1xuICAgICAgICAgICAgaW50ZXJzZWN0aW9uc0NvdW50ICs9IGxpbmVJbnRlcnNlY3Rpb25zQ291bnQoc2VnbWVudHNbMF0uYW5jaG9yKCksIHNlZ21lbnRzW2xlbmd0aCAtIDFdLmFuY2hvcigpLCBwb2ludCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uc0NvdW50ICUgMiAhPT0gMDtcbiAgICB9XG5cbiAgICBfaXNPblBhdGgocG9pbnQsIHdpZHRoKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBwYXRoV2lkdGggPSB3aWR0aCB8fCB0aGlzLm9wdGlvbnMuc3Ryb2tlLndpZHRoO1xuXG4gICAgICAgIGlmIChsZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBpZiAoc2VnbWVudHNbMF0uX2lzT25QYXRoVG8oc2VnbWVudHNbMV0sIHBvaW50LCBwYXRoV2lkdGgsICdzdGFydCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDI7IGlkeCA8PSBsZW5ndGggLSAyOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIGlmIChzZWdtZW50c1tpZHggLSAxXS5faXNPblBhdGhUbyhzZWdtZW50c1tpZHhdLCBwb2ludCwgcGF0aFdpZHRoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWdtZW50c1tsZW5ndGggLSAyXS5faXNPblBhdGhUbyhzZWdtZW50c1tsZW5ndGggLSAxXSwgcG9pbnQsIHBhdGhXaWR0aCwgJ2VuZCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIF9iYm94KG1hdHJpeCkge1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgbGV0IGJvdW5kaW5nQm94O1xuXG4gICAgICAgIGlmIChsZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGxldCBhbmNob3IgPSBzZWdtZW50c1swXS5hbmNob3IoKS50cmFuc2Zvcm1Db3B5KG1hdHJpeCk7XG4gICAgICAgICAgICBib3VuZGluZ0JveCA9IG5ldyBSZWN0KGFuY2hvciwgU2l6ZS5aRVJPKTtcbiAgICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlZ21lbnRCb3ggPSBzZWdtZW50c1tpIC0gMV0uYmJveFRvKHNlZ21lbnRzW2ldLCBtYXRyaXgpO1xuICAgICAgICAgICAgICAgIGlmIChib3VuZGluZ0JveCkge1xuICAgICAgICAgICAgICAgICAgICBib3VuZGluZ0JveCA9IFJlY3QudW5pb24oYm91bmRpbmdCb3gsIHNlZ21lbnRCb3gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kaW5nQm94ID0gc2VnbWVudEJveDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYm91bmRpbmdCb3g7XG4gICAgfVxuXG4gICAgc3RhdGljIHBhcnNlKHN0ciwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gTXVsdGlQYXRoLnBhcnNlKHN0ciwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21SZWN0KHJlY3QsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IG5ldyBQYXRoKG9wdGlvbnMpO1xuICAgICAgICBsZXQgWyByeCwgcnkgXSA9IHJlY3QuY29ybmVyUmFkaXVzO1xuXG4gICAgICAgIGlmIChyeCA9PT0gMCAmJiByeSA9PT0gMCkge1xuICAgICAgICAgICAgcGF0aC5tb3ZlVG8ocmVjdC50b3BMZWZ0KCkpXG4gICAgICAgICAgICAgICAgLmxpbmVUbyhyZWN0LnRvcFJpZ2h0KCkpXG4gICAgICAgICAgICAgICAgLmxpbmVUbyhyZWN0LmJvdHRvbVJpZ2h0KCkpXG4gICAgICAgICAgICAgICAgLmxpbmVUbyhyZWN0LmJvdHRvbUxlZnQoKSlcbiAgICAgICAgICAgICAgICAuY2xvc2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbiA9IHJlY3Qub3JpZ2luO1xuICAgICAgICAgICAgY29uc3QgeyB4LCB5IH0gPSBvcmlnaW47XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IHJlY3Qud2lkdGgoKTtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHJlY3QuaGVpZ2h0KCk7XG4gICAgICAgICAgICByeCA9IGxpbWl0VmFsdWUocngsIDAsIHdpZHRoIC8gMik7XG4gICAgICAgICAgICByeSA9IGxpbWl0VmFsdWUocnksIDAsIGhlaWdodCAvIDIpO1xuXG4gICAgICAgICAgICBwYXRoLm1vdmVUbyh4ICsgcngsIHkpXG4gICAgICAgICAgICAgICAgLmxpbmVUbyh4ICsgd2lkdGggLSByeCwgeSlcbiAgICAgICAgICAgICAgICAuYXJjVG8oWyB4ICsgd2lkdGgsIHkgKyByeSBdLCByeCwgcnksIGZhbHNlKVxuICAgICAgICAgICAgICAgIC5saW5lVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gcnkpXG4gICAgICAgICAgICAgICAgLmFyY1RvKFsgeCArIHdpZHRoIC0gcngsIHkgKyBoZWlnaHQgXSwgcngsIHJ5LCBmYWxzZSlcbiAgICAgICAgICAgICAgICAubGluZVRvKHggKyByeCwgeSArIGhlaWdodClcbiAgICAgICAgICAgICAgICAuYXJjVG8oWyB4LCB5ICsgaGVpZ2h0IC0gcnkgXSwgcngsIHJ5LCBmYWxzZSlcbiAgICAgICAgICAgICAgICAubGluZVRvKHgsIHkgKyByeSlcbiAgICAgICAgICAgICAgICAuYXJjVG8oWyB4ICsgcngsIHkgXSwgcngsIHJ5LCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVBvaW50cyhwb2ludHMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHBvaW50cykge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IG5ldyBQYXRoKG9wdGlvbnMpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBwb2ludCA9IFBvaW50LmNyZWF0ZShwb2ludHNbaV0pO1xuICAgICAgICAgICAgICAgIGlmIChwb2ludCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5tb3ZlVG8ocG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5saW5lVG8ocG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBjdXJ2ZUZyb21Qb2ludHMocG9pbnRzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChwb2ludHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlZ21lbnRzID0gcG9pbnRzVG9DdXJ2ZShwb2ludHMpO1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IG5ldyBQYXRoKG9wdGlvbnMpO1xuICAgICAgICAgICAgcGF0aC5zZWdtZW50cy5wdXNoLmFwcGx5KHBhdGguc2VnbWVudHMsIHNlZ21lbnRzKTtcblxuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUFyYyhhcmMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IG5ldyBQYXRoKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBzdGFydEFuZ2xlID0gYXJjLnN0YXJ0QW5nbGU7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gYXJjLnBvaW50QXQoc3RhcnRBbmdsZSk7XG4gICAgICAgIHBhdGgubW92ZVRvKHN0YXJ0LngsIHN0YXJ0LnkpO1xuICAgICAgICBwYXRoLmFyYyhzdGFydEFuZ2xlLCBhcmMuZW5kQW5nbGUsIGFyYy5yYWRpdXNYLCBhcmMucmFkaXVzWSwgYXJjLmFudGljbG9ja3dpc2UpO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNdWx0aVBhdGggZXh0ZW5kcyBwYWludGFibGUobWVhc3VyYWJsZShFbGVtZW50KSkge1xuICAgIHN0YXRpYyBwYXJzZShzdHIsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgTXVsdGlQYXRoKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcGFyc2VQYXRoKGluc3RhbmNlLCBzdHIpO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKGRpZ2l0cykge1xuICAgICAgICBjb25zdCBwYXRocyA9IHRoaXMucGF0aHM7XG4gICAgICAgIGxldCBvdXRwdXQgPSAnJztcblxuICAgICAgICBpZiAocGF0aHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwYXRoc1tpXS50b1N0cmluZyhkaWdpdHMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3V0cHV0ID0gcmVzdWx0LmpvaW4oU1BBQ0UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICBnZXQgbm9kZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiAnTXVsdGlQYXRoJztcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnBhdGhzID0gbmV3IEdlb21ldHJ5RWxlbWVudHNBcnJheSgpO1xuICAgICAgICB0aGlzLnBhdGhzLmFkZE9ic2VydmVyKHRoaXMpO1xuXG4gICAgICAgIGlmICghZGVmaW5lZCh0aGlzLm9wdGlvbnMuc3Ryb2tlKSkge1xuICAgICAgICAgICAgdGhpcy5zdHJva2UoJyMwMDAnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1vdmVUbyh4LCB5KSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBuZXcgUGF0aCgpO1xuICAgICAgICBwYXRoLm1vdmVUbyh4LCB5KTtcblxuICAgICAgICB0aGlzLnBhdGhzLnB1c2gocGF0aCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbGluZVRvKHgsIHkpIHtcbiAgICAgICAgaWYgKHRoaXMucGF0aHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGFzdCh0aGlzLnBhdGhzKS5saW5lVG8oeCwgeSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjdXJ2ZVRvKGNvbnRyb2xPdXQsIGNvbnRyb2xJbiwgcG9pbnQpIHtcbiAgICAgICAgaWYgKHRoaXMucGF0aHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGFzdCh0aGlzLnBhdGhzKS5jdXJ2ZVRvKGNvbnRyb2xPdXQsIGNvbnRyb2xJbiwgcG9pbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYXJjKHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCByYWRpdXNYLCByYWRpdXNZLCBhbnRpY2xvY2t3aXNlKSB7XG4gICAgICAgIGlmICh0aGlzLnBhdGhzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxhc3QodGhpcy5wYXRocykuYXJjKHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCByYWRpdXNYLCByYWRpdXNZLCBhbnRpY2xvY2t3aXNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFyY1RvKGVuZCwgcngsIHJ5LCBsYXJnZUFyYywgc3dpcGUsIHJvdGF0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLnBhdGhzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxhc3QodGhpcy5wYXRocykuYXJjVG8oZW5kLCByeCwgcnksIGxhcmdlQXJjLCBzd2lwZSwgcm90YXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhdGhzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxhc3QodGhpcy5wYXRocykuY2xvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIF9iYm94KG1hdHJpeCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudHNCb3VuZGluZ0JveCh0aGlzLnBhdGhzLCB0cnVlLCBtYXRyaXgpO1xuICAgIH1cblxuICAgIHJhd0JCb3goKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50c0JvdW5kaW5nQm94KHRoaXMucGF0aHMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBfY29udGFpbnNQb2ludChwb2ludCkge1xuICAgICAgICBjb25zdCBwYXRocyA9IHRoaXMucGF0aHM7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgcGF0aHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgaWYgKHBhdGhzW2lkeF0uX2NvbnRhaW5zUG9pbnQocG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIF9pc09uUGF0aChwb2ludCkge1xuICAgICAgICBjb25zdCBwYXRocyA9IHRoaXMucGF0aHM7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5vcHRpb25zLnN0cm9rZS53aWR0aDtcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBwYXRocy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBpZiAocGF0aHNbaWR4XS5faXNPblBhdGgocG9pbnQsIHdpZHRoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBfY2xpcHBlZEJCb3godHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzQ2xpcHBlZEJvdW5kaW5nQm94KHRoaXMucGF0aHMsIHRoaXMuY3VycmVudFRyYW5zZm9ybSh0cmFuc2Zvcm1hdGlvbikpO1xuICAgIH1cbn1cblxuIiwiaW1wb3J0IEdlb21ldHJ5QXJjIGZyb20gJy4uL2dlb21ldHJ5L2FyYyc7XG5pbXBvcnQgRWxlbWVudCBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHsgUGF0aCB9IGZyb20gJy4vcGF0aCc7XG5pbXBvcnQgcGFpbnRhYmxlIGZyb20gJy4uL21peGlucy9wYWludGFibGUnO1xuaW1wb3J0IG1lYXN1cmFibGUgZnJvbSAnLi4vbWl4aW5zL21lYXN1cmFibGUnO1xuaW1wb3J0IHdpdGhHZW9tZXRyeSBmcm9tICcuLi9taXhpbnMvd2l0aC1nZW9tZXRyeSc7XG5pbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cblxuY29uc3QgREVGQVVMVF9TVFJPS0UgPSBcIiMwMDBcIjtcblxuY2xhc3MgQXJjIGV4dGVuZHMgcGFpbnRhYmxlKG1lYXN1cmFibGUod2l0aEdlb21ldHJ5KEVsZW1lbnQpKSkge1xuICAgIGdldCBub2RlVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiQXJjXCI7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cnlBcmMoKSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkoZ2VvbWV0cnkpO1xuXG4gICAgICAgIGlmICghZGVmaW5lZCh0aGlzLm9wdGlvbnMuc3Ryb2tlKSkge1xuICAgICAgICAgICAgdGhpcy5zdHJva2UoREVGQVVMVF9TVFJPS0UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2Jib3gobWF0cml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZW9tZXRyeS5iYm94KG1hdHJpeCk7XG4gICAgfVxuXG4gICAgcmF3QkJveCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VvbWV0cnkoKS5iYm94KCk7XG4gICAgfVxuXG4gICAgdG9QYXRoKCkge1xuICAgICAgICBjb25zdCBwYXRoID0gbmV3IFBhdGgoKTtcbiAgICAgICAgY29uc3QgY3VydmVQb2ludHMgPSB0aGlzLmdlb21ldHJ5KCkuY3VydmVQb2ludHMoKTtcblxuICAgICAgICBpZiAoY3VydmVQb2ludHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcGF0aC5tb3ZlVG8oY3VydmVQb2ludHNbMF0ueCwgY3VydmVQb2ludHNbMF0ueSk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY3VydmVQb2ludHMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICAgICAgICBwYXRoLmN1cnZlVG8oY3VydmVQb2ludHNbaV0sIGN1cnZlUG9pbnRzW2kgKyAxXSwgY3VydmVQb2ludHNbaSArIDJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cblxuICAgIF9jb250YWluc1BvaW50KHBvaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdlb21ldHJ5KCkuY29udGFpbnNQb2ludChwb2ludCk7XG4gICAgfVxuXG4gICAgX2lzT25QYXRoKHBvaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdlb21ldHJ5KCkuX2lzT25QYXRoKHBvaW50LCB0aGlzLm9wdGlvbnMuc3Ryb2tlLndpZHRoIC8gMik7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcmM7XG4iLCJpbXBvcnQgRWxlbWVudCBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IFBvaW50IGZyb20gJy4uL2dlb21ldHJ5L3BvaW50JztcbmltcG9ydCBSZWN0IGZyb20gJy4uL2dlb21ldHJ5L3JlY3QnO1xuaW1wb3J0IHRvTWF0cml4IGZyb20gJy4uL2dlb21ldHJ5L3RvLW1hdHJpeCc7XG5pbXBvcnQgcGFpbnRhYmxlIGZyb20gJy4uL21peGlucy9wYWludGFibGUnO1xuaW1wb3J0IHdpdGhQb2ludHMgZnJvbSAnLi4vbWl4aW5zL3dpdGgtcG9pbnRzJztcbmltcG9ydCB7IGRlZmluZWQsIG1lYXN1cmVUZXh0IH0gZnJvbSAnLi4vdXRpbCc7XG5cblxuY29uc3QgREVGQVVMVF9GT05UID0gXCIxMnB4IHNhbnMtc2VyaWZcIjtcbmNvbnN0IERFRkFVTFRfRklMTCA9IFwiIzAwMFwiO1xuXG5jbGFzcyBUZXh0IGV4dGVuZHMgcGFpbnRhYmxlKHdpdGhQb2ludHMoRWxlbWVudCwgWyBcInBvc2l0aW9uXCIgXSkpIHtcbiAgICBnZXQgbm9kZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcIlRleHRcIjtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZW50LCBwb3NpdGlvbiA9IG5ldyBQb2ludCgpLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5jb250ZW50KGNvbnRlbnQpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uKHBvc2l0aW9uKTtcblxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5mb250KSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZm9udCA9IERFRkFVTFRfRk9OVDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGVmaW5lZCh0aGlzLm9wdGlvbnMuZmlsbCkpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsbChERUZBVUxUX0ZJTEwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29udGVudCh2YWx1ZSkge1xuICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zZXQoXCJjb250ZW50XCIsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5nZXQoXCJjb250ZW50XCIpO1xuICAgIH1cblxuICAgIG1lYXN1cmUoKSB7XG4gICAgICAgIGNvbnN0IG1ldHJpY3MgPSBtZWFzdXJlVGV4dCh0aGlzLmNvbnRlbnQoKSwge1xuICAgICAgICAgICAgZm9udDogdGhpcy5vcHRpb25zLmdldChcImZvbnRcIilcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG1ldHJpY3M7XG4gICAgfVxuXG4gICAgcmVjdCgpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMubWVhc3VyZSgpO1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLnBvc2l0aW9uKCkuY2xvbmUoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWN0KHBvcywgWyBzaXplLndpZHRoLCBzaXplLmhlaWdodCBdKTtcbiAgICB9XG5cbiAgICBiYm94KHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbWJpbmVkTWF0cml4ID0gdG9NYXRyaXgodGhpcy5jdXJyZW50VHJhbnNmb3JtKHRyYW5zZm9ybWF0aW9uKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlY3QoKS5iYm94KGNvbWJpbmVkTWF0cml4KTtcbiAgICB9XG5cbiAgICByYXdCQm94KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWN0KCkuYmJveCgpO1xuICAgIH1cblxuICAgIF9jb250YWluc1BvaW50KHBvaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlY3QoKS5jb250YWluc1BvaW50KHBvaW50KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRleHQ7XG4iLCJpbXBvcnQgd2l0aEdlb21ldHJ5IGZyb20gJy4uL21peGlucy93aXRoLWdlb21ldHJ5JztcbmltcG9ydCBFbGVtZW50IGZyb20gJy4vZWxlbWVudCc7XG5pbXBvcnQgUmVjdCBmcm9tICcuLi9nZW9tZXRyeS9yZWN0JztcbmltcG9ydCB0b01hdHJpeCBmcm9tICcuLi9nZW9tZXRyeS90by1tYXRyaXgnO1xuaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4uL3V0aWwnO1xuXG5cbmNsYXNzIEltYWdlIGV4dGVuZHMgd2l0aEdlb21ldHJ5KEVsZW1lbnQsIFsgXCJyZWN0XCIgXSkge1xuICAgIGdldCBub2RlVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiSW1hZ2VcIjtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihzcmMsIHJlY3QgPSBuZXcgUmVjdCgpLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5zcmMoc3JjKTtcbiAgICAgICAgdGhpcy5yZWN0KHJlY3QpO1xuICAgIH1cblxuICAgIHNyYyh2YWx1ZSkge1xuICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zZXQoXCJzcmNcIiwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmdldChcInNyY1wiKTtcbiAgICB9XG5cbiAgICBiYm94KHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbWJpbmVkTWF0cml4ID0gdG9NYXRyaXgodGhpcy5jdXJyZW50VHJhbnNmb3JtKHRyYW5zZm9ybWF0aW9uKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWN0LmJib3goY29tYmluZWRNYXRyaXgpO1xuICAgIH1cblxuICAgIHJhd0JCb3goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWN0LmJib3goKTtcbiAgICB9XG5cbiAgICBfY29udGFpbnNQb2ludChwb2ludCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVjdC5jb250YWluc1BvaW50KHBvaW50KTtcbiAgICB9XG5cbiAgICBfaGFzRmlsbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3JjKCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbWFnZTsiLCJjb25zdCB0cmF2ZXJzYWJsZSA9IChUQmFzZSwgY2hpbGRyZW5GaWVsZCkgPT4gKFxuICAgIGNsYXNzIGV4dGVuZHMgVEJhc2Uge1xuICAgICAgICB0cmF2ZXJzZShjYWxsYmFjaykge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzW2NoaWxkcmVuRmllbGRdO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkID0gY2hpbGRyZW5baV07XG5cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQudHJhdmVyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQudHJhdmVyc2UoY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuZXhwb3J0IGRlZmF1bHQgdHJhdmVyc2FibGU7XG4iLCJpbXBvcnQgRWxlbWVudCBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHRyYXZlcnNhYmxlIGZyb20gJy4uL21peGlucy90cmF2ZXJzYWJsZSc7XG5pbXBvcnQgeyBhcHBlbmQgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBlbGVtZW50c0JvdW5kaW5nQm94IGZyb20gJy4vdXRpbHMvZWxlbWVudHMtYm91bmRpbmctYm94JztcbmltcG9ydCBlbGVtZW50c0NsaXBwZWRCb3VuZGluZ0JveCBmcm9tICcuL3V0aWxzL2VsZW1lbnRzLWNsaXBwZW5kLWJvdW5kaW5nLWJveCc7XG5cblxuY2xhc3MgR3JvdXAgZXh0ZW5kcyB0cmF2ZXJzYWJsZShFbGVtZW50LCBcImNoaWxkcmVuXCIpIHtcbiAgICBnZXQgbm9kZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcIkdyb3VwXCI7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIH1cblxuICAgIGNoaWxkcmVuQ2hhbmdlKGFjdGlvbiwgaXRlbXMsIGluZGV4KSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcihcImNoaWxkcmVuQ2hhbmdlXCIse1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBpdGVtczogaXRlbXMsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXBwZW5kKCkge1xuICAgICAgICBhcHBlbmQodGhpcy5jaGlsZHJlbiwgYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fcmVwYXJlbnQoYXJndW1lbnRzLCB0aGlzKTtcblxuICAgICAgICB0aGlzLmNoaWxkcmVuQ2hhbmdlKFwiYWRkXCIsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW5zZXJ0KGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAwLCBlbGVtZW50KTtcbiAgICAgICAgZWxlbWVudC5wYXJlbnQgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuY2hpbGRyZW5DaGFuZ2UoXCJhZGRcIiwgWyBlbGVtZW50IF0sIGluZGV4KTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnNlcnRBdChlbGVtZW50LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnNlcnQoaW5kZXgsIGVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJlbW92ZShlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKGVsZW1lbnQpO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgZWxlbWVudC5wYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbkNoYW5nZShcInJlbW92ZVwiLCBbIGVsZW1lbnQgXSwgaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmVtb3ZlQXQoaW5kZXgpIHtcbiAgICAgICAgaWYgKDAgPD0gaW5kZXggJiYgaW5kZXggPCB0aGlzLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSB0aGlzLmNoaWxkcmVuW2luZGV4XTtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5DaGFuZ2UoXCJyZW1vdmVcIiwgWyBlbGVtZW50IF0sIGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuY2hpbGRyZW47XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdGhpcy5fcmVwYXJlbnQoaXRlbXMsIG51bGwpO1xuXG4gICAgICAgIHRoaXMuY2hpbGRyZW5DaGFuZ2UoXCJyZW1vdmVcIiwgaXRlbXMsIDApO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGJib3godHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzQm91bmRpbmdCb3godGhpcy5jaGlsZHJlbiwgdHJ1ZSwgdGhpcy5jdXJyZW50VHJhbnNmb3JtKHRyYW5zZm9ybWF0aW9uKSk7XG4gICAgfVxuXG4gICAgcmF3QkJveCgpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzQm91bmRpbmdCb3godGhpcy5jaGlsZHJlbiwgZmFsc2UpO1xuICAgIH1cblxuICAgIF9jbGlwcGVkQkJveCh0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICByZXR1cm4gZWxlbWVudHNDbGlwcGVkQm91bmRpbmdCb3godGhpcy5jaGlsZHJlbiwgdGhpcy5jdXJyZW50VHJhbnNmb3JtKHRyYW5zZm9ybWF0aW9uKSk7XG4gICAgfVxuXG4gICAgY3VycmVudFRyYW5zZm9ybSh0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICByZXR1cm4gRWxlbWVudC5wcm90b3R5cGUuY3VycmVudFRyYW5zZm9ybS5jYWxsKHRoaXMsIHRyYW5zZm9ybWF0aW9uKSB8fCBudWxsO1xuICAgIH1cblxuICAgIGNvbnRhaW5zUG9pbnQocG9pbnQsIHBhcmVudFRyYW5zZm9ybSkge1xuICAgICAgICBpZiAodGhpcy52aXNpYmxlKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHRoaXMuY3VycmVudFRyYW5zZm9ybShwYXJlbnRUcmFuc2Zvcm0pO1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgY2hpbGRyZW4ubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbltpZHhdLmNvbnRhaW5zUG9pbnQocG9pbnQsIHRyYW5zZm9ybSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBfcmVwYXJlbnQoZWxlbWVudHMsIG5ld1BhcmVudCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IGVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gY2hpbGQucGFyZW50O1xuICAgICAgICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQgIT09IHRoaXMgJiYgcGFyZW50LnJlbW92ZSkge1xuICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmUoY2hpbGQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSBuZXdQYXJlbnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdyb3VwOyIsImltcG9ydCBjcmVhdGVUcmFuc2Zvcm0gZnJvbSAnLi4vZ2VvbWV0cnkvdHJhbnNmb3JtJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNsYXRlVG9Qb2ludChwb2ludCwgYmJveCwgZWxlbWVudCkge1xuICAgIGNvbnN0IHRyYW5zb2ZybSA9IGVsZW1lbnQudHJhbnNmb3JtKCkgfHwgY3JlYXRlVHJhbnNmb3JtKCk7XG4gICAgY29uc3QgbWF0cml4ID0gdHJhbnNvZnJtLm1hdHJpeCgpO1xuICAgIG1hdHJpeC5lICs9IHBvaW50LnggLSBiYm94Lm9yaWdpbi54O1xuICAgIG1hdHJpeC5mICs9IHBvaW50LnkgLSBiYm94Lm9yaWdpbi55O1xuXG4gICAgdHJhbnNvZnJtLm1hdHJpeChtYXRyaXgpO1xuICAgIGVsZW1lbnQudHJhbnNmb3JtKHRyYW5zb2ZybSk7XG59IiwiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhbGlnblN0YXJ0KHNpemUsIHJlY3QsIGFsaWduLCBheGlzLCBzaXplRmllbGQpIHtcbiAgICBsZXQgc3RhcnQ7XG4gICAgaWYgKGFsaWduID09PSBcInN0YXJ0XCIpIHtcbiAgICAgICAgc3RhcnQgPSByZWN0Lm9yaWdpbltheGlzXTtcbiAgICB9IGVsc2UgaWYgKGFsaWduID09PSBcImVuZFwiKSB7XG4gICAgICAgIHN0YXJ0ID0gcmVjdC5vcmlnaW5bYXhpc10gKyByZWN0LnNpemVbc2l6ZUZpZWxkXSAtIHNpemU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSByZWN0Lm9yaWdpbltheGlzXSArIChyZWN0LnNpemVbc2l6ZUZpZWxkXSAtIHNpemUpIC8gMjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhcnQ7XG59IiwiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhbGlnblN0YXJ0UmV2ZXJzZShzaXplLCByZWN0LCBhbGlnbiwgYXhpcywgc2l6ZUZpZWxkKSB7XG4gICAgbGV0IHN0YXJ0O1xuICAgIGlmIChhbGlnbiA9PT0gXCJzdGFydFwiKSB7XG4gICAgICAgIHN0YXJ0ID0gcmVjdC5vcmlnaW5bYXhpc10gKyByZWN0LnNpemVbc2l6ZUZpZWxkXSAtIHNpemU7XG4gICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gXCJlbmRcIikge1xuICAgICAgICBzdGFydCA9IHJlY3Qub3JpZ2luW2F4aXNdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gcmVjdC5vcmlnaW5bYXhpc10gKyAocmVjdC5zaXplW3NpemVGaWVsZF0gLSBzaXplKSAvIDI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXJ0O1xufSIsImltcG9ydCBHcm91cCBmcm9tICcuL2dyb3VwJztcbmltcG9ydCBTaXplIGZyb20gJy4uL2dlb21ldHJ5L3NpemUnO1xuaW1wb3J0IFJlY3QgZnJvbSAnLi4vZ2VvbWV0cnkvcmVjdCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vZ2VvbWV0cnkvcG9pbnQnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zZm9ybSBmcm9tICcuLi9nZW9tZXRyeS90cmFuc2Zvcm0nO1xuaW1wb3J0IHRyYW5zbGF0ZVRvUG9pbnQgZnJvbSAnLi4vYWxpZ25tZW50L3RyYW5zbGF0ZS10by1wb2ludCc7XG5pbXBvcnQgYWxpZ25TdGFydCBmcm9tICcuLi9hbGlnbm1lbnQvYWxpZ24tc3RhcnQnO1xuaW1wb3J0IGFsaWduU3RhcnRSZXZlcnNlIGZyb20gJy4uL2FsaWdubWVudC9hbGlnbi1zdGFydC1yZXZlcnNlJztcblxuY29uc3QgREVGQVVMVF9PUFRJT05TID0ge1xuICAgIGFsaWduQ29udGVudDogXCJzdGFydFwiLFxuICAgIGp1c3RpZnlDb250ZW50OiBcInN0YXJ0XCIsXG4gICAgYWxpZ25JdGVtczogXCJzdGFydFwiLFxuICAgIHNwYWNpbmc6IDAsXG4gICAgb3JpZW50YXRpb246IFwiaG9yaXpvbnRhbFwiLFxuICAgIGxpbmVTcGFjaW5nOiAwLFxuICAgIHdyYXA6IHRydWUsXG4gICAgcmV2ZXJzOiBmYWxzZVxufTtcblxuY29uc3QgZm9yRWFjaCA9IChlbGVtZW50cywgY2FsbGJhY2spID0+IHtcbiAgICBlbGVtZW50cy5mb3JFYWNoKGNhbGxiYWNrKTtcbn07XG5cbmNvbnN0IGZvckVhY2hSZXZlcnNlID0gKGVsZW1lbnRzLCBjYWxsYmFjaykgPT4ge1xuICAgIGNvbnN0IGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGlkeCA9IGxlbmd0aCAtIDE7IGlkeCA+PSAwOyBpZHgtLSkge1xuICAgICAgICBjYWxsYmFjayhlbGVtZW50c1tpZHhdLCBpZHgpO1xuICAgIH1cbn07XG5cbmNsYXNzIExheW91dCBleHRlbmRzIEdyb3VwIHtcblxuICAgIGNvbnN0cnVjdG9yKHJlY3QsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRJT05TLCBvcHRpb25zKSk7XG4gICAgICAgIHRoaXMuX3JlY3QgPSByZWN0O1xuICAgICAgICB0aGlzLl9maWVsZE1hcCA9IHt9O1xuICAgIH1cblxuICAgIHJlY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWN0ID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWN0O1xuICAgIH1cblxuICAgIF9pbml0TWFwKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBmaWVsZE1hcCA9IHRoaXMuX2ZpZWxkTWFwO1xuICAgICAgICBpZiAob3B0aW9ucy5vcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICAgICAgICAgIGZpZWxkTWFwLnNpemVGaWVsZCA9IFwid2lkdGhcIjtcbiAgICAgICAgICAgIGZpZWxkTWFwLmdyb3Vwc1NpemVGaWVsZCA9IFwiaGVpZ2h0XCI7XG4gICAgICAgICAgICBmaWVsZE1hcC5ncm91cEF4aXMgPSBcInhcIjtcbiAgICAgICAgICAgIGZpZWxkTWFwLmdyb3Vwc0F4aXMgPSBcInlcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpZWxkTWFwLnNpemVGaWVsZCA9IFwiaGVpZ2h0XCI7XG4gICAgICAgICAgICBmaWVsZE1hcC5ncm91cHNTaXplRmllbGQgPSBcIndpZHRoXCI7XG4gICAgICAgICAgICBmaWVsZE1hcC5ncm91cEF4aXMgPSBcInlcIjtcbiAgICAgICAgICAgIGZpZWxkTWFwLmdyb3Vwc0F4aXMgPSBcInhcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaCA9IGZvckVhY2hSZXZlcnNlO1xuICAgICAgICAgICAgdGhpcy5qdXN0aWZ5QWxpZ24gPSBhbGlnblN0YXJ0UmV2ZXJzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgICAgICAgICB0aGlzLmp1c3RpZnlBbGlnbiA9IGFsaWduU3RhcnQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWZsb3coKSB7XG4gICAgICAgIGlmICghdGhpcy5fcmVjdCB8fCB0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2luaXRNYXAoKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRyYW5zZm9ybSkge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0obnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5fcmVjdDtcbiAgICAgICAgY29uc3QgeyBncm91cHMsIGdyb3Vwc1NpemUgfSA9IHRoaXMuX2luaXRHcm91cHMoKTtcbiAgICAgICAgY29uc3QgeyBzaXplRmllbGQsIGdyb3Vwc1NpemVGaWVsZCwgZ3JvdXBBeGlzLCBncm91cHNBeGlzIH0gPSB0aGlzLl9maWVsZE1hcDtcbiAgICAgICAgY29uc3QgZ3JvdXBPcmlnaW4gPSBuZXcgUG9pbnQoKTtcbiAgICAgICAgY29uc3QgZWxlbWVudE9yaWdpbiA9IG5ldyBQb2ludCgpO1xuICAgICAgICBjb25zdCBzaXplID0gbmV3IFNpemUoKTtcbiAgICAgICAgbGV0IGdyb3VwU3RhcnQgPSBhbGlnblN0YXJ0KGdyb3Vwc1NpemUsIHJlY3QsIG9wdGlvbnMuYWxpZ25Db250ZW50LCBncm91cHNBeGlzLCBncm91cHNTaXplRmllbGQpO1xuICAgICAgICBsZXQgZWxlbWVudFN0YXJ0LCBncm91cCwgZ3JvdXBCb3g7XG5cbiAgICAgICAgY29uc3QgYXJyYW5nZUVsZW1lbnRzID0gKGJib3gsIGlkeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGdyb3VwLmVsZW1lbnRzW2lkeF07XG5cbiAgICAgICAgICAgIGVsZW1lbnRPcmlnaW5bZ3JvdXBBeGlzXSA9IGVsZW1lbnRTdGFydDtcbiAgICAgICAgICAgIGVsZW1lbnRPcmlnaW5bZ3JvdXBzQXhpc10gPSBhbGlnblN0YXJ0KGJib3guc2l6ZVtncm91cHNTaXplRmllbGRdLCBncm91cEJveCwgb3B0aW9ucy5hbGlnbkl0ZW1zLCBncm91cHNBeGlzLCBncm91cHNTaXplRmllbGQpO1xuICAgICAgICAgICAgdHJhbnNsYXRlVG9Qb2ludChlbGVtZW50T3JpZ2luLCBiYm94LCBlbGVtZW50KTtcbiAgICAgICAgICAgIGVsZW1lbnRTdGFydCArPSBiYm94LnNpemVbc2l6ZUZpZWxkXSArIG9wdGlvbnMuc3BhY2luZztcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKGxldCBncm91cElkeCA9IDA7IGdyb3VwSWR4IDwgZ3JvdXBzLmxlbmd0aDsgZ3JvdXBJZHgrKykge1xuICAgICAgICAgICAgZ3JvdXAgPSBncm91cHNbZ3JvdXBJZHhdO1xuICAgICAgICAgICAgZ3JvdXBPcmlnaW5bZ3JvdXBBeGlzXSA9IGVsZW1lbnRTdGFydCA9IHRoaXMuanVzdGlmeUFsaWduKGdyb3VwLnNpemUsIHJlY3QsIG9wdGlvbnMuanVzdGlmeUNvbnRlbnQsIGdyb3VwQXhpcywgc2l6ZUZpZWxkKTtcbiAgICAgICAgICAgIGdyb3VwT3JpZ2luW2dyb3Vwc0F4aXNdID0gZ3JvdXBTdGFydDtcbiAgICAgICAgICAgIHNpemVbc2l6ZUZpZWxkXSA9IGdyb3VwLnNpemU7XG4gICAgICAgICAgICBzaXplW2dyb3Vwc1NpemVGaWVsZF0gPSBncm91cC5saW5lU2l6ZTtcbiAgICAgICAgICAgIGdyb3VwQm94ID0gbmV3IFJlY3QoZ3JvdXBPcmlnaW4sIHNpemUpO1xuICAgICAgICAgICAgdGhpcy5mb3JFYWNoKGdyb3VwLmJib3hlcywgYXJyYW5nZUVsZW1lbnRzKTtcblxuICAgICAgICAgICAgZ3JvdXBTdGFydCArPSBncm91cC5saW5lU2l6ZSArIG9wdGlvbnMubGluZVNwYWNpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW9wdGlvbnMud3JhcCAmJiBncm91cC5zaXplID4gcmVjdC5zaXplW3NpemVGaWVsZF0pIHtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gcmVjdC5zaXplW3NpemVGaWVsZF0gLyBncm91cEJveC5zaXplW3NpemVGaWVsZF07XG4gICAgICAgICAgICBjb25zdCBzY2FsZWRTdGFydCA9IGdyb3VwQm94LnRvcExlZnQoKS5zY2FsZShzY2FsZSwgc2NhbGUpO1xuICAgICAgICAgICAgY29uc3Qgc2NhbGVkU2l6ZSA9IGdyb3VwQm94LnNpemVbZ3JvdXBzU2l6ZUZpZWxkXSAqIHNjYWxlO1xuICAgICAgICAgICAgY29uc3QgbmV3U3RhcnQgPSBhbGlnblN0YXJ0KHNjYWxlZFNpemUsIHJlY3QsIG9wdGlvbnMuYWxpZ25Db250ZW50LCBncm91cHNBeGlzLCBncm91cHNTaXplRmllbGQpO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gY3JlYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICBpZiAoZ3JvdXBBeGlzID09PSBcInhcIikge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybS50cmFuc2xhdGUocmVjdC5vcmlnaW4ueCAtIHNjYWxlZFN0YXJ0LngsIG5ld1N0YXJ0IC0gc2NhbGVkU3RhcnQueSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybS50cmFuc2xhdGUobmV3U3RhcnQgLSBzY2FsZWRTdGFydC54LCByZWN0Lm9yaWdpbi55IC0gc2NhbGVkU3RhcnQueSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFuc2Zvcm0uc2NhbGUoc2NhbGUsIHNjYWxlKTtcblxuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9pbml0R3JvdXBzKCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIGNoaWxkcmVuIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGxpbmVTcGFjaW5nLCB3cmFwLCBzcGFjaW5nIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBzaXplRmllbGQgPSB0aGlzLl9maWVsZE1hcC5zaXplRmllbGQ7XG4gICAgICAgIGxldCBncm91cCA9IHRoaXMuX25ld0dyb3VwKCk7XG4gICAgICAgIGNvbnN0IGdyb3VwcyA9IFtdO1xuICAgICAgICBjb25zdCBhZGRHcm91cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZ3JvdXBzLnB1c2goZ3JvdXApO1xuICAgICAgICAgICAgZ3JvdXBzU2l6ZSArPSBncm91cC5saW5lU2l6ZSArIGxpbmVTcGFjaW5nO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgZ3JvdXBzU2l6ZSA9IC1saW5lU3BhY2luZztcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBjaGlsZHJlbi5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBsZXQgZWxlbWVudCA9IGNoaWxkcmVuW2lkeF07XG4gICAgICAgICAgICBsZXQgYmJveCA9IGNoaWxkcmVuW2lkeF0uY2xpcHBlZEJCb3goKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LnZpc2libGUoKSAmJiBiYm94KSB7XG4gICAgICAgICAgICAgICAgaWYgKHdyYXAgJiYgZ3JvdXAuc2l6ZSArIGJib3guc2l6ZVtzaXplRmllbGRdICsgc3BhY2luZyA+IHRoaXMuX3JlY3Quc2l6ZVtzaXplRmllbGRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChncm91cC5iYm94ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRUb0dyb3VwKGdyb3VwLCBiYm94LCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyb3VwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cCA9IHRoaXMuX25ld0dyb3VwKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAgPSB0aGlzLl9uZXdHcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkVG9Hcm91cChncm91cCwgYmJveCwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRUb0dyb3VwKGdyb3VwLCBiYm94LCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ3JvdXAuYmJveGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgYWRkR3JvdXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBncm91cHM6IGdyb3VwcyxcbiAgICAgICAgICAgIGdyb3Vwc1NpemU6IGdyb3Vwc1NpemVcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfYWRkVG9Hcm91cChncm91cCwgYmJveCwgZWxlbWVudCkge1xuICAgICAgICBncm91cC5zaXplICs9IGJib3guc2l6ZVt0aGlzLl9maWVsZE1hcC5zaXplRmllbGRdICsgdGhpcy5vcHRpb25zLnNwYWNpbmc7XG4gICAgICAgIGdyb3VwLmxpbmVTaXplID0gTWF0aC5tYXgoYmJveC5zaXplW3RoaXMuX2ZpZWxkTWFwLmdyb3Vwc1NpemVGaWVsZF0sIGdyb3VwLmxpbmVTaXplKTtcbiAgICAgICAgZ3JvdXAuYmJveGVzLnB1c2goYmJveCk7XG4gICAgICAgIGdyb3VwLmVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gICAgfVxuXG4gICAgX25ld0dyb3VwKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGluZVNpemU6IDAsXG4gICAgICAgICAgICBzaXplOiAtdGhpcy5vcHRpb25zLnNwYWNpbmcsXG4gICAgICAgICAgICBiYm94ZXM6IFtdLFxuICAgICAgICAgICAgZWxlbWVudHM6IFtdXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMYXlvdXQ7IiwiaW1wb3J0IHdpdGhHZW9tZXRyeSBmcm9tICcuLi9taXhpbnMvd2l0aC1nZW9tZXRyeSc7XG5pbXBvcnQgRWxlbWVudCBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHBhaW50YWJsZSBmcm9tICcuLi9taXhpbnMvcGFpbnRhYmxlJztcbmltcG9ydCBtZWFzdXJhYmxlIGZyb20gJy4uL21peGlucy9tZWFzdXJhYmxlJztcbmltcG9ydCBHZW9tZXRyeVJlY3QgZnJvbSAnLi4vZ2VvbWV0cnkvcmVjdCc7XG5pbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cblxuY2xhc3MgUmVjdCBleHRlbmRzIHBhaW50YWJsZShtZWFzdXJhYmxlKHdpdGhHZW9tZXRyeShFbGVtZW50KSkpIHtcbiAgICBnZXQgbm9kZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcIlJlY3RcIjtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihnZW9tZXRyeSA9IG5ldyBHZW9tZXRyeVJlY3QoKSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkoZ2VvbWV0cnkpO1xuXG4gICAgICAgIGlmICghZGVmaW5lZCh0aGlzLm9wdGlvbnMuc3Ryb2tlKSkge1xuICAgICAgICAgICAgdGhpcy5zdHJva2UoXCIjMDAwXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2Jib3gobWF0cml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZW9tZXRyeS5iYm94KG1hdHJpeCk7XG4gICAgfVxuXG4gICAgcmF3QkJveCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dlb21ldHJ5LmJib3goKTtcbiAgICB9XG5cbiAgICBfY29udGFpbnNQb2ludChwb2ludCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2VvbWV0cnkuY29udGFpbnNQb2ludChwb2ludCk7XG4gICAgfVxuXG4gICAgX2lzT25QYXRoKHBvaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdlb21ldHJ5KCkuX2lzT25QYXRoKHBvaW50LCB0aGlzLm9wdGlvbnMuc3Ryb2tlLndpZHRoIC8gMik7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWN0O1xuIiwiaW1wb3J0IHRyYW5zbGF0ZVRvUG9pbnQgZnJvbSAnLi90cmFuc2xhdGUtdG8tcG9pbnQnO1xuaW1wb3J0IGFsaWduU3RhcnQgZnJvbSAnLi9hbGlnbi1zdGFydCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFsaWduRWxlbWVudHMoZWxlbWVudHMsIHJlY3QsIGFsaWdubWVudCwgYXhpcywgc2l6ZUZpZWxkKSB7XG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZWxlbWVudHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICBjb25zdCBiYm94ID0gZWxlbWVudHNbaWR4XS5jbGlwcGVkQkJveCgpO1xuICAgICAgICBpZiAoYmJveCkge1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBiYm94Lm9yaWdpbi5jbG9uZSgpO1xuICAgICAgICAgICAgcG9pbnRbYXhpc10gPSBhbGlnblN0YXJ0KGJib3guc2l6ZVtzaXplRmllbGRdLCByZWN0LCBhbGlnbm1lbnQgfHwgXCJzdGFydFwiLCBheGlzLCBzaXplRmllbGQpO1xuICAgICAgICAgICAgdHJhbnNsYXRlVG9Qb2ludChwb2ludCwgYmJveCwgZWxlbWVudHNbaWR4XSk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiXG5pbXBvcnQgYWxpZ25FbGVtZW50cyBmcm9tICcuL2FsaWduLWVsZW1lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWxpZ24oZWxlbWVudHMsIHJlY3QsIGFsaWdubWVudCkge1xuICAgIGFsaWduRWxlbWVudHMoZWxlbWVudHMsIHJlY3QsIGFsaWdubWVudCwgXCJ4XCIsIFwid2lkdGhcIik7XG59IiwiaW1wb3J0IGFsaWduRWxlbWVudHMgZnJvbSAnLi9hbGlnbi1lbGVtZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZBbGlnbihlbGVtZW50cywgcmVjdCwgYWxpZ25tZW50KSB7XG4gICAgYWxpZ25FbGVtZW50cyhlbGVtZW50cywgcmVjdCwgYWxpZ25tZW50LCBcInlcIiwgXCJoZWlnaHRcIik7XG59IiwiaW1wb3J0IFBvaW50IGZyb20gJy4uL2dlb21ldHJ5L3BvaW50JztcbmltcG9ydCB0cmFuc2xhdGVUb1BvaW50IGZyb20gJy4vdHJhbnNsYXRlLXRvLXBvaW50JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhY2tFbGVtZW50cyhlbGVtZW50cywgc3RhY2tBeGlzLCBvdGhlckF4aXMsIHNpemVGaWVsZCkge1xuICAgIGlmIChlbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbiA9IG5ldyBQb2ludCgpO1xuICAgICAgICBsZXQgcHJldmlvdXNCQm94ID0gZWxlbWVudHNbMF0uYmJveDtcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAxOyBpZHggPCBlbGVtZW50cy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBsZXQgZWxlbWVudCA9IGVsZW1lbnRzW2lkeF0uZWxlbWVudDtcbiAgICAgICAgICAgIGxldCBiYm94ID0gZWxlbWVudHNbaWR4XS5iYm94O1xuICAgICAgICAgICAgb3JpZ2luW3N0YWNrQXhpc10gPSBwcmV2aW91c0JCb3gub3JpZ2luW3N0YWNrQXhpc10gKyBwcmV2aW91c0JCb3guc2l6ZVtzaXplRmllbGRdO1xuICAgICAgICAgICAgb3JpZ2luW290aGVyQXhpc10gPSBiYm94Lm9yaWdpbltvdGhlckF4aXNdO1xuICAgICAgICAgICAgdHJhbnNsYXRlVG9Qb2ludChvcmlnaW4sIGJib3gsIGVsZW1lbnQpO1xuICAgICAgICAgICAgYmJveC5vcmlnaW5bc3RhY2tBeGlzXSA9IG9yaWdpbltzdGFja0F4aXNdO1xuICAgICAgICAgICAgcHJldmlvdXNCQm94ID0gYmJveDtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdGFja0VsZW1lbnRzKGVsZW1lbnRzKSB7XG4gICAgY29uc3Qgc3RhY2tFbGVtZW50cyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZWxlbWVudHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICBsZXQgZWxlbWVudCA9IGVsZW1lbnRzW2lkeF07XG4gICAgICAgIGxldCBiYm94ID0gZWxlbWVudC5jbGlwcGVkQkJveCgpO1xuICAgICAgICBpZiAoYmJveCkge1xuICAgICAgICAgICAgc3RhY2tFbGVtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGJib3g6IGJib3hcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YWNrRWxlbWVudHM7XG59IiwiaW1wb3J0IHN0YWNrRWxlbWVudHMgZnJvbSAnLi9zdGFjay1lbGVtZW50cyc7XG5pbXBvcnQgY3JlYXRlU3RhY2tFbGVtZW50cyBmcm9tICcuL2NyZWF0ZS1zdGFjay1lbGVtZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YWNrKGVsZW1lbnRzKSB7XG4gICAgc3RhY2tFbGVtZW50cyhjcmVhdGVTdGFja0VsZW1lbnRzKGVsZW1lbnRzKSwgXCJ4XCIsIFwieVwiLCBcIndpZHRoXCIpO1xufSIsImltcG9ydCBzdGFja0VsZW1lbnRzIGZyb20gJy4vc3RhY2stZWxlbWVudHMnO1xuaW1wb3J0IGNyZWF0ZVN0YWNrRWxlbWVudHMgZnJvbSAnLi9jcmVhdGUtc3RhY2stZWxlbWVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2U3RhY2soZWxlbWVudHMpIHtcbiAgICBzdGFja0VsZW1lbnRzKGNyZWF0ZVN0YWNrRWxlbWVudHMoZWxlbWVudHMpLCBcInlcIiwgXCJ4XCIsIFwiaGVpZ2h0XCIpO1xufSIsImltcG9ydCB0cmFuc2xhdGVUb1BvaW50IGZyb20gJy4vdHJhbnNsYXRlLXRvLXBvaW50JztcbmltcG9ydCBzdGFja0VsZW1lbnRzIGZyb20gJy4vc3RhY2stZWxlbWVudHMnO1xuXG5mdW5jdGlvbiBnZXRTdGFja3MoZWxlbWVudHMsIHJlY3QsIHNpemVGaWVsZCkge1xuICAgIGNvbnN0IG1heFNpemUgPSByZWN0LnNpemVbc2l6ZUZpZWxkXTtcbiAgICBjb25zdCBzdGFja3MgPSBbXTtcbiAgICBsZXQgc3RhY2sgPSBbXTtcbiAgICBsZXQgc3RhY2tTaXplID0gMDtcbiAgICBsZXQgZWxlbWVudCwgYmJveDtcblxuICAgIGNvbnN0IGFkZEVsZW1lbnRUb1N0YWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0YWNrLnB1c2goe1xuICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgICAgIGJib3g6IGJib3hcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVsZW1lbnRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRzW2lkeF07XG5cbiAgICAgICAgYmJveCA9IGVsZW1lbnQuY2xpcHBlZEJCb3goKTtcbiAgICAgICAgaWYgKGJib3gpIHtcbiAgICAgICAgICAgIGxldCBzaXplID0gYmJveC5zaXplW3NpemVGaWVsZF07XG4gICAgICAgICAgICBpZiAoc3RhY2tTaXplICsgc2l6ZSA+IG1heFNpemUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrcy5wdXNoKHN0YWNrKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgYWRkRWxlbWVudFRvU3RhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2tTaXplID0gc2l6ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhZGRFbGVtZW50VG9TdGFjaygpO1xuICAgICAgICAgICAgICAgICAgICBzdGFja3MucHVzaChzdGFjayk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrID0gW107XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrU2l6ZSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRFbGVtZW50VG9TdGFjaygpO1xuICAgICAgICAgICAgICAgIHN0YWNrU2l6ZSArPSBzaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICBzdGFja3MucHVzaChzdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YWNrcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd3JhcEVsZW1lbnRzKGVsZW1lbnRzLCByZWN0LCBheGlzLCBvdGhlckF4aXMsIHNpemVGaWVsZCkge1xuICAgIGNvbnN0IHN0YWNrcyA9IGdldFN0YWNrcyhlbGVtZW50cywgcmVjdCwgc2l6ZUZpZWxkKTtcbiAgICBjb25zdCBvcmlnaW4gPSByZWN0Lm9yaWdpbi5jbG9uZSgpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc3RhY2tzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgbGV0IHN0YWNrID0gc3RhY2tzW2lkeF07XG4gICAgICAgIGxldCBzdGFydEVsZW1lbnQgPSBzdGFja1swXTtcbiAgICAgICAgb3JpZ2luW290aGVyQXhpc10gPSBzdGFydEVsZW1lbnQuYmJveC5vcmlnaW5bb3RoZXJBeGlzXTtcbiAgICAgICAgdHJhbnNsYXRlVG9Qb2ludChvcmlnaW4sIHN0YXJ0RWxlbWVudC5iYm94LCBzdGFydEVsZW1lbnQuZWxlbWVudCk7XG4gICAgICAgIHN0YXJ0RWxlbWVudC5iYm94Lm9yaWdpbltheGlzXSA9IG9yaWdpbltheGlzXTtcbiAgICAgICAgc3RhY2tFbGVtZW50cyhzdGFjaywgYXhpcywgb3RoZXJBeGlzLCBzaXplRmllbGQpO1xuICAgICAgICByZXN1bHQucHVzaChbXSk7XG4gICAgICAgIGZvciAobGV0IGVsZW1lbnRJZHggPSAwOyBlbGVtZW50SWR4IDwgc3RhY2subGVuZ3RoOyBlbGVtZW50SWR4KyspIHtcbiAgICAgICAgICAgIHJlc3VsdFtpZHhdLnB1c2goc3RhY2tbZWxlbWVudElkeF0uZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgd3JhcEVsZW1lbnRzIGZyb20gJy4vd3JhcC1lbGVtZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdyYXAoZWxlbWVudHMsIHJlY3QpIHtcbiAgICByZXR1cm4gd3JhcEVsZW1lbnRzKGVsZW1lbnRzLCByZWN0LCBcInhcIiwgXCJ5XCIsIFwid2lkdGhcIik7XG59IiwiaW1wb3J0IHdyYXBFbGVtZW50cyBmcm9tICcuL3dyYXAtZWxlbWVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2V3JhcChlbGVtZW50cywgcmVjdCkge1xuICAgIHJldHVybiB3cmFwRWxlbWVudHMoZWxlbWVudHMsIHJlY3QsIFwieVwiLCBcInhcIiwgXCJoZWlnaHRcIik7XG59IiwiaW1wb3J0IGNyZWF0ZVRyYW5zZm9ybSBmcm9tICcuLi9nZW9tZXRyeS90cmFuc2Zvcm0nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaXQoZWxlbWVudCwgcmVjdCkge1xuICAgIGNvbnN0IGJib3ggPSBlbGVtZW50LmNsaXBwZWRCQm94KCk7XG4gICAgaWYgKGJib3gpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudFNpemUgPSBiYm94LnNpemU7XG4gICAgICAgIGNvbnN0IHJlY3RTaXplID0gcmVjdC5zaXplO1xuICAgICAgICBpZiAocmVjdFNpemUud2lkdGggPCBlbGVtZW50U2l6ZS53aWR0aCB8fCByZWN0U2l6ZS5oZWlnaHQgPCBlbGVtZW50U2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gTWF0aC5taW4ocmVjdFNpemUud2lkdGggLyBlbGVtZW50U2l6ZS53aWR0aCwgcmVjdFNpemUuaGVpZ2h0IC8gZWxlbWVudFNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGVsZW1lbnQudHJhbnNmb3JtKCkgfHwgY3JlYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICB0cmFuc2Zvcm0uc2NhbGUoc2NhbGUsIHNjYWxlKTtcbiAgICAgICAgICAgIGVsZW1lbnQudHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IEVsZW1lbnRzQXJyYXkgZnJvbSAnLi4vc2hhcGVzL2VsZW1lbnRzLWFycmF5JztcblxuY2xhc3MgU3RvcHNBcnJheSBleHRlbmRzIEVsZW1lbnRzQXJyYXkge1xuICAgIF9jaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMub3B0aW9uc0NoYW5nZSh7XG4gICAgICAgICAgICBmaWVsZDogXCJzdG9wc1wiXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RvcHNBcnJheTsiLCJpbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmZ1bmN0aW9uIG9wdGlvbnNBY2Nlc3NvcihuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZ2V0KG5hbWUpO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGRlZmluZU9wdGlvbnNBY2Nlc3NvcnMoZm4sIG5hbWVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmbltuYW1lc1tpXV0gPSBvcHRpb25zQWNjZXNzb3IobmFtZXNbaV0pO1xuICAgIH1cbn1cblxuY29uc3Qgd2l0aE9wdGlvbnMgPSAoVEJhc2UsIG5hbWVzKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gY2xhc3MgZXh0ZW5kcyBUQmFzZSB7fTtcbiAgICBkZWZpbmVPcHRpb25zQWNjZXNzb3JzKHJlc3VsdC5wcm90b3R5cGUsIG5hbWVzKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoT3B0aW9ucztcbiIsImltcG9ydCBPcHRpb25zU3RvcmUgZnJvbSAnLi4vY29yZS9vcHRpb25zLXN0b3JlJztcbmltcG9ydCB3aXRoT3B0aW9ucyBmcm9tICcuLi9taXhpbnMvd2l0aC1vcHRpb25zJztcbmltcG9ydCBIYXNPYnNlcnZlcnMgZnJvbSAnLi4vY29yZS9oYXMtb2JzZXJ2ZXJzJztcbmltcG9ydCB7IGRlZmluZWQgfSBmcm9tICcuLi91dGlsJztcblxuXG5jb25zdCBvcHRpb25zID0gWyBcIm9mZnNldFwiLCBcImNvbG9yXCIsIFwib3BhY2l0eVwiIF07XG5cbmNsYXNzIEdyYWRpZW50U3RvcCBleHRlbmRzIHdpdGhPcHRpb25zKEhhc09ic2VydmVycywgb3B0aW9ucykge1xuICAgIGNvbnN0cnVjdG9yKG9mZnNldCwgY29sb3IsIG9wYWNpdHkpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBuZXcgT3B0aW9uc1N0b3JlKHtcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgb3BhY2l0eTogZGVmaW5lZChvcGFjaXR5KSA/IG9wYWNpdHkgOiAxXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucy5hZGRPYnNlcnZlcih0aGlzKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlKGFyZykge1xuICAgICAgICBpZiAoZGVmaW5lZChhcmcpKSB7XG4gICAgICAgICAgICBsZXQgc3RvcDtcbiAgICAgICAgICAgIGlmIChhcmcgaW5zdGFuY2VvZiBHcmFkaWVudFN0b3ApIHtcbiAgICAgICAgICAgICAgICBzdG9wID0gYXJnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhcmcubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIHN0b3AgPSBuZXcgR3JhZGllbnRTdG9wKGFyZ1swXSwgYXJnWzFdLCBhcmdbMl0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdG9wID0gbmV3IEdyYWRpZW50U3RvcChhcmcub2Zmc2V0LCBhcmcuY29sb3IsIGFyZy5vcGFjaXR5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHN0b3A7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdyYWRpZW50U3RvcDtcbiIsImltcG9ydCBTdG9wc0FycmF5IGZyb20gJy4vc3RvcHMtYXJyYXknO1xuaW1wb3J0IEdyYWRpZW50U3RvcCBmcm9tICcuL2dyYWRpZW50LXN0b3AnO1xuaW1wb3J0IEhhc09ic2VydmVycyBmcm9tICcuLi9jb3JlL2hhcy1vYnNlcnZlcnMnO1xuaW1wb3J0IHsgZGVmaW5lZCwgZGVmaW5pdGlvbklkIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNsYXNzIEdyYWRpZW50IGV4dGVuZHMgSGFzT2JzZXJ2ZXJzIHtcbiAgICBnZXQgbm9kZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcIkdyYWRpZW50XCI7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5zdG9wcyA9IG5ldyBTdG9wc0FycmF5KHRoaXMuX2NyZWF0ZVN0b3BzKG9wdGlvbnMuc3RvcHMpKTtcbiAgICAgICAgdGhpcy5zdG9wcy5hZGRPYnNlcnZlcih0aGlzKTtcbiAgICAgICAgdGhpcy5fdXNlclNwYWNlID0gb3B0aW9ucy51c2VyU3BhY2U7XG4gICAgICAgIHRoaXMuaWQgPSBkZWZpbml0aW9uSWQoKTtcbiAgICB9XG5cbiAgICB1c2VyU3BhY2UodmFsdWUpIHtcbiAgICAgICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLl91c2VyU3BhY2UgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc0NoYW5nZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fdXNlclNwYWNlO1xuICAgIH1cblxuICAgIF9jcmVhdGVTdG9wcyhzdG9wcyA9IFtdKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBzdG9wcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChHcmFkaWVudFN0b3AuY3JlYXRlKHN0b3BzW2lkeF0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgYWRkU3RvcChvZmZzZXQsIGNvbG9yLCBvcGFjaXR5KSB7XG4gICAgICAgIHRoaXMuc3RvcHMucHVzaChuZXcgR3JhZGllbnRTdG9wKG9mZnNldCwgY29sb3IsIG9wYWNpdHkpKTtcbiAgICB9XG5cbiAgICByZW1vdmVTdG9wKHN0b3ApIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnN0b3BzLmluZGV4T2Yoc3RvcCk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcHRpb25zQ2hhbmdlKGUpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKFwib3B0aW9uc0NoYW5nZVwiLCB7XG4gICAgICAgICAgICBmaWVsZDogXCJncmFkaWVudFwiICsgKGUgPyBcIi5cIiArIGUuZmllbGQgOiBcIlwiKSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdlb21ldHJ5Q2hhbmdlKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnNDaGFuZ2UoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdyYWRpZW50O1xuIiwiaW1wb3J0IHdpdGhQb2ludHMgZnJvbSAnLi4vbWl4aW5zL3dpdGgtcG9pbnRzJztcbmltcG9ydCBQb2ludCBmcm9tICcuLi9nZW9tZXRyeS9wb2ludCc7XG5pbXBvcnQgR3JhZGllbnQgZnJvbSAnLi9ncmFkaWVudCc7XG5cblxuY29uc3QgcG9pbnRzID0gWyBcInN0YXJ0XCIsIFwiZW5kXCIgXTtcblxuY2xhc3MgTGluZWFyR3JhZGllbnQgZXh0ZW5kcyB3aXRoUG9pbnRzKEdyYWRpZW50LCBwb2ludHMpIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5zdGFydChvcHRpb25zLnN0YXJ0IHx8IG5ldyBQb2ludCgpKTtcbiAgICAgICAgdGhpcy5lbmQob3B0aW9ucy5lbmQgfHwgbmV3IFBvaW50KDEsIDApKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpbmVhckdyYWRpZW50O1xuIiwiaW1wb3J0IHdpdGhQb2ludHMgZnJvbSAnLi4vbWl4aW5zL3dpdGgtcG9pbnRzJztcbmltcG9ydCBQb2ludCBmcm9tICcuLi9nZW9tZXRyeS9wb2ludCc7XG5pbXBvcnQgR3JhZGllbnQgZnJvbSAnLi9ncmFkaWVudCc7XG5pbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cblxuY2xhc3MgUmFkaWFsR3JhZGllbnQgZXh0ZW5kcyB3aXRoUG9pbnRzKEdyYWRpZW50LCBbIFwiY2VudGVyXCIgXSkge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmNlbnRlcihvcHRpb25zLmNlbnRlciB8fCBuZXcgUG9pbnQoKSk7XG4gICAgICAgIHRoaXMuX3JhZGl1cyA9IGRlZmluZWQob3B0aW9ucy5yYWRpdXMpID8gb3B0aW9ucy5yYWRpdXMgOiAxO1xuICAgICAgICB0aGlzLl9mYWxsYmFja0ZpbGwgPSBvcHRpb25zLmZhbGxiYWNrRmlsbDtcbiAgICB9XG5cbiAgICByYWRpdXModmFsdWUpIHtcbiAgICAgICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9yYWRpdXMgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3JhZGl1cztcbiAgICB9XG5cbiAgICBmYWxsYmFja0ZpbGwodmFsdWUpIHtcbiAgICAgICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9mYWxsYmFja0ZpbGwgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc0NoYW5nZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fZmFsbGJhY2tGaWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFkaWFsR3JhZGllbnQ7XG4iLCJleHBvcnQgZnVuY3Rpb24gc3dpbmcocG9zaXRpb24pIHtcbiAgICByZXR1cm4gMC41IC0gTWF0aC5jb3MocG9zaXRpb24gKiBNYXRoLlBJKSAvIDI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXIocG9zaXRpb24pIHtcbiAgICByZXR1cm4gcG9zaXRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlYXNlT3V0RWxhc3RpYyhwb3NpdGlvbiwgdGltZSwgc3RhcnQsIGRpZmYpIHtcbiAgICBsZXQgcyA9IDEuNzAxNTgsXG4gICAgICAgIHAgPSAwLFxuICAgICAgICBhID0gZGlmZjtcblxuICAgIGlmIChwb3NpdGlvbiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RhcnQ7XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uID09PSAxKSB7XG4gICAgICAgIHJldHVybiBzdGFydCArIGRpZmY7XG4gICAgfVxuXG4gICAgaWYgKCFwKSB7XG4gICAgICAgIHAgPSAwLjU7XG4gICAgfVxuXG4gICAgaWYgKGEgPCBNYXRoLmFicyhkaWZmKSkge1xuICAgICAgICBhID0gZGlmZjtcbiAgICAgICAgcyA9IHAgLyA0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbihkaWZmIC8gYSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGEgKiBNYXRoLnBvdygyLCAtMTAgKiBwb3NpdGlvbikgKlxuICAgICAgICAgICBNYXRoLnNpbigoTnVtYmVyKHBvc2l0aW9uKSAtIHMpICogKDEuMSAqIE1hdGguUEkpIC8gcCkgKyBkaWZmICsgc3RhcnQ7XG59XG4iLCJpbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmxldCBpbnN0YW5jZTtcblxuY2xhc3MgQW5pbWF0aW9uRmFjdG9yeSBleHRlbmRzIENsYXNzIHtcbiAgICBzdGF0aWMgZ2V0IGN1cnJlbnQoKSB7XG4gICAgICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGluc3RhbmNlID0gbmV3IEFuaW1hdGlvbkZhY3RvcnkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLl9pdGVtcyA9IFtdO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyKG5hbWUsIHR5cGUpIHtcbiAgICAgICAgdGhpcy5faXRlbXMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjcmVhdGUoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuX2l0ZW1zO1xuICAgICAgICBsZXQgbWF0Y2g7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50eXBlKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gb3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1zW2ldLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgbWF0Y2gudHlwZShlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQW5pbWF0aW9uRmFjdG9yeTtcbiIsImltcG9ydCAqIGFzIGVhc2luZ0Z1bmN0aW9ucyBmcm9tICcuL2Vhc2luZy1mdW5jdGlvbnMnO1xuaW1wb3J0IHsgbGltaXRWYWx1ZSwgbm93IH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBhbmltYXRpb25GcmFtZSwgQ2xhc3MgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IEFuaW1hdGlvbkZhY3RvcnkgZnJvbSAnLi9hbmltYXRpb24tZmFjdG9yeSc7XG5cbmNsYXNzIEFuaW1hdGlvbiBleHRlbmRzIENsYXNzIHtcbiAgICBzdGF0aWMgY3JlYXRlKHR5cGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIEFuaW1hdGlvbkZhY3RvcnkuY3VycmVudC5jcmVhdGUodHlwZSwgZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zIHx8IHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiA1MDAsXG4gICAgICAgICAgICBlYXNpbmc6IFwic3dpbmdcIlxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHNldCBvcHRpb25zKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9XG5cbiAgICBzZXR1cCgpIHt9XG4gICAgc3RlcCgpIHt9XG5cbiAgICBwbGF5KCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IGR1cmF0aW9uLCBkZWxheSA9IDAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGVhc2luZyA9IGVhc2luZ0Z1bmN0aW9uc1tvcHRpb25zLmVhc2luZ107XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gbm93KCkgKyBkZWxheTtcbiAgICAgICAgY29uc3QgZmluaXNoID0gc3RhcnQgKyBkdXJhdGlvbjtcblxuICAgICAgICBpZiAoZHVyYXRpb24gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RlcCgxKTtcbiAgICAgICAgICAgIHRoaXMuYWJvcnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvb3AgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YWxsVGltZSA9IG5vdygpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWUgPSBsaW1pdFZhbHVlKHdhbGxUaW1lIC0gc3RhcnQsIDAsIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aW1lIC8gZHVyYXRpb247XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVhc2luZ1Bvc2l0aW9uID0gZWFzaW5nKHBvc2l0aW9uLCB0aW1lLCAwLCAxLCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGVwKGVhc2luZ1Bvc2l0aW9uKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAod2FsbFRpbWUgPCBmaW5pc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGxvb3AoKTtcbiAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFib3J0KCkge1xuICAgICAgICB0aGlzLl9zdG9wcGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmFib3J0KCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBbmltYXRpb247XG4iLCJpbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyBNdWx0aVBhdGggfSBmcm9tICcuLi9zaGFwZXMvcGF0aCc7XG5pbXBvcnQgcGFyc2VQYXRoIGZyb20gJy4vcGFyc2UtcGF0aCc7XG5cbmxldCBpbnN0YW5jZTtcblxuY2xhc3MgUGF0aFBhcnNlciBleHRlbmRzIENsYXNzIHtcbiAgICBzdGF0aWMgZ2V0IGN1cnJlbnQoKSB7XG4gICAgICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGluc3RhbmNlID0gbmV3IFBhdGhQYXJzZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBwYXJzZShzdHIsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbXVsdGlQYXRoID0gbmV3IE11bHRpUGF0aChvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlUGF0aChtdWx0aVBhdGgsIHN0cik7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYXRoUGFyc2VyO1xuXG4iLCJpbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNsYXNzIEJhc2VOb2RlIGV4dGVuZHMgQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKHNyY0VsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmNoaWxkTm9kZXMgPSBbXTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuXG4gICAgICAgIGlmIChzcmNFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnNyY0VsZW1lbnQgPSBzcmNFbGVtZW50O1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5zcmNFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnNyY0VsZW1lbnQucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGROb2RlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jaGlsZE5vZGVzW2ldLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBsb2FkKCkge31cblxuICAgIG9ic2VydmUoKSB7XG4gICAgICAgIGlmICh0aGlzLnNyY0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc3JjRWxlbWVudC5hZGRPYnNlcnZlcih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFwcGVuZChub2RlKSB7XG4gICAgICAgIHRoaXMuY2hpbGROb2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICBub2RlLnBhcmVudCA9IHRoaXM7XG4gICAgfVxuXG4gICAgaW5zZXJ0QXQobm9kZSwgcG9zKSB7XG4gICAgICAgIHRoaXMuY2hpbGROb2Rlcy5zcGxpY2UocG9zLCAwLCBub2RlKTtcbiAgICAgICAgbm9kZS5wYXJlbnQgPSB0aGlzO1xuICAgIH1cblxuICAgIHJlbW92ZShpbmRleCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgZW5kID0gaW5kZXggKyBjb3VudDtcbiAgICAgICAgZm9yIChsZXQgaSA9IGluZGV4OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGROb2Rlc1tpXS5yZW1vdmVTZWxmKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGlsZE5vZGVzLnNwbGljZShpbmRleCwgY291bnQpO1xuICAgIH1cblxuICAgIHJlbW92ZVNlbGYoKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKDAsIHRoaXMuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgIH1cblxuICAgIGludmFsaWRhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuaW52YWxpZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2VvbWV0cnlDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgIH1cblxuICAgIG9wdGlvbnNDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgIH1cblxuICAgIGNoaWxkcmVuQ2hhbmdlKGUpIHtcbiAgICAgICAgaWYgKGUuYWN0aW9uID09PSBcImFkZFwiKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWQoZS5pdGVtcywgZS5pbmRleCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5hY3Rpb24gPT09IFwicmVtb3ZlXCIpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGUuaW5kZXgsIGUuaXRlbXMubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmFzZU5vZGU7IiwiaW1wb3J0IEdyb3VwIGZyb20gJy4uL3NoYXBlcy9ncm91cCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vZ2VvbWV0cnkvcG9pbnQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyBldmVudEVsZW1lbnQsIGV2ZW50Q29vcmRpbmF0ZXMsIGVsZW1lbnRQYWRkaW5nLCBlbGVtZW50U2NhbGUsIGVsZW1lbnRTaXplLCBlbGVtZW50T2Zmc2V0IH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IGV2ZW50cyA9IFtcbiAgICBcImNsaWNrXCIsXG4gICAgXCJtb3VzZWVudGVyXCIsXG4gICAgXCJtb3VzZWxlYXZlXCIsXG4gICAgXCJtb3VzZW1vdmVcIixcbiAgICBcInJlc2l6ZVwiXG5dO1xuXG5jbGFzcyBTdXJmYWNlIGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLmVsZW1lbnQuX2tlbmRvRXhwb3J0VmlzdWFsID0gdGhpcy5leHBvcnRWaXN1YWwuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLl9jbGljayA9IHRoaXMuX2hhbmRsZXIoXCJjbGlja1wiKTtcbiAgICAgICAgdGhpcy5fbW91c2VlbnRlciA9IHRoaXMuX2hhbmRsZXIoXCJtb3VzZWVudGVyXCIpO1xuICAgICAgICB0aGlzLl9tb3VzZWxlYXZlID0gdGhpcy5faGFuZGxlcihcIm1vdXNlbGVhdmVcIik7XG4gICAgICAgIHRoaXMuX21vdXNlbW92ZSA9IHRoaXMuX2hhbmRsZXIoXCJtb3VzZW1vdmVcIik7XG5cbiAgICAgICAgdGhpcy5fdmlzdWFsID0gbmV3IEdyb3VwKCk7XG5cbiAgICAgICAgZWxlbWVudFNpemUoZWxlbWVudCwgdGhpcy5vcHRpb25zKTtcblxuICAgICAgICB0aGlzLmJpbmQoZXZlbnRzLCB0aGlzLm9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuX2VuYWJsZVRyYWNraW5nKCk7XG4gICAgfVxuXG4gICAgZHJhdyhlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX3Zpc3VhbC5jaGlsZHJlbi5wdXNoKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl92aXN1YWwuY2hpbGRyZW4gPSBbXTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLl92aXN1YWwgPSBudWxsO1xuICAgICAgICB0aGlzLmVsZW1lbnQuX2tlbmRvRXhwb3J0VmlzdWFsID0gbnVsbDtcbiAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICB9XG5cbiAgICBldmVudFRhcmdldChlKSB7XG4gICAgICAgIGxldCBkb21Ob2RlID0gZXZlbnRFbGVtZW50KGUpO1xuICAgICAgICBsZXQgbm9kZTtcblxuICAgICAgICB3aGlsZSAoIW5vZGUgJiYgZG9tTm9kZSkge1xuICAgICAgICAgICAgbm9kZSA9IGRvbU5vZGUuX2tlbmRvTm9kZTtcbiAgICAgICAgICAgIGlmIChkb21Ob2RlID09PSB0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZG9tTm9kZSA9IGRvbU5vZGUucGFyZW50RWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5zcmNFbGVtZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0VmlzdWFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlzdWFsO1xuICAgIH1cblxuICAgIGdldFNpemUoKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50U2l6ZSh0aGlzLmVsZW1lbnQpO1xuICAgIH1cblxuICAgIGN1cnJlbnRTaXplKHNpemUpIHtcbiAgICAgICAgaWYgKHNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NpemUgPSBzaXplO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRTaXplKHNpemUpIHtcbiAgICAgICAgZWxlbWVudFNpemUodGhpcy5lbGVtZW50LCBzaXplKTtcblxuICAgICAgICB0aGlzLmN1cnJlbnRTaXplKHNpemUpO1xuICAgICAgICB0aGlzLl9yZXNpemUoKTtcbiAgICB9XG5cbiAgICByZXNpemUoZm9yY2UpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0U2l6ZSgpO1xuICAgICAgICBjb25zdCBjdXJyZW50U2l6ZSA9IHRoaXMuY3VycmVudFNpemUoKTtcblxuICAgICAgICBpZiAoZm9yY2UgfHwgKHNpemUud2lkdGggPiAwIHx8IHNpemUuaGVpZ2h0ID4gMCkgJiYgKCFjdXJyZW50U2l6ZSB8fCBzaXplLndpZHRoICE9PSBjdXJyZW50U2l6ZS53aWR0aCB8fCBzaXplLmhlaWdodCAhPT0gY3VycmVudFNpemUuaGVpZ2h0KSkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50U2l6ZShzaXplKTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZShzaXplLCBmb3JjZSk7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoXCJyZXNpemVcIiwgc2l6ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaXplKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNpemUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U2l6ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgc3VzcGVuZFRyYWNraW5nKCkge1xuICAgICAgICB0aGlzLl9zdXNwZW5kZWRUcmFja2luZyA9IHRydWU7XG4gICAgfVxuXG4gICAgcmVzdW1lVHJhY2tpbmcoKSB7XG4gICAgICAgIHRoaXMuX3N1c3BlbmRlZFRyYWNraW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgX2VuYWJsZVRyYWNraW5nKCkge31cblxuICAgIF9yZXNpemUoKSB7fVxuXG4gICAgX2hhbmRsZXIoZXZlbnROYW1lKSB7XG4gICAgICAgIHJldHVybiAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZXZlbnRUYXJnZXQoZSk7XG4gICAgICAgICAgICBpZiAobm9kZSAmJiAhdGhpcy5fc3VzcGVuZGVkVHJhY2tpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoZXZlbnROYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IG5vZGUsXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGV2ZW50TmFtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9lbGVtZW50T2Zmc2V0KCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gZWxlbWVudFBhZGRpbmcoZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IHsgbGVmdCwgdG9wIH0gPSBlbGVtZW50T2Zmc2V0KGVsZW1lbnQpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiBsZWZ0ICsgcGFkZGluZy5sZWZ0LFxuICAgICAgICAgICAgdG9wOiB0b3AgKyBwYWRkaW5nLnRvcFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9zdXJmYWNlUG9pbnQoZSkge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLl9lbGVtZW50T2Zmc2V0KCk7XG4gICAgICAgIGNvbnN0IGNvb3JkID0gZXZlbnRDb29yZGluYXRlcyhlKTtcbiAgICAgICAgY29uc3QgeCA9IGNvb3JkLnggLSBvZmZzZXQubGVmdDtcbiAgICAgICAgY29uc3QgeSA9IGNvb3JkLnkgLSBvZmZzZXQudG9wO1xuXG4gICAgICAgIGNvbnN0IGludmVyc2VUcmFuc2Zvcm0gPSBlbGVtZW50U2NhbGUodGhpcy5lbGVtZW50KS5pbnZlcnQoKTtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBuZXcgUG9pbnQoXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICApLnRyYW5zZm9ybShpbnZlcnNlVHJhbnNmb3JtKTtcblxuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTdXJmYWNlO1xuIiwiaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4uLy4uL3V0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXJBdHRyKG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIChkZWZpbmVkKHZhbHVlKSAmJiB2YWx1ZSAhPT0gbnVsbCkgPyBgICR7IG5hbWUgfT1cIiR7IHZhbHVlIH1cIiBgIDogXCJcIjtcbn0iLCJpbXBvcnQgcmVuZGVyQXR0ciBmcm9tICcuL3JlbmRlci1hdHRyaWJ1dGUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXJBbGxBdHRyKGF0dHJzKSB7XG4gICAgbGV0IG91dHB1dCA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBvdXRwdXQgKz0gcmVuZGVyQXR0cihhdHRyc1tpXVswXSwgYXR0cnNbaV1bMV0pO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG59IiwiaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4uLy4uL3V0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXJTdHlsZShhdHRycykge1xuICAgIGxldCBvdXRwdXQgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHZhbHVlID0gYXR0cnNbaV1bMV07XG4gICAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGF0dHJzW2ldWzBdICsgXCI6XCIgKyB2YWx1ZSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG91dHB1dCAhPT0gXCJcIikge1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn0iLCJjb25zdCBOT0RFX01BUCA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCBOT0RFX01BUDsiLCJjb25zdCBTVkdfTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG5jb25zdCBOT05FID0gXCJub25lXCI7XG5jb25zdCBQT0lOVF9ESUdJVFMgPSAzO1xuXG5leHBvcnQgeyBTVkdfTlMsIE5PTkUsIFBPSU5UX0RJR0lUUyB9OyIsImltcG9ydCB7IFNWR19OUyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmNvbnN0IGFwcGx5U3R5bGUgPSAoc3R5bGVTdHJpbmcsIGVsZW1lbnQpID0+XG4gICAgc3R5bGVTdHJpbmcuc3BsaXQoJzsnKS5maWx0ZXIocyA9PiBzICE9PSAnJykuZm9yRWFjaChzID0+IHtcbiAgICAgICAgY29uc3QgcGFydHMgPSBzLnNwbGl0KCc6Jyk7XG4gICAgICAgIGVsZW1lbnQuc3R5bGVbcGFydHNbMF0udHJpbSgpXSA9IHBhcnRzWzFdLnRyaW0oKTtcbiAgICB9KTtcblxuY29uc3Qgc3R5bGVBdHRyID0gJ2RhdGEtc3R5bGUnO1xuY29uc3QgcmVwbGFjZVN0eWxlQXR0ciA9IChodG1sKSA9PiBodG1sLnJlcGxhY2UoL1xcc3N0eWxlPS9nLCAnICcgKyBzdHlsZUF0dHIgKyAnPScpO1xuY29uc3QgcmVzdG9yZVN0eWxlQXR0ciA9IChjb250YWluZXIpID0+IHtcbiAgICBBcnJheS5mcm9tKGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdbJyArIHN0eWxlQXR0ciArJ10nKSkuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBzdHlsZVN0cmluZyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKHN0eWxlQXR0cik7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHN0eWxlQXR0cik7XG4gICAgICAgIGFwcGx5U3R5bGUoc3R5bGVTdHJpbmcsIGVsZW1lbnQpO1xuICAgIH0pO1xufTtcblxubGV0IHJlbmRlclNWRyA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgc3ZnKSB7XG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9IHJlcGxhY2VTdHlsZUF0dHIoc3ZnKTtcbiAgICByZXN0b3JlU3R5bGVBdHRyKGNvbnRhaW5lcik7XG59O1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY29uc3QgdGVzdEZyYWdtZW50ID0gXCI8c3ZnIHhtbG5zPSdcIiArIFNWR19OUyArIFwiJz48L3N2Zz5cIjtcbiAgICBjb25zdCB0ZXN0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb25zdCBoYXNQYXJzZXIgPSB0eXBlb2YgRE9NUGFyc2VyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgdGVzdENvbnRhaW5lci5pbm5lckhUTUwgPSB0ZXN0RnJhZ21lbnQ7XG5cbiAgICBpZiAoaGFzUGFyc2VyICYmIHRlc3RDb250YWluZXIuZmlyc3RDaGlsZC5uYW1lc3BhY2VVUkkgIT09IFNWR19OUykge1xuICAgICAgICByZW5kZXJTVkcgPSBmdW5jdGlvbihjb250YWluZXIsIHN2Zykge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgICAgICAgY29uc3QgY2hhcnREb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHJlcGxhY2VTdHlsZUF0dHIoc3ZnKSwgXCJ0ZXh0L3htbFwiKTtcbiAgICAgICAgICAgIHJlc3RvcmVTdHlsZUF0dHIoY2hhcnREb2MpO1xuICAgICAgICAgICAgY29uc3QgaW1wb3J0ZWREb2MgPSBkb2N1bWVudC5hZG9wdE5vZGUoY2hhcnREb2MuZG9jdW1lbnRFbGVtZW50KTtcblxuICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaW1wb3J0ZWREb2MpO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyU1ZHO1xuIiwiaW1wb3J0IEJhc2VOb2RlIGZyb20gJy4uL2NvcmUvYmFzZS1ub2RlJztcbmltcG9ydCByZW5kZXJBbGxBdHRyIGZyb20gJy4vdXRpbHMvcmVuZGVyLWFsbC1hdHRyaWJ1dGVzJztcbmltcG9ydCByZW5kZXJBdHRyIGZyb20gJy4vdXRpbHMvcmVuZGVyLWF0dHJpYnV0ZSc7XG5pbXBvcnQgcmVuZGVyU3R5bGUgZnJvbSAnLi91dGlscy9yZW5kZXItc3R5bGUnO1xuaW1wb3J0IE5PREVfTUFQIGZyb20gJy4vbm9kZS1tYXAnO1xuaW1wb3J0IHJlbmRlclNWRyBmcm9tICcuL3V0aWxzL3JlbmRlci1zdmcnO1xuaW1wb3J0IHsgU1ZHX05TLCBOT05FIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgc3VwcG9ydCB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IFRSQU5TRk9STSA9IFwidHJhbnNmb3JtXCI7XG5jb25zdCBEZWZpbml0aW9uTWFwID0ge1xuICAgIGNsaXA6IFwiY2xpcC1wYXRoXCIsXG4gICAgZmlsbDogXCJmaWxsXCJcbn07XG5cbmZ1bmN0aW9uIGlzRGVmaW5pdGlvbih0eXBlLCB2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlID09PSBcImNsaXBcIiB8fCAodHlwZSA9PT0gXCJmaWxsXCIgJiYgKCF2YWx1ZSB8fCB2YWx1ZS5ub2RlVHlwZSA9PT0gXCJHcmFkaWVudFwiKSk7XG59XG5cbmZ1bmN0aW9uIGJhc2VVcmwoKSB7XG4gICAgY29uc3QgYmFzZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYmFzZVwiKVswXTtcbiAgICBsZXQgaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG4gICAgbGV0IHVybCA9IFwiXCI7XG5cbiAgICBpZiAoYmFzZSAmJiAhKHN1cHBvcnQuYnJvd3NlciB8fCB7fSkubXNpZSkge1xuICAgICAgICBjb25zdCBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoXCIjXCIpO1xuICAgICAgICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgaHJlZiA9IGhyZWYuc3Vic3RyaW5nKDAsIGhhc2hJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICB1cmwgPSBocmVmO1xuICAgIH1cblxuICAgIHJldHVybiB1cmw7XG59XG5cbmNsYXNzIE5vZGUgZXh0ZW5kcyBCYXNlTm9kZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihzcmNFbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHNyY0VsZW1lbnQpO1xuICAgICAgICB0aGlzLmRlZmluaXRpb25zID0ge307XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuX2tlbmRvTm9kZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jbGVhckRlZmluaXRpb25zKCk7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBsb2FkKGVsZW1lbnRzLCBwb3MpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc3JjRWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzcmNFbGVtZW50LmNoaWxkcmVuO1xuXG4gICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBuZXcgTk9ERV9NQVBbc3JjRWxlbWVudC5ub2RlVHlwZV0oc3JjRWxlbWVudCwgdGhpcy5vcHRpb25zKTtcblxuICAgICAgICAgICAgaWYgKGRlZmluZWQocG9zKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0QXQoY2hpbGROb2RlLCBwb3MpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZChjaGlsZE5vZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZE5vZGUuY3JlYXRlRGVmaW5pdGlvbnMoKTtcblxuICAgICAgICAgICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjaGlsZE5vZGUubG9hZChjaGlsZHJlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5hdHRhY2hUbyhlbGVtZW50LCBwb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcm9vdCgpIHtcbiAgICAgICAgbGV0IHJvb3QgPSB0aGlzO1xuXG4gICAgICAgIHdoaWxlIChyb290LnBhcmVudCkge1xuICAgICAgICAgICAgcm9vdCA9IHJvb3QucGFyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8oZG9tRWxlbWVudCwgcG9zKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHJlbmRlclNWRyhjb250YWluZXIsXG4gICAgICAgICAgICBcIjxzdmcgeG1sbnM9J1wiICsgU1ZHX05TICsgXCInIHZlcnNpb249JzEuMSc+XCIgK1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCkgK1xuICAgICAgICAgICAgXCI8L3N2Zz5cIlxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBjb250YWluZXIuZmlyc3RDaGlsZC5maXJzdENoaWxkO1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGRlZmluZWQocG9zKSkge1xuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGRvbUVsZW1lbnQuY2hpbGROb2Rlc1twb3NdIHx8IG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0RWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5fa2VuZG9Ob2RlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuZWxlbWVudC5fa2VuZG9Ob2RlID0gdGhpcztcblxuICAgICAgICBjb25zdCBub2RlcyA9IHRoaXMuY2hpbGROb2RlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNoaWxkRWxlbWVudCA9IGVsZW1lbnQuY2hpbGROb2Rlc1tpXTtcbiAgICAgICAgICAgIG5vZGVzW2ldLnNldEVsZW1lbnQoY2hpbGRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmNsZWFyRGVmaW5pdGlvbnMoKTtcblxuICAgICAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZE5vZGVzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjaGlsZHJlbltpXS5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNoaWxkTm9kZXMgPSBbXTtcbiAgICB9XG5cbiAgICByZW1vdmVTZWxmKCkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnROb2RlID0gdGhpcy5lbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICBpZiAocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci5yZW1vdmVTZWxmKCk7XG4gICAgfVxuXG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlckNoaWxkcmVuKCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZSgpO1xuICAgIH1cblxuICAgIHJlbmRlckNoaWxkcmVuKCkge1xuICAgICAgICBjb25zdCBub2RlcyA9IHRoaXMuY2hpbGROb2RlcztcbiAgICAgICAgbGV0IG91dHB1dCA9IFwiXCI7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb3V0cHV0ICs9IG5vZGVzW2ldLnJlbmRlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG5cbiAgICBvcHRpb25zQ2hhbmdlKGUpIHtcbiAgICAgICAgY29uc3QgeyBmaWVsZCwgdmFsdWUgfSA9IGU7XG5cbiAgICAgICAgaWYgKGZpZWxkID09PSBcInZpc2libGVcIikge1xuICAgICAgICAgICAgdGhpcy5jc3MoXCJkaXNwbGF5XCIsIHZhbHVlID8gXCJcIiA6IE5PTkUpO1xuICAgICAgICB9IGVsc2UgaWYgKERlZmluaXRpb25NYXBbZmllbGRdICYmIGlzRGVmaW5pdGlvbihmaWVsZCwgdmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURlZmluaXRpb24oZmllbGQsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZCA9PT0gXCJvcGFjaXR5XCIpIHtcbiAgICAgICAgICAgIHRoaXMuYXR0cihcIm9wYWNpdHlcIiwgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGZpZWxkID09PSBcImN1cnNvclwiKSB7XG4gICAgICAgICAgICB0aGlzLmNzcyhcImN1cnNvclwiLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQgPT09IFwiaWRcIikge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdHRyKFwiaWRcIiwgdmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUF0dHIoXCJpZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLm9wdGlvbnNDaGFuZ2UoZSk7XG4gICAgfVxuXG4gICAgYXR0cihuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFsbEF0dHIoYXR0cnMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5hdHRyKGF0dHJzW2ldWzBdLCBhdHRyc1tpXVsxXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjc3MobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlW25hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhbGxDc3Moc3R5bGVzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmNzcyhzdHlsZXNbaV1bMF0sIHN0eWxlc1tpXVsxXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVBdHRyKG5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1hcFRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgICAgICAgY29uc3QgYXR0cnMgPSBbXTtcbiAgICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICAgICAgYXR0cnMucHVzaChbXG4gICAgICAgICAgICAgICAgVFJBTlNGT1JNLFxuICAgICAgICAgICAgICAgIFwibWF0cml4KFwiICsgdHJhbnNmb3JtLm1hdHJpeCgpLnRvU3RyaW5nKDYpICsgXCIpXCJcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF0dHJzO1xuICAgIH1cblxuICAgIHJlbmRlclRyYW5zZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlckFsbEF0dHIoXG4gICAgICAgICAgICB0aGlzLm1hcFRyYW5zZm9ybSh0aGlzLnNyY0VsZW1lbnQudHJhbnNmb3JtKCkpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5hbGxBdHRyKHRoaXMubWFwVHJhbnNmb3JtKHZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUF0dHIoVFJBTlNGT1JNKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1hcFN0eWxlKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5zcmNFbGVtZW50Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gWyBbIFwiY3Vyc29yXCIsIG9wdGlvbnMuY3Vyc29yIF0gXTtcblxuICAgICAgICBpZiAob3B0aW9ucy52aXNpYmxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3R5bGUucHVzaChbIFwiZGlzcGxheVwiLCBOT05FIF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH1cblxuICAgIHJlbmRlclN0eWxlKCkge1xuICAgICAgICByZXR1cm4gcmVuZGVyQXR0cihcInN0eWxlXCIsIHJlbmRlclN0eWxlKHRoaXMubWFwU3R5bGUodHJ1ZSkpKTtcbiAgICB9XG5cbiAgICByZW5kZXJPcGFjaXR5KCkge1xuICAgICAgICByZXR1cm4gcmVuZGVyQXR0cihcIm9wYWNpdHlcIiwgdGhpcy5zcmNFbGVtZW50Lm9wdGlvbnMub3BhY2l0eSk7XG4gICAgfVxuXG4gICAgcmVuZGVySWQoKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJBdHRyKFwiaWRcIiwgdGhpcy5zcmNFbGVtZW50Lm9wdGlvbnMuaWQpO1xuICAgIH1cblxuICAgIGNyZWF0ZURlZmluaXRpb25zKCkge1xuICAgICAgICBjb25zdCBzcmNFbGVtZW50ID0gdGhpcy5zcmNFbGVtZW50O1xuICAgICAgICBjb25zdCBkZWZpbml0aW9ucyA9IHRoaXMuZGVmaW5pdGlvbnM7XG4gICAgICAgIGlmIChzcmNFbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gc3JjRWxlbWVudC5vcHRpb25zO1xuICAgICAgICAgICAgbGV0IGhhc0RlZmluaXRpb25zO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBmaWVsZCBpbiBEZWZpbml0aW9uTWFwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRlZmluaXRpb24gPSBvcHRpb25zLmdldChmaWVsZCk7XG4gICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb24gJiYgaXNEZWZpbml0aW9uKGZpZWxkLCBkZWZpbml0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uc1tmaWVsZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICAgICAgICAgICAgICBoYXNEZWZpbml0aW9ucyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc0RlZmluaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWZpbml0aW9uQ2hhbmdlKHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImFkZFwiLFxuICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uczogZGVmaW5pdGlvbnNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlZmluaXRpb25DaGFuZ2UoZSkge1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LmRlZmluaXRpb25DaGFuZ2UoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVEZWZpbml0aW9uKHR5cGUsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGRlZmluaXRpb25zID0gdGhpcy5kZWZpbml0aW9ucztcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGRlZmluaXRpb25zW3R5cGVdO1xuICAgICAgICBjb25zdCBhdHRyID0gRGVmaW5pdGlvbk1hcFt0eXBlXTtcbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IHt9O1xuICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgZGVmaW5pdGlvblt0eXBlXSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICB0aGlzLmRlZmluaXRpb25DaGFuZ2Uoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZW1vdmVcIixcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uczogZGVmaW5pdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZWxldGUgZGVmaW5pdGlvbnNbdHlwZV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cihhdHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlZmluaXRpb25bdHlwZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5pdGlvbkNoYW5nZSh7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcImFkZFwiLFxuICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiBkZWZpbml0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRlZmluaXRpb25zW3R5cGVdID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmF0dHIoYXR0ciwgdGhpcy5yZWZVcmwodmFsdWUuaWQpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyRGVmaW5pdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IGRlZmluaXRpb25zID0gdGhpcy5kZWZpbml0aW9ucztcblxuICAgICAgICB0aGlzLmRlZmluaXRpb25DaGFuZ2Uoe1xuICAgICAgICAgICAgYWN0aW9uOiBcInJlbW92ZVwiLFxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IGRlZmluaXRpb25zXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlZmluaXRpb25zID0ge307XG4gICAgfVxuXG4gICAgcmVuZGVyRGVmaW5pdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJBbGxBdHRyKHRoaXMubWFwRGVmaW5pdGlvbnMoKSk7XG4gICAgfVxuXG4gICAgbWFwRGVmaW5pdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IGRlZmluaXRpb25zID0gdGhpcy5kZWZpbml0aW9ucztcbiAgICAgICAgY29uc3QgYXR0cnMgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBmaWVsZCBpbiBkZWZpbml0aW9ucykge1xuICAgICAgICAgICAgYXR0cnMucHVzaChbIERlZmluaXRpb25NYXBbZmllbGRdLCB0aGlzLnJlZlVybChkZWZpbml0aW9uc1tmaWVsZF0uaWQpIF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF0dHJzO1xuICAgIH1cblxuICAgIHJlZlVybChpZCkge1xuICAgICAgICBjb25zdCBza2lwQmFzZUhyZWYgPSAodGhpcy5vcHRpb25zIHx8IHt9KS5za2lwQmFzZUhyZWY7XG4gICAgICAgIGNvbnN0IGJhc2VIcmVmID0gdGhpcy5iYXNlVXJsKCkucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpO1xuICAgICAgICBjb25zdCBiYXNlID0gc2tpcEJhc2VIcmVmID8gJycgOiBiYXNlSHJlZjtcbiAgICAgICAgcmV0dXJuIGB1cmwoJHsgYmFzZSB9IyR7IGlkIH0pYDtcbiAgICB9XG5cbiAgICBiYXNlVXJsKCkge1xuICAgICAgICByZXR1cm4gYmFzZVVybCgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9kZTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4vbm9kZSc7XG5pbXBvcnQgcmVuZGVyQXR0ciBmcm9tICcuL3V0aWxzL3JlbmRlci1hdHRyaWJ1dGUnO1xuXG5jbGFzcyBHcmFkaWVudFN0b3BOb2RlIGV4dGVuZHMgTm9kZSB7XG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPHN0b3AgJHt0aGlzLnJlbmRlck9mZnNldCgpfSAke3RoaXMucmVuZGVyU3R5bGUoKX0gLz5gO1xuICAgIH1cblxuICAgIHJlbmRlck9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlckF0dHIoXCJvZmZzZXRcIiwgdGhpcy5zcmNFbGVtZW50Lm9mZnNldCgpKTtcbiAgICB9XG5cbiAgICBtYXBTdHlsZSgpIHtcbiAgICAgICAgY29uc3Qgc3JjRWxlbWVudCA9IHRoaXMuc3JjRWxlbWVudDtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFsgXCJzdG9wLWNvbG9yXCIsIHNyY0VsZW1lbnQuY29sb3IoKSBdLFxuICAgICAgICAgICAgWyBcInN0b3Atb3BhY2l0eVwiLCBzcmNFbGVtZW50Lm9wYWNpdHkoKSBdXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgb3B0aW9uc0NoYW5nZShlKSB7XG4gICAgICAgIGlmIChlLmZpZWxkID09PSBcIm9mZnNldFwiKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHIoZS5maWVsZCwgZS52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5maWVsZCA9PT0gXCJjb2xvclwiIHx8IGUuZmllbGQgPT09IFwib3BhY2l0eVwiKSB7XG4gICAgICAgICAgICB0aGlzLmNzcyhcInN0b3AtXCIgKyBlLmZpZWxkLCBlLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR3JhZGllbnRTdG9wTm9kZTsiLCJpbXBvcnQgR3JhZGllbnRTdG9wTm9kZSBmcm9tICcuL2dyYWRpZW50LXN0b3Atbm9kZSc7XG5pbXBvcnQgQmFzZU5vZGUgZnJvbSAnLi4vY29yZS9iYXNlLW5vZGUnO1xuaW1wb3J0IE5vZGUgZnJvbSAnLi9ub2RlJztcbmltcG9ydCByZW5kZXJBbGxBdHRyIGZyb20gJy4vdXRpbHMvcmVuZGVyLWFsbC1hdHRyaWJ1dGVzJztcblxuY2xhc3MgR3JhZGllbnROb2RlIGV4dGVuZHMgTm9kZSB7XG4gICAgY29uc3RydWN0b3Ioc3JjRWxlbWVudCkge1xuICAgICAgICBzdXBlcihzcmNFbGVtZW50KTtcblxuICAgICAgICB0aGlzLmlkID0gc3JjRWxlbWVudC5pZDtcblxuICAgICAgICB0aGlzLmxvYWRTdG9wcygpO1xuICAgIH1cblxuICAgIGxvYWRTdG9wcygpIHtcbiAgICAgICAgY29uc3Qgc3RvcHMgPSB0aGlzLnNyY0VsZW1lbnQuc3RvcHM7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc3RvcHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgbGV0IHN0b3BOb2RlID0gbmV3IEdyYWRpZW50U3RvcE5vZGUoc3RvcHNbaWR4XSk7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZChzdG9wTm9kZSk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHN0b3BOb2RlLmF0dGFjaFRvKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3B0aW9uc0NoYW5nZShlKSB7XG4gICAgICAgIGlmIChlLmZpZWxkID09PSBcImdyYWRpZW50LnN0b3BzXCIpIHtcbiAgICAgICAgICAgIEJhc2VOb2RlLnByb3RvdHlwZS5jbGVhci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5sb2FkU3RvcHMoKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLmZpZWxkID09PSBcImdyYWRpZW50XCIpIHtcbiAgICAgICAgICAgIHRoaXMuYWxsQXR0cih0aGlzLm1hcENvb3JkaW5hdGVzKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyQ29vcmRpbmF0ZXMoKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJBbGxBdHRyKHRoaXMubWFwQ29vcmRpbmF0ZXMoKSk7XG4gICAgfVxuXG4gICAgbWFwU3BhY2UoKSB7XG4gICAgICAgIHJldHVybiBbIFwiZ3JhZGllbnRVbml0c1wiLCB0aGlzLnNyY0VsZW1lbnQudXNlclNwYWNlKCkgPyBcInVzZXJTcGFjZU9uVXNlXCIgOiBcIm9iamVjdEJvdW5kaW5nQm94XCIgXTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdyYWRpZW50Tm9kZTsiLCJpbXBvcnQgR3JhZGllbnROb2RlIGZyb20gJy4vZ3JhZGllbnQtbm9kZSc7XG5cbmNsYXNzIExpbmVhckdyYWRpZW50Tm9kZSBleHRlbmRzIEdyYWRpZW50Tm9kZSB7XG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPGxpbmVhckdyYWRpZW50IGlkPSckeyB0aGlzLmlkIH0nICR7IHRoaXMucmVuZGVyQ29vcmRpbmF0ZXMoKSB9PiR7IHRoaXMucmVuZGVyQ2hpbGRyZW4oKSB9PC9saW5lYXJHcmFkaWVudD5gO1xuICAgIH1cblxuICAgIG1hcENvb3JkaW5hdGVzKCkge1xuICAgICAgICBjb25zdCBzcmNFbGVtZW50ID0gdGhpcy5zcmNFbGVtZW50O1xuICAgICAgICBjb25zdCBzdGFydCA9IHNyY0VsZW1lbnQuc3RhcnQoKTtcbiAgICAgICAgY29uc3QgZW5kID0gc3JjRWxlbWVudC5lbmQoKTtcbiAgICAgICAgY29uc3QgYXR0cnMgPSBbXG4gICAgICAgICAgICBbIFwieDFcIiwgc3RhcnQueCBdLFxuICAgICAgICAgICAgWyBcInkxXCIsIHN0YXJ0LnkgXSxcbiAgICAgICAgICAgIFsgXCJ4MlwiLCBlbmQueCBdLFxuICAgICAgICAgICAgWyBcInkyXCIsIGVuZC55IF0sXG4gICAgICAgICAgICB0aGlzLm1hcFNwYWNlKClcbiAgICAgICAgXTtcblxuICAgICAgICByZXR1cm4gYXR0cnM7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMaW5lYXJHcmFkaWVudE5vZGU7IiwiaW1wb3J0IEdyYWRpZW50Tm9kZSBmcm9tICcuL2dyYWRpZW50LW5vZGUnO1xuXG5jbGFzcyBSYWRpYWxHcmFkaWVudE5vZGUgZXh0ZW5kcyBHcmFkaWVudE5vZGUge1xuICAgIHRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gYDxyYWRpYWxHcmFkaWVudCBpZD0nJHsgdGhpcy5pZCB9JyAkeyB0aGlzLnJlbmRlckNvb3JkaW5hdGVzKCl9PiR7IHRoaXMucmVuZGVyQ2hpbGRyZW4oKSB9PC9yYWRpYWxHcmFkaWVudD5gO1xuICAgIH1cblxuICAgIG1hcENvb3JkaW5hdGVzKCkge1xuICAgICAgICBjb25zdCBzcmNFbGVtZW50ID0gdGhpcy5zcmNFbGVtZW50O1xuICAgICAgICBjb25zdCBjZW50ZXIgPSBzcmNFbGVtZW50LmNlbnRlcigpO1xuICAgICAgICBjb25zdCByYWRpdXMgPSBzcmNFbGVtZW50LnJhZGl1cygpO1xuICAgICAgICBjb25zdCBhdHRycyA9IFtcbiAgICAgICAgICAgIFsgXCJjeFwiLCBjZW50ZXIueCBdLFxuICAgICAgICAgICAgWyBcImN5XCIsIGNlbnRlci55IF0sXG4gICAgICAgICAgICBbIFwiclwiLCByYWRpdXMgXSxcbiAgICAgICAgICAgIHRoaXMubWFwU3BhY2UoKVxuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gYXR0cnM7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSYWRpYWxHcmFkaWVudE5vZGU7IiwiaW1wb3J0IE5vZGUgZnJvbSAnLi9ub2RlJztcblxuY2xhc3MgQ2xpcE5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihzcmNFbGVtZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5zcmNFbGVtZW50ID0gc3JjRWxlbWVudDtcbiAgICAgICAgdGhpcy5pZCA9IHNyY0VsZW1lbnQuaWQ7XG5cbiAgICAgICAgdGhpcy5sb2FkKFsgc3JjRWxlbWVudCBdKTtcbiAgICB9XG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGA8Y2xpcFBhdGggaWQ9JyR7IHRoaXMuaWQgfSc+JHsgdGhpcy5yZW5kZXJDaGlsZHJlbigpIH08L2NsaXBQYXRoPmA7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbGlwTm9kZTsiLCJpbXBvcnQgTGluZWFyR3JhZGllbnQgZnJvbSAnLi4vZ3JhZGllbnRzL2xpbmVhci1ncmFkaWVudCc7XG5pbXBvcnQgUmFkaWFsR3JhZGllbnQgZnJvbSAnLi4vZ3JhZGllbnRzL3JhZGlhbC1ncmFkaWVudCc7XG5pbXBvcnQgTGluZWFyR3JhZGllbnROb2RlIGZyb20gJy4vbGluZWFyLWdyYWRpZW50LW5vZGUnO1xuaW1wb3J0IFJhZGlhbEdyYWRpZW50Tm9kZSBmcm9tICcuL3JhZGlhbC1ncmFkaWVudC1ub2RlJztcbmltcG9ydCBOb2RlIGZyb20gJy4vbm9kZSc7XG5pbXBvcnQgQ2xpcE5vZGUgZnJvbSAnLi9jbGlwLW5vZGUnO1xuXG5jbGFzcyBEZWZpbml0aW9uTm9kZSBleHRlbmRzIE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmRlZmluaXRpb25NYXAgPSB7fTtcbiAgICB9XG5cbiAgICBhdHRhY2hUbyhkb21FbGVtZW50KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGRvbUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPGRlZnM+JHsgdGhpcy5yZW5kZXJDaGlsZHJlbigpIH08L2RlZnM+YDtcbiAgICB9XG5cbiAgICBkZWZpbml0aW9uQ2hhbmdlKGUpIHtcbiAgICAgICAgY29uc3QgeyBkZWZpbml0aW9ucywgYWN0aW9uIH0gPSBlO1xuXG4gICAgICAgIGlmIChhY3Rpb24gPT09IFwiYWRkXCIpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpO1xuICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJyZW1vdmVcIikge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVEZWZpbml0aW9ucyhkZWZpbml0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVEZWZpbml0aW9uKHR5cGUsIGl0ZW0pIHtcbiAgICAgICAgbGV0IG5vZGVUeXBlO1xuICAgICAgICBpZiAodHlwZSA9PT0gXCJjbGlwXCIpIHtcbiAgICAgICAgICAgIG5vZGVUeXBlID0gQ2xpcE5vZGU7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJmaWxsXCIpIHtcbiAgICAgICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgTGluZWFyR3JhZGllbnQpIHtcbiAgICAgICAgICAgICAgICBub2RlVHlwZSA9IExpbmVhckdyYWRpZW50Tm9kZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbSBpbnN0YW5jZW9mIFJhZGlhbEdyYWRpZW50KSB7XG4gICAgICAgICAgICAgICAgbm9kZVR5cGUgPSBSYWRpYWxHcmFkaWVudE5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBub2RlVHlwZShpdGVtKTtcbiAgICB9XG5cbiAgICBhZGREZWZpbml0aW9ucyhkZWZpbml0aW9ucykge1xuICAgICAgICBmb3IgKGxldCBmaWVsZCBpbiBkZWZpbml0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5hZGREZWZpbml0aW9uKGZpZWxkLCBkZWZpbml0aW9uc1tmaWVsZF0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkRGVmaW5pdGlvbih0eXBlLCBzcmNFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHsgZWxlbWVudCwgZGVmaW5pdGlvbk1hcCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaWQgPSBzcmNFbGVtZW50LmlkO1xuICAgICAgICBjb25zdCBtYXBJdGVtID0gZGVmaW5pdGlvbk1hcFtpZF07XG4gICAgICAgIGlmICghbWFwSXRlbSkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuY3JlYXRlRGVmaW5pdGlvbih0eXBlLCBzcmNFbGVtZW50KTtcbiAgICAgICAgICAgIGRlZmluaXRpb25NYXBbaWRdID0ge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IG5vZGUsXG4gICAgICAgICAgICAgICAgY291bnQ6IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFwcGVuZChub2RlKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgbm9kZS5hdHRhY2hUbyh0aGlzLmVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWFwSXRlbS5jb3VudCsrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgZm9yIChsZXQgZmllbGQgaW4gZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRGVmaW5pdGlvbihkZWZpbml0aW9uc1tmaWVsZF0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlRGVmaW5pdGlvbihzcmNFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGRlZmluaXRpb25NYXAgPSB0aGlzLmRlZmluaXRpb25NYXA7XG4gICAgICAgIGNvbnN0IGlkID0gc3JjRWxlbWVudC5pZDtcbiAgICAgICAgY29uc3QgbWFwSXRlbSA9IGRlZmluaXRpb25NYXBbaWRdO1xuXG4gICAgICAgIGlmIChtYXBJdGVtKSB7XG4gICAgICAgICAgICBtYXBJdGVtLmNvdW50LS07XG4gICAgICAgICAgICBpZiAobWFwSXRlbS5jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRoaXMuY2hpbGROb2Rlcy5pbmRleE9mKG1hcEl0ZW0uZWxlbWVudCksIDEpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBkZWZpbml0aW9uTWFwW2lkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGVmaW5pdGlvbk5vZGU7IiwiaW1wb3J0IEJhc2VOb2RlIGZyb20gJy4uL2NvcmUvYmFzZS1ub2RlJztcbmltcG9ydCBOb2RlIGZyb20gJy4vbm9kZSc7XG5pbXBvcnQgRGVmaW5pdGlvbk5vZGUgZnJvbSAnLi9kZWZpbml0aW9uLW5vZGUnO1xuXG5jbGFzcyBSb290Tm9kZSBleHRlbmRzIE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5kZWZzID0gbmV3IERlZmluaXRpb25Ob2RlKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8oZG9tRWxlbWVudCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb21FbGVtZW50O1xuICAgICAgICB0aGlzLmRlZnMuYXR0YWNoVG8oZG9tRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCk7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIEJhc2VOb2RlLnByb3RvdHlwZS5jbGVhci5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIHRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWZzLnJlbmRlcigpICsgdGhpcy5yZW5kZXJDaGlsZHJlbigpO1xuICAgIH1cblxuICAgIGRlZmluaXRpb25DaGFuZ2UoZSkge1xuICAgICAgICB0aGlzLmRlZnMuZGVmaW5pdGlvbkNoYW5nZShlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvb3ROb2RlOyIsImNvbnN0IERBU0hfQVJSQVlTID0ge1xuICAgIGRvdDogWyAxLjUsIDMuNSBdLFxuICAgIGRhc2g6IFsgNCwgMy41IF0sXG4gICAgbG9uZ2Rhc2g6IFsgOCwgMy41IF0sXG4gICAgZGFzaGRvdDogWyAzLjUsIDMuNSwgMS41LCAzLjUgXSxcbiAgICBsb25nZGFzaGRvdDogWyA4LCAzLjUsIDEuNSwgMy41IF0sXG4gICAgbG9uZ2Rhc2hkb3Rkb3Q6IFsgOCwgMy41LCAxLjUsIDMuNSwgMS41LCAzLjUgXVxufTtcblxuY29uc3QgU09MSUQgPSBcInNvbGlkXCI7XG5jb25zdCBCVVRUID0gXCJidXR0XCI7XG5cbmV4cG9ydCB7IERBU0hfQVJSQVlTLCBTT0xJRCwgQlVUVCB9OyIsImltcG9ydCBOb2RlIGZyb20gJy4vbm9kZSc7XG5pbXBvcnQgeyBkZWZpbmVkLCBpc1RyYW5zcGFyZW50IH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBEQVNIX0FSUkFZUywgU09MSUQsIEJVVFQgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBOT05FLCBQT0lOVF9ESUdJVFMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgcmVuZGVyQWxsQXR0ciBmcm9tICcuL3V0aWxzL3JlbmRlci1hbGwtYXR0cmlidXRlcyc7XG5pbXBvcnQgcmVuZGVyQXR0ciBmcm9tICcuL3V0aWxzL3JlbmRlci1hdHRyaWJ1dGUnO1xuXG5jb25zdCBBVFRSSUJVVEVfTUFQID0ge1xuICAgIFwiZmlsbC5vcGFjaXR5XCI6IFwiZmlsbC1vcGFjaXR5XCIsXG4gICAgXCJzdHJva2UuY29sb3JcIjogXCJzdHJva2VcIixcbiAgICBcInN0cm9rZS53aWR0aFwiOiBcInN0cm9rZS13aWR0aFwiLFxuICAgIFwic3Ryb2tlLm9wYWNpdHlcIjogXCJzdHJva2Utb3BhY2l0eVwiXG59O1xuXG5jbGFzcyBQYXRoTm9kZSBleHRlbmRzIE5vZGUge1xuXG4gICAgZ2VvbWV0cnlDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuYXR0cihcImRcIiwgdGhpcy5yZW5kZXJEYXRhKCkpO1xuICAgICAgICB0aGlzLmludmFsaWRhdGUoKTtcbiAgICB9XG5cbiAgICBvcHRpb25zQ2hhbmdlKGUpIHtcbiAgICAgICAgc3dpdGNoIChlLmZpZWxkKSB7XG4gICAgICAgIGNhc2UgXCJmaWxsXCI6XG4gICAgICAgICAgICBpZiAoZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWxsQXR0cih0aGlzLm1hcEZpbGwoZS52YWx1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUF0dHIoXCJmaWxsXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcImZpbGwuY29sb3JcIjpcbiAgICAgICAgICAgIHRoaXMuYWxsQXR0cih0aGlzLm1hcEZpbGwoeyBjb2xvcjogZS52YWx1ZSB9KSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwic3Ryb2tlXCI6XG4gICAgICAgICAgICBpZiAoZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWxsQXR0cih0aGlzLm1hcFN0cm9rZShlLnZhbHVlKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cihcInN0cm9rZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJ0cmFuc2Zvcm1cIjpcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtQ2hhbmdlKGUudmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBBVFRSSUJVVEVfTUFQW2UuZmllbGRdO1xuICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF0dHIobmFtZSwgZS52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLm9wdGlvbnNDaGFuZ2UoZSk7XG4gICAgfVxuXG4gICAgY29udGVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy5zcmNFbGVtZW50LmNvbnRlbnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlckRhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNyY0VsZW1lbnQudG9TdHJpbmcoUE9JTlRfRElHSVRTKSB8fCB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgbWFwU3Ryb2tlKHN0cm9rZSkge1xuICAgICAgICBjb25zdCBhdHRycyA9IFtdO1xuXG4gICAgICAgIGlmIChzdHJva2UgJiYgIWlzVHJhbnNwYXJlbnQoc3Ryb2tlLmNvbG9yKSkge1xuICAgICAgICAgICAgYXR0cnMucHVzaChbIFwic3Ryb2tlXCIsIHN0cm9rZS5jb2xvciBdKTtcbiAgICAgICAgICAgIGF0dHJzLnB1c2goWyBcInN0cm9rZS13aWR0aFwiLCBzdHJva2Uud2lkdGggXSk7XG4gICAgICAgICAgICBhdHRycy5wdXNoKFsgXCJzdHJva2UtbGluZWNhcFwiLCB0aGlzLnJlbmRlckxpbmVjYXAoc3Ryb2tlKSBdKTtcbiAgICAgICAgICAgIGF0dHJzLnB1c2goWyBcInN0cm9rZS1saW5lam9pblwiLCBzdHJva2UubGluZUpvaW4gXSk7XG5cbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHN0cm9rZS5vcGFjaXR5KSkge1xuICAgICAgICAgICAgICAgIGF0dHJzLnB1c2goWyBcInN0cm9rZS1vcGFjaXR5XCIsIHN0cm9rZS5vcGFjaXR5IF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGVmaW5lZChzdHJva2UuZGFzaFR5cGUpKSB7XG4gICAgICAgICAgICAgICAgYXR0cnMucHVzaChbIFwic3Ryb2tlLWRhc2hhcnJheVwiLCB0aGlzLnJlbmRlckRhc2hUeXBlKHN0cm9rZSkgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhdHRycy5wdXNoKFsgXCJzdHJva2VcIiwgTk9ORSBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhdHRycztcbiAgICB9XG5cbiAgICByZW5kZXJTdHJva2UoKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJBbGxBdHRyKFxuICAgICAgICAgICAgdGhpcy5tYXBTdHJva2UodGhpcy5zcmNFbGVtZW50Lm9wdGlvbnMuc3Ryb2tlKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlckRhc2hUeXBlKHN0cm9rZSkge1xuICAgICAgICBjb25zdCB7IGRhc2hUeXBlLCB3aWR0aCA9IDEgfSA9IHN0cm9rZTtcblxuICAgICAgICBpZiAoZGFzaFR5cGUgJiYgZGFzaFR5cGUgIT09IFNPTElEKSB7XG4gICAgICAgICAgICBjb25zdCBkYXNoQXJyYXkgPSBEQVNIX0FSUkFZU1tkYXNoVHlwZS50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhc2hBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRhc2hBcnJheVtpXSAqIHdpZHRoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKFwiIFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlckxpbmVjYXAoc3Ryb2tlKSB7XG4gICAgICAgIGNvbnN0IHsgZGFzaFR5cGUsIGxpbmVDYXAgfSA9IHN0cm9rZTtcblxuICAgICAgICByZXR1cm4gKGRhc2hUeXBlICYmIGRhc2hUeXBlICE9PSBcInNvbGlkXCIpID8gQlVUVCA6IGxpbmVDYXA7XG4gICAgfVxuXG4gICAgbWFwRmlsbChmaWxsKSB7XG4gICAgICAgIGNvbnN0IGF0dHJzID0gW107XG4gICAgICAgIGlmICghKGZpbGwgJiYgZmlsbC5ub2RlVHlwZSA9PT0gXCJHcmFkaWVudFwiKSkge1xuICAgICAgICAgICAgaWYgKGZpbGwgJiYgIWlzVHJhbnNwYXJlbnQoZmlsbC5jb2xvcikpIHtcbiAgICAgICAgICAgICAgICBhdHRycy5wdXNoKFsgXCJmaWxsXCIsIGZpbGwuY29sb3IgXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGVmaW5lZChmaWxsLm9wYWNpdHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzLnB1c2goWyBcImZpbGwtb3BhY2l0eVwiLCBmaWxsLm9wYWNpdHkgXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhdHRycy5wdXNoKFsgXCJmaWxsXCIsIE5PTkUgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXR0cnM7XG4gICAgfVxuXG4gICAgcmVuZGVyRmlsbCgpIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlckFsbEF0dHIoXG4gICAgICAgICAgICB0aGlzLm1hcEZpbGwodGhpcy5zcmNFbGVtZW50Lm9wdGlvbnMuZmlsbClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGA8cGF0aCAkeyB0aGlzLnJlbmRlcklkKCkgfSAkeyB0aGlzLnJlbmRlclN0eWxlKCkgfSAkeyB0aGlzLnJlbmRlck9wYWNpdHkoKSB9ICR7IHJlbmRlckF0dHIoJ2QnLCB0aGlzLnJlbmRlckRhdGEoKSkgfWAgK1xuICAgICAgICAgICAgICAgIGAkeyB0aGlzLnJlbmRlclN0cm9rZSgpIH0keyB0aGlzLnJlbmRlckZpbGwoKSB9JHsgdGhpcy5yZW5kZXJEZWZpbml0aW9ucygpIH0keyB0aGlzLnJlbmRlclRyYW5zZm9ybSgpIH0+PC9wYXRoPmA7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYXRoTm9kZTtcbiIsImltcG9ydCB7IFBPSU5UX0RJR0lUUyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCBQYXRoTm9kZSBmcm9tICcuL3BhdGgtbm9kZSc7XG5cbmNsYXNzIEFyY05vZGUgZXh0ZW5kcyBQYXRoTm9kZSB7XG4gICAgcmVuZGVyRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3JjRWxlbWVudC50b1BhdGgoKS50b1N0cmluZyhQT0lOVF9ESUdJVFMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXJjTm9kZTtcbiIsImltcG9ydCBQYXRoTm9kZSBmcm9tICcuL3BhdGgtbm9kZSc7XG5cbmNsYXNzIENpcmNsZU5vZGUgZXh0ZW5kcyBQYXRoTm9kZSB7XG5cbiAgICBnZW9tZXRyeUNoYW5nZSgpIHtcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5jZW50ZXIoKTtcbiAgICAgICAgdGhpcy5hdHRyKFwiY3hcIiwgY2VudGVyLngpO1xuICAgICAgICB0aGlzLmF0dHIoXCJjeVwiLCBjZW50ZXIueSk7XG4gICAgICAgIHRoaXMuYXR0cihcInJcIiwgdGhpcy5yYWRpdXMoKSk7XG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgIH1cblxuICAgIGNlbnRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3JjRWxlbWVudC5nZW9tZXRyeSgpLmNlbnRlcjtcbiAgICB9XG5cbiAgICByYWRpdXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNyY0VsZW1lbnQuZ2VvbWV0cnkoKS5yYWRpdXM7XG4gICAgfVxuXG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPGNpcmNsZSAkeyB0aGlzLnJlbmRlcklkKCkgfSAkeyB0aGlzLnJlbmRlclN0eWxlKCkgfSAkeyB0aGlzLnJlbmRlck9wYWNpdHkoKSB9YCArXG4gICAgICAgICAgICAgICAgICAgIGBjeD0nJHsgdGhpcy5jZW50ZXIoKS54IH0nIGN5PSckeyB0aGlzLmNlbnRlcigpLnkgfScgcj0nJHsgdGhpcy5yYWRpdXMoKSB9J2AgK1xuICAgICAgICAgICAgICAgICAgICBgJHsgdGhpcy5yZW5kZXJTdHJva2UoKSB9ICR7IHRoaXMucmVuZGVyRmlsbCgpIH0gJHsgdGhpcy5yZW5kZXJEZWZpbml0aW9ucygpIH1gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7IHRoaXMucmVuZGVyVHJhbnNmb3JtKCkgfSA+PC9jaXJjbGU+YDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENpcmNsZU5vZGU7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuL25vZGUnO1xuXG5jbGFzcyBHcm91cE5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGA8ZyR7IHRoaXMucmVuZGVySWQoKSArIHRoaXMucmVuZGVyVHJhbnNmb3JtKCkgKyB0aGlzLnJlbmRlclN0eWxlKCkgKyB0aGlzLnJlbmRlck9wYWNpdHkoKSArIHRoaXMucmVuZGVyRGVmaW5pdGlvbnMoKSB9PiR7IHRoaXMucmVuZGVyQ2hpbGRyZW4oKSB9PC9nPmA7XG4gICAgfVxuXG4gICAgb3B0aW9uc0NoYW5nZShlKSB7XG4gICAgICAgIGlmIChlLmZpZWxkID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybUNoYW5nZShlLnZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLm9wdGlvbnNDaGFuZ2UoZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHcm91cE5vZGU7XG4iLCJpbXBvcnQgUGF0aE5vZGUgZnJvbSAnLi9wYXRoLW5vZGUnO1xuaW1wb3J0IHJlbmRlckFsbEF0dHIgZnJvbSAnLi91dGlscy9yZW5kZXItYWxsLWF0dHJpYnV0ZXMnO1xuaW1wb3J0IHsgaHRtbEVuY29kZSB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNsYXNzIEltYWdlTm9kZSBleHRlbmRzIFBhdGhOb2RlIHtcblxuICAgIGdlb21ldHJ5Q2hhbmdlKCkge1xuICAgICAgICB0aGlzLmFsbEF0dHIodGhpcy5tYXBQb3NpdGlvbigpKTtcbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgfVxuXG4gICAgb3B0aW9uc0NoYW5nZShlKSB7XG4gICAgICAgIGlmIChlLmZpZWxkID09PSBcInNyY1wiKSB7XG4gICAgICAgICAgICB0aGlzLmFsbEF0dHIodGhpcy5tYXBTb3VyY2UoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci5vcHRpb25zQ2hhbmdlKGUpO1xuICAgIH1cblxuICAgIG1hcFBvc2l0aW9uKCkge1xuICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5zcmNFbGVtZW50LnJlY3QoKTtcbiAgICAgICAgY29uc3QgdGwgPSByZWN0LnRvcExlZnQoKTtcblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgWyBcInhcIiwgdGwueCBdLFxuICAgICAgICAgICAgWyBcInlcIiwgdGwueSBdLFxuICAgICAgICAgICAgWyBcIndpZHRoXCIsIHJlY3Qud2lkdGgoKSArIFwicHhcIiBdLFxuICAgICAgICAgICAgWyBcImhlaWdodFwiLCByZWN0LmhlaWdodCgpICsgXCJweFwiIF1cbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICByZW5kZXJQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlckFsbEF0dHIodGhpcy5tYXBQb3NpdGlvbigpKTtcbiAgICB9XG5cbiAgICBtYXBTb3VyY2UoZW5jb2RlKSB7XG4gICAgICAgIGxldCBzcmMgPSB0aGlzLnNyY0VsZW1lbnQuc3JjKCk7XG5cbiAgICAgICAgaWYgKGVuY29kZSkge1xuICAgICAgICAgICAgc3JjID0gaHRtbEVuY29kZShzcmMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFsgWyBcInhsaW5rOmhyZWZcIiwgc3JjIF0gXTtcbiAgICB9XG5cbiAgICByZW5kZXJTb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJBbGxBdHRyKHRoaXMubWFwU291cmNlKHRydWUpKTtcbiAgICB9XG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGA8aW1hZ2UgcHJlc2VydmVBc3BlY3RSYXRpbz0nbm9uZScgJHsgdGhpcy5yZW5kZXJJZCgpIH0gJHsgdGhpcy5yZW5kZXJTdHlsZSgpIH0gJHsgdGhpcy5yZW5kZXJUcmFuc2Zvcm0oKX0gJHsgdGhpcy5yZW5kZXJPcGFjaXR5KCkgfWAgK1xuICAgICAgICAgICAgICAgYCR7IHRoaXMucmVuZGVyUG9zaXRpb24oKSB9ICR7IHRoaXMucmVuZGVyU291cmNlKCkgfSAkeyB0aGlzLnJlbmRlckRlZmluaXRpb25zKCl9PmAgK1xuICAgICAgICAgICAgICAgYDwvaW1hZ2U+YDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEltYWdlTm9kZTtcbiIsImltcG9ydCB7IFBPSU5UX0RJR0lUUyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCBQYXRoTm9kZSBmcm9tICcuL3BhdGgtbm9kZSc7XG5cbmNsYXNzIE11bHRpUGF0aE5vZGUgZXh0ZW5kcyBQYXRoTm9kZSB7XG4gICAgcmVuZGVyRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3JjRWxlbWVudC50b1N0cmluZyhQT0lOVF9ESUdJVFMpIHx8ICd1bmRlZmluZWQnO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTXVsdGlQYXRoTm9kZTtcbiIsImltcG9ydCBQYXRoTm9kZSBmcm9tICcuL3BhdGgtbm9kZSc7XG5cbmNsYXNzIFJlY3ROb2RlIGV4dGVuZHMgUGF0aE5vZGUge1xuXG4gICAgZ2VvbWV0cnlDaGFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5zcmNFbGVtZW50Lmdlb21ldHJ5KCk7XG4gICAgICAgIHRoaXMuYXR0cihcInhcIiwgZ2VvbWV0cnkub3JpZ2luLngpO1xuICAgICAgICB0aGlzLmF0dHIoXCJ5XCIsIGdlb21ldHJ5Lm9yaWdpbi55KTtcbiAgICAgICAgdGhpcy5hdHRyKFwid2lkdGhcIiwgZ2VvbWV0cnkuc2l6ZS53aWR0aCk7XG4gICAgICAgIHRoaXMuYXR0cihcImhlaWdodFwiLCBnZW9tZXRyeS5zaXplLmhlaWdodCk7XG4gICAgICAgIHRoaXMuYXR0cihcInJ4XCIsIGdlb21ldHJ5LmNvcm5lclJhZGl1c1swXSk7XG4gICAgICAgIHRoaXMuYXR0cihcInJ5XCIsIGdlb21ldHJ5LmNvcm5lclJhZGl1c1sxXSk7XG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgIH1cblxuICAgIHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNyY0VsZW1lbnQuZ2VvbWV0cnkoKS5zaXplO1xuICAgIH1cblxuICAgIG9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3JjRWxlbWVudC5nZW9tZXRyeSgpLm9yaWdpbjtcbiAgICB9XG5cbiAgICByeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3JjRWxlbWVudC5nZW9tZXRyeSgpLmNvcm5lclJhZGl1c1swXTtcbiAgICB9XG5cbiAgICByeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3JjRWxlbWVudC5nZW9tZXRyeSgpLmNvcm5lclJhZGl1c1sxXTtcbiAgICB9XG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGA8cmVjdCAkeyB0aGlzLnJlbmRlcklkKCkgfSAkeyB0aGlzLnJlbmRlclN0eWxlKCkgfSAkeyB0aGlzLnJlbmRlck9wYWNpdHkoKSB9IHg9JyR7IHRoaXMub3JpZ2luKCkueCB9JyB5PSckeyB0aGlzLm9yaWdpbigpLnkgfScgYCArXG4gICAgICAgICAgICAgICAgICAgIGByeD0nJHsgdGhpcy5yeCgpIH0nIHJ5PSckeyB0aGlzLnJ5KCkgfScgYCArXG4gICAgICAgICAgICAgICAgICAgIGB3aWR0aD0nJHsgdGhpcy5zaXplKCkud2lkdGggfScgaGVpZ2h0PSckeyB0aGlzLnNpemUoKS5oZWlnaHQgfScgJHsgdGhpcy5yZW5kZXJTdHJva2UoKSB9IGAgK1xuICAgICAgICAgICAgICAgICAgICBgJHsgdGhpcy5yZW5kZXJGaWxsKCkgfSAkeyB0aGlzLnJlbmRlckRlZmluaXRpb25zKCkgfSAkeyB0aGlzLnJlbmRlclRyYW5zZm9ybSgpIH0gLz5gO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVjdE5vZGU7XG4iLCJpbXBvcnQgUGF0aE5vZGUgZnJvbSAnLi9wYXRoLW5vZGUnO1xuaW1wb3J0IHJlbmRlclN0eWxlIGZyb20gJy4vdXRpbHMvcmVuZGVyLXN0eWxlJztcbmltcG9ydCByZW5kZXJBdHRyIGZyb20gJy4vdXRpbHMvcmVuZGVyLWF0dHJpYnV0ZSc7XG5pbXBvcnQgeyBodG1sRW5jb2RlLCBzdXBwb3J0IH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IG5vcm1hbGl6ZVRleHQgfSBmcm9tICcuLi90ZXh0LW1ldHJpY3MnO1xuXG5jb25zdCBFTlRJVFlfUkVHRVggPSAvJig/OlthLXpBLVpdK3wjXFxkKyk7L2c7XG5cbmZ1bmN0aW9uIGRlY29kZUVudGl0aWVzKHRleHQpIHtcbiAgICBpZiAoIXRleHQgfHwgdHlwZW9mIHRleHQgIT09IFwic3RyaW5nXCIgfHwgIUVOVElUWV9SRUdFWC50ZXN0KHRleHQpKSB7XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cblxuICAgIGNvbnN0IGVsZW1lbnQgPSBkZWNvZGVFbnRpdGllcy5fZWxlbWVudDtcbiAgICBFTlRJVFlfUkVHRVgubGFzdEluZGV4ID0gMDtcblxuICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoRU5USVRZX1JFR0VYLCAobWF0Y2gpID0+IHtcbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBtYXRjaDtcblxuICAgICAgICByZXR1cm4gZWxlbWVudC50ZXh0Q29udGVudCB8fCBlbGVtZW50LmlubmVyVGV4dDtcbiAgICB9KTtcbn1cblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGRlY29kZUVudGl0aWVzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG59XG5cbmNsYXNzIFRleHROb2RlIGV4dGVuZHMgUGF0aE5vZGUge1xuXG4gICAgZ2VvbWV0cnlDaGFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMucG9zKCk7XG4gICAgICAgIHRoaXMuYXR0cihcInhcIiwgcG9zLngpO1xuICAgICAgICB0aGlzLmF0dHIoXCJ5XCIsIHBvcy55KTtcbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgfVxuXG4gICAgb3B0aW9uc0NoYW5nZShlKSB7XG4gICAgICAgIGlmIChlLmZpZWxkID09PSBcImZvbnRcIikge1xuICAgICAgICAgICAgdGhpcy5hdHRyKFwic3R5bGVcIiwgcmVuZGVyU3R5bGUodGhpcy5tYXBTdHlsZSgpKSk7XG4gICAgICAgICAgICB0aGlzLmdlb21ldHJ5Q2hhbmdlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5maWVsZCA9PT0gXCJjb250ZW50XCIpIHtcbiAgICAgICAgICAgIHN1cGVyLmNvbnRlbnQodGhpcy5zcmNFbGVtZW50LmNvbnRlbnQoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci5vcHRpb25zQ2hhbmdlKGUpO1xuICAgIH1cblxuICAgIG1hcFN0eWxlKGVuY29kZSkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IHN1cGVyLm1hcFN0eWxlKGVuY29kZSk7XG4gICAgICAgIGxldCBmb250ID0gdGhpcy5zcmNFbGVtZW50Lm9wdGlvbnMuZm9udDtcblxuICAgICAgICBpZiAoZW5jb2RlKSB7XG4gICAgICAgICAgICBmb250ID0gaHRtbEVuY29kZShmb250KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlLnB1c2goWyBcImZvbnRcIiwgZm9udCBdLCBbIFwid2hpdGUtc3BhY2VcIiwgXCJwcmVcIiBdKTtcblxuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuXG4gICAgcG9zKCkge1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLnNyY0VsZW1lbnQucG9zaXRpb24oKTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuc3JjRWxlbWVudC5tZWFzdXJlKCk7XG4gICAgICAgIHJldHVybiBwb3MuY2xvbmUoKS5zZXRZKHBvcy55ICsgc2l6ZS5iYXNlbGluZSk7XG4gICAgfVxuXG4gICAgcmVuZGVyQ29udGVudCgpIHtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSB0aGlzLnNyY0VsZW1lbnQuY29udGVudCgpO1xuICAgICAgICBjb250ZW50ID0gZGVjb2RlRW50aXRpZXMoY29udGVudCk7XG4gICAgICAgIGNvbnRlbnQgPSBodG1sRW5jb2RlKGNvbnRlbnQpO1xuXG4gICAgICAgIHJldHVybiBub3JtYWxpemVUZXh0KGNvbnRlbnQpO1xuICAgIH1cblxuICAgIHJlbmRlclRleHRBbmNob3IoKSB7XG4gICAgICAgIGxldCBhbmNob3I7XG5cbiAgICAgICAgaWYgKCh0aGlzLm9wdGlvbnMgfHwge30pLnJ0bCAmJiAhKHN1cHBvcnQuYnJvd3Nlci5tc2llIHx8IHN1cHBvcnQuYnJvd3Nlci5lZGdlKSkge1xuICAgICAgICAgICAgYW5jaG9yID0gJ2VuZCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyQXR0cihcInRleHQtYW5jaG9yXCIsIGFuY2hvcik7XG4gICAgfVxuXG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPHRleHQgJHsgdGhpcy5yZW5kZXJJZCgpIH0gJHsgdGhpcy5yZW5kZXJUZXh0QW5jaG9yKCkgfSAkeyB0aGlzLnJlbmRlclN0eWxlKCkgfSAkeyB0aGlzLnJlbmRlck9wYWNpdHkoKSB9YCArXG4gICAgICAgICAgICAgICAgICAgIGB4PSckeyB0aGlzLnBvcygpLnggfScgeT0nJHsgdGhpcy5wb3MoKS55IH0nICR7IHRoaXMucmVuZGVyU3Ryb2tlKCkgfSAkeyB0aGlzLnJlbmRlclRyYW5zZm9ybSgpIH0gJHsgdGhpcy5yZW5kZXJEZWZpbml0aW9ucygpIH1gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7IHRoaXMucmVuZGVyRmlsbCgpIH0+JHsgdGhpcy5yZW5kZXJDb250ZW50KCkgfTwvdGV4dD5gO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGV4dE5vZGU7XG4iLCJpbXBvcnQgQmFzZVN1cmZhY2UgZnJvbSAnLi4vY29yZS9zdXJmYWNlJztcbmltcG9ydCBSb290Tm9kZSBmcm9tICcuL3Jvb3Qtbm9kZSc7XG5pbXBvcnQgR3JvdXAgZnJvbSAnLi4vc2hhcGVzL2dyb3VwJztcbmltcG9ydCB0cmFuc2Zvcm0gZnJvbSAnLi4vZ2VvbWV0cnkvdHJhbnNmb3JtJztcbmltcG9ydCByZW5kZXJTVkcgZnJvbSAnLi91dGlscy9yZW5kZXItc3ZnJztcbmltcG9ydCB7IFNWR19OUyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IGJpbmRFdmVudHMsIHVuYmluZEV2ZW50cywgZWxlbWVudFN0eWxlcyB9IGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQgQXJjTm9kZSBmcm9tICcuL2FyYy1ub2RlJztcbmltcG9ydCBDaXJjbGVOb2RlIGZyb20gJy4vY2lyY2xlLW5vZGUnO1xuaW1wb3J0IEdyb3VwTm9kZSBmcm9tICcuL2dyb3VwLW5vZGUnO1xuaW1wb3J0IEltYWdlTm9kZSBmcm9tICcuL2ltYWdlLW5vZGUnO1xuaW1wb3J0IE11bHRpUGF0aE5vZGUgZnJvbSAnLi9tdWx0aS1wYXRoLW5vZGUnO1xuaW1wb3J0IFBhdGhOb2RlIGZyb20gJy4vcGF0aC1ub2RlJztcbmltcG9ydCBSZWN0Tm9kZSBmcm9tICcuL3JlY3Qtbm9kZSc7XG5pbXBvcnQgVGV4dE5vZGUgZnJvbSAnLi90ZXh0LW5vZGUnO1xuaW1wb3J0IE5PREVfTUFQIGZyb20gJy4vbm9kZS1tYXAnO1xuXG5OT0RFX01BUC5BcmMgPSBBcmNOb2RlO1xuTk9ERV9NQVAuQ2lyY2xlID0gQ2lyY2xlTm9kZTtcbk5PREVfTUFQLkdyb3VwID0gR3JvdXBOb2RlO1xuTk9ERV9NQVAuSW1hZ2UgPSBJbWFnZU5vZGU7XG5OT0RFX01BUC5NdWx0aVBhdGggPSBNdWx0aVBhdGhOb2RlO1xuTk9ERV9NQVAuUGF0aCA9IFBhdGhOb2RlO1xuTk9ERV9NQVAuUmVjdCA9IFJlY3ROb2RlO1xuTk9ERV9NQVAuVGV4dCA9IFRleHROb2RlO1xuXG5jb25zdCBSVEwgPSAncnRsJztcblxuZnVuY3Rpb24gYWxpZ25Ub1NjcmVlbihlbGVtZW50KSB7XG4gICAgbGV0IGN0bTtcblxuICAgIHRyeSB7XG4gICAgICAgIGN0bSA9IGVsZW1lbnQuZ2V0U2NyZWVuQ1RNID8gZWxlbWVudC5nZXRTY3JlZW5DVE0oKSA6IG51bGw7XG4gICAgfSBjYXRjaCAoZSkgeyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxuICAgIGlmIChjdG0pIHtcbiAgICAgICAgY29uc3QgbGVmdCA9IC0gY3RtLmUgJSAxO1xuICAgICAgICBjb25zdCB0b3AgPSAtIGN0bS5mICUgMTtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBlbGVtZW50LnN0eWxlO1xuXG4gICAgICAgIGlmIChsZWZ0ICE9PSAwIHx8IHRvcCAhPT0gMCkge1xuICAgICAgICAgICAgc3R5bGUubGVmdCA9IGxlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICBzdHlsZS50b3AgPSB0b3AgKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIFN1cmZhY2UgZXh0ZW5kcyBCYXNlU3VyZmFjZSB7XG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcInN2Z1wiO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudCwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5fcm9vdCA9IG5ldyBSb290Tm9kZShPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIHJ0bDogZWxlbWVudFN0eWxlcyhlbGVtZW50LCAnZGlyZWN0aW9uJykuZGlyZWN0aW9uID09PSBSVExcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zKSk7XG5cbiAgICAgICAgcmVuZGVyU1ZHKHRoaXMuZWxlbWVudCwgdGhpcy5fdGVtcGxhdGUoJycpKTtcblxuICAgICAgICB0aGlzLl9yb290RWxlbWVudCA9IHRoaXMuZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgIHRoaXMuX3Jvb3RFbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcblxuICAgICAgICBhbGlnblRvU2NyZWVuKHRoaXMuX3Jvb3RFbGVtZW50KTtcblxuICAgICAgICB0aGlzLl9yb290LmF0dGFjaFRvKHRoaXMuX3Jvb3RFbGVtZW50KTtcblxuICAgICAgICBiaW5kRXZlbnRzKHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgY2xpY2s6IHRoaXMuX2NsaWNrLFxuICAgICAgICAgICAgbW91c2VvdmVyOiB0aGlzLl9tb3VzZWVudGVyLFxuICAgICAgICAgICAgbW91c2VvdXQ6IHRoaXMuX21vdXNlbGVhdmUsXG4gICAgICAgICAgICBtb3VzZW1vdmU6IHRoaXMuX21vdXNlbW92ZVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9yb290KSB7XG4gICAgICAgICAgICB0aGlzLl9yb290LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgdW5iaW5kRXZlbnRzKHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgICAgIGNsaWNrOiB0aGlzLl9jbGljayxcbiAgICAgICAgICAgICAgICBtb3VzZW92ZXI6IHRoaXMuX21vdXNlZW50ZXIsXG4gICAgICAgICAgICAgICAgbW91c2VvdXQ6IHRoaXMuX21vdXNlbGVhdmUsXG4gICAgICAgICAgICAgICAgbW91c2Vtb3ZlOiB0aGlzLl9tb3VzZW1vdmVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIHRyYW5zbGF0ZShvZmZzZXQpIHtcbiAgICAgICAgY29uc3Qgdmlld0JveCA9IGAkeyBNYXRoLnJvdW5kKG9mZnNldC54KSB9ICR7IE1hdGgucm91bmQob2Zmc2V0LnkpIH0gJHsgdGhpcy5fc2l6ZS53aWR0aCB9ICR7IHRoaXMuX3NpemUuaGVpZ2h0IH1gO1xuXG4gICAgICAgIHRoaXMuX29mZnNldCA9IG9mZnNldDtcbiAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQuc2V0QXR0cmlidXRlKFwidmlld0JveFwiLCB2aWV3Qm94KTtcbiAgICB9XG5cbiAgICBkcmF3KGVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIuZHJhdyhlbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcm9vdC5sb2FkKFsgZWxlbWVudCBdKTtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgc3VwZXIuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fcm9vdC5jbGVhcigpO1xuICAgIH1cblxuICAgIHN2ZygpIHtcbiAgICAgICAgcmV0dXJuIFwiPD94bWwgdmVyc2lvbj0nMS4wJyA/PlwiICsgdGhpcy5fdGVtcGxhdGUoKTtcbiAgICB9XG5cbiAgICBleHBvcnRWaXN1YWwoKSB7XG4gICAgICAgIGxldCB7IF92aXN1YWw6IHZpc3VhbCwgX29mZnNldDogb2Zmc2V0IH0gPSB0aGlzO1xuXG4gICAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgICAgIGNvbnN0IHdyYXAgPSBuZXcgR3JvdXAoKTtcbiAgICAgICAgICAgIHdyYXAuY2hpbGRyZW4ucHVzaCh2aXN1YWwpO1xuXG4gICAgICAgICAgICB3cmFwLnRyYW5zZm9ybShcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0oKS50cmFuc2xhdGUoLW9mZnNldC54LCAtb2Zmc2V0LnkpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB2aXN1YWwgPSB3cmFwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZpc3VhbDtcbiAgICB9XG5cbiAgICBfcmVzaXplKCkge1xuICAgICAgICBpZiAodGhpcy5fb2Zmc2V0KSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZSh0aGlzLl9vZmZzZXQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3RlbXBsYXRlKHN2Z1N0eWxlcykge1xuICAgICAgICBjb25zdCBzdHlsZXMgPSB0eXBlb2Ygc3ZnU3R5bGVzID09PSAnc3RyaW5nJyA/IHN2Z1N0eWxlcyA6XG4gICAgICAgICAgICBcInN0eWxlPSd3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyBvdmVyZmxvdzogaGlkZGVuOycgXCI7XG4gICAgICAgIHJldHVybiBgPHN2ZyAke3N0eWxlc314bWxucz0nJHsgU1ZHX05TIH0nIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB2ZXJzaW9uPScxLjEnPiR7IHRoaXMuX3Jvb3QucmVuZGVyKCkgfTwvc3ZnPmA7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTdXJmYWNlO1xuIiwiY29uc3QgTk9ERV9NQVAgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgTk9ERV9NQVA7IiwiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXJQYXRoKGN0eCwgcGF0aCkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zZWdtZW50cztcblxuICAgIGlmIChzZWdtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBzZWdtZW50ID0gc2VnbWVudHNbMF07XG4gICAgbGV0IGFuY2hvciA9IHNlZ21lbnQuYW5jaG9yKCk7XG4gICAgY3R4Lm1vdmVUbyhhbmNob3IueCwgYW5jaG9yLnkpO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgICAgIGFuY2hvciA9IHNlZ21lbnQuYW5jaG9yKCk7XG5cbiAgICAgICAgbGV0IHByZXZTZWcgPSBzZWdtZW50c1tpIC0gMV07XG4gICAgICAgIGxldCBwcmV2T3V0ID0gcHJldlNlZy5jb250cm9sT3V0KCk7XG4gICAgICAgIGxldCBjb250cm9sSW4gPSBzZWdtZW50LmNvbnRyb2xJbigpO1xuXG4gICAgICAgIGlmIChwcmV2T3V0ICYmIGNvbnRyb2xJbikge1xuICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8ocHJldk91dC54LCBwcmV2T3V0LnksXG4gICAgICAgICAgICAgICAgY29udHJvbEluLngsIGNvbnRyb2xJbi55LFxuICAgICAgICAgICAgICAgIGFuY2hvci54LCBhbmNob3IueSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHgubGluZVRvKGFuY2hvci54LCBhbmNob3IueSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGF0aC5vcHRpb25zLmNsb3NlZCkge1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IEJhc2VOb2RlIGZyb20gJy4uL2NvcmUvYmFzZS1ub2RlJztcbmltcG9ydCBOT0RFX01BUCBmcm9tICcuL25vZGUtbWFwJztcbmltcG9ydCByZW5kZXJQYXRoIGZyb20gJy4vdXRpbHMvcmVuZGVyLXBhdGgnO1xuaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jbGFzcyBOb2RlIGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIGNvbnN0cnVjdG9yKHNyY0VsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoc3JjRWxlbWVudCk7XG4gICAgICAgIGlmIChzcmNFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmluaXRDbGlwKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0Q2xpcCgpIHtcbiAgICAgICAgY29uc3QgY2xpcCA9IHRoaXMuc3JjRWxlbWVudC5jbGlwKCk7XG4gICAgICAgIGlmIChjbGlwKSB7XG4gICAgICAgICAgICB0aGlzLmNsaXAgPSBjbGlwO1xuICAgICAgICAgICAgY2xpcC5hZGRPYnNlcnZlcih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICBpZiAodGhpcy5zcmNFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnNyY0VsZW1lbnQucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNsZWFyQ2xpcCgpO1xuXG4gICAgICAgIHN1cGVyLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgY2xlYXJDbGlwKCkge1xuICAgICAgICBpZiAodGhpcy5jbGlwKSB7XG4gICAgICAgICAgICB0aGlzLmNsaXAucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5jbGlwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0Q2xpcChjdHgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xpcCkge1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgcmVuZGVyUGF0aChjdHgsIHRoaXMuY2xpcCk7XG4gICAgICAgICAgICBjdHguY2xpcCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3B0aW9uc0NoYW5nZShlKSB7XG4gICAgICAgIGlmIChlLmZpZWxkID09PSBcImNsaXBcIikge1xuICAgICAgICAgICAgdGhpcy5jbGVhckNsaXAoKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdENsaXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLm9wdGlvbnNDaGFuZ2UoZSk7XG4gICAgfVxuXG4gICAgc2V0VHJhbnNmb3JtKGN0eCkge1xuICAgICAgICBpZiAodGhpcy5zcmNFbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSB0aGlzLnNyY0VsZW1lbnQudHJhbnNmb3JtKCk7XG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgY3R4LnRyYW5zZm9ybS5hcHBseShjdHgsIHRyYW5zZm9ybS5tYXRyaXgoKS50b0FycmF5KDYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvYWRFbGVtZW50cyhlbGVtZW50cywgcG9zLCBjb3JzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBzcmNFbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICAgICAgICBsZXQgY2hpbGRyZW4gPSBzcmNFbGVtZW50LmNoaWxkcmVuO1xuXG4gICAgICAgICAgICBsZXQgY2hpbGROb2RlID0gbmV3IE5PREVfTUFQW3NyY0VsZW1lbnQubm9kZVR5cGVdKHNyY0VsZW1lbnQsIGNvcnMpO1xuXG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5sb2FkKGNoaWxkcmVuLCBwb3MsIGNvcnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGVmaW5lZChwb3MpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRBdChjaGlsZE5vZGUsIHBvcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kKGNoaWxkTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2FkKGVsZW1lbnRzLCBwb3MsIGNvcnMpIHtcbiAgICAgICAgdGhpcy5sb2FkRWxlbWVudHMoZWxlbWVudHMsIHBvcywgY29ycyk7XG5cbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgfVxuXG4gICAgc2V0T3BhY2l0eShjdHgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3JjRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3Qgb3BhY2l0eSA9IHRoaXMuc3JjRWxlbWVudC5vcGFjaXR5KCk7XG4gICAgICAgICAgICBpZiAoZGVmaW5lZChvcGFjaXR5KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFsQWxwaGEoY3R4LCBvcGFjaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdsb2JhbEFscGhhKGN0eCwgdmFsdWUpIHtcbiAgICAgICAgbGV0IG9wYWN0aXR5ID0gdmFsdWU7XG4gICAgICAgIGlmIChvcGFjdGl0eSAmJiBjdHguZ2xvYmFsQWxwaGEpIHtcbiAgICAgICAgICAgIG9wYWN0aXR5ICo9IGN0eC5nbG9iYWxBbHBoYTtcbiAgICAgICAgfVxuICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSBvcGFjdGl0eTtcbiAgICB9XG5cbiAgICB2aXNpYmxlKCkge1xuICAgICAgICBjb25zdCBzcmMgPSB0aGlzLnNyY0VsZW1lbnQ7XG4gICAgICAgIHJldHVybiAhc3JjIHx8IChzcmMgJiYgc3JjLm9wdGlvbnMudmlzaWJsZSAhPT0gZmFsc2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9kZTsiLCJpbXBvcnQgTm9kZSBmcm9tICcuL25vZGUnO1xuaW1wb3J0IHRyYXZlcnNhYmxlIGZyb20gJy4uL21peGlucy90cmF2ZXJzYWJsZSc7XG5cblxuY2xhc3MgR3JvdXBOb2RlIGV4dGVuZHMgdHJhdmVyc2FibGUoTm9kZSwgXCJjaGlsZE5vZGVzXCIpIHtcbiAgICByZW5kZXJUbyhjdHgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpc2libGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LnNhdmUoKTtcblxuICAgICAgICB0aGlzLnNldFRyYW5zZm9ybShjdHgpO1xuICAgICAgICB0aGlzLnNldENsaXAoY3R4KTtcbiAgICAgICAgdGhpcy5zZXRPcGFjaXR5KGN0eCk7XG5cbiAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IHRoaXMuY2hpbGROb2RlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSBjaGlsZE5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKGNoaWxkLnZpc2libGUoKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkLnJlbmRlclRvKGN0eCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR3JvdXBOb2RlO1xuIiwiaW1wb3J0IEdyb3VwTm9kZSBmcm9tICcuL2dyb3VwLW5vZGUnO1xuaW1wb3J0IHRyYXZlcnNhYmxlIGZyb20gJy4uL21peGlucy90cmF2ZXJzYWJsZSc7XG5pbXBvcnQgeyBhbmltYXRpb25GcmFtZSwgdGhyb3R0bGUgfSBmcm9tICcuLi9jb21tb24nO1xuXG5cbmNvbnN0IEZSQU1FX0RFTEFZID0gMTAwMCAvIDYwO1xuXG5jbGFzcyBSb290Tm9kZSBleHRlbmRzIHRyYXZlcnNhYmxlKEdyb3VwTm9kZSwgXCJjaGlsZE5vZGVzXCIpIHtcbiAgICBjb25zdHJ1Y3RvcihjYW52YXMsIHNpemUpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5jdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgICAgIGNvbnN0IGludmFsaWRhdGVIYW5kbGVyID0gdGhpcy5faW52YWxpZGF0ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmludmFsaWRhdGUgPSB0aHJvdHRsZSgoKSA9PiB7XG4gICAgICAgICAgICBhbmltYXRpb25GcmFtZShpbnZhbGlkYXRlSGFuZGxlcik7XG4gICAgICAgIH0sIEZSQU1FX0RFTEFZKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdHggPSBudWxsO1xuICAgIH1cblxuICAgIGxvYWQoZWxlbWVudHMsIHBvcywgY29ycykge1xuICAgICAgICB0aGlzLmxvYWRFbGVtZW50cyhlbGVtZW50cywgcG9zLCBjb3JzKTtcbiAgICAgICAgdGhpcy5faW52YWxpZGF0ZSgpO1xuICAgIH1cblxuICAgIF9yZXNjYWxlKHNjYWxlKSB7XG4gICAgICAgIGNvbnN0IHsgY2FudmFzLCBzaXplIH0gPSB0aGlzO1xuICAgICAgICBjYW52YXMud2lkdGggPSBzaXplLndpZHRoICogc2NhbGU7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBzaXplLmhlaWdodCAqIHNjYWxlO1xuICAgICAgICB0aGlzLmN0eC5zY2FsZShzY2FsZSwgc2NhbGUpO1xuICAgIH1cblxuICAgIF9kZXZpY2VQaXhlbFJhdGlvKCkge1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgX2ludmFsaWRhdGUob3B0aW9ucykge1xuICAgICAgICBpZiAoIXRoaXMuY3R4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaXhlZFNjYWxlID0gb3B0aW9ucyAmJiBvcHRpb25zLmZpeGVkU2NhbGU7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gZml4ZWRTY2FsZSA/IDEgOiB0aGlzLl9kZXZpY2VQaXhlbFJhdGlvKCk7XG4gICAgICAgIHRoaXMuX3Jlc2NhbGUoc2NhbGUpO1xuXG4gICAgICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5yZW5kZXJUbyh0aGlzLmN0eCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSb290Tm9kZTtcbiIsImltcG9ydCB7IENsYXNzIH0gZnJvbSAnLi4vY29tbW9uJztcblxuY2xhc3MgUXVhZFJvb3QgZXh0ZW5kcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5zaGFwZXMgPSBbXTtcbiAgICB9XG5cbiAgICBfYWRkKHNoYXBlLCBiYm94KSB7XG4gICAgICAgIHRoaXMuc2hhcGVzLnB1c2goe1xuICAgICAgICAgICAgYmJveDogYmJveCxcbiAgICAgICAgICAgIHNoYXBlOiBzaGFwZVxuICAgICAgICB9KTtcbiAgICAgICAgc2hhcGUuX3F1YWROb2RlID0gdGhpcztcbiAgICB9XG5cbiAgICBwb2ludFNoYXBlcyhwb2ludCkge1xuICAgICAgICBjb25zdCBzaGFwZXMgPSB0aGlzLnNoYXBlcztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gc2hhcGVzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGlmIChzaGFwZXNbaWR4XS5iYm94LmNvbnRhaW5zUG9pbnQocG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc2hhcGVzW2lkeF0uc2hhcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgaW5zZXJ0KHNoYXBlLCBiYm94KSB7XG4gICAgICAgIHRoaXMuX2FkZChzaGFwZSwgYmJveCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKHNoYXBlKSB7XG4gICAgICAgIGNvbnN0IHNoYXBlcyA9IHRoaXMuc2hhcGVzO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBzaGFwZXMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGlmIChzaGFwZXNbaWR4XS5zaGFwZSA9PT0gc2hhcGUpIHtcbiAgICAgICAgICAgICAgICBzaGFwZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFF1YWRSb290OyIsImltcG9ydCBRdWFkUm9vdCBmcm9tICcuL3F1YWQtcm9vdCc7XG5pbXBvcnQgeyBSZWN0IH0gZnJvbSAnLi4vZ2VvbWV0cnknO1xuaW1wb3J0IHsgYXBwZW5kIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNsYXNzIFF1YWROb2RlIGV4dGVuZHMgUXVhZFJvb3Qge1xuICAgIGNvbnN0cnVjdG9yKHJlY3QpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICB0aGlzLnJlY3QgPSByZWN0O1xuICAgIH1cblxuICAgIGluQm91bmRzKHJlY3QpIHtcbiAgICAgICAgY29uc3Qgbm9kZVJlY3QgPSB0aGlzLnJlY3Q7XG4gICAgICAgIGNvbnN0IG5vZGVCb3R0b21SaWdodCA9IG5vZGVSZWN0LmJvdHRvbVJpZ2h0KCk7XG4gICAgICAgIGNvbnN0IGJvdHRvbVJpZ2h0ID0gcmVjdC5ib3R0b21SaWdodCgpO1xuICAgICAgICBjb25zdCBpbkJvdW5kcyA9IG5vZGVSZWN0Lm9yaWdpbi54IDw9IHJlY3Qub3JpZ2luLnggJiYgbm9kZVJlY3Qub3JpZ2luLnkgPD0gcmVjdC5vcmlnaW4ueSAmJiBib3R0b21SaWdodC54IDw9IG5vZGVCb3R0b21SaWdodC54ICYmXG4gICAgICAgICAgICBib3R0b21SaWdodC55IDw9IG5vZGVCb3R0b21SaWdodC55O1xuICAgICAgICByZXR1cm4gaW5Cb3VuZHM7XG4gICAgfVxuXG4gICAgcG9pbnRTaGFwZXMocG9pbnQpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLnBvaW50U2hhcGVzKHBvaW50KTtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgYXBwZW5kKHJlc3VsdCwgY2hpbGRyZW5baWR4XS5wb2ludFNoYXBlcyhwb2ludCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgaW5zZXJ0KHNoYXBlLCBiYm94KSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgbGV0IGluc2VydGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHRoaXMuaW5Cb3VuZHMoYmJveCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNoYXBlcy5sZW5ndGggPCA0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkKHNoYXBlLCBiYm94KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5pdENoaWxkcmVuKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgY2hpbGRyZW4ubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5baWR4XS5pbnNlcnQoc2hhcGUsIGJib3gpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghaW5zZXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkKHNoYXBlLCBiYm94KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnNlcnRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5zZXJ0ZWQ7XG4gICAgfVxuXG4gICAgX2luaXRDaGlsZHJlbigpIHtcbiAgICAgICAgY29uc3QgeyByZWN0LCBjaGlsZHJlbiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgY2VudGVyID0gcmVjdC5jZW50ZXIoKTtcbiAgICAgICAgY29uc3QgaGFsZldpZHRoID0gcmVjdC53aWR0aCgpIC8gMjtcbiAgICAgICAgY29uc3QgaGFsZkhlaWdodCA9IHJlY3QuaGVpZ2h0KCkgLyAyO1xuXG4gICAgICAgIGNoaWxkcmVuLnB1c2goXG4gICAgICAgICAgICBuZXcgUXVhZE5vZGUobmV3IFJlY3QoWyByZWN0Lm9yaWdpbi54LCByZWN0Lm9yaWdpbi55IF0sIFsgaGFsZldpZHRoLCBoYWxmSGVpZ2h0IF0pKSxcbiAgICAgICAgICAgIG5ldyBRdWFkTm9kZShuZXcgUmVjdChbIGNlbnRlci54LCByZWN0Lm9yaWdpbi55IF0sIFsgaGFsZldpZHRoLCBoYWxmSGVpZ2h0IF0pKSxcbiAgICAgICAgICAgIG5ldyBRdWFkTm9kZShuZXcgUmVjdChbIHJlY3Qub3JpZ2luLngsIGNlbnRlci55IF0sIFsgaGFsZldpZHRoLCBoYWxmSGVpZ2h0IF0pKSxcbiAgICAgICAgICAgIG5ldyBRdWFkTm9kZShuZXcgUmVjdChbIGNlbnRlci54LCBjZW50ZXIueSBdLCBbIGhhbGZXaWR0aCwgaGFsZkhlaWdodCBdKSlcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFF1YWROb2RlOyIsImltcG9ydCBRdWFkUm9vdCBmcm9tICcuL3F1YWQtcm9vdCc7XG5pbXBvcnQgUXVhZE5vZGUgZnJvbSAnLi9xdWFkLW5vZGUnO1xuaW1wb3J0IHsgUmVjdCB9IGZyb20gJy4uL2dlb21ldHJ5JztcbmltcG9ydCB7IENsYXNzIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IGFwcGVuZCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBST09UX1NJWkUgPSAzMDAwO1xuY29uc3QgTEVWRUxfU1RFUCA9IDEwMDAwO1xuY29uc3QgTUFYX0xFVkVMID0gNzU7XG5cbmNsYXNzIFNoYXBlc1F1YWRUcmVlIGV4dGVuZHMgQ2xhc3Mge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5pbml0Um9vdHMoKTtcbiAgICB9XG5cbiAgICBpbml0Um9vdHMoKSB7XG4gICAgICAgIHRoaXMucm9vdE1hcCA9IHt9O1xuICAgICAgICB0aGlzLnJvb3QgPSBuZXcgUXVhZFJvb3QoKTtcbiAgICAgICAgdGhpcy5yb290RWxlbWVudHMgPSBbXTtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgY29uc3Qgcm9vdEVsZW1lbnRzID0gdGhpcy5yb290RWxlbWVudHM7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHJvb3RFbGVtZW50cy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShyb290RWxlbWVudHNbaWR4XSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0Um9vdHMoKTtcbiAgICB9XG5cbiAgICBwb2ludFNoYXBlKHBvaW50KSB7XG4gICAgICAgIGNvbnN0IHNlY3RvclJvb3QgPSAoIHRoaXMucm9vdE1hcFsgTWF0aC5mbG9vciggcG9pbnQueCAvIFJPT1RfU0laRSApIF0gfHwge30gKVsgTWF0aC5mbG9vciggcG9pbnQueSAvIFJPT1RfU0laRSApIF07XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLnJvb3QucG9pbnRTaGFwZXMocG9pbnQpO1xuXG4gICAgICAgIGlmIChzZWN0b3JSb290KSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KHNlY3RvclJvb3QucG9pbnRTaGFwZXMocG9pbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYXNzaWduWmluZGV4KHJlc3VsdCk7XG5cbiAgICAgICAgcmVzdWx0LnNvcnQoekluZGV4Q29tcGFyZXIpO1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCByZXN1bHQubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgaWYgKHJlc3VsdFtpZHhdLmNvbnRhaW5zUG9pbnQocG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFtpZHhdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXNzaWduWmluZGV4KGVsZW1lbnRzKSB7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVsZW1lbnRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGxldCBlbGVtZW50ID0gZWxlbWVudHNbaWR4XTtcbiAgICAgICAgICAgIGxldCB6SW5kZXggPSAwO1xuICAgICAgICAgICAgbGV0IGxldmVsV2VpZ2h0ID0gTWF0aC5wb3coTEVWRUxfU1RFUCwgTUFYX0xFVkVMKTtcbiAgICAgICAgICAgIGxldCBwYXJlbnRzID0gW107XG5cbiAgICAgICAgICAgIHdoaWxlIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2hpbGUgKHBhcmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudCA9IHBhcmVudHMucG9wKCk7XG4gICAgICAgICAgICAgICAgekluZGV4ICs9ICgoZWxlbWVudC5wYXJlbnQgPyBlbGVtZW50LnBhcmVudC5jaGlsZHJlbiA6IHRoaXMucm9vdEVsZW1lbnRzKS5pbmRleE9mKGVsZW1lbnQpICsgMSkgKiBsZXZlbFdlaWdodDtcbiAgICAgICAgICAgICAgICBsZXZlbFdlaWdodCAvPSBMRVZFTF9TVEVQO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbGVtZW50c1tpZHhdLl96SW5kZXggPSB6SW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcHRpb25zQ2hhbmdlKGUpIHtcbiAgICAgICAgaWYgKGUuZmllbGQgPT09IFwidHJhbnNmb3JtXCIgfHwgZS5maWVsZCA9PT0gXCJzdHJva2Uud2lkdGhcIikge1xuICAgICAgICAgICAgdGhpcy5iYm94Q2hhbmdlKGUuZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZW9tZXRyeUNoYW5nZShlKSB7XG4gICAgICAgIHRoaXMuYmJveENoYW5nZShlLmVsZW1lbnQpO1xuICAgIH1cblxuICAgIGJib3hDaGFuZ2UoZWxlbWVudCkge1xuICAgICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gXCJHcm91cFwiKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJib3hDaGFuZ2UoZWxlbWVudC5jaGlsZHJlbltpZHhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Ll9xdWFkTm9kZSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuX3F1YWROb2RlLnJlbW92ZShlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2luc2VydFNoYXBlKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkKGVsZW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGVsZW1lbnRzKSA/IGVsZW1lbnRzLnNsaWNlKDApIDogWyBlbGVtZW50cyBdO1xuXG4gICAgICAgIGFwcGVuZCh0aGlzLnJvb3RFbGVtZW50cywgZWxlbWVudHNBcnJheSk7XG4gICAgICAgIHRoaXMuX2luc2VydChlbGVtZW50c0FycmF5KTtcbiAgICB9XG5cbiAgICBjaGlsZHJlbkNoYW5nZShlKSB7XG4gICAgICAgIGlmIChlLmFjdGlvbiA9PT0gXCJyZW1vdmVcIikge1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZS5pdGVtcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoZS5pdGVtc1tpZHhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2luc2VydChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlLml0ZW1zLCAwKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfaW5zZXJ0KGVsZW1lbnRzKSB7XG4gICAgICAgIGxldCBlbGVtZW50O1xuXG4gICAgICAgIHdoaWxlIChlbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudHMucG9wKCk7XG4gICAgICAgICAgICBlbGVtZW50LmFkZE9ic2VydmVyKHRoaXMpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IFwiR3JvdXBcIikge1xuICAgICAgICAgICAgICAgIGFwcGVuZChlbGVtZW50cywgZWxlbWVudC5jaGlsZHJlbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc2VydFNoYXBlKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2luc2VydFNoYXBlKHNoYXBlKSB7XG4gICAgICAgIGNvbnN0IGJib3ggPSBzaGFwZS5iYm94KCk7XG4gICAgICAgIGlmIChiYm94KSB7XG4gICAgICAgICAgICBjb25zdCBzZWN0b3JzID0gdGhpcy5nZXRTZWN0b3JzKGJib3gpO1xuICAgICAgICAgICAgY29uc3QgeCA9IHNlY3RvcnNbMF1bMF07XG4gICAgICAgICAgICBjb25zdCB5ID0gc2VjdG9yc1sxXVswXTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaW5Sb290KHNlY3RvcnMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb290Lmluc2VydChzaGFwZSwgYmJveCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvb3RNYXAgPSB0aGlzLnJvb3RNYXA7XG4gICAgICAgICAgICAgICAgaWYgKCFyb290TWFwW3hdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvb3RNYXBbeF0gPSB7fTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXJvb3RNYXBbeF1beV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcm9vdE1hcFt4XVt5XSA9IG5ldyBRdWFkTm9kZShcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZWN0KFsgeCAqIFJPT1RfU0laRSwgeSAqIFJPT1RfU0laRSBdLCBbIFJPT1RfU0laRSwgUk9PVF9TSVpFIF0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcm9vdE1hcFt4XVt5XS5pbnNlcnQoc2hhcGUsIGJib3gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlKGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVPYnNlcnZlcih0aGlzKTtcblxuICAgICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gXCJHcm91cFwiKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW47XG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBjaGlsZHJlbi5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoY2hpbGRyZW5baWR4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5fcXVhZE5vZGUpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuX3F1YWROb2RlLnJlbW92ZShlbGVtZW50KTtcbiAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50Ll9xdWFkTm9kZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluUm9vdChzZWN0b3JzKSB7XG4gICAgICAgIHJldHVybiBzZWN0b3JzWzBdLmxlbmd0aCA+IDEgfHwgc2VjdG9yc1sxXS5sZW5ndGggPiAxO1xuICAgIH1cblxuICAgIGdldFNlY3RvcnMocmVjdCkge1xuICAgICAgICBjb25zdCBib3R0b21SaWdodCA9IHJlY3QuYm90dG9tUmlnaHQoKTtcbiAgICAgICAgY29uc3QgYm90dG9tWCA9IE1hdGguZmxvb3IoYm90dG9tUmlnaHQueCAvIFJPT1RfU0laRSk7XG4gICAgICAgIGNvbnN0IGJvdHRvbVkgPSBNYXRoLmZsb29yKGJvdHRvbVJpZ2h0LnkgLyBST09UX1NJWkUpO1xuICAgICAgICBjb25zdCBzZWN0b3JzID0gWyBbXSwgW10gXTtcbiAgICAgICAgZm9yIChsZXQgeCA9IE1hdGguZmxvb3IocmVjdC5vcmlnaW4ueCAvIFJPT1RfU0laRSk7IHggPD0gYm90dG9tWDsgeCsrKSB7XG4gICAgICAgICAgICBzZWN0b3JzWzBdLnB1c2goeCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgeSA9IE1hdGguZmxvb3IocmVjdC5vcmlnaW4ueSAvIFJPT1RfU0laRSk7IHkgPD0gYm90dG9tWTsgeSsrKSB7XG4gICAgICAgICAgICBzZWN0b3JzWzFdLnB1c2goeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlY3RvcnM7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB6SW5kZXhDb21wYXJlcih4MSwgeDIpIHtcbiAgICBpZiAoeDEuX3pJbmRleCA8IHgyLl96SW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmICh4MS5fekluZGV4ID4geDIuX3pJbmRleCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNoYXBlc1F1YWRUcmVlOyIsImltcG9ydCB7IGRlZmluZWQgfSBmcm9tICcuLi91dGlsJztcblxuY2xhc3MgU3VyZmFjZUN1cnNvciB7XG5cbiAgICBjb25zdHJ1Y3RvcihzdXJmYWNlKSB7XG4gICAgICAgIHN1cmZhY2UuYmluZChcIm1vdXNlZW50ZXJcIiwgdGhpcy5fbW91c2VlbnRlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgc3VyZmFjZS5iaW5kKFwibW91c2VsZWF2ZVwiLCB0aGlzLl9tb3VzZWxlYXZlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHN1cmZhY2UuZWxlbWVudDtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5fcmVzZXRDdXJzb3IoKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9yZXNldEN1cnNvcigpO1xuICAgICAgICBkZWxldGUgdGhpcy5lbGVtZW50O1xuICAgIH1cblxuICAgIF9tb3VzZWVudGVyKGUpIHtcbiAgICAgICAgY29uc3QgY3Vyc29yID0gdGhpcy5fc2hhcGVDdXJzb3IoZSk7XG5cbiAgICAgICAgaWYgKCFjdXJzb3IpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2V0Q3Vyc29yKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2N1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWZhdWx0Q3Vyc29yID0gdGhpcy5fZ2V0Q3Vyc29yKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3NldEN1cnNvcihjdXJzb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX21vdXNlbGVhdmUoKSB7XG4gICAgICAgIHRoaXMuX3Jlc2V0Q3Vyc29yKCk7XG4gICAgfVxuXG4gICAgX3NoYXBlQ3Vyc29yKGUpIHtcbiAgICAgICAgbGV0IHNoYXBlID0gZS5lbGVtZW50O1xuXG4gICAgICAgIHdoaWxlIChzaGFwZSAmJiAhZGVmaW5lZChzaGFwZS5vcHRpb25zLmN1cnNvcikpIHtcbiAgICAgICAgICAgIHNoYXBlID0gc2hhcGUucGFyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gc2hhcGUub3B0aW9ucy5jdXJzb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZ2V0Q3Vyc29yKCkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LnN0eWxlLmN1cnNvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRDdXJzb3IoY3Vyc29yKSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5jdXJzb3IgPSBjdXJzb3I7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50ID0gY3Vyc29yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3Jlc2V0Q3Vyc29yKCkge1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0Q3Vyc29yKHRoaXMuX2RlZmF1bHRDdXJzb3IgfHwgXCJcIik7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fY3VycmVudDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3VyZmFjZUN1cnNvcjtcblxuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi9ub2RlJztcbmltcG9ydCB7IHBhcnNlQ29sb3IgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgaXNUcmFuc3BhcmVudCwgdmFsdWVPckRlZmF1bHQgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBMaW5lYXJHcmFkaWVudCBmcm9tICcuLi9ncmFkaWVudHMvbGluZWFyLWdyYWRpZW50JztcbmltcG9ydCBSYWRpYWxHcmFkaWVudCBmcm9tICcuLi9ncmFkaWVudHMvcmFkaWFsLWdyYWRpZW50JztcbmltcG9ydCB7IERBU0hfQVJSQVlTLCBTT0xJRCwgQlVUVCB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzJztcbmltcG9ydCByZW5kZXJQYXRoIGZyb20gJy4vdXRpbHMvcmVuZGVyLXBhdGgnO1xuXG5mdW5jdGlvbiBhZGRHcmFkaWVudFN0b3BzKGdyYWRpZW50LCBzdG9wcykge1xuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHN0b3BzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgbGV0IHN0b3AgPSBzdG9wc1tpZHhdO1xuICAgICAgICBsZXQgY29sb3IgPSBwYXJzZUNvbG9yKHN0b3AuY29sb3IoKSk7XG5cbiAgICAgICAgY29sb3IuYSAqPSBzdG9wLm9wYWNpdHkoKTtcblxuICAgICAgICBncmFkaWVudC5hZGRDb2xvclN0b3Aoc3RvcC5vZmZzZXQoKSwgY29sb3IudG9Dc3NSZ2JhKCkpO1xuICAgIH1cbn1cblxuY2xhc3MgUGF0aE5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuICAgIHJlbmRlclRvKGN0eCkge1xuICAgICAgICBjdHguc2F2ZSgpO1xuXG4gICAgICAgIHRoaXMuc2V0VHJhbnNmb3JtKGN0eCk7XG4gICAgICAgIHRoaXMuc2V0Q2xpcChjdHgpO1xuICAgICAgICB0aGlzLnNldE9wYWNpdHkoY3R4KTtcblxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJQb2ludHMoY3R4LCB0aGlzLnNyY0VsZW1lbnQpO1xuXG4gICAgICAgIHRoaXMuc2V0TGluZURhc2goY3R4KTtcbiAgICAgICAgdGhpcy5zZXRMaW5lQ2FwKGN0eCk7XG4gICAgICAgIHRoaXMuc2V0TGluZUpvaW4oY3R4KTtcblxuICAgICAgICB0aGlzLnNldEZpbGwoY3R4KTtcbiAgICAgICAgdGhpcy5zZXRTdHJva2UoY3R4KTtcblxuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIHNldEZpbGwoY3R4KSB7XG4gICAgICAgIGNvbnN0IGZpbGwgPSB0aGlzLnNyY0VsZW1lbnQub3B0aW9ucy5maWxsO1xuICAgICAgICBsZXQgaGFzRmlsbCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChmaWxsKSB7XG4gICAgICAgICAgICBpZiAoZmlsbC5ub2RlVHlwZSA9PT0gXCJHcmFkaWVudFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRHcmFkaWVudEZpbGwoY3R4LCBmaWxsKTtcbiAgICAgICAgICAgICAgICBoYXNGaWxsID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzVHJhbnNwYXJlbnQoZmlsbC5jb2xvcikpIHtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZmlsbC5jb2xvcjtcblxuICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxBbHBoYShjdHgsIGZpbGwub3BhY2l0eSk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuXG4gICAgICAgICAgICAgICAgaGFzRmlsbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGFzRmlsbDtcbiAgICB9XG5cbiAgICBzZXRHcmFkaWVudEZpbGwoY3R4LCBmaWxsKSB7XG4gICAgICAgIGNvbnN0IGJib3ggPSB0aGlzLnNyY0VsZW1lbnQucmF3QkJveCgpO1xuICAgICAgICBsZXQgZ3JhZGllbnQ7XG5cbiAgICAgICAgaWYgKGZpbGwgaW5zdGFuY2VvZiBMaW5lYXJHcmFkaWVudCkge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gZmlsbC5zdGFydCgpO1xuICAgICAgICAgICAgbGV0IGVuZCA9IGZpbGwuZW5kKCk7XG4gICAgICAgICAgICBncmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudChzdGFydC54LCBzdGFydC55LCBlbmQueCwgZW5kLnkpO1xuICAgICAgICB9IGVsc2UgaWYgKGZpbGwgaW5zdGFuY2VvZiBSYWRpYWxHcmFkaWVudCkge1xuICAgICAgICAgICAgbGV0IGNlbnRlciA9IGZpbGwuY2VudGVyKCk7XG4gICAgICAgICAgICBncmFkaWVudCA9IGN0eC5jcmVhdGVSYWRpYWxHcmFkaWVudChjZW50ZXIueCwgY2VudGVyLnksIDAsIGNlbnRlci54LCBjZW50ZXIueSwgZmlsbC5yYWRpdXMoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBhZGRHcmFkaWVudFN0b3BzKGdyYWRpZW50LCBmaWxsLnN0b3BzKTtcblxuICAgICAgICBjdHguc2F2ZSgpO1xuXG4gICAgICAgIGlmICghZmlsbC51c2VyU3BhY2UoKSkge1xuICAgICAgICAgICAgY3R4LnRyYW5zZm9ybShiYm94LndpZHRoKCksIDAsIDAsIGJib3guaGVpZ2h0KCksIGJib3gub3JpZ2luLngsIGJib3gub3JpZ2luLnkpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBncmFkaWVudDtcbiAgICAgICAgY3R4LmZpbGwoKTtcblxuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIHNldFN0cm9rZShjdHgpIHtcbiAgICAgICAgY29uc3Qgc3Ryb2tlID0gdGhpcy5zcmNFbGVtZW50Lm9wdGlvbnMuc3Ryb2tlO1xuICAgICAgICBpZiAoc3Ryb2tlICYmICFpc1RyYW5zcGFyZW50KHN0cm9rZS5jb2xvcikgJiYgc3Ryb2tlLndpZHRoID4gMCkge1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3Ryb2tlLmNvbG9yO1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0KHN0cm9rZS53aWR0aCwgMSk7XG5cbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbEFscGhhKGN0eCwgc3Ryb2tlLm9wYWNpdHkpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkYXNoVHlwZSgpIHtcbiAgICAgICAgY29uc3Qgc3Ryb2tlID0gdGhpcy5zcmNFbGVtZW50Lm9wdGlvbnMuc3Ryb2tlO1xuICAgICAgICBpZiAoc3Ryb2tlICYmIHN0cm9rZS5kYXNoVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cm9rZS5kYXNoVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0TGluZURhc2goY3R4KSB7XG4gICAgICAgIGNvbnN0IGRhc2hUeXBlID0gdGhpcy5kYXNoVHlwZSgpO1xuICAgICAgICBpZiAoZGFzaFR5cGUgJiYgZGFzaFR5cGUgIT09IFNPTElEKSB7XG4gICAgICAgICAgICBjb25zdCBkYXNoQXJyYXkgPSBEQVNIX0FSUkFZU1tkYXNoVHlwZV07XG4gICAgICAgICAgICBpZiAoY3R4LnNldExpbmVEYXNoKSB7XG4gICAgICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKGRhc2hBcnJheSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN0eC5tb3pEYXNoID0gZGFzaEFycmF5O1xuICAgICAgICAgICAgICAgIGN0eC53ZWJraXRMaW5lRGFzaCA9IGRhc2hBcnJheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldExpbmVDYXAoY3R4KSB7XG4gICAgICAgIGNvbnN0IGRhc2hUeXBlID0gdGhpcy5kYXNoVHlwZSgpO1xuICAgICAgICBjb25zdCBzdHJva2UgPSB0aGlzLnNyY0VsZW1lbnQub3B0aW9ucy5zdHJva2U7XG4gICAgICAgIGlmIChkYXNoVHlwZSAmJiBkYXNoVHlwZSAhPT0gU09MSUQpIHtcbiAgICAgICAgICAgIGN0eC5saW5lQ2FwID0gQlVUVDtcbiAgICAgICAgfSBlbHNlIGlmIChzdHJva2UgJiYgc3Ryb2tlLmxpbmVDYXApIHtcbiAgICAgICAgICAgIGN0eC5saW5lQ2FwID0gc3Ryb2tlLmxpbmVDYXA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRMaW5lSm9pbihjdHgpIHtcbiAgICAgICAgY29uc3Qgc3Ryb2tlID0gdGhpcy5zcmNFbGVtZW50Lm9wdGlvbnMuc3Ryb2tlO1xuICAgICAgICBpZiAoc3Ryb2tlICYmIHN0cm9rZS5saW5lSm9pbikge1xuICAgICAgICAgICAgY3R4LmxpbmVKb2luID0gc3Ryb2tlLmxpbmVKb2luO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyUG9pbnRzKGN0eCwgcGF0aCkge1xuICAgICAgICByZW5kZXJQYXRoKGN0eCwgcGF0aCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYXRoTm9kZTtcbiIsImltcG9ydCBQYXRoTm9kZSBmcm9tICcuL3BhdGgtbm9kZSc7XG5pbXBvcnQgcmVuZGVyUGF0aCBmcm9tICcuL3V0aWxzL3JlbmRlci1wYXRoJztcblxuY2xhc3MgQXJjTm9kZSBleHRlbmRzIFBhdGhOb2RlIHtcbiAgICByZW5kZXJQb2ludHMoY3R4KSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSB0aGlzLnNyY0VsZW1lbnQudG9QYXRoKCk7XG4gICAgICAgIHJlbmRlclBhdGgoY3R4LCBwYXRoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFyY05vZGU7XG4iLCJpbXBvcnQgUGF0aE5vZGUgZnJvbSAnLi9wYXRoLW5vZGUnO1xuXG5jbGFzcyBDaXJjbGVOb2RlIGV4dGVuZHMgUGF0aE5vZGUge1xuICAgIHJlbmRlclBvaW50cyhjdHgpIHtcbiAgICAgICAgY29uc3QgeyBjZW50ZXIsIHJhZGl1cyB9ID0gdGhpcy5zcmNFbGVtZW50Lmdlb21ldHJ5KCk7XG5cbiAgICAgICAgY3R4LmFyYyhjZW50ZXIueCwgY2VudGVyLnksIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2lyY2xlTm9kZTtcbiIsImltcG9ydCBQYXRoTm9kZSBmcm9tICcuL3BhdGgtbm9kZSc7XG5pbXBvcnQgeyBjcmVhdGVQcm9taXNlIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNsYXNzIEltYWdlTm9kZSBleHRlbmRzIFBhdGhOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihzcmNFbGVtZW50LCBjb3JzKSB7XG4gICAgICAgIHN1cGVyKHNyY0VsZW1lbnQpO1xuXG4gICAgICAgIHRoaXMub25Mb2FkID0gdGhpcy5vbkxvYWQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkVycm9yID0gdGhpcy5vbkVycm9yLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5sb2FkaW5nID0gY3JlYXRlUHJvbWlzZSgpO1xuXG4gICAgICAgIGNvbnN0IGltZyA9IHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGNvbnN0IHNyYyA9IHNyY0VsZW1lbnQuc3JjKCk7XG5cbiAgICAgICAgaWYgKGNvcnMgJiYgISgvXmRhdGE6L2kudGVzdChzcmMpKSkge1xuICAgICAgICAgICAgaW1nLmNyb3NzT3JpZ2luID0gY29ycztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgIGltZy5zcmMgPSBzcmM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW1nLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICB0aGlzLm9uTG9hZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW1nLm9ubG9hZCA9IHRoaXMub25Mb2FkO1xuICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSB0aGlzLm9uRXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJUbyhjdHgpIHtcbiAgICAgICAgaWYgKHRoaXMubG9hZGluZy5zdGF0ZSgpID09PSBcInJlc29sdmVkXCIpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0VHJhbnNmb3JtKGN0eCk7XG4gICAgICAgICAgICB0aGlzLnNldENsaXAoY3R4KTtcblxuICAgICAgICAgICAgdGhpcy5kcmF3SW1hZ2UoY3R4KTtcblxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wdGlvbnNDaGFuZ2UoZSkge1xuICAgICAgICBpZiAoZS5maWVsZCA9PT0gXCJzcmNcIikge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gY3JlYXRlUHJvbWlzZSgpO1xuICAgICAgICAgICAgdGhpcy5pbWcuc3JjID0gdGhpcy5zcmNFbGVtZW50LnNyYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIub3B0aW9uc0NoYW5nZShlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uTG9hZCgpIHtcbiAgICAgICAgdGhpcy5sb2FkaW5nLnJlc29sdmUoKTtcbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgfVxuXG4gICAgb25FcnJvcigpIHtcbiAgICAgICAgdGhpcy5sb2FkaW5nLnJlamVjdChuZXcgRXJyb3IoXG4gICAgICAgICAgICBcIlVuYWJsZSB0byBsb2FkIGltYWdlICdcIiArIHRoaXMuaW1nLnNyYyArXG4gICAgICAgICAgICBcIicuIENoZWNrIGZvciBjb25uZWN0aXZpdHkgYW5kIHZlcmlmeSBDT1JTIGhlYWRlcnMuXCJcbiAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgZHJhd0ltYWdlKGN0eCkge1xuICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5zcmNFbGVtZW50LnJlY3QoKTtcbiAgICAgICAgY29uc3QgdG9wTGVmdCA9IHJlY3QudG9wTGVmdCgpO1xuXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoXG4gICAgICAgICAgICB0aGlzLmltZywgdG9wTGVmdC54LCB0b3BMZWZ0LnksIHJlY3Qud2lkdGgoKSwgcmVjdC5oZWlnaHQoKVxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW1hZ2VOb2RlO1xuIiwiaW1wb3J0IFBhdGhOb2RlIGZyb20gJy4vcGF0aC1ub2RlJztcbmltcG9ydCByZW5kZXJQYXRoIGZyb20gJy4vdXRpbHMvcmVuZGVyLXBhdGgnO1xuXG5jbGFzcyBNdWx0aVBhdGhOb2RlIGV4dGVuZHMgUGF0aE5vZGUge1xuICAgIHJlbmRlclBvaW50cyhjdHgpIHtcbiAgICAgICAgY29uc3QgcGF0aHMgPSB0aGlzLnNyY0VsZW1lbnQucGF0aHM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlbmRlclBhdGgoY3R4LCBwYXRoc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE11bHRpUGF0aE5vZGU7XG4iLCJpbXBvcnQgeyBQYXRoIH0gZnJvbSAnLi4vc2hhcGVzL3BhdGgnO1xuaW1wb3J0IFBhdGhOb2RlIGZyb20gJy4vcGF0aC1ub2RlJztcblxuY2xhc3MgUmVjdE5vZGUgZXh0ZW5kcyBQYXRoTm9kZSB7XG4gICAgcmVuZGVyUG9pbnRzKGN0eCkge1xuICAgICAgICBjb25zdCBnZW9tZXRyeSA9IHRoaXMuc3JjRWxlbWVudC5nZW9tZXRyeSgpO1xuICAgICAgICBjb25zdCBbIHJ4LCByeSBdID0gZ2VvbWV0cnkuY29ybmVyUmFkaXVzO1xuXG4gICAgICAgIGlmIChyeCA9PT0gMCAmJiByeSA9PT0gMCkge1xuICAgICAgICAgICAgY29uc3QgeyBvcmlnaW4sIHNpemUgfSA9IGdlb21ldHJ5O1xuICAgICAgICAgICAgY3R4LnJlY3Qob3JpZ2luLngsIG9yaWdpbi55LCBzaXplLndpZHRoLCBzaXplLmhlaWdodCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5yZW5kZXJQb2ludHMoY3R4LCBQYXRoLmZyb21SZWN0KGdlb21ldHJ5KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlY3ROb2RlO1xuIiwiaW1wb3J0IFBhdGhOb2RlIGZyb20gJy4vcGF0aC1ub2RlJztcblxuY2xhc3MgVGV4dE5vZGUgZXh0ZW5kcyBQYXRoTm9kZSB7XG4gICAgcmVuZGVyVG8oY3R4KSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLnNyY0VsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRleHQucG9zaXRpb24oKTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRleHQubWVhc3VyZSgpO1xuXG4gICAgICAgIGN0eC5zYXZlKCk7XG5cbiAgICAgICAgdGhpcy5zZXRUcmFuc2Zvcm0oY3R4KTtcbiAgICAgICAgdGhpcy5zZXRDbGlwKGN0eCk7XG4gICAgICAgIHRoaXMuc2V0T3BhY2l0eShjdHgpO1xuXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcblxuICAgICAgICBjdHguZm9udCA9IHRleHQub3B0aW9ucy5mb250O1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2xlZnQnO1xuXG4gICAgICAgIGlmICh0aGlzLnNldEZpbGwoY3R4KSkge1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KHRleHQuY29udGVudCgpLCBwb3MueCwgcG9zLnkgKyBzaXplLmJhc2VsaW5lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNldFN0cm9rZShjdHgpKSB7XG4gICAgICAgICAgICB0aGlzLnNldExpbmVEYXNoKGN0eCk7XG4gICAgICAgICAgICBjdHguc3Ryb2tlVGV4dCh0ZXh0LmNvbnRlbnQoKSwgcG9zLngsIHBvcy55ICsgc2l6ZS5iYXNlbGluZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBUZXh0Tm9kZTtcbiIsImltcG9ydCBCYXNlU3VyZmFjZSBmcm9tICcuLi9jb3JlL3N1cmZhY2UnO1xuaW1wb3J0IHsgY3JlYXRlUHJvbWlzZSwgcHJvbWlzZUFsbCwgYmluZEV2ZW50cywgZWxlbWVudFNpemUsIHVuYmluZEV2ZW50cyB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IFJvb3ROb2RlIGZyb20gJy4vcm9vdC1ub2RlJztcbmltcG9ydCBTaGFwZXNRdWFkVHJlZSBmcm9tICcuLi9zZWFyY2gvc2hhcGVzLXF1YWQtdHJlZSc7XG5pbXBvcnQgU3VyZmFjZUN1cnNvciBmcm9tICcuL3N1cmZhY2UtY3Vyc29yJztcblxuaW1wb3J0IEFyY05vZGUgZnJvbSAnLi9hcmMtbm9kZSc7XG5pbXBvcnQgQ2lyY2xlTm9kZSBmcm9tICcuL2NpcmNsZS1ub2RlJztcbmltcG9ydCBHcm91cE5vZGUgZnJvbSAnLi9ncm91cC1ub2RlJztcbmltcG9ydCBJbWFnZU5vZGUgZnJvbSAnLi9pbWFnZS1ub2RlJztcbmltcG9ydCBNdWx0aVBhdGhOb2RlIGZyb20gJy4vbXVsdGktcGF0aC1ub2RlJztcbmltcG9ydCBQYXRoTm9kZSBmcm9tICcuL3BhdGgtbm9kZSc7XG5pbXBvcnQgUmVjdE5vZGUgZnJvbSAnLi9yZWN0LW5vZGUnO1xuaW1wb3J0IFRleHROb2RlIGZyb20gJy4vdGV4dC1ub2RlJztcbmltcG9ydCBOT0RFX01BUCBmcm9tICcuL25vZGUtbWFwJztcblxuTk9ERV9NQVAuQXJjID0gQXJjTm9kZTtcbk5PREVfTUFQLkNpcmNsZSA9IENpcmNsZU5vZGU7XG5OT0RFX01BUC5Hcm91cCA9IEdyb3VwTm9kZTtcbk5PREVfTUFQLkltYWdlID0gSW1hZ2VOb2RlO1xuTk9ERV9NQVAuTXVsdGlQYXRoID0gTXVsdGlQYXRoTm9kZTtcbk5PREVfTUFQLlBhdGggPSBQYXRoTm9kZTtcbk5PREVfTUFQLlJlY3QgPSBSZWN0Tm9kZTtcbk5PREVfTUFQLlRleHQgPSBUZXh0Tm9kZTtcblxuXG5jbGFzcyBTdXJmYWNlIGV4dGVuZHMgQmFzZVN1cmZhY2Uge1xuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gXCJjYW52YXNcIjtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnQsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLl90ZW1wbGF0ZSh0aGlzKTtcblxuICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLmVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcblxuICAgICAgICBjb25zdCBzaXplID0gZWxlbWVudFNpemUoZWxlbWVudCk7XG5cbiAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZS53aWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuXG4gICAgICAgIHRoaXMuX3Jvb3RFbGVtZW50ID0gY2FudmFzO1xuXG4gICAgICAgIHRoaXMuX3Jvb3QgPSBuZXcgUm9vdE5vZGUoY2FudmFzLCBzaXplKTtcblxuICAgICAgICB0aGlzLl9tb3VzZVRyYWNrSGFuZGxlciA9IHRoaXMuX3RyYWNrTW91c2UuYmluZCh0aGlzKTtcblxuICAgICAgICBiaW5kRXZlbnRzKHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgY2xpY2s6IHRoaXMuX21vdXNlVHJhY2tIYW5kbGVyLFxuICAgICAgICAgICAgbW91c2Vtb3ZlOiB0aGlzLl9tb3VzZVRyYWNrSGFuZGxlclxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3Jvb3QpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jvb3QuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fc2VhcmNoVHJlZSkge1xuICAgICAgICAgICAgdGhpcy5fc2VhcmNoVHJlZS5jbGVhcigpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3NlYXJjaFRyZWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fY3Vyc29yKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJzb3IuZGVzdHJveSgpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2N1cnNvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuYmluZEV2ZW50cyh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgIGNsaWNrOiB0aGlzLl9tb3VzZVRyYWNrSGFuZGxlcixcbiAgICAgICAgICAgIG1vdXNlbW92ZTogdGhpcy5fbW91c2VUcmFja0hhbmRsZXJcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZHJhdyhlbGVtZW50KSB7XG4gICAgICAgIHN1cGVyLmRyYXcoZWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3Jvb3QubG9hZChbIGVsZW1lbnQgXSwgdW5kZWZpbmVkLCB0aGlzLm9wdGlvbnMuY29ycyk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3NlYXJjaFRyZWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlYXJjaFRyZWUuYWRkKFsgZWxlbWVudCBdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICBzdXBlci5jbGVhcigpO1xuICAgICAgICB0aGlzLl9yb290LmNsZWFyKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3NlYXJjaFRyZWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlYXJjaFRyZWUuY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9jdXJzb3IpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvci5jbGVhcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXZlbnRUYXJnZXQoZSkge1xuICAgICAgICBpZiAodGhpcy5fc2VhcmNoVHJlZSkge1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSB0aGlzLl9zdXJmYWNlUG9pbnQoZSk7XG4gICAgICAgICAgICBjb25zdCBzaGFwZSA9IHRoaXMuX3NlYXJjaFRyZWUucG9pbnRTaGFwZShwb2ludCk7XG4gICAgICAgICAgICByZXR1cm4gc2hhcGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbWFnZSgpIHtcbiAgICAgICAgY29uc3QgeyBfcm9vdDogcm9vdCwgX3Jvb3RFbGVtZW50OiByb290RWxlbWVudCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgbG9hZGluZ1N0YXRlcyA9IFtdO1xuXG4gICAgICAgIHJvb3QudHJhdmVyc2UoKGNoaWxkTm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGNoaWxkTm9kZS5sb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgbG9hZGluZ1N0YXRlcy5wdXNoKGNoaWxkTm9kZS5sb2FkaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IGNyZWF0ZVByb21pc2UoKTtcbiAgICAgICAgY29uc3QgcmVzb2x2ZURhdGFVUkwgPSAoKSA9PiB7XG4gICAgICAgICAgICByb290Ll9pbnZhbGlkYXRlKHsgZml4ZWRTY2FsZTogdHJ1ZSB9KTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gcm9vdEVsZW1lbnQudG9EYXRhVVJMKCk7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UucmVqZWN0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHByb21pc2VBbGwobG9hZGluZ1N0YXRlcykudGhlbihyZXNvbHZlRGF0YVVSTCwgcmVzb2x2ZURhdGFVUkwpO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIHN1c3BlbmRUcmFja2luZygpIHtcbiAgICAgICAgc3VwZXIuc3VzcGVuZFRyYWNraW5nKCk7XG4gICAgICAgIGlmICh0aGlzLl9zZWFyY2hUcmVlKSB7XG4gICAgICAgICAgICB0aGlzLl9zZWFyY2hUcmVlLmNsZWFyKCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fc2VhcmNoVHJlZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc3VtZVRyYWNraW5nKCkge1xuICAgICAgICBzdXBlci5yZXN1bWVUcmFja2luZygpO1xuICAgICAgICBpZiAoIXRoaXMuX3NlYXJjaFRyZWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlYXJjaFRyZWUgPSBuZXcgU2hhcGVzUXVhZFRyZWUoKTtcblxuICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IHRoaXMuX3Jvb3QuY2hpbGROb2RlcztcbiAgICAgICAgICAgIGNvbnN0IHJvb3RFbGVtZW50cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgY2hpbGROb2Rlcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgcm9vdEVsZW1lbnRzLnB1c2goY2hpbGROb2Rlc1tpZHhdLnNyY0VsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc2VhcmNoVHJlZS5hZGQocm9vdEVsZW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9yZXNpemUoKSB7XG4gICAgICAgIHRoaXMuX3Jvb3RFbGVtZW50LndpZHRoID0gdGhpcy5fc2l6ZS53aWR0aDtcbiAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQuaGVpZ2h0ID0gdGhpcy5fc2l6ZS5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5fcm9vdC5zaXplID0gdGhpcy5fc2l6ZTtcbiAgICAgICAgdGhpcy5fcm9vdC5pbnZhbGlkYXRlKCk7XG4gICAgfVxuXG4gICAgX3RlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gXCI8Y2FudmFzPjwvY2FudmFzPlwiO1xuICAgIH1cblxuICAgIF9lbmFibGVUcmFja2luZygpIHtcbiAgICAgICAgdGhpcy5fc2VhcmNoVHJlZSA9IG5ldyBTaGFwZXNRdWFkVHJlZSgpO1xuICAgICAgICB0aGlzLl9jdXJzb3IgPSBuZXcgU3VyZmFjZUN1cnNvcih0aGlzKTtcblxuICAgICAgICBzdXBlci5fZW5hYmxlVHJhY2tpbmcoKTtcbiAgICB9XG5cbiAgICBfdHJhY2tNb3VzZShlKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdXNwZW5kZWRUcmFja2luZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2hhcGUgPSB0aGlzLmV2ZW50VGFyZ2V0KGUpO1xuXG4gICAgICAgIGlmIChlLnR5cGUgIT09IFwiY2xpY2tcIikge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFNoYXBlID0gdGhpcy5fY3VycmVudFNoYXBlO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRTaGFwZSAmJiBjdXJyZW50U2hhcGUgIT09IHNoYXBlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFwibW91c2VsZWF2ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGN1cnJlbnRTaGFwZSxcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb3VzZWxlYXZlXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNoYXBlICYmIGN1cnJlbnRTaGFwZSAhPT0gc2hhcGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoXCJtb3VzZWVudGVyXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogc2hhcGUsXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibW91c2VlbnRlclwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcihcIm1vdXNlbW92ZVwiLCB7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogc2hhcGUsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcIm1vdXNlbW92ZVwiXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFNoYXBlID0gc2hhcGU7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGUpIHtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcihcImNsaWNrXCIsIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBzaGFwZSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiY2xpY2tcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN1cmZhY2U7XG4iLCJpbXBvcnQgeyBDbGFzcywgbG9nVG9Db25zb2xlIH0gZnJvbSAnLi9jb21tb24nO1xuaW1wb3J0IFNWR1N1cmZhY2UgZnJvbSAnLi9zdmcvc3VyZmFjZSc7XG5pbXBvcnQgQ2FudmFzU3VyZmFjZSBmcm9tICcuL2NhbnZhcy9zdXJmYWNlJztcblxubGV0IGluc3RhbmNlO1xubGV0IHN1cHBvcnQ7XG5cbmNvbnN0IGhhc0RvY3VtZW50ID0gKCkgPT4gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuXG5jb25zdCBzdXBwb3J0c0NhbnZhcyA9ICgpID0+IGhhc0RvY3VtZW50KCkgJiZcbiAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLmdldENvbnRleHQ7XG5cbmNvbnN0IHN1cHBvcnRzU1ZHID0gKCkgPT4gaGFzRG9jdW1lbnQoKSAmJlxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXCJodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9mZWF0dXJlI0Jhc2ljU3RydWN0dXJlXCIsIFwiMS4xXCIpO1xuXG5jbGFzcyBTdXJmYWNlRmFjdG9yeSBleHRlbmRzIENsYXNzIHtcbiAgICBzdGF0aWMgZ2V0IHN1cHBvcnQoKSB7XG4gICAgICAgIGlmICghc3VwcG9ydCkge1xuICAgICAgICAgICAgc3VwcG9ydCA9IHtcbiAgICAgICAgICAgICAgICBjYW52YXM6IHN1cHBvcnRzQ2FudmFzKCksXG4gICAgICAgICAgICAgICAgc3ZnOiBzdXBwb3J0c1NWRygpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN1cHBvcnQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBjdXJyZW50KCkge1xuICAgICAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBTdXJmYWNlRmFjdG9yeSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX2l0ZW1zID0gWyB7XG4gICAgICAgICAgICBuYW1lOiBcInN2Z1wiLFxuICAgICAgICAgICAgdHlwZTogU1ZHU3VyZmFjZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBuYW1lOiBcImNhbnZhc1wiLFxuICAgICAgICAgICAgdHlwZTogQ2FudmFzU3VyZmFjZVxuICAgICAgICB9IF07XG4gICAgfVxuXG4gICAgY3JlYXRlKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLl9pdGVtcztcbiAgICAgICAgbGV0IG1hdGNoID0gaXRlbXNbMF07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50eXBlKSB7XG4gICAgICAgICAgICBjb25zdCBwcmVmZXJyZWQgPSBvcHRpb25zLnR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbXNbaV0ubmFtZSA9PT0gcHJlZmVycmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoID0gaXRlbXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBtYXRjaC50eXBlKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9nVG9Db25zb2xlKFxuICAgICAgICAgICAgXCJXYXJuaW5nOiBVbmFibGUgdG8gY3JlYXRlIEtlbmRvIFVJIERyYXdpbmcgU3VyZmFjZS4gUG9zc2libGUgY2F1c2VzOlxcblwiICtcbiAgICAgICAgICAgIGAtIFRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgU1ZHIGFuZCBDYW52YXMuIFVzZXIgYWdlbnQ6ICR7IG5hdmlnYXRvci51c2VyQWdlbnQgfWApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3VyZmFjZUZhY3Rvcnk7XG5cbiIsImltcG9ydCBCYXNlU3VyZmFjZSBmcm9tICcuL2NvcmUvc3VyZmFjZSc7XG5pbXBvcnQgU3VyZmFjZUZhY3RvcnkgZnJvbSAnLi9zdXJmYWNlLWZhY3RvcnknO1xuXG5jbGFzcyBTdXJmYWNlIGV4dGVuZHMgQmFzZVN1cmZhY2Uge1xuICAgIHN0YXRpYyBnZXQgc3VwcG9ydCgpIHtcbiAgICAgICAgcmV0dXJuIFN1cmZhY2VGYWN0b3J5LnN1cHBvcnQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZShlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBTdXJmYWNlRmFjdG9yeS5jdXJyZW50LmNyZWF0ZShlbGVtZW50LCBvcHRpb25zKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN1cmZhY2U7XG5cbiIsImltcG9ydCBSb290Tm9kZSBmcm9tICcuL3Jvb3Qtbm9kZSc7XG5pbXBvcnQgeyBHcm91cCB9IGZyb20gJy4uL3NoYXBlcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm0gfSBmcm9tICcuLi9nZW9tZXRyeSc7XG5pbXBvcnQgeyBTVkdfTlMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cG9ydEdyb3VwKGdyb3VwKSB7XG4gICAgY29uc3Qgcm9vdCA9IG5ldyBSb290Tm9kZSh7XG4gICAgICAgIHNraXBCYXNlSHJlZjogdHJ1ZVxuICAgIH0pO1xuICAgIGNvbnN0IGJib3ggPSBncm91cC5jbGlwcGVkQkJveCgpO1xuICAgIGxldCByb290R3JvdXAgPSBncm91cDtcblxuICAgIGlmIChiYm94KSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbiA9IGJib3guZ2V0T3JpZ2luKCk7XG4gICAgICAgIGNvbnN0IGV4cG9ydFJvb3QgPSBuZXcgR3JvdXAoKTtcbiAgICAgICAgZXhwb3J0Um9vdC50cmFuc2Zvcm0odHJhbnNmb3JtKCkudHJhbnNsYXRlKC1vcmlnaW4ueCwgLW9yaWdpbi55KSk7XG4gICAgICAgIGV4cG9ydFJvb3QuY2hpbGRyZW4ucHVzaChncm91cCk7XG4gICAgICAgIHJvb3RHcm91cCA9IGV4cG9ydFJvb3Q7XG4gICAgfVxuXG4gICAgcm9vdC5sb2FkKFsgcm9vdEdyb3VwIF0pO1xuXG4gICAgY29uc3Qgc3ZnID0gYDw/eG1sIHZlcnNpb249JzEuMCcgPz48c3ZnIHhtbG5zPSckeyBTVkdfTlMgfScgeG1sbnM6eGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnIHZlcnNpb249JzEuMSc+JHsgcm9vdC5yZW5kZXIoKSB9PC9zdmc+YDtcblxuICAgIHJvb3QuZGVzdHJveSgpO1xuXG4gICAgcmV0dXJuIHN2Zztcbn0iLCJpbXBvcnQgU3VyZmFjZSBmcm9tICcuL3N1cmZhY2UnO1xuaW1wb3J0IHsgdHJhbnNmb3JtIH0gZnJvbSAnLi4vZ2VvbWV0cnknO1xuaW1wb3J0IEdyb3VwIGZyb20gJy4uL3NoYXBlcy9ncm91cCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cG9ydEltYWdlKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgICAgIHdpZHRoOiBcIjgwMHB4XCIsIGhlaWdodDogXCI2MDBweFwiLFxuICAgICAgICBjb3JzOiBcIkFub255bW91c1wiXG4gICAgfTtcblxuICAgIGxldCBleHBvcnRSb290ID0gZ3JvdXA7XG4gICAgY29uc3QgYmJveCA9IGdyb3VwLmNsaXBwZWRCQm94KCk7XG5cblxuICAgIGlmIChiYm94KSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbiA9IGJib3guZ2V0T3JpZ2luKCk7XG4gICAgICAgIGV4cG9ydFJvb3QgPSBuZXcgR3JvdXAoKTtcbiAgICAgICAgZXhwb3J0Um9vdC50cmFuc2Zvcm0odHJhbnNmb3JtKCkudHJhbnNsYXRlKC1vcmlnaW4ueCwgLW9yaWdpbi55KSk7XG4gICAgICAgIGV4cG9ydFJvb3QuY2hpbGRyZW4ucHVzaChncm91cCk7XG5cbiAgICAgICAgY29uc3Qgc2l6ZSA9IGJib3guZ2V0U2l6ZSgpO1xuICAgICAgICBkZWZhdWx0cy53aWR0aCA9IHNpemUud2lkdGggKyBcInB4XCI7XG4gICAgICAgIGRlZmF1bHRzLmhlaWdodCA9IHNpemUuaGVpZ2h0ICsgXCJweFwiO1xuICAgIH1cblxuICAgIGNvbnN0IHN1cmZhY2VPcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbnN0IHN0eWxlID0gY29udGFpbmVyLnN0eWxlO1xuXG4gICAgc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIHN0eWxlLndpZHRoID0gc3VyZmFjZU9wdGlvbnMud2lkdGg7XG4gICAgc3R5bGUuaGVpZ2h0ID0gc3VyZmFjZU9wdGlvbnMuaGVpZ2h0O1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgIGNvbnN0IHN1cmZhY2UgPSBuZXcgU3VyZmFjZShjb250YWluZXIsIHN1cmZhY2VPcHRpb25zKTtcbiAgICBzdXJmYWNlLnN1c3BlbmRUcmFja2luZygpO1xuICAgIHN1cmZhY2UuZHJhdyhleHBvcnRSb290KTtcblxuICAgIGNvbnN0IHByb21pc2UgPSBzdXJmYWNlLmltYWdlKCk7XG4gICAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICAgICAgc3VyZmFjZS5kZXN0cm95KCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcbiAgICB9O1xuICAgIHByb21pc2UudGhlbihkZXN0cm95LCBkZXN0cm95KTtcblxuICAgIHJldHVybiBwcm9taXNlO1xufSIsImltcG9ydCB7IGNyZWF0ZVByb21pc2UsIGVuY29kZUJhc2U2NCB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IGV4cG9ydEdyb3VwIGZyb20gJy4vZXhwb3J0LWdyb3VwJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhwb3J0U1ZHKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgbGV0IHN2ZyA9IGV4cG9ydEdyb3VwKGdyb3VwKTtcblxuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yYXcpIHtcbiAgICAgICAgc3ZnID0gXCJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFwiICsgZW5jb2RlQmFzZTY0KHN2Zyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZVByb21pc2UoKS5yZXNvbHZlKHN2Zyk7XG59XG4iLCJpbXBvcnQgeyBzdXBwb3J0IH0gZnJvbSAnLi4vY29tbW9uJztcblxuLyogZXNsaW50LWRpc2FibGUgbm8tbXVsdGktc3BhY2VzLCBrZXktc3BhY2luZywgaW5kZW50LCBjYW1lbGNhc2UsIHNwYWNlLWJlZm9yZS1ibG9ja3MsIGVxZXFlcSwgYnJhY2Utc3R5bGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIHNwYWNlLWluZml4LW9wcywgc3BhY2UtYmVmb3JlLWZ1bmN0aW9uLXBhcmVuLCBhcnJheS1icmFja2V0LXNwYWNpbmcsIG9iamVjdC1jdXJseS1zcGFjaW5nICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1uZXN0ZWQtdGVybmFyeSwgbWF4LXBhcmFtcywgZGVmYXVsdC1jYXNlLCBuby1lbHNlLXJldHVybiwgbm8tZW1wdHkgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduLCBuby12YXIsIGJsb2NrLXNjb3BlZC12YXIgKi9cblxuLy8gWFhYOiByZW1vdmUgdGhpcyBqdW5rIChhc3N1bWUgYHRydWVgKSB3aGVuIHdlIG5vIGxvbmdlciBoYXZlIHRvIHN1cHBvcnQgSUUgPCAxMFxuLy8gSUUgOSAoYXQgbGVhc3QgY29tcGF0aWJpbGl0eSkgcmVwb3J0cyBoYXZpbmcgVWludDhBcnJheSBidXQgdGhlIHJlcXVlc3QgcmVzcG9uc2UgZG9lcyBub3QgY29udGFpbiBBcnJheUJ1ZmZlciB3aGljaCByZXN1bHRzIGluIG1pc3NpbmcgdGFibGUgaGVhZCBlcnJvclxuY29uc3QgSEFTX1RZUEVEX0FSUkFZUyA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBzdXBwb3J0LmJyb3dzZXIgJiYgKCFzdXBwb3J0LmJyb3dzZXIubXNpZSB8fCBzdXBwb3J0LmJyb3dzZXIudmVyc2lvbiA+IDkpO1xuXG5jb25zdCBCQVNFNjQgPSAoZnVuY3Rpb24oKXtcbiAgICB2YXIga2V5U3RyID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlY29kZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBzdHIucmVwbGFjZSgvW15BLVphLXowLTlcXCtcXC9cXD1dL2csIFwiXCIpLCBpID0gMCwgbiA9IGlucHV0Lmxlbmd0aCwgb3V0cHV0ID0gW107XG5cbiAgICAgICAgICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgICAgICAgICAgIHZhciBlbmMxID0ga2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuICAgICAgICAgICAgICAgIHZhciBlbmMyID0ga2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuICAgICAgICAgICAgICAgIHZhciBlbmMzID0ga2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuICAgICAgICAgICAgICAgIHZhciBlbmM0ID0ga2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNocjEgPSAoZW5jMSA8PCAyKSB8IChlbmMyID4+PiA0KTtcbiAgICAgICAgICAgICAgICB2YXIgY2hyMiA9ICgoZW5jMiAmIDE1KSA8PCA0KSB8IChlbmMzID4+PiAyKTtcbiAgICAgICAgICAgICAgICB2YXIgY2hyMyA9ICgoZW5jMyAmIDMpIDw8IDYpIHwgZW5jNDtcblxuICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKGNocjEpO1xuICAgICAgICAgICAgICAgIGlmIChlbmMzICE9IDY0KSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKGNocjIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW5jNCAhPSA2NCkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChjaHIzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVuY29kZTogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgICAgICAgIHZhciBpID0gMCwgbiA9IGJ5dGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBcIlwiO1xuXG4gICAgICAgICAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hyMSA9IGJ5dGVzW2krK107XG4gICAgICAgICAgICAgICAgdmFyIGNocjIgPSBieXRlc1tpKytdO1xuICAgICAgICAgICAgICAgIHZhciBjaHIzID0gYnl0ZXNbaSsrXTtcblxuICAgICAgICAgICAgICAgIHZhciBlbmMxID0gY2hyMSA+Pj4gMjtcbiAgICAgICAgICAgICAgICB2YXIgZW5jMiA9ICgoY2hyMSAmIDMpIDw8IDQpIHwgKGNocjIgPj4+IDQpO1xuICAgICAgICAgICAgICAgIHZhciBlbmMzID0gKChjaHIyICYgMTUpIDw8IDIpIHwgKGNocjMgPj4+IDYpO1xuICAgICAgICAgICAgICAgIHZhciBlbmM0ID0gY2hyMyAmIDYzO1xuXG4gICAgICAgICAgICAgICAgaWYgKGkgLSBuID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5jMyA9IGVuYzQgPSA2NDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgLSBuID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5jNCA9IDY0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG91dHB1dCArPSBrZXlTdHIuY2hhckF0KGVuYzEpICsga2V5U3RyLmNoYXJBdChlbmMyKSArIGtleVN0ci5jaGFyQXQoZW5jMykgKyBrZXlTdHIuY2hhckF0KGVuYzQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfVxuICAgIH07XG59KCkpO1xuXG5mdW5jdGlvbiBCaW5hcnlTdHJlYW0oZGF0YSkge1xuICAgIHZhciBvZmZzZXQgPSAwLCBsZW5ndGggPSAwO1xuICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgICAgZGF0YSA9IEhBU19UWVBFRF9BUlJBWVMgPyBuZXcgVWludDhBcnJheSgyNTYpIDogW107XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIGVuc3VyZSA9IEhBU19UWVBFRF9BUlJBWVMgPyBmdW5jdGlvbihsZW4pIHtcbiAgICAgICAgaWYgKGxlbiA+PSBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHRtcCA9IG5ldyBVaW50OEFycmF5KE1hdGgubWF4KGxlbiArIDI1NiwgZGF0YS5sZW5ndGggKiAyKSk7XG4gICAgICAgICAgICB0bXAuc2V0KGRhdGEsIDApO1xuICAgICAgICAgICAgZGF0YSA9IHRtcDtcbiAgICAgICAgfVxuICAgIH0gOiBmdW5jdGlvbigpIHt9O1xuXG4gICAgdmFyIGdldCA9IEhBU19UWVBFRF9BUlJBWVMgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCAwLCBsZW5ndGgpO1xuICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfTtcblxuICAgIHZhciB3cml0ZSA9IEhBU19UWVBFRF9BUlJBWVMgPyBmdW5jdGlvbihieXRlcykge1xuICAgICAgICBpZiAodHlwZW9mIGJ5dGVzID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB3cml0ZVN0cmluZyhieXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aDtcbiAgICAgICAgZW5zdXJlKG9mZnNldCArIGxlbik7XG4gICAgICAgIGRhdGEuc2V0KGJ5dGVzLCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gbGVuO1xuICAgICAgICBpZiAob2Zmc2V0ID4gbGVuZ3RoKSB7XG4gICAgICAgICAgICBsZW5ndGggPSBvZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9IDogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBieXRlcyA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JpdGVTdHJpbmcoYnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHdyaXRlQnl0ZShieXRlc1tpXSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHNsaWNlID0gSEFTX1RZUEVEX0FSUkFZUyA/IGZ1bmN0aW9uKHN0YXJ0LCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKGRhdGEuYnVmZmVyLnNsaWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgbGVuZ3RoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJRTEwXG4gICAgICAgICAgICB2YXIgeCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgICAgICAgICB4LnNldChuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgc3RhcnQsIGxlbmd0aCkpO1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cbiAgICB9IDogZnVuY3Rpb24oc3RhcnQsIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZGF0YS5zbGljZShzdGFydCwgc3RhcnQgKyBsZW5ndGgpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBlb2YoKSB7XG4gICAgICAgIHJldHVybiBvZmZzZXQgPj0gbGVuZ3RoO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWFkQnl0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG9mZnNldCA8IGxlbmd0aCA/IGRhdGFbb2Zmc2V0KytdIDogMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gd3JpdGVCeXRlKGIpIHtcbiAgICAgICAgZW5zdXJlKG9mZnNldCk7XG4gICAgICAgIGRhdGFbb2Zmc2V0KytdID0gYiAmIDB4RkY7XG4gICAgICAgIGlmIChvZmZzZXQgPiBsZW5ndGgpIHtcbiAgICAgICAgICAgIGxlbmd0aCA9IG9mZnNldDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZWFkU2hvcnQoKSB7XG4gICAgICAgIHJldHVybiAocmVhZEJ5dGUoKSA8PCA4KSB8IHJlYWRCeXRlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyaXRlU2hvcnQodykge1xuICAgICAgICB3cml0ZUJ5dGUodyA+PiA4KTtcbiAgICAgICAgd3JpdGVCeXRlKHcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWFkU2hvcnRfKCkge1xuICAgICAgICB2YXIgdyA9IHJlYWRTaG9ydCgpO1xuICAgICAgICByZXR1cm4gdyA+PSAweDgwMDAgPyB3IC0gMHgxMDAwMCA6IHc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyaXRlU2hvcnRfKHcpIHtcbiAgICAgICAgd3JpdGVTaG9ydCh3IDwgMCA/IHcgKyAweDEwMDAwIDogdyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlYWRMb25nKCkge1xuICAgICAgICByZXR1cm4gKHJlYWRTaG9ydCgpICogMHgxMDAwMCkgKyByZWFkU2hvcnQoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gd3JpdGVMb25nKHcpIHtcbiAgICAgICAgd3JpdGVTaG9ydCgodyA+Pj4gMTYpICYgMHhGRkZGKTtcbiAgICAgICAgd3JpdGVTaG9ydCh3ICYgMHhGRkZGKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVhZExvbmdfKCkge1xuICAgICAgICB2YXIgdyA9IHJlYWRMb25nKCk7XG4gICAgICAgIHJldHVybiB3ID49IDB4ODAwMDAwMDAgPyB3IC0gMHgxMDAwMDAwMDAgOiB3O1xuICAgIH1cbiAgICBmdW5jdGlvbiB3cml0ZUxvbmdfKHcpIHtcbiAgICAgICAgd3JpdGVMb25nKHcgPCAwID8gdyArIDB4MTAwMDAwMDAwIDogdyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlYWRGaXhlZCgpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRMb25nKCkgLyAweDEwMDAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3cml0ZUZpeGVkKGYpIHtcbiAgICAgICAgd3JpdGVMb25nKE1hdGgucm91bmQoZiAqIDB4MTAwMDApKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVhZEZpeGVkXygpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRMb25nXygpIC8gMHgxMDAwMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gd3JpdGVGaXhlZF8oZikge1xuICAgICAgICB3cml0ZUxvbmdfKE1hdGgucm91bmQoZiAqIDB4MTAwMDApKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVhZChsZW4pIHtcbiAgICAgICAgcmV0dXJuIHRpbWVzKGxlbiwgcmVhZEJ5dGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWFkU3RyaW5nKGxlbikge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIHJlYWQobGVuKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyaXRlU3RyaW5nKHN0cikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgd3JpdGVCeXRlKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCByZWFkZXIpIHtcbiAgICAgICAgZm9yICh2YXIgcmV0ID0gbmV3IEFycmF5KG4pLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgICAgcmV0W2ldID0gcmVhZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICB2YXIgc3RyZWFtID0ge1xuICAgICAgICBlb2YgICAgICAgICA6IGVvZixcbiAgICAgICAgcmVhZEJ5dGUgICAgOiByZWFkQnl0ZSxcbiAgICAgICAgd3JpdGVCeXRlICAgOiB3cml0ZUJ5dGUsXG4gICAgICAgIHJlYWRTaG9ydCAgIDogcmVhZFNob3J0LFxuICAgICAgICB3cml0ZVNob3J0ICA6IHdyaXRlU2hvcnQsXG4gICAgICAgIHJlYWRMb25nICAgIDogcmVhZExvbmcsXG4gICAgICAgIHdyaXRlTG9uZyAgIDogd3JpdGVMb25nLFxuICAgICAgICByZWFkRml4ZWQgICA6IHJlYWRGaXhlZCxcbiAgICAgICAgd3JpdGVGaXhlZCAgOiB3cml0ZUZpeGVkLFxuXG4gICAgICAgIC8vIHNpZ25lZCBudW1iZXJzLlxuICAgICAgICByZWFkU2hvcnRfICA6IHJlYWRTaG9ydF8sXG4gICAgICAgIHdyaXRlU2hvcnRfIDogd3JpdGVTaG9ydF8sXG4gICAgICAgIHJlYWRMb25nXyAgIDogcmVhZExvbmdfLFxuICAgICAgICB3cml0ZUxvbmdfICA6IHdyaXRlTG9uZ18sXG4gICAgICAgIHJlYWRGaXhlZF8gIDogcmVhZEZpeGVkXyxcbiAgICAgICAgd3JpdGVGaXhlZF8gOiB3cml0ZUZpeGVkXyxcblxuICAgICAgICByZWFkICAgICAgICA6IHJlYWQsXG4gICAgICAgIHdyaXRlICAgICAgIDogd3JpdGUsXG4gICAgICAgIHJlYWRTdHJpbmcgIDogcmVhZFN0cmluZyxcbiAgICAgICAgd3JpdGVTdHJpbmcgOiB3cml0ZVN0cmluZyxcblxuICAgICAgICB0aW1lcyAgICAgICA6IHRpbWVzLFxuICAgICAgICBnZXQgICAgICAgICA6IGdldCxcbiAgICAgICAgc2xpY2UgICAgICAgOiBzbGljZSxcblxuICAgICAgICBvZmZzZXQ6IGZ1bmN0aW9uKHBvcykge1xuICAgICAgICAgICAgaWYgKHBvcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gcG9zO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgICAgICB9LFxuXG4gICAgICAgIHNraXA6IGZ1bmN0aW9uKG5ieXRlcykge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IG5ieXRlcztcbiAgICAgICAgfSxcblxuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGSVggQ0FMTEVSLiAgQmluYXJ5U3RyZWFtIGlzIG5vIGxvbmdlciBjb252ZXJ0aWJsZSB0byBzdHJpbmchXCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGxlbmd0aDogZnVuY3Rpb24oKSB7IHJldHVybiBsZW5ndGg7IH0sXG5cbiAgICAgICAgc2F2ZUV4Y3Vyc2lvbjogZnVuY3Rpb24oZikge1xuICAgICAgICAgICAgdmFyIHBvcyA9IG9mZnNldDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYoKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gcG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHdyaXRlQmFzZTY0OiBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuYXRvYikge1xuICAgICAgICAgICAgICAgIHdyaXRlU3RyaW5nKHdpbmRvdy5hdG9iKGJhc2U2NCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3cml0ZShCQVNFNjQuZGVjb2RlKGJhc2U2NCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBiYXNlNjQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIEJBU0U2NC5lbmNvZGUoZ2V0KCkpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBzdHJlYW07XG59XG5cbmZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG4gICAgdmFyIG91dHB1dCA9IFtdLFxuICAgICAgICBjb3VudGVyID0gMCxcbiAgICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGV4dHJhO1xuICAgIHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcbiAgICAgICAgaWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuICAgICAgICAgICAgLy8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG4gICAgICAgICAgICBleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG4gICAgICAgICAgICBpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG4gICAgICAgICAgICAgICAgLy8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvdW50ZXItLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5Lm1hcChmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgIHZhciBvdXRwdXQgPSBcIlwiO1xuICAgICAgICBpZiAodmFsdWUgPiAweEZGRkYpIHtcbiAgICAgICAgICAgIHZhbHVlIC09IDB4MTAwMDA7XG4gICAgICAgICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG4gICAgICAgICAgICB2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodmFsdWUpO1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0pLmpvaW4oXCJcIik7XG59XG5cbmZ1bmN0aW9uIGF0b2JVaW50OEFycmF5KGJhc2U2NCkge1xuICAgIGNvbnN0IGRhdGEgPSB3aW5kb3cuYXRvYihiYXNlNjQpO1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGRhdGEubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICByZXN1bHRbaWR4XSA9IGRhdGEuY2hhckNvZGVBdChpZHgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVpbnQ4QXJyYXkoZGF0YSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGRhdGEubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICByZXN1bHRbaWR4XSA9IGRhdGFbaWR4XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUb1VpbnQ4QXJyYXkoYmFzZTY0KSB7XG4gICAgaWYgKHdpbmRvdy5hdG9iKSB7XG4gICAgICAgIHJldHVybiBhdG9iVWludDhBcnJheShiYXNlNjQpO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVVaW50OEFycmF5KEJBU0U2NC5kZWNvZGUoYmFzZTY0KSk7XG59XG5cbmV4cG9ydCB7XG4gICAgSEFTX1RZUEVEX0FSUkFZUyxcbiAgICBCQVNFNjQsXG4gICAgQmluYXJ5U3RyZWFtLFxuICAgIHVjczJkZWNvZGUsXG4gICAgdWNzMmVuY29kZSxcbiAgICBiYXNlNjRUb1VpbnQ4QXJyYXlcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1tdWx0aS1zcGFjZXMsIGtleS1zcGFjaW5nLCBpbmRlbnQsIGNhbWVsY2FzZSwgc3BhY2UtYmVmb3JlLWJsb2NrcywgZXFlcWVxLCBicmFjZS1zdHlsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgc3BhY2UtaW5maXgtb3BzLCBzcGFjZS1iZWZvcmUtZnVuY3Rpb24tcGFyZW4sIGFycmF5LWJyYWNrZXQtc3BhY2luZywgb2JqZWN0LWN1cmx5LXNwYWNpbmcgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLW5lc3RlZC10ZXJuYXJ5LCBtYXgtcGFyYW1zLCBkZWZhdWx0LWNhc2UsIG5vLWVsc2UtcmV0dXJuLCBuby1lbXB0eSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24sIG5vLXZhciwgYmxvY2stc2NvcGVkLXZhciAqL1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcXFxuICpcbiAqIFRoZSBjb2RlIGluIHRoaXMgZmlsZSwgYWx0aG91Z2ggd3JpdHRlbiBmcm9tIHNjcmF0Y2gsIGlzIGluZmx1ZW5jZWQgYnkgdGhlXG4gKiBUcnVlVHlwZSBwYXJzZXIvZW5jb2RlciBpbiBQREZLaXQgLS0gaHR0cDovL3BkZmtpdC5vcmcvIChhIENvZmZlZVNjcmlwdFxuICogbGlicmFyeSBmb3IgcHJvZHVjaW5nIFBERiBmaWxlcykuXG4gKlxuICogUERGS2l0IGlzIChjKSBEZXZvbiBHb3ZldHQgMjAxNCBhbmQgcmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICpcblxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7IEJpbmFyeVN0cmVhbSwgdWNzMmRlY29kZSB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbmZ1bmN0aW9uIHNvcnRlZEtleXMob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikuc29ydChmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEgLSBiOyB9KS5tYXAocGFyc2VGbG9hdCk7XG59XG5cbi8vL1xuY2xhc3MgRGlyZWN0b3J5IHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHRoaXMucmF3ID0gZGF0YTtcbiAgICAgICAgdGhpcy5zY2FsZXJUeXBlID0gZGF0YS5yZWFkTG9uZygpO1xuICAgICAgICB0aGlzLnRhYmxlQ291bnQgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLnNlYXJjaFJhbmdlID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgdGhpcy5lbnRyeVNlbGVjdG9yID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgdGhpcy5yYW5nZVNoaWZ0ID0gZGF0YS5yZWFkU2hvcnQoKTtcblxuICAgICAgICB2YXIgdGFibGVzID0gdGhpcy50YWJsZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRhYmxlQ291bnQ7ICsraSkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0ge1xuICAgICAgICAgICAgICAgIHRhZyAgICAgIDogZGF0YS5yZWFkU3RyaW5nKDQpLFxuICAgICAgICAgICAgICAgIGNoZWNrc3VtIDogZGF0YS5yZWFkTG9uZygpLFxuICAgICAgICAgICAgICAgIG9mZnNldCAgIDogZGF0YS5yZWFkTG9uZygpLFxuICAgICAgICAgICAgICAgIGxlbmd0aCAgIDogZGF0YS5yZWFkTG9uZygpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGFibGVzW2VudHJ5LnRhZ10gPSBlbnRyeTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlYWRUYWJsZShuYW1lLCBDdG9yKSB7XG4gICAgICAgIHZhciBkZWYgPSB0aGlzLnRhYmxlc1tuYW1lXTtcbiAgICAgICAgaWYgKCFkZWYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRhYmxlIFwiICsgbmFtZSArIFwiIG5vdCBmb3VuZCBpbiBkaXJlY3RvcnlcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh0aGlzW25hbWVdID0gZGVmLnRhYmxlID0gbmV3IEN0b3IodGhpcywgZGVmKSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKHRhYmxlcykge1xuICAgICAgICB2YXIgdGFibGVDb3VudCA9IE9iamVjdC5rZXlzKHRhYmxlcykubGVuZ3RoO1xuXG4gICAgICAgIHZhciBtYXhwb3cyID0gTWF0aC5wb3coMiwgTWF0aC5mbG9vcihNYXRoLmxvZyh0YWJsZUNvdW50KSAvIE1hdGguTE4yKSk7XG4gICAgICAgIHZhciBzZWFyY2hSYW5nZSA9IG1heHBvdzIgKiAxNjtcbiAgICAgICAgdmFyIGVudHJ5U2VsZWN0b3IgPSBNYXRoLmZsb29yKE1hdGgubG9nKG1heHBvdzIpIC8gTWF0aC5MTjIpO1xuICAgICAgICB2YXIgcmFuZ2VTaGlmdCA9IHRhYmxlQ291bnQgKiAxNiAtIHNlYXJjaFJhbmdlO1xuXG4gICAgICAgIHZhciBvdXQgPSBCaW5hcnlTdHJlYW0oKTtcbiAgICAgICAgb3V0LndyaXRlTG9uZyh0aGlzLnNjYWxlclR5cGUpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydCh0YWJsZUNvdW50KTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQoc2VhcmNoUmFuZ2UpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydChlbnRyeVNlbGVjdG9yKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQocmFuZ2VTaGlmdCk7XG5cbiAgICAgICAgdmFyIGRpcmVjdG9yeUxlbmd0aCA9IHRhYmxlQ291bnQgKiAxNjtcbiAgICAgICAgdmFyIG9mZnNldCA9IG91dC5vZmZzZXQoKSArIGRpcmVjdG9yeUxlbmd0aDtcbiAgICAgICAgdmFyIGhlYWRPZmZzZXQgPSBudWxsO1xuICAgICAgICB2YXIgdGFibGVEYXRhID0gQmluYXJ5U3RyZWFtKCk7XG5cbiAgICAgICAgZm9yICh2YXIgdGFnIGluIHRhYmxlcykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5KHRhYmxlcywgdGFnKSkge1xuICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IHRhYmxlc1t0YWddO1xuXG4gICAgICAgICAgICAgICAgb3V0LndyaXRlU3RyaW5nKHRhZyk7XG4gICAgICAgICAgICAgICAgb3V0LndyaXRlTG9uZyh0aGlzLmNoZWNrc3VtKHRhYmxlKSk7XG4gICAgICAgICAgICAgICAgb3V0LndyaXRlTG9uZyhvZmZzZXQpO1xuICAgICAgICAgICAgICAgIG91dC53cml0ZUxvbmcodGFibGUubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgIHRhYmxlRGF0YS53cml0ZSh0YWJsZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRhZyA9PSBcImhlYWRcIikge1xuICAgICAgICAgICAgICAgICAgICBoZWFkT2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gdGFibGUubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKG9mZnNldCAlIDQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFibGVEYXRhLndyaXRlQnl0ZSgwKTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3V0LndyaXRlKHRhYmxlRGF0YS5nZXQoKSk7XG4gICAgICAgIHZhciBzdW0gPSB0aGlzLmNoZWNrc3VtKG91dC5nZXQoKSk7XG4gICAgICAgIHZhciBhZGp1c3RtZW50ID0gMHhCMUIwQUZCQSAtIHN1bTtcblxuICAgICAgICBvdXQub2Zmc2V0KGhlYWRPZmZzZXQgKyA4KTtcbiAgICAgICAgb3V0LndyaXRlTG9uZyhhZGp1c3RtZW50KTtcbiAgICAgICAgcmV0dXJuIG91dC5nZXQoKTtcbiAgICB9XG5cbiAgICBjaGVja3N1bShkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBCaW5hcnlTdHJlYW0oZGF0YSk7XG4gICAgICAgIHZhciBzdW0gPSAwO1xuICAgICAgICB3aGlsZSAoIWRhdGEuZW9mKCkpIHtcbiAgICAgICAgICAgIHN1bSArPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1bSAmIDB4RkZGRkZGRkY7XG4gICAgfVxufVxuXG5jbGFzcyBUYWJsZSB7XG4gICAgY29uc3RydWN0b3IoZmlsZSwgZGVmKSB7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbiA9IGRlZjtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBkZWYubGVuZ3RoO1xuICAgICAgICB0aGlzLm9mZnNldCA9IGRlZi5vZmZzZXQ7XG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICAgIHRoaXMucmF3RGF0YSA9IGZpbGUucmF3O1xuICAgICAgICB0aGlzLnBhcnNlKGZpbGUucmF3KTtcbiAgICB9XG5cbiAgICByYXcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhd0RhdGEuc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBwYXJzZSgpIHt9IC8vIGFic3RyYWN0XG59XG5cbmNsYXNzIEhlYWRUYWJsZSBleHRlbmRzIFRhYmxlIHtcbiAgICBwYXJzZShkYXRhKSB7XG4gICAgICAgIGRhdGEub2Zmc2V0KHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy52ZXJzaW9uICAgICAgICAgICAgID0gZGF0YS5yZWFkTG9uZygpO1xuICAgICAgICB0aGlzLnJldmlzaW9uICAgICAgICAgICAgPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgICAgIHRoaXMuY2hlY2tTdW1BZGp1c3RtZW50ICA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgdGhpcy5tYWdpY051bWJlciAgICAgICAgID0gZGF0YS5yZWFkTG9uZygpO1xuICAgICAgICB0aGlzLmZsYWdzICAgICAgICAgICAgICAgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLnVuaXRzUGVyRW0gICAgICAgICAgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLmNyZWF0ZWQgICAgICAgICAgICAgPSBkYXRhLnJlYWQoOCk7XG4gICAgICAgIHRoaXMubW9kaWZpZWQgICAgICAgICAgICA9IGRhdGEucmVhZCg4KTtcblxuICAgICAgICB0aGlzLnhNaW4gPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy55TWluID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgIHRoaXMueE1heCA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLnlNYXggPSBkYXRhLnJlYWRTaG9ydF8oKTtcblxuICAgICAgICB0aGlzLm1hY1N0eWxlICAgICAgICAgICA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubG93ZXN0UmVjUFBFTSAgICAgID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgdGhpcy5mb250RGlyZWN0aW9uSGludCAgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy5pbmRleFRvTG9jRm9ybWF0ICAgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy5nbHlwaERhdGFGb3JtYXQgICAgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICB9XG5cbiAgICByZW5kZXIoaW5kZXhUb0xvY0Zvcm1hdCkge1xuICAgICAgICB2YXIgb3V0ID0gQmluYXJ5U3RyZWFtKCk7XG4gICAgICAgIG91dC53cml0ZUxvbmcodGhpcy52ZXJzaW9uKTtcbiAgICAgICAgb3V0LndyaXRlTG9uZyh0aGlzLnJldmlzaW9uKTtcbiAgICAgICAgb3V0LndyaXRlTG9uZygwKTsgICAgICAgLy8gY2hlY2tzdW0gYWRqdXN0bWVudDsgc2hhbGwgYmUgY29tcHV0ZWQgbGF0ZXJcbiAgICAgICAgb3V0LndyaXRlTG9uZyh0aGlzLm1hZ2ljTnVtYmVyKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5mbGFncyk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMudW5pdHNQZXJFbSk7XG4gICAgICAgIG91dC53cml0ZSh0aGlzLmNyZWF0ZWQpO1xuICAgICAgICBvdXQud3JpdGUodGhpcy5tb2RpZmllZCk7XG4gICAgICAgIG91dC53cml0ZVNob3J0Xyh0aGlzLnhNaW4pO1xuICAgICAgICBvdXQud3JpdGVTaG9ydF8odGhpcy55TWluKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnRfKHRoaXMueE1heCk7XG4gICAgICAgIG91dC53cml0ZVNob3J0Xyh0aGlzLnlNYXgpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydCh0aGlzLm1hY1N0eWxlKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5sb3dlc3RSZWNQUEVNKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnRfKHRoaXMuZm9udERpcmVjdGlvbkhpbnQpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydF8oaW5kZXhUb0xvY0Zvcm1hdCk7IC8vIHRoaXMgd2lsbCBkZXBlbmQgb24gdGhlIGBsb2NhYCB0YWJsZVxuICAgICAgICBvdXQud3JpdGVTaG9ydF8odGhpcy5nbHlwaERhdGFGb3JtYXQpO1xuICAgICAgICByZXR1cm4gb3V0LmdldCgpO1xuICAgIH1cbn1cblxuY2xhc3MgTG9jYVRhYmxlIGV4dGVuZHMgVGFibGUge1xuICAgIHBhcnNlKGRhdGEpIHtcbiAgICAgICAgZGF0YS5vZmZzZXQodGhpcy5vZmZzZXQpO1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5maWxlLmhlYWQuaW5kZXhUb0xvY0Zvcm1hdDtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXRzID0gZGF0YS50aW1lcyh0aGlzLmxlbmd0aCAvIDIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDIgKiBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9mZnNldHMgPSBkYXRhLnRpbWVzKHRoaXMubGVuZ3RoIC8gNCwgZGF0YS5yZWFkTG9uZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvZmZzZXRPZihpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXRzW2lkXTtcbiAgICB9XG5cbiAgICBsZW5ndGhPZihpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXRzW2lkICsgMV0gLSB0aGlzLm9mZnNldHNbaWRdO1xuICAgIH1cblxuICAgIHJlbmRlcihvZmZzZXRzKSB7XG4gICAgICAgIHZhciBvdXQgPSBCaW5hcnlTdHJlYW0oKTtcbiAgICAgICAgdmFyIG5lZWRzTG9uZ0Zvcm1hdCA9IG9mZnNldHNbb2Zmc2V0cy5sZW5ndGggLSAxXSA+IDB4RkZGRjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvZmZzZXRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAobmVlZHNMb25nRm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgb3V0LndyaXRlTG9uZyhvZmZzZXRzW2ldKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0LndyaXRlU2hvcnQob2Zmc2V0c1tpXSAvIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb3JtYXQ6IG5lZWRzTG9uZ0Zvcm1hdCA/IDEgOiAwLFxuICAgICAgICAgICAgdGFibGU6IG91dC5nZXQoKVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuY2xhc3MgSGhlYVRhYmxlIGV4dGVuZHMgVGFibGUge1xuICAgIHBhcnNlKGRhdGEpIHtcbiAgICAgICAgZGF0YS5vZmZzZXQodGhpcy5vZmZzZXQpO1xuXG4gICAgICAgIHRoaXMudmVyc2lvbiAgICAgICAgICAgICAgPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgICAgIHRoaXMuYXNjZW50ICAgICAgICAgICAgICAgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy5kZXNjZW50ICAgICAgICAgICAgICA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLmxpbmVHYXAgICAgICAgICAgICAgID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgIHRoaXMuYWR2YW5jZVdpZHRoTWF4ICAgICAgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLm1pbkxlZnRTaWRlQmVhcmluZyAgID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgIHRoaXMubWluUmlnaHRTaWRlQmVhcmluZyAgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy54TWF4RXh0ZW50ICAgICAgICAgICA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLmNhcmV0U2xvcGVSaXNlICAgICAgID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgIHRoaXMuY2FyZXRTbG9wZVJ1biAgICAgICAgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy5jYXJldE9mZnNldCAgICAgICAgICA9IGRhdGEucmVhZFNob3J0XygpO1xuXG4gICAgICAgIGRhdGEuc2tpcCg0ICogMik7ICAgICAgIC8vIHJlc2VydmVkXG5cbiAgICAgICAgdGhpcy5tZXRyaWNEYXRhRm9ybWF0ICAgICA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLm51bU9mTG9uZ0hvck1ldHJpY3MgID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICB9XG5cbiAgICByZW5kZXIoaWRzKSB7XG4gICAgICAgIHZhciBvdXQgPSBCaW5hcnlTdHJlYW0oKTtcbiAgICAgICAgb3V0LndyaXRlTG9uZyh0aGlzLnZlcnNpb24pO1xuICAgICAgICBvdXQud3JpdGVTaG9ydF8odGhpcy5hc2NlbnQpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydF8odGhpcy5kZXNjZW50KTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnRfKHRoaXMubGluZUdhcCk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMuYWR2YW5jZVdpZHRoTWF4KTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnRfKHRoaXMubWluTGVmdFNpZGVCZWFyaW5nKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnRfKHRoaXMubWluUmlnaHRTaWRlQmVhcmluZyk7XG4gICAgICAgIG91dC53cml0ZVNob3J0Xyh0aGlzLnhNYXhFeHRlbnQpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydF8odGhpcy5jYXJldFNsb3BlUmlzZSk7XG4gICAgICAgIG91dC53cml0ZVNob3J0Xyh0aGlzLmNhcmV0U2xvcGVSdW4pO1xuICAgICAgICBvdXQud3JpdGVTaG9ydF8odGhpcy5jYXJldE9mZnNldCk7XG5cbiAgICAgICAgb3V0LndyaXRlKFsgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCBdKTsgLy8gcmVzZXJ2ZWQgYnl0ZXNcblxuICAgICAgICBvdXQud3JpdGVTaG9ydF8odGhpcy5tZXRyaWNEYXRhRm9ybWF0KTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQoaWRzLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBvdXQuZ2V0KCk7XG4gICAgfVxufVxuXG5jbGFzcyBNYXhwVGFibGUgZXh0ZW5kcyBUYWJsZSB7XG4gICAgcGFyc2UoZGF0YSkge1xuICAgICAgICBkYXRhLm9mZnNldCh0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgdGhpcy5udW1HbHlwaHMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLm1heFBvaW50cyA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubWF4Q29udG91cnMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLm1heENvbXBvbmVudFBvaW50cyA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubWF4Q29tcG9uZW50Q29udG91cnMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLm1heFpvbmVzID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgdGhpcy5tYXhUd2lsaWdodFBvaW50cyA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubWF4U3RvcmFnZSA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubWF4RnVuY3Rpb25EZWZzID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgdGhpcy5tYXhJbnN0cnVjdGlvbkRlZnMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLm1heFN0YWNrRWxlbWVudHMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLm1heFNpemVPZkluc3RydWN0aW9ucyA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubWF4Q29tcG9uZW50RWxlbWVudHMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLm1heENvbXBvbmVudERlcHRoID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICB9XG5cbiAgICByZW5kZXIoZ2x5cGhJZHMpIHtcbiAgICAgICAgdmFyIG91dCA9IEJpbmFyeVN0cmVhbSgpO1xuICAgICAgICBvdXQud3JpdGVMb25nKHRoaXMudmVyc2lvbik7XG4gICAgICAgIG91dC53cml0ZVNob3J0KGdseXBoSWRzLmxlbmd0aCk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMubWF4UG9pbnRzKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5tYXhDb250b3Vycyk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMubWF4Q29tcG9uZW50UG9pbnRzKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5tYXhDb21wb25lbnRDb250b3Vycyk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMubWF4Wm9uZXMpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydCh0aGlzLm1heFR3aWxpZ2h0UG9pbnRzKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5tYXhTdG9yYWdlKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5tYXhGdW5jdGlvbkRlZnMpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydCh0aGlzLm1heEluc3RydWN0aW9uRGVmcyk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMubWF4U3RhY2tFbGVtZW50cyk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMubWF4U2l6ZU9mSW5zdHJ1Y3Rpb25zKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5tYXhDb21wb25lbnRFbGVtZW50cyk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMubWF4Q29tcG9uZW50RGVwdGgpO1xuICAgICAgICByZXR1cm4gb3V0LmdldCgpO1xuICAgIH1cbn1cblxuY2xhc3MgSG10eFRhYmxlIGV4dGVuZHMgVGFibGUge1xuICAgIHBhcnNlKGRhdGEpIHtcbiAgICAgICAgZGF0YS5vZmZzZXQodGhpcy5vZmZzZXQpO1xuICAgICAgICB2YXIgZGlyID0gdGhpcy5maWxlLCBoaGVhID0gZGlyLmhoZWE7XG4gICAgICAgIHRoaXMubWV0cmljcyA9IGRhdGEudGltZXMoaGhlYS5udW1PZkxvbmdIb3JNZXRyaWNzLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhZHZhbmNlOiBkYXRhLnJlYWRTaG9ydCgpLFxuICAgICAgICAgICAgICAgIGxzYjogZGF0YS5yZWFkU2hvcnRfKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbHNiQ291bnQgPSBkaXIubWF4cC5udW1HbHlwaHMgLSBkaXIuaGhlYS5udW1PZkxvbmdIb3JNZXRyaWNzO1xuICAgICAgICB0aGlzLmxlZnRTaWRlQmVhcmluZ3MgPSBkYXRhLnRpbWVzKGxzYkNvdW50LCBkYXRhLnJlYWRTaG9ydF8pO1xuICAgIH1cblxuICAgIGZvckdseXBoKGlkKSB7XG4gICAgICAgIHZhciBtZXRyaWNzID0gdGhpcy5tZXRyaWNzO1xuICAgICAgICB2YXIgbiA9IG1ldHJpY3MubGVuZ3RoO1xuICAgICAgICBpZiAoaWQgPCBuKSB7XG4gICAgICAgICAgICByZXR1cm4gbWV0cmljc1tpZF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFkdmFuY2U6IG1ldHJpY3NbbiAtIDFdLmFkdmFuY2UsXG4gICAgICAgICAgICBsc2I6IHRoaXMubGVmdFNpZGVCZWFyaW5nc1tpZCAtIG5dXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmVuZGVyKGdseXBoSWRzKSB7XG4gICAgICAgIHZhciBvdXQgPSBCaW5hcnlTdHJlYW0oKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbHlwaElkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIG0gPSB0aGlzLmZvckdseXBoKGdseXBoSWRzW2ldKTtcbiAgICAgICAgICAgIG91dC53cml0ZVNob3J0KG0uYWR2YW5jZSk7XG4gICAgICAgICAgICBvdXQud3JpdGVTaG9ydF8obS5sc2IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQuZ2V0KCk7XG4gICAgfVxufVxuXG52YXIgR2x5ZlRhYmxlID0gKGZ1bmN0aW9uKCl7XG4gICAgY2xhc3MgU2ltcGxlR2x5cGgge1xuICAgICAgICBnZXQgY29tcG91bmQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdHJ1Y3RvcihyYXcpIHtcbiAgICAgICAgICAgIHRoaXMucmF3ID0gcmF3O1xuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmF3LmdldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIEFSR18xX0FORF8yX0FSRV9XT1JEUyAgICAgPSAweDAwMDE7XG4gICAgdmFyIFdFX0hBVkVfQV9TQ0FMRSAgICAgICAgICAgPSAweDAwMDg7XG4gICAgdmFyIE1PUkVfQ09NUE9ORU5UUyAgICAgICAgICAgPSAweDAwMjA7XG4gICAgdmFyIFdFX0hBVkVfQU5fWF9BTkRfWV9TQ0FMRSAgPSAweDAwNDA7XG4gICAgdmFyIFdFX0hBVkVfQV9UV09fQllfVFdPICAgICAgPSAweDAwODA7XG4gICAgLy92YXIgV0VfSEFWRV9JTlNUUlVDVElPTlMgICAgICA9IDB4MDEwMDtcblxuICAgIGNsYXNzIENvbXBvdW5kR2x5cGgge1xuICAgICAgICBnZXQgY29tcG91bmQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMucmF3ID0gZGF0YTtcbiAgICAgICAgICAgIHZhciBpZHMgPSB0aGlzLmdseXBoSWRzID0gW107XG4gICAgICAgICAgICB2YXIgb2Zmc2V0cyA9IHRoaXMuaWRPZmZzZXRzID0gW107XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkgeyAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgICAgICAgICAgICAgIHZhciBmbGFncyA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgb2Zmc2V0cy5wdXNoKGRhdGEub2Zmc2V0KCkpO1xuICAgICAgICAgICAgICAgIGlkcy5wdXNoKGRhdGEucmVhZFNob3J0KCkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCEoZmxhZ3MgJiBNT1JFX0NPTVBPTkVOVFMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRhdGEuc2tpcChmbGFncyAmIEFSR18xX0FORF8yX0FSRV9XT1JEUyA/IDQgOiAyKTtcblxuICAgICAgICAgICAgICAgIGlmIChmbGFncyAmIFdFX0hBVkVfQV9UV09fQllfVFdPKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2tpcCg4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZsYWdzICYgV0VfSEFWRV9BTl9YX0FORF9ZX1NDQUxFKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2tpcCg0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZsYWdzICYgV0VfSEFWRV9BX1NDQUxFKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2tpcCgyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXIob2xkMm5ldykge1xuICAgICAgICAgICAgdmFyIG91dCA9IEJpbmFyeVN0cmVhbSh0aGlzLnJhdy5nZXQoKSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZ2x5cGhJZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSB0aGlzLmdseXBoSWRzW2ldO1xuICAgICAgICAgICAgICAgIG91dC5vZmZzZXQodGhpcy5pZE9mZnNldHNbaV0pO1xuICAgICAgICAgICAgICAgIG91dC53cml0ZVNob3J0KG9sZDJuZXdbaWRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXQuZ2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3MgZXh0ZW5kcyBUYWJsZSB7XG4gICAgICAgIHBhcnNlKCkge1xuICAgICAgICAgICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgZ2x5cGhGb3IoaWQpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkoY2FjaGUsIGlkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZVtpZF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBsb2NhID0gdGhpcy5maWxlLmxvY2E7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gbG9jYS5sZW5ndGhPZihpZCk7XG5cbiAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNhY2hlW2lkXSA9IG51bGwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMucmF3RGF0YTtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldCArIGxvY2Eub2Zmc2V0T2YoaWQpO1xuICAgICAgICAgICAgdmFyIHJhdyA9IEJpbmFyeVN0cmVhbShkYXRhLnNsaWNlKG9mZnNldCwgbGVuZ3RoKSk7XG5cbiAgICAgICAgICAgIHZhciBudW1iZXJPZkNvbnRvdXJzID0gcmF3LnJlYWRTaG9ydF8oKTtcbiAgICAgICAgICAgIHZhciB4TWluID0gcmF3LnJlYWRTaG9ydF8oKTtcbiAgICAgICAgICAgIHZhciB5TWluID0gcmF3LnJlYWRTaG9ydF8oKTtcbiAgICAgICAgICAgIHZhciB4TWF4ID0gcmF3LnJlYWRTaG9ydF8oKTtcbiAgICAgICAgICAgIHZhciB5TWF4ID0gcmF3LnJlYWRTaG9ydF8oKTtcblxuICAgICAgICAgICAgdmFyIGdseXBoID0gY2FjaGVbaWRdID0gbnVtYmVyT2ZDb250b3VycyA8IDAgPyBuZXcgQ29tcG91bmRHbHlwaChyYXcpIDogbmV3IFNpbXBsZUdseXBoKHJhdyk7XG5cbiAgICAgICAgICAgIGdseXBoLm51bWJlck9mQ29udG91cnMgPSBudW1iZXJPZkNvbnRvdXJzO1xuICAgICAgICAgICAgZ2x5cGgueE1pbiA9IHhNaW47XG4gICAgICAgICAgICBnbHlwaC55TWluID0geU1pbjtcbiAgICAgICAgICAgIGdseXBoLnhNYXggPSB4TWF4O1xuICAgICAgICAgICAgZ2x5cGgueU1heCA9IHlNYXg7XG5cbiAgICAgICAgICAgIHJldHVybiBnbHlwaDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbmRlcihnbHlwaHMsIG9sZElkcywgb2xkMm5ldykge1xuICAgICAgICAgICAgdmFyIG91dCA9IEJpbmFyeVN0cmVhbSgpLCBvZmZzZXRzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9sZElkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBpZCA9IG9sZElkc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgZ2x5cGggPSBnbHlwaHNbaWRdO1xuICAgICAgICAgICAgICAgIGlmIChvdXQub2Zmc2V0KCkgJSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dC53cml0ZUJ5dGUoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9mZnNldHMucHVzaChvdXQub2Zmc2V0KCkpO1xuICAgICAgICAgICAgICAgIGlmIChnbHlwaCkge1xuICAgICAgICAgICAgICAgICAgICBvdXQud3JpdGUoZ2x5cGgucmVuZGVyKG9sZDJuZXcpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3V0Lm9mZnNldCgpICUgMikge1xuICAgICAgICAgICAgICAgIG91dC53cml0ZUJ5dGUoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvZmZzZXRzLnB1c2gob3V0Lm9mZnNldCgpKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGFibGU6IG91dC5nZXQoKSxcbiAgICAgICAgICAgICAgICBvZmZzZXRzOiBvZmZzZXRzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcbn0oKSk7XG5cbnZhciBOYW1lVGFibGUgPSAoZnVuY3Rpb24oKXtcbiAgICBjbGFzcyBOYW1lRW50cnkge1xuICAgICAgICBjb25zdHJ1Y3Rvcih0ZXh0LCBlbnRyeSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gdGV4dC5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtSUQgPSBlbnRyeS5wbGF0Zm9ybUlEO1xuICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybVNwZWNpZmljSUQgPSBlbnRyeS5wbGF0Zm9ybVNwZWNpZmljSUQ7XG4gICAgICAgICAgICB0aGlzLmxhbmd1YWdlSUQgPSBlbnRyeS5sYW5ndWFnZUlEO1xuICAgICAgICAgICAgdGhpcy5uYW1lSUQgPSBlbnRyeS5uYW1lSUQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3MgZXh0ZW5kcyBUYWJsZSB7XG4gICAgICAgIHBhcnNlKGRhdGEpIHtcbiAgICAgICAgICAgIGRhdGEub2Zmc2V0KHRoaXMub2Zmc2V0KTtcbiAgICAgICAgICAgIGRhdGEucmVhZFNob3J0KCk7ICAgLy8gZm9ybWF0XG4gICAgICAgICAgICB2YXIgY291bnQgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgdmFyIHN0cmluZ09mZnNldCA9IHRoaXMub2Zmc2V0ICsgZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgIHZhciBuYW1lUmVjb3JkcyA9IGRhdGEudGltZXMoY291bnQsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm1JRCAgICAgICAgIDogZGF0YS5yZWFkU2hvcnQoKSxcbiAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm1TcGVjaWZpY0lEIDogZGF0YS5yZWFkU2hvcnQoKSxcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VJRCAgICAgICAgIDogZGF0YS5yZWFkU2hvcnQoKSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZUlEICAgICAgICAgICAgIDogZGF0YS5yZWFkU2hvcnQoKSxcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoICAgICAgICAgICAgIDogZGF0YS5yZWFkU2hvcnQoKSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICAgICAgICAgICAgIDogZGF0YS5yZWFkU2hvcnQoKSArIHN0cmluZ09mZnNldFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBzdHJpbmdzID0gdGhpcy5zdHJpbmdzID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVSZWNvcmRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlYyA9IG5hbWVSZWNvcmRzW2ldO1xuICAgICAgICAgICAgICAgIGRhdGEub2Zmc2V0KHJlYy5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gZGF0YS5yZWFkU3RyaW5nKHJlYy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmICghc3RyaW5nc1tyZWMubmFtZUlEXSkge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdzW3JlYy5uYW1lSURdID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmluZ3NbcmVjLm5hbWVJRF0ucHVzaChuZXcgTmFtZUVudHJ5KHRleHQsIHJlYykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wb3N0c2NyaXB0RW50cnkgPSBzdHJpbmdzWzZdWzBdO1xuICAgICAgICAgICAgdGhpcy5wb3N0c2NyaXB0TmFtZSA9IHRoaXMucG9zdHNjcmlwdEVudHJ5LnRleHQucmVwbGFjZSgvW15cXHgyMC1cXHg3Rl0vZywgXCJcIik7XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXIocHNOYW1lKSB7XG4gICAgICAgICAgICB2YXIgc3RyaW5ncyA9IHRoaXMuc3RyaW5ncztcbiAgICAgICAgICAgIHZhciBzdHJDb3VudCA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIHN0cmluZ3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkoc3RyaW5ncywgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyQ291bnQgKz0gc3RyaW5nc1tpXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG91dCA9IEJpbmFyeVN0cmVhbSgpO1xuICAgICAgICAgICAgdmFyIHN0clRhYmxlID0gQmluYXJ5U3RyZWFtKCk7XG5cbiAgICAgICAgICAgIG91dC53cml0ZVNob3J0KDApOyAgLy8gZm9ybWF0XG4gICAgICAgICAgICBvdXQud3JpdGVTaG9ydChzdHJDb3VudCk7XG4gICAgICAgICAgICBvdXQud3JpdGVTaG9ydCg2ICsgMTIgKiBzdHJDb3VudCk7IC8vIHN0cmluZ09mZnNldFxuXG4gICAgICAgICAgICBmb3IgKGkgaW4gc3RyaW5ncykge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShzdHJpbmdzLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IGkgPT0gNiA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOYW1lRW50cnkocHNOYW1lLCB0aGlzLnBvc3RzY3JpcHRFbnRyeSlcbiAgICAgICAgICAgICAgICAgICAgXSA6IHN0cmluZ3NbaV07XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGlzdC5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9IGxpc3Rbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQud3JpdGVTaG9ydChzdHIucGxhdGZvcm1JRCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQud3JpdGVTaG9ydChzdHIucGxhdGZvcm1TcGVjaWZpY0lEKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dC53cml0ZVNob3J0KHN0ci5sYW5ndWFnZUlEKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dC53cml0ZVNob3J0KHN0ci5uYW1lSUQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0LndyaXRlU2hvcnQoc3RyLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQud3JpdGVTaG9ydChzdHJUYWJsZS5vZmZzZXQoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0clRhYmxlLndyaXRlU3RyaW5nKHN0ci50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3V0LndyaXRlKHN0clRhYmxlLmdldCgpKTtcblxuICAgICAgICAgICAgcmV0dXJuIG91dC5nZXQoKTtcbiAgICAgICAgfVxuICAgIH07XG59KSgpO1xuXG52YXIgUG9zdFRhYmxlID0gKGZ1bmN0aW9uKCl7XG4gICAgdmFyIFBPU1RTQ1JJUFRfR0xZUEhTID0gXCIubm90ZGVmIC5udWxsIG5vbm1hcmtpbmdyZXR1cm4gc3BhY2UgZXhjbGFtIHF1b3RlZGJsIG51bWJlcnNpZ24gZG9sbGFyIHBlcmNlbnQgYW1wZXJzYW5kIHF1b3Rlc2luZ2xlIHBhcmVubGVmdCBwYXJlbnJpZ2h0IGFzdGVyaXNrIHBsdXMgY29tbWEgaHlwaGVuIHBlcmlvZCBzbGFzaCB6ZXJvIG9uZSB0d28gdGhyZWUgZm91ciBmaXZlIHNpeCBzZXZlbiBlaWdodCBuaW5lIGNvbG9uIHNlbWljb2xvbiBsZXNzIGVxdWFsIGdyZWF0ZXIgcXVlc3Rpb24gYXQgQSBCIEMgRCBFIEYgRyBIIEkgSiBLIEwgTSBOIE8gUCBRIFIgUyBUIFUgViBXIFggWSBaIGJyYWNrZXRsZWZ0IGJhY2tzbGFzaCBicmFja2V0cmlnaHQgYXNjaWljaXJjdW0gdW5kZXJzY29yZSBncmF2ZSBhIGIgYyBkIGUgZiBnIGggaSBqIGsgbCBtIG4gbyBwIHEgciBzIHQgdSB2IHcgeCB5IHogYnJhY2VsZWZ0IGJhciBicmFjZXJpZ2h0IGFzY2lpdGlsZGUgQWRpZXJlc2lzIEFyaW5nIENjZWRpbGxhIEVhY3V0ZSBOdGlsZGUgT2RpZXJlc2lzIFVkaWVyZXNpcyBhYWN1dGUgYWdyYXZlIGFjaXJjdW1mbGV4IGFkaWVyZXNpcyBhdGlsZGUgYXJpbmcgY2NlZGlsbGEgZWFjdXRlIGVncmF2ZSBlY2lyY3VtZmxleCBlZGllcmVzaXMgaWFjdXRlIGlncmF2ZSBpY2lyY3VtZmxleCBpZGllcmVzaXMgbnRpbGRlIG9hY3V0ZSBvZ3JhdmUgb2NpcmN1bWZsZXggb2RpZXJlc2lzIG90aWxkZSB1YWN1dGUgdWdyYXZlIHVjaXJjdW1mbGV4IHVkaWVyZXNpcyBkYWdnZXIgZGVncmVlIGNlbnQgc3Rlcmxpbmcgc2VjdGlvbiBidWxsZXQgcGFyYWdyYXBoIGdlcm1hbmRibHMgcmVnaXN0ZXJlZCBjb3B5cmlnaHQgdHJhZGVtYXJrIGFjdXRlIGRpZXJlc2lzIG5vdGVxdWFsIEFFIE9zbGFzaCBpbmZpbml0eSBwbHVzbWludXMgbGVzc2VxdWFsIGdyZWF0ZXJlcXVhbCB5ZW4gbXUgcGFydGlhbGRpZmYgc3VtbWF0aW9uIHByb2R1Y3QgcGkgaW50ZWdyYWwgb3JkZmVtaW5pbmUgb3JkbWFzY3VsaW5lIE9tZWdhIGFlIG9zbGFzaCBxdWVzdGlvbmRvd24gZXhjbGFtZG93biBsb2dpY2Fsbm90IHJhZGljYWwgZmxvcmluIGFwcHJveGVxdWFsIERlbHRhIGd1aWxsZW1vdGxlZnQgZ3VpbGxlbW90cmlnaHQgZWxsaXBzaXMgbm9uYnJlYWtpbmdzcGFjZSBBZ3JhdmUgQXRpbGRlIE90aWxkZSBPRSBvZSBlbmRhc2ggZW1kYXNoIHF1b3RlZGJsbGVmdCBxdW90ZWRibHJpZ2h0IHF1b3RlbGVmdCBxdW90ZXJpZ2h0IGRpdmlkZSBsb3plbmdlIHlkaWVyZXNpcyBZZGllcmVzaXMgZnJhY3Rpb24gY3VycmVuY3kgZ3VpbHNpbmdsbGVmdCBndWlsc2luZ2xyaWdodCBmaSBmbCBkYWdnZXJkYmwgcGVyaW9kY2VudGVyZWQgcXVvdGVzaW5nbGJhc2UgcXVvdGVkYmxiYXNlIHBlcnRob3VzYW5kIEFjaXJjdW1mbGV4IEVjaXJjdW1mbGV4IEFhY3V0ZSBFZGllcmVzaXMgRWdyYXZlIElhY3V0ZSBJY2lyY3VtZmxleCBJZGllcmVzaXMgSWdyYXZlIE9hY3V0ZSBPY2lyY3VtZmxleCBhcHBsZSBPZ3JhdmUgVWFjdXRlIFVjaXJjdW1mbGV4IFVncmF2ZSBkb3RsZXNzaSBjaXJjdW1mbGV4IHRpbGRlIG1hY3JvbiBicmV2ZSBkb3RhY2NlbnQgcmluZyBjZWRpbGxhIGh1bmdhcnVtbGF1dCBvZ29uZWsgY2Fyb24gTHNsYXNoIGxzbGFzaCBTY2Fyb24gc2Nhcm9uIFpjYXJvbiB6Y2Fyb24gYnJva2VuYmFyIEV0aCBldGggWWFjdXRlIHlhY3V0ZSBUaG9ybiB0aG9ybiBtaW51cyBtdWx0aXBseSBvbmVzdXBlcmlvciB0d29zdXBlcmlvciB0aHJlZXN1cGVyaW9yIG9uZWhhbGYgb25lcXVhcnRlciB0aHJlZXF1YXJ0ZXJzIGZyYW5jIEdicmV2ZSBnYnJldmUgSWRvdGFjY2VudCBTY2VkaWxsYSBzY2VkaWxsYSBDYWN1dGUgY2FjdXRlIENjYXJvbiBjY2Fyb24gZGNyb2F0XCIuc3BsaXQoL1xccysvZyk7XG5cbiAgICByZXR1cm4gY2xhc3MgZXh0ZW5kcyBUYWJsZSB7XG4gICAgICAgIHBhcnNlKGRhdGEpIHtcbiAgICAgICAgICAgIGRhdGEub2Zmc2V0KHRoaXMub2Zmc2V0KTtcblxuICAgICAgICAgICAgdGhpcy5mb3JtYXQgPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgICAgICAgICB0aGlzLml0YWxpY0FuZ2xlID0gZGF0YS5yZWFkRml4ZWRfKCk7XG4gICAgICAgICAgICB0aGlzLnVuZGVybGluZVBvc2l0aW9uID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgICAgICB0aGlzLnVuZGVybGluZVRoaWNrbmVzcyA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICAgICAgdGhpcy5pc0ZpeGVkUGl0Y2ggPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgICAgICAgICB0aGlzLm1pbk1lbVR5cGU0MiA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgICAgIHRoaXMubWF4TWVtVHlwZTQyID0gZGF0YS5yZWFkTG9uZygpO1xuICAgICAgICAgICAgdGhpcy5taW5NZW1UeXBlMSA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgICAgIHRoaXMubWF4TWVtVHlwZTEgPSBkYXRhLnJlYWRMb25nKCk7XG5cbiAgICAgICAgICAgIHZhciBudW1iZXJPZkdseXBocztcblxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmZvcm1hdCkge1xuICAgICAgICAgICAgICBjYXNlIDB4MDAwMTAwMDA6XG4gICAgICAgICAgICAgIGNhc2UgMHgwMDAzMDAwMDpcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDB4MDAwMjAwMDA6XG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZHbHlwaHMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2x5cGhOYW1lSW5kZXggPSBkYXRhLnRpbWVzKG51bWJlck9mR2x5cGhzLCBkYXRhLnJlYWRTaG9ydCk7XG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lcyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBsaW1pdCA9IHRoaXMub2Zmc2V0ICsgdGhpcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGRhdGEub2Zmc2V0KCkgPCBsaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWVzLnB1c2goZGF0YS5yZWFkU3RyaW5nKGRhdGEucmVhZEJ5dGUoKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDB4MDAwMjUwMDA6XG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZHbHlwaHMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0cyA9IGRhdGEucmVhZChudW1iZXJPZkdseXBocyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAweDAwMDQwMDAwOlxuICAgICAgICAgICAgICAgIHRoaXMubWFwID0gZGF0YS50aW1lcyh0aGlzLmZpbGUubWF4cC5udW1HbHlwaHMsIGRhdGEucmVhZFNob3J0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGdseXBoRm9yKGNvZGUpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5mb3JtYXQpIHtcbiAgICAgICAgICAgICAgY2FzZSAweDAwMDEwMDAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBQT1NUU0NSSVBUX0dMWVBIU1tjb2RlXSB8fCBcIi5ub3RkZWZcIjtcblxuICAgICAgICAgICAgICBjYXNlIDB4MDAwMjAwMDA6XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5nbHlwaE5hbWVJbmRleFtjb2RlXTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBQT1NUU0NSSVBUX0dMWVBIUy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBPU1RTQ1JJUFRfR0xZUEhTW2luZGV4XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZXNbaW5kZXggLSBQT1NUU0NSSVBUX0dMWVBIUy5sZW5ndGhdIHx8IFwiLm5vdGRlZlwiO1xuXG4gICAgICAgICAgICAgIGNhc2UgMHgwMDAyNTAwMDpcblxuICAgICAgICAgICAgICBjYXNlIDB4MDAwMzAwMDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiLm5vdGRlZlwiO1xuXG4gICAgICAgICAgICAgIGNhc2UgMHgwMDA0MDAwMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXBbY29kZV0gfHwgMHhGRkZGO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyKG1hcHBpbmcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZvcm1hdCA9PSAweDAwMDMwMDAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmF3KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGtlZXAgb3JpZ2luYWwgaGVhZGVyLCBidXQgc2V0IGZvcm1hdCB0byAyLjBcbiAgICAgICAgICAgIHZhciBvdXQgPSBCaW5hcnlTdHJlYW0odGhpcy5yYXdEYXRhLnNsaWNlKHRoaXMub2Zmc2V0LCAzMikpO1xuICAgICAgICAgICAgb3V0LndyaXRlTG9uZygweDAwMDIwMDAwKTtcbiAgICAgICAgICAgIG91dC5vZmZzZXQoMzIpO1xuXG4gICAgICAgICAgICB2YXIgaW5kZXhlcyA9IFtdO1xuICAgICAgICAgICAgdmFyIHN0cmluZ3MgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXBwaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gbWFwcGluZ1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgcG9zdCA9IHRoaXMuZ2x5cGhGb3IoaWQpO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IFBPU1RTQ1JJUFRfR0xZUEhTLmluZGV4T2YocG9zdCk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbmRleGVzLnB1c2goUE9TVFNDUklQVF9HTFlQSFMubGVuZ3RoICsgc3RyaW5ncy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdzLnB1c2gocG9zdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvdXQud3JpdGVTaG9ydChtYXBwaW5nLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbmRleGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgb3V0LndyaXRlU2hvcnQoaW5kZXhlc1tpXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgb3V0LndyaXRlQnl0ZShzdHJpbmdzW2ldLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgb3V0LndyaXRlU3RyaW5nKHN0cmluZ3NbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb3V0LmdldCgpO1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5cbnZhciBDbWFwVGFibGUgPSAoZnVuY3Rpb24oKXtcbiAgICBjbGFzcyBDbWFwRW50cnkge1xuICAgICAgICBjb25zdHJ1Y3RvcihkYXRhLCBvZmZzZXQsIGNvZGVNYXApIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHNlbGYucGxhdGZvcm1JRCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICBzZWxmLnBsYXRmb3JtU3BlY2lmaWNJRCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICBzZWxmLm9mZnNldCA9IG9mZnNldCArIGRhdGEucmVhZExvbmcoKTtcblxuICAgICAgICAgICAgZGF0YS5zYXZlRXhjdXJzaW9uKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGU7XG4gICAgICAgICAgICAgICAgZGF0YS5vZmZzZXQoc2VsZi5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIHNlbGYuZm9ybWF0ID0gZGF0YS5yZWFkU2hvcnQoKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoc2VsZi5mb3JtYXQpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGVuZ3RoID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sYW5ndWFnZSA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVNYXBbaV0gPSBkYXRhLnJlYWRCeXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGVuZ3RoID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sYW5ndWFnZSA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWdDb3VudCA9IGRhdGEucmVhZFNob3J0KCkgLyAyO1xuXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2tpcCg2KTsgICAgICAgLy8gc2VhcmNoUmFuZ2UsIGVudHJ5U2VsZWN0b3IsIHJhbmdlU2hpZnRcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZENvZGUgPSBkYXRhLnRpbWVzKHNlZ0NvdW50LCBkYXRhLnJlYWRTaG9ydCk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2tpcCgyKTsgICAgICAgLy8gcmVzZXJ2ZWQgcGFkXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydENvZGUgPSBkYXRhLnRpbWVzKHNlZ0NvdW50LCBkYXRhLnJlYWRTaG9ydCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpZERlbHRhID0gZGF0YS50aW1lcyhzZWdDb3VudCwgZGF0YS5yZWFkU2hvcnRfKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkUmFuZ2VPZmZzZXQgPSBkYXRhLnRpbWVzKHNlZ0NvdW50LCBkYXRhLnJlYWRTaG9ydCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gKHNlbGYubGVuZ3RoICsgc2VsZi5vZmZzZXQgLSBkYXRhLm9mZnNldCgpKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnbHlwaElkcyA9IGRhdGEudGltZXMoY291bnQsIGRhdGEucmVhZFNob3J0KTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2VnQ291bnQ7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gc3RhcnRDb2RlW2ldLCBlbmQgPSBlbmRDb2RlW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb2RlID0gc3RhcnQ7IGNvZGUgPD0gZW5kOyArK2NvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2x5cGhJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWRSYW5nZU9mZnNldFtpXSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaElkID0gY29kZSArIGlkRGVsdGFbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gbm9uLXplcm8sIGlkUmFuZ2VPZmZzZXQgY29udGFpbnMgZm9yIGVhY2ggc2VnbWVudCB0aGUgYnl0ZSBvZmZzZXQgb2YgdGhlIEdseXBoIElEXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludG8gdGhlIGdseXBoSWRzIHRhYmxlLCBmcm9tIHRoZSAqY3VycmVudCogYGlgIGNlbGwgb2YgaWRSYW5nZU9mZnNldC4gIEluIG90aGVyIHdvcmRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIG9mZnNldCBzcGFucyBmcm9tIHRoZSBmaXJzdCBpbnRvIHRoZSBzZWNvbmQgYXJyYXkuICBUaGlzIHdvcmtzLCBiZWNhdXNlIHRoZSBhcnJheXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJlIGNvbnNlY3V0aXZlIGluIHRoZSBUVEYgZmlsZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIFsgLi4uaWRSYW5nZU9mZnNldC4uLiBdWyAuLi5nbHlwaElkcy4uLiBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgIC4uLi4uLiA0OCAuLi4uLi4gICAgICAgLi4uLiBJRCAuLi4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICBeLS0tLS0gNDggYnl0ZXMgLS0tLS1eXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIChidXQgSSBjYW4ndCBzdG9wIHdvbmRlcmluZyB3aHkgaXMgaXQgbm90IGp1c3QgYSBwbGFpbiBpbmRleCwgcG9zc2libHkgaW5jcmVtZW50ZWQgYnkgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyB0aGF0IHdlIGNhbiBoYXZlIHRoYXQgc3BlY2lhbCBgemVyb2AgdmFsdWUuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudHMgb2YgaWRSYW5nZU9mZnNldCBhcmUgZXZlbiBudW1iZXJzLCBiZWNhdXNlIGJvdGggYXJyYXlzIGNvbnRhaW4gMTYtYml0IHdvcmRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB5ZXQgdGhlIG9mZnNldCBpcyBpbiBieXRlcy4gIFRoYXQgaXMgd2h5IHdlIGRpdmlkZSBpdCBieSAyLiAgVGhlbiB3ZSBzdWJ0cmFjdCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtYWluaW5nIHNlZ21lbnRzIChzZWdDb3VudC1pKSwgYW5kIGFkZCB0aGUgY29kZS1zdGFydCBvZmZzZXQsIHRvIHdoaWNoIHdlIG5lZWQgdG8gYWRkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjb3JyZXNwb25kaW5nIGRlbHRhIHRvIGdldCB0aGUgYWN0dWFsIGdseXBoIElELlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gaWRSYW5nZU9mZnNldFtpXSAvIDIgLSAoc2VnQ291bnQgLSBpKSArIChjb2RlIC0gc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaElkID0gZ2x5cGhJZHNbaW5kZXhdIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnbHlwaElkICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaElkICs9IGlkRGVsdGFbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZU1hcFtjb2RlXSA9IGdseXBoSWQgJiAweEZGRkY7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGVuZ3RoID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sYW5ndWFnZSA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGxlbmd0aC0tID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZU1hcFtjb2RlKytdID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucmVhZFNob3J0KCk7IC8vIHJlc2VydmVkXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGVuZ3RoID0gZGF0YS5yZWFkTG9uZygpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmxhbmd1YWdlID0gZGF0YS5yZWFkTG9uZygpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmdyb3VwcyA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5ncm91cHMtLSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5kQ2hhckNvZGUgPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2x5cGhDb2RlID0gZGF0YS5yZWFkTG9uZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNvZGUgPD0gZW5kQ2hhckNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlTWFwW2NvZGUrK10gPSBnbHlwaENvZGUrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuY29uc29sZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3IoXCJVbmhhbmRsZWQgQ01BUCBmb3JtYXQ6IFwiICsgc2VsZi5mb3JtYXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJDaGFybWFwKG5jaWQyb2dpZCwgb2dpZDJuZ2lkKSB7XG4gICAgICAgIHZhciBjb2RlcyA9IHNvcnRlZEtleXMobmNpZDJvZ2lkKTtcbiAgICAgICAgdmFyIHN0YXJ0Q29kZXMgPSBbXTtcbiAgICAgICAgdmFyIGVuZENvZGVzID0gW107XG4gICAgICAgIHZhciBsYXN0ID0gbnVsbDtcbiAgICAgICAgdmFyIGRpZmYgPSBudWxsO1xuXG4gICAgICAgIGZ1bmN0aW9uIG5ld19naWQoY2hhcmNvZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvZ2lkMm5naWRbbmNpZDJvZ2lkW2NoYXJjb2RlXV07XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgY29kZSA9IGNvZGVzW2ldO1xuICAgICAgICAgICAgdmFyIGdpZCA9IG5ld19naWQoY29kZSk7XG4gICAgICAgICAgICB2YXIgZGVsdGEgPSBnaWQgLSBjb2RlO1xuICAgICAgICAgICAgaWYgKGxhc3QgPT0gbnVsbCB8fCBkZWx0YSAhPT0gZGlmZikge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZENvZGVzLnB1c2gobGFzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXJ0Q29kZXMucHVzaChjb2RlKTtcbiAgICAgICAgICAgICAgICBkaWZmID0gZGVsdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0ID0gY29kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXN0KSB7XG4gICAgICAgICAgICBlbmRDb2Rlcy5wdXNoKGxhc3QpO1xuICAgICAgICB9XG4gICAgICAgIGVuZENvZGVzLnB1c2goMHhGRkZGKTtcbiAgICAgICAgc3RhcnRDb2Rlcy5wdXNoKDB4RkZGRik7XG5cbiAgICAgICAgdmFyIHNlZ0NvdW50ID0gc3RhcnRDb2Rlcy5sZW5ndGg7XG4gICAgICAgIHZhciBzZWdDb3VudFgyID0gc2VnQ291bnQgKiAyO1xuICAgICAgICB2YXIgc2VhcmNoUmFuZ2UgPSAyICogTWF0aC5wb3coMiwgTWF0aC5mbG9vcihNYXRoLmxvZyhzZWdDb3VudCkgLyBNYXRoLkxOMikpO1xuICAgICAgICB2YXIgZW50cnlTZWxlY3RvciA9IE1hdGgubG9nKHNlYXJjaFJhbmdlIC8gMikgLyBNYXRoLkxOMjtcbiAgICAgICAgdmFyIHJhbmdlU2hpZnQgPSBzZWdDb3VudFgyIC0gc2VhcmNoUmFuZ2U7XG5cbiAgICAgICAgdmFyIGRlbHRhcyA9IFtdO1xuICAgICAgICB2YXIgcmFuZ2VPZmZzZXRzID0gW107XG4gICAgICAgIHZhciBnbHlwaElkcyA9IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWdDb3VudDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRDb2RlID0gc3RhcnRDb2Rlc1tpXTtcbiAgICAgICAgICAgIHZhciBlbmRDb2RlID0gZW5kQ29kZXNbaV07XG4gICAgICAgICAgICBpZiAoc3RhcnRDb2RlID09IDB4RkZGRikge1xuICAgICAgICAgICAgICAgIGRlbHRhcy5wdXNoKDApO1xuICAgICAgICAgICAgICAgIHJhbmdlT2Zmc2V0cy5wdXNoKDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0YXJ0R2x5cGggPSBuZXdfZ2lkKHN0YXJ0Q29kZSk7XG4gICAgICAgICAgICBpZiAoc3RhcnRDb2RlIC0gc3RhcnRHbHlwaCA+PSAweDgwMDApIHtcbiAgICAgICAgICAgICAgICBkZWx0YXMucHVzaCgwKTtcbiAgICAgICAgICAgICAgICByYW5nZU9mZnNldHMucHVzaCgyICogKGdseXBoSWRzLmxlbmd0aCArIHNlZ0NvdW50IC0gaSkpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSBzdGFydENvZGU7IGogPD0gZW5kQ29kZTsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGdseXBoSWRzLnB1c2gobmV3X2dpZChqKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWx0YXMucHVzaChzdGFydEdseXBoIC0gc3RhcnRDb2RlKTtcbiAgICAgICAgICAgICAgICByYW5nZU9mZnNldHMucHVzaCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvdXQgPSBCaW5hcnlTdHJlYW0oKTtcblxuICAgICAgICBvdXQud3JpdGVTaG9ydCgzKTsgICAgICAvLyBwbGF0Zm9ybUlEXG4gICAgICAgIG91dC53cml0ZVNob3J0KDEpOyAgICAgIC8vIHBsYXRmb3JtU3BlY2lmaWNJRFxuICAgICAgICBvdXQud3JpdGVMb25nKDEyKTsgICAgICAvLyBvZmZzZXRcbiAgICAgICAgb3V0LndyaXRlU2hvcnQoNCk7ICAgICAgLy8gZm9ybWF0XG4gICAgICAgIG91dC53cml0ZVNob3J0KDE2ICsgc2VnQ291bnQgKiA4ICsgZ2x5cGhJZHMubGVuZ3RoICogMik7IC8vIGxlbmd0aFxuICAgICAgICBvdXQud3JpdGVTaG9ydCgwKTsgICAgICAvLyBsYW5ndWFnZVxuICAgICAgICBvdXQud3JpdGVTaG9ydChzZWdDb3VudFgyKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQoc2VhcmNoUmFuZ2UpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydChlbnRyeVNlbGVjdG9yKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQocmFuZ2VTaGlmdCk7XG5cbiAgICAgICAgZW5kQ29kZXMuZm9yRWFjaChvdXQud3JpdGVTaG9ydCk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KDApOyAgICAgIC8vIHJlc2VydmVkIHBhZFxuICAgICAgICBzdGFydENvZGVzLmZvckVhY2gob3V0LndyaXRlU2hvcnQpO1xuICAgICAgICBkZWx0YXMuZm9yRWFjaChvdXQud3JpdGVTaG9ydF8pO1xuICAgICAgICByYW5nZU9mZnNldHMuZm9yRWFjaChvdXQud3JpdGVTaG9ydCk7XG4gICAgICAgIGdseXBoSWRzLmZvckVhY2gob3V0LndyaXRlU2hvcnQpO1xuXG4gICAgICAgIHJldHVybiBvdXQuZ2V0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzIGV4dGVuZHMgVGFibGUge1xuICAgICAgICBwYXJzZShkYXRhKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gc2VsZi5vZmZzZXQ7XG4gICAgICAgICAgICBkYXRhLm9mZnNldChvZmZzZXQpO1xuICAgICAgICAgICAgc2VsZi5jb2RlTWFwID0ge307XG4gICAgICAgICAgICBzZWxmLnZlcnNpb24gPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgdmFyIHRhYmxlQ291bnQgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgc2VsZi50YWJsZXMgPSBkYXRhLnRpbWVzKHRhYmxlQ291bnQsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDbWFwRW50cnkoZGF0YSwgb2Zmc2V0LCBzZWxmLmNvZGVNYXApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgcmVuZGVyKG5jaWQyb2dpZCwgb2dpZDJuZ2lkKSB7XG4gICAgICAgICAgICB2YXIgb3V0ID0gQmluYXJ5U3RyZWFtKCk7XG4gICAgICAgICAgICBvdXQud3JpdGVTaG9ydCgwKTsgIC8vIHZlcnNpb25cbiAgICAgICAgICAgIG91dC53cml0ZVNob3J0KDEpOyAgLy8gdGFibGVDb3VudFxuICAgICAgICAgICAgb3V0LndyaXRlKHJlbmRlckNoYXJtYXAobmNpZDJvZ2lkLCBvZ2lkMm5naWQpKTtcbiAgICAgICAgICAgIHJldHVybiBvdXQuZ2V0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xuXG5jbGFzcyBPUzJUYWJsZSBleHRlbmRzIFRhYmxlIHtcbiAgICBwYXJzZShkYXRhKSB7XG4gICAgICAgIGRhdGEub2Zmc2V0KHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgdGhpcy5hdmVyYWdlQ2hhcldpZHRoID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgIHRoaXMud2VpZ2h0Q2xhc3MgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLndpZHRoQ2xhc3MgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLnR5cGUgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLnlTdWJzY3JpcHRYU2l6ZSA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLnlTdWJzY3JpcHRZU2l6ZSA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLnlTdWJzY3JpcHRYT2Zmc2V0ID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgIHRoaXMueVN1YnNjcmlwdFlPZmZzZXQgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy55U3VwZXJzY3JpcHRYU2l6ZSA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLnlTdXBlcnNjcmlwdFlTaXplID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgIHRoaXMueVN1cGVyc2NyaXB0WE9mZnNldCA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLnlTdXBlcnNjcmlwdFlPZmZzZXQgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy55U3RyaWtlb3V0U2l6ZSA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLnlTdHJpa2VvdXRQb3NpdGlvbiA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLmZhbWlseUNsYXNzID0gZGF0YS5yZWFkU2hvcnRfKCk7XG5cbiAgICAgICAgdGhpcy5wYW5vc2UgPSBkYXRhLnRpbWVzKDEwLCBkYXRhLnJlYWRCeXRlKTtcbiAgICAgICAgdGhpcy5jaGFyUmFuZ2UgPSBkYXRhLnRpbWVzKDQsIGRhdGEucmVhZExvbmcpO1xuXG4gICAgICAgIHRoaXMudmVuZG9ySUQgPSBkYXRhLnJlYWRTdHJpbmcoNCk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgdGhpcy5maXJzdENoYXJJbmRleCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubGFzdENoYXJJbmRleCA9IGRhdGEucmVhZFNob3J0KCk7XG5cbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuYXNjZW50ID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgICAgICB0aGlzLmRlc2NlbnQgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgICAgIHRoaXMubGluZUdhcCA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICAgICAgdGhpcy53aW5Bc2NlbnQgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgdGhpcy53aW5EZXNjZW50ID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgIHRoaXMuY29kZVBhZ2VSYW5nZSA9IGRhdGEudGltZXMoMiwgZGF0YS5yZWFkTG9uZyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnZlcnNpb24gPiAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy54SGVpZ2h0ID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcEhlaWdodCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0Q2hhciA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5icmVha0NoYXIgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgICAgIHRoaXMubWF4Q29udGV4dCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdygpO1xuICAgIH1cbn1cblxudmFyIHN1YnNldFRhZyA9IDEwMDAwMDtcblxuZnVuY3Rpb24gbmV4dFN1YnNldFRhZygpIHtcbiAgICB2YXIgcmV0ID0gXCJcIiwgbiA9IFN0cmluZyhzdWJzZXRUYWcpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbi5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShuLmNoYXJDb2RlQXQoaSkgLSA0OCArIDY1KTtcbiAgICB9XG4gICAgKytzdWJzZXRUYWc7XG4gICAgcmV0dXJuIHJldDtcbn1cblxuY2xhc3MgU3ViZm9udCB7XG4gICAgY29uc3RydWN0b3IoZm9udCkge1xuICAgICAgICB0aGlzLmZvbnQgPSBmb250O1xuICAgICAgICB0aGlzLnN1YnNldCA9IHt9O1xuICAgICAgICB0aGlzLnVuaWNvZGVzID0ge307XG4gICAgICAgIHRoaXMub2dpZDJuZ2lkID0geyAwOiAwIH07XG4gICAgICAgIHRoaXMubmdpZDJvZ2lkID0geyAwOiAwIH07XG4gICAgICAgIHRoaXMubmNpZDJvZ2lkID0ge307XG4gICAgICAgIHRoaXMubmV4dCA9IHRoaXMuZmlyc3RDaGFyID0gMTtcbiAgICAgICAgdGhpcy5uZXh0R2lkID0gMTtcbiAgICAgICAgdGhpcy5wc05hbWUgPSBuZXh0U3Vic2V0VGFnKCkgKyBcIitcIiArIHRoaXMuZm9udC5wc05hbWU7XG4gICAgfVxuXG4gICAgdXNlKGNoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKHR5cGVvZiBjaCA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdWNzMmRlY29kZShjaCkucmVkdWNlKGZ1bmN0aW9uKHJldCwgY29kZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldCArIFN0cmluZy5mcm9tQ2hhckNvZGUoc2VsZi51c2UoY29kZSkpO1xuICAgICAgICAgICAgfSwgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvZGUgPSBzZWxmLnVuaWNvZGVzW2NoXTtcbiAgICAgICAgaWYgKCFjb2RlKSB7XG4gICAgICAgICAgICBjb2RlID0gc2VsZi5uZXh0Kys7XG4gICAgICAgICAgICBzZWxmLnN1YnNldFtjb2RlXSA9IGNoO1xuICAgICAgICAgICAgc2VsZi51bmljb2Rlc1tjaF0gPSBjb2RlO1xuXG4gICAgICAgICAgICAvLyBnZW5lcmF0ZSBuZXcgR0lEIChnbHlwaCBJRCkgYW5kIG1haW50YWluIG5ld0dJRCAtPlxuICAgICAgICAgICAgLy8gb2xkR0lEIGFuZCBiYWNrIG1hcHBpbmdzXG4gICAgICAgICAgICB2YXIgb2xkX2dpZCA9IHNlbGYuZm9udC5jbWFwLmNvZGVNYXBbY2hdO1xuICAgICAgICAgICAgaWYgKG9sZF9naWQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLm5jaWQyb2dpZFtjb2RlXSA9IG9sZF9naWQ7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYub2dpZDJuZ2lkW29sZF9naWRdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld19naWQgPSBzZWxmLm5leHRHaWQrKztcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vZ2lkMm5naWRbb2xkX2dpZF0gPSBuZXdfZ2lkO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm5naWQyb2dpZFtuZXdfZ2lkXSA9IG9sZF9naWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2RlO1xuICAgIH1cblxuICAgIGVuY29kZVRleHQodGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy51c2UodGV4dCk7XG4gICAgfVxuXG4gICAgZ2x5cGhJZHMoKSB7XG4gICAgICAgIHJldHVybiBzb3J0ZWRLZXlzKHRoaXMub2dpZDJuZ2lkKTtcbiAgICB9XG5cbiAgICBnbHlwaHNGb3IoZ2x5cGhJZHMsIHJlc3VsdCkge1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgcmVzdWx0ID0ge307XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbHlwaElkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGlkID0gZ2x5cGhJZHNbaV07XG4gICAgICAgICAgICBpZiAoIXJlc3VsdFtpZF0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2x5cGggPSByZXN1bHRbaWRdID0gdGhpcy5mb250LmdseWYuZ2x5cGhGb3IoaWQpO1xuICAgICAgICAgICAgICAgIGlmIChnbHlwaCAmJiBnbHlwaC5jb21wb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdseXBoc0ZvcihnbHlwaC5nbHlwaElkcywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHZhciBnbHlwaHMgPSB0aGlzLmdseXBoc0Zvcih0aGlzLmdseXBoSWRzKCkpO1xuXG4gICAgICAgIC8vIGFkZCBtaXNzaW5nIHN1Yi1nbHlwaHNcbiAgICAgICAgZm9yICh2YXIgb2xkX2dpZCBpbiBnbHlwaHMpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShnbHlwaHMsIG9sZF9naWQpKSB7XG4gICAgICAgICAgICAgICAgb2xkX2dpZCA9IHBhcnNlSW50KG9sZF9naWQsIDEwKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vZ2lkMm5naWRbb2xkX2dpZF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3X2dpZCA9IHRoaXMubmV4dEdpZCsrO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9naWQybmdpZFtvbGRfZ2lkXSA9IG5ld19naWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmdpZDJvZ2lkW25ld19naWRdID0gb2xkX2dpZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtdXN0IG9idGFpbiBvbGRfZ2lkX2lkcyBpbiBhbiBvcmRlciBtYXRjaGluZyBzb3J0ZWRcbiAgICAgICAgLy8gbmV3X2dpZF9pZHNcbiAgICAgICAgdmFyIG5ld19naWRfaWRzID0gc29ydGVkS2V5cyh0aGlzLm5naWQyb2dpZCk7XG4gICAgICAgIHZhciBvbGRfZ2lkX2lkcyA9IG5ld19naWRfaWRzLm1hcChmdW5jdGlvbihpZCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZ2lkMm9naWRbaWRdO1xuICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICB2YXIgZm9udCA9IHRoaXMuZm9udDtcbiAgICAgICAgdmFyIGdseWYgPSBmb250LmdseWYucmVuZGVyKGdseXBocywgb2xkX2dpZF9pZHMsIHRoaXMub2dpZDJuZ2lkKTtcbiAgICAgICAgdmFyIGxvY2EgPSBmb250LmxvY2EucmVuZGVyKGdseWYub2Zmc2V0cyk7XG5cbiAgICAgICAgdGhpcy5sYXN0Q2hhciA9IHRoaXMubmV4dCAtIDE7XG5cbiAgICAgICAgdmFyIHRhYmxlcyA9IHtcbiAgICAgICAgICAgIFwiY21hcFwiIDogQ21hcFRhYmxlLnJlbmRlcih0aGlzLm5jaWQyb2dpZCwgdGhpcy5vZ2lkMm5naWQpLFxuICAgICAgICAgICAgXCJnbHlmXCIgOiBnbHlmLnRhYmxlLFxuICAgICAgICAgICAgXCJsb2NhXCIgOiBsb2NhLnRhYmxlLFxuICAgICAgICAgICAgXCJobXR4XCIgOiBmb250LmhtdHgucmVuZGVyKG9sZF9naWRfaWRzKSxcbiAgICAgICAgICAgIFwiaGhlYVwiIDogZm9udC5oaGVhLnJlbmRlcihvbGRfZ2lkX2lkcyksXG4gICAgICAgICAgICBcIm1heHBcIiA6IGZvbnQubWF4cC5yZW5kZXIob2xkX2dpZF9pZHMpLFxuICAgICAgICAgICAgXCJwb3N0XCIgOiBmb250LnBvc3QucmVuZGVyKG9sZF9naWRfaWRzKSxcbiAgICAgICAgICAgIFwibmFtZVwiIDogZm9udC5uYW1lLnJlbmRlcih0aGlzLnBzTmFtZSksXG4gICAgICAgICAgICBcImhlYWRcIiA6IGZvbnQuaGVhZC5yZW5kZXIobG9jYS5mb3JtYXQpLFxuICAgICAgICAgICAgXCJPUy8yXCIgOiBmb250Lm9zMi5yZW5kZXIoKVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvbnQuZGlyZWN0b3J5LnJlbmRlcih0YWJsZXMpO1xuICAgIH1cblxuICAgIGNpZFRvR2lkTWFwKCkge1xuICAgICAgICB2YXIgb3V0ID0gQmluYXJ5U3RyZWFtKCksIGxlbiA9IDA7XG4gICAgICAgIGZvciAodmFyIGNpZCA9IHRoaXMuZmlyc3RDaGFyOyBjaWQgPCB0aGlzLm5leHQ7ICsrY2lkKSB7XG4gICAgICAgICAgICB3aGlsZSAobGVuIDwgY2lkKSB7XG4gICAgICAgICAgICAgICAgb3V0LndyaXRlU2hvcnQoMCk7XG4gICAgICAgICAgICAgICAgbGVuKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb2xkX2dpZCA9IHRoaXMubmNpZDJvZ2lkW2NpZF07XG4gICAgICAgICAgICBpZiAob2xkX2dpZCkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdfZ2lkID0gdGhpcy5vZ2lkMm5naWRbb2xkX2dpZF07XG4gICAgICAgICAgICAgICAgb3V0LndyaXRlU2hvcnQobmV3X2dpZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dC53cml0ZVNob3J0KDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGVuKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dC5nZXQoKTtcbiAgICB9XG59XG5cbmNsYXNzIFRURkZvbnQge1xuICAgIGNvbnN0cnVjdG9yKHJhd0RhdGEsIG5hbWUpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgZGF0YSA9IHNlbGYuY29udGVudHMgPSBCaW5hcnlTdHJlYW0ocmF3RGF0YSk7XG4gICAgICAgIGlmIChkYXRhLnJlYWRTdHJpbmcoNCkgPT0gXCJ0dGNmXCIpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQ7XG4gICAgICAgICAgICBjb25zdCBwYXJzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGRhdGEub2Zmc2V0KG9mZnNldCk7XG4gICAgICAgICAgICAgICAgc2VsZi5wYXJzZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk11c3Qgc3BlY2lmeSBhIG5hbWUgZm9yIFRUQyBmaWxlc1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEucmVhZExvbmcoKTsgICAgICAgIC8vIHZlcnNpb25cbiAgICAgICAgICAgIHZhciBudW1Gb250cyA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtRm9udHM7ICsraSkge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgICAgICAgICBkYXRhLnNhdmVFeGN1cnNpb24ocGFyc2UpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLnBzTmFtZSA9PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGb250IFwiICsgbmFtZSArIFwiIG5vdCBmb3VuZCBpbiBjb2xsZWN0aW9uXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YS5vZmZzZXQoMCk7XG4gICAgICAgICAgICBzZWxmLnBhcnNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZSgpIHtcbiAgICAgICAgdmFyIGRpciA9IHRoaXMuZGlyZWN0b3J5ID0gbmV3IERpcmVjdG9yeSh0aGlzLmNvbnRlbnRzKTtcblxuICAgICAgICB0aGlzLmhlYWQgPSBkaXIucmVhZFRhYmxlKFwiaGVhZFwiLCBIZWFkVGFibGUpO1xuICAgICAgICB0aGlzLmxvY2EgPSBkaXIucmVhZFRhYmxlKFwibG9jYVwiLCBMb2NhVGFibGUpO1xuICAgICAgICB0aGlzLmhoZWEgPSBkaXIucmVhZFRhYmxlKFwiaGhlYVwiLCBIaGVhVGFibGUpO1xuICAgICAgICB0aGlzLm1heHAgPSBkaXIucmVhZFRhYmxlKFwibWF4cFwiLCBNYXhwVGFibGUpO1xuICAgICAgICB0aGlzLmhtdHggPSBkaXIucmVhZFRhYmxlKFwiaG10eFwiLCBIbXR4VGFibGUpO1xuICAgICAgICB0aGlzLmdseWYgPSBkaXIucmVhZFRhYmxlKFwiZ2x5ZlwiLCBHbHlmVGFibGUpO1xuICAgICAgICB0aGlzLm5hbWUgPSBkaXIucmVhZFRhYmxlKFwibmFtZVwiLCBOYW1lVGFibGUpO1xuICAgICAgICB0aGlzLnBvc3QgPSBkaXIucmVhZFRhYmxlKFwicG9zdFwiLCBQb3N0VGFibGUpO1xuICAgICAgICB0aGlzLmNtYXAgPSBkaXIucmVhZFRhYmxlKFwiY21hcFwiLCBDbWFwVGFibGUpO1xuICAgICAgICB0aGlzLm9zMiAgPSBkaXIucmVhZFRhYmxlKFwiT1MvMlwiLCBPUzJUYWJsZSk7XG5cbiAgICAgICAgdGhpcy5wc05hbWUgPSB0aGlzLm5hbWUucG9zdHNjcmlwdE5hbWU7XG4gICAgICAgIHRoaXMuYXNjZW50ID0gdGhpcy5vczIuYXNjZW50IHx8IHRoaXMuaGhlYS5hc2NlbnQ7XG4gICAgICAgIHRoaXMuZGVzY2VudCA9IHRoaXMub3MyLmRlc2NlbnQgfHwgdGhpcy5oaGVhLmRlc2NlbnQ7XG4gICAgICAgIHRoaXMubGluZUdhcCA9IHRoaXMub3MyLmxpbmVHYXAgfHwgdGhpcy5oaGVhLmxpbmVHYXA7XG4gICAgICAgIHRoaXMuc2NhbGUgPSAxMDAwIC8gdGhpcy5oZWFkLnVuaXRzUGVyRW07XG4gICAgfVxuXG4gICAgd2lkdGhPZkdseXBoKGdseXBoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhtdHguZm9yR2x5cGgoZ2x5cGgpLmFkdmFuY2UgKiB0aGlzLnNjYWxlO1xuICAgIH1cblxuICAgIG1ha2VTdWJzZXQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3ViZm9udCh0aGlzKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFRURkZvbnQgfTtcbiIsImltcG9ydCB7IGRlZmxhdGUgYXMgcGFrb0RlZmxhdGUgfSBmcm9tICdAcHJvZ3Jlc3MvcGFrby1lc20nO1xuXG5leHBvcnQgY29uc3QgZGVmbGF0ZSA9IHBha29EZWZsYXRlO1xuXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNEZWZsYXRlKCkge1xuICAgIHJldHVybiB0cnVlO1xufVxuXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1tdWx0aS1zcGFjZXMsIGtleS1zcGFjaW5nLCBpbmRlbnQsIGNhbWVsY2FzZSwgc3BhY2UtYmVmb3JlLWJsb2NrcywgZXFlcWVxLCBicmFjZS1zdHlsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgc3BhY2UtaW5maXgtb3BzLCBzcGFjZS1iZWZvcmUtZnVuY3Rpb24tcGFyZW4sIGFycmF5LWJyYWNrZXQtc3BhY2luZywgb2JqZWN0LWN1cmx5LXNwYWNpbmcgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLW5lc3RlZC10ZXJuYXJ5LCBtYXgtcGFyYW1zLCBkZWZhdWx0LWNhc2UsIG5vLWVsc2UtcmV0dXJuLCBuby1lbXB0eSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24sIG5vLXZhciwgYmxvY2stc2NvcGVkLXZhciAqL1xuXG5pbXBvcnQgeyBCaW5hcnlTdHJlYW0sIHVjczJlbmNvZGUsIGJhc2U2NFRvVWludDhBcnJheSwgSEFTX1RZUEVEX0FSUkFZUyB9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBzdXBwb3J0IH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IFRURkZvbnQgfSBmcm9tIFwiLi90dGZcIjtcbmltcG9ydCB7IGRlZmxhdGUsIHN1cHBvcnRzRGVmbGF0ZSB9IGZyb20gJy4vZGVmbGF0ZSc7XG5pbXBvcnQgeyBlbmNvZGVVVEYxNkJFLCBCT00gfSBmcm9tIFwiLi4vdXRpbC9lbmNvZGUtdXRmXCI7XG5pbXBvcnQgeyBlbmNvZGVCYXNlNjQgfSBmcm9tIFwiLi4vdXRpbFwiO1xuXG5jb25zdCBicm93c2VyID0gc3VwcG9ydC5icm93c2VyO1xuY29uc3QgTkwgPSBcIlxcblwiO1xuXG52YXIgUkVTT1VSQ0VfQ09VTlRFUiA9IDA7XG5cbmNvbnN0IFBBUEVSX1NJWkUgPSB7XG4gICAgYTAgICAgICAgIDogWyAyMzgzLjk0ICwgMzM3MC4zOSBdLFxuICAgIGExICAgICAgICA6IFsgMTY4My43OCAsIDIzODMuOTQgXSxcbiAgICBhMiAgICAgICAgOiBbIDExOTAuNTUgLCAxNjgzLjc4IF0sXG4gICAgYTMgICAgICAgIDogWyA4NDEuODkgICwgMTE5MC41NSBdLFxuICAgIGE0ICAgICAgICA6IFsgNTk1LjI4ICAsIDg0MS44OSAgXSxcbiAgICBhNSAgICAgICAgOiBbIDQxOS41MyAgLCA1OTUuMjggIF0sXG4gICAgYTYgICAgICAgIDogWyAyOTcuNjQgICwgNDE5LjUzICBdLFxuICAgIGE3ICAgICAgICA6IFsgMjA5Ljc2ICAsIDI5Ny42NCAgXSxcbiAgICBhOCAgICAgICAgOiBbIDE0Ny40MCAgLCAyMDkuNzYgIF0sXG4gICAgYTkgICAgICAgIDogWyAxMDQuODggICwgMTQ3LjQwICBdLFxuICAgIGExMCAgICAgICA6IFsgNzMuNzAgICAsIDEwNC44OCAgXSxcbiAgICBiMCAgICAgICAgOiBbIDI4MzQuNjUgLCA0MDA4LjE5IF0sXG4gICAgYjEgICAgICAgIDogWyAyMDA0LjA5ICwgMjgzNC42NSBdLFxuICAgIGIyICAgICAgICA6IFsgMTQxNy4zMiAsIDIwMDQuMDkgXSxcbiAgICBiMyAgICAgICAgOiBbIDEwMDAuNjMgLCAxNDE3LjMyIF0sXG4gICAgYjQgICAgICAgIDogWyA3MDguNjYgICwgMTAwMC42MyBdLFxuICAgIGI1ICAgICAgICA6IFsgNDk4LjkwICAsIDcwOC42NiAgXSxcbiAgICBiNiAgICAgICAgOiBbIDM1NC4zMyAgLCA0OTguOTAgIF0sXG4gICAgYjcgICAgICAgIDogWyAyNDkuNDUgICwgMzU0LjMzICBdLFxuICAgIGI4ICAgICAgICA6IFsgMTc1Ljc1ICAsIDI0OS40NSAgXSxcbiAgICBiOSAgICAgICAgOiBbIDEyNC43MiAgLCAxNzUuNzUgIF0sXG4gICAgYjEwICAgICAgIDogWyA4Ny44NyAgICwgMTI0LjcyICBdLFxuICAgIGMwICAgICAgICA6IFsgMjU5OS4zNyAsIDM2NzYuNTQgXSxcbiAgICBjMSAgICAgICAgOiBbIDE4MzYuODUgLCAyNTk5LjM3IF0sXG4gICAgYzIgICAgICAgIDogWyAxMjk4LjI3ICwgMTgzNi44NSBdLFxuICAgIGMzICAgICAgICA6IFsgOTE4LjQzICAsIDEyOTguMjcgXSxcbiAgICBjNCAgICAgICAgOiBbIDY0OS4xMyAgLCA5MTguNDMgIF0sXG4gICAgYzUgICAgICAgIDogWyA0NTkuMjEgICwgNjQ5LjEzICBdLFxuICAgIGM2ICAgICAgICA6IFsgMzIzLjE1ICAsIDQ1OS4yMSAgXSxcbiAgICBjNyAgICAgICAgOiBbIDIyOS42MSAgLCAzMjMuMTUgIF0sXG4gICAgYzggICAgICAgIDogWyAxNjEuNTcgICwgMjI5LjYxICBdLFxuICAgIGM5ICAgICAgICA6IFsgMTEzLjM5ICAsIDE2MS41NyAgXSxcbiAgICBjMTAgICAgICAgOiBbIDc5LjM3ICAgLCAxMTMuMzkgIF0sXG4gICAgZXhlY3V0aXZlIDogWyA1MjEuODYgICwgNzU2LjAwICBdLFxuICAgIGZvbGlvICAgICA6IFsgNjEyLjAwICAsIDkzNi4wMCAgXSxcbiAgICBsZWdhbCAgICAgOiBbIDYxMi4wMCAgLCAxMDA4LjAwIF0sXG4gICAgbGV0dGVyICAgIDogWyA2MTIuMDAgICwgNzkyLjAwICBdLFxuICAgIHRhYmxvaWQgICA6IFsgNzkyLjAwICAsIDEyMjQuMDAgXVxufTtcblxuZnVuY3Rpb24gbWFrZU91dHB1dCgpIHtcbiAgICB2YXIgaW5kZW50TGV2ZWwgPSAwLCBvdXRwdXQgPSBCaW5hcnlTdHJlYW0oKTtcbiAgICBmdW5jdGlvbiBvdXQoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgeCA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGlmICh4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgb3V0cHV0IHVuZGVmaW5lZCB0byBQREZcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh4IGluc3RhbmNlb2YgUERGVmFsdWUpIHtcbiAgICAgICAgICAgICAgICB4LmJlZm9yZVJlbmRlcihvdXQpO1xuICAgICAgICAgICAgICAgIHgucmVuZGVyKG91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0FycmF5KHgpKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyQXJyYXkoeCwgb3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRGF0ZSh4KSkge1xuICAgICAgICAgICAgICAgIHJlbmRlckRhdGUoeCwgb3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB4ID09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IG91dHB1dCBOYU4gdG8gUERGXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgaXQgZG9lc24ndCBlbmQgdXAgaW4gZXhwb25lbnQgbm90YXRpb25cbiAgICAgICAgICAgICAgICB2YXIgbnVtID0geC50b0ZpeGVkKDcpO1xuICAgICAgICAgICAgICAgIGlmIChudW0uaW5kZXhPZihcIi5cIikgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBudW0gPSBudW0ucmVwbGFjZSgvXFwuPzArJC8sIFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobnVtID09IFwiLTBcIikge1xuICAgICAgICAgICAgICAgICAgICBudW0gPSBcIjBcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3V0cHV0LndyaXRlU3RyaW5nKG51bSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgvc3RyaW5nfGJvb2xlYW4vLnRlc3QodHlwZW9mIHgpKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0LndyaXRlU3RyaW5nKFN0cmluZyh4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgeC5nZXQgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0LndyaXRlKHguZ2V0KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHggPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGlmICgheCkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQud3JpdGVTdHJpbmcoXCJudWxsXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG91dChuZXcgUERGRGljdGlvbmFyeSh4KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG91dC53cml0ZURhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIG91dHB1dC53cml0ZShkYXRhKTtcbiAgICB9O1xuICAgIG91dC53aXRoSW5kZW50ID0gZnVuY3Rpb24oZikge1xuICAgICAgICArK2luZGVudExldmVsO1xuICAgICAgICBmKG91dCk7XG4gICAgICAgIC0taW5kZW50TGV2ZWw7XG4gICAgfTtcbiAgICBvdXQuaW5kZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG91dChOTCwgcGFkKFwiXCIsIGluZGVudExldmVsICogMiwgXCIgIFwiKSk7XG4gICAgICAgIG91dC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgb3V0Lm9mZnNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gb3V0cHV0Lm9mZnNldCgpO1xuICAgIH07XG4gICAgb3V0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZJWCBDQUxMRVJcIik7XG4gICAgfTtcbiAgICBvdXQuZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBvdXRwdXQuZ2V0KCk7XG4gICAgfTtcbiAgICBvdXQuc3RyZWFtID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiB3cmFwT2JqZWN0KHZhbHVlLCBpZCkge1xuICAgIHZhciBiZWZvcmVSZW5kZXIgPSB2YWx1ZS5iZWZvcmVSZW5kZXI7XG4gICAgdmFyIHJlbmRlclZhbHVlID0gdmFsdWUucmVuZGVyO1xuXG4gICAgdmFsdWUuYmVmb3JlUmVuZGVyID0gZnVuY3Rpb24oKXt9O1xuXG4gICAgdmFsdWUucmVuZGVyID0gZnVuY3Rpb24ob3V0KSB7XG4gICAgICAgIG91dChpZCwgXCIgMCBSXCIpO1xuICAgIH07XG5cbiAgICB2YWx1ZS5yZW5kZXJGdWxsID0gZnVuY3Rpb24ob3V0KSB7XG4gICAgICAgIHZhbHVlLl9vZmZzZXQgPSBvdXQub2Zmc2V0KCk7XG4gICAgICAgIG91dChpZCwgXCIgMCBvYmogXCIpO1xuICAgICAgICBiZWZvcmVSZW5kZXIuY2FsbCh2YWx1ZSwgb3V0KTtcbiAgICAgICAgcmVuZGVyVmFsdWUuY2FsbCh2YWx1ZSwgb3V0KTtcbiAgICAgICAgb3V0KFwiIGVuZG9ialwiKTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRQYXBlck9wdGlvbnMoZ2V0T3B0aW9uKSB7XG4gICAgaWYgKHR5cGVvZiBnZXRPcHRpb24gIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gZ2V0T3B0aW9uO1xuICAgICAgICBnZXRPcHRpb24gPSBmdW5jdGlvbihrZXksIGRlZikge1xuICAgICAgICAgICAgcmV0dXJuIGtleSBpbiBvcHRpb25zID8gb3B0aW9uc1trZXldIDogZGVmO1xuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgcGFwZXJTaXplID0gZ2V0T3B0aW9uKFwicGFwZXJTaXplXCIsIFBBUEVSX1NJWkUuYTQpO1xuICAgIGlmICghcGFwZXJTaXplKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXBlclNpemUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBwYXBlclNpemUgPSBQQVBFUl9TSVpFW3BhcGVyU2l6ZS50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgaWYgKHBhcGVyU2l6ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHBhcGVyIHNpemVcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYXBlclNpemVbMF0gPSB1bml0c1RvUG9pbnRzKHBhcGVyU2l6ZVswXSk7XG4gICAgcGFwZXJTaXplWzFdID0gdW5pdHNUb1BvaW50cyhwYXBlclNpemVbMV0pO1xuXG4gICAgaWYgKGdldE9wdGlvbihcImxhbmRzY2FwZVwiLCBmYWxzZSkpIHtcbiAgICAgICAgcGFwZXJTaXplID0gW1xuICAgICAgICAgICAgTWF0aC5tYXgocGFwZXJTaXplWzBdLCBwYXBlclNpemVbMV0pLFxuICAgICAgICAgICAgTWF0aC5taW4ocGFwZXJTaXplWzBdLCBwYXBlclNpemVbMV0pXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgdmFyIG1hcmdpbiA9IGdldE9wdGlvbihcIm1hcmdpblwiKTtcbiAgICBpZiAobWFyZ2luKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbWFyZ2luID09IFwic3RyaW5nXCIgfHwgdHlwZW9mIG1hcmdpbiA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBtYXJnaW4gPSB1bml0c1RvUG9pbnRzKG1hcmdpbiwgMCk7XG4gICAgICAgICAgICBtYXJnaW4gPSB7IGxlZnQ6IG1hcmdpbiwgdG9wOiBtYXJnaW4sIHJpZ2h0OiBtYXJnaW4sIGJvdHRvbTogbWFyZ2luIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXJnaW4gPSB7XG4gICAgICAgICAgICAgICAgbGVmdCAgIDogdW5pdHNUb1BvaW50cyhtYXJnaW4ubGVmdCwgMCksXG4gICAgICAgICAgICAgICAgdG9wICAgIDogdW5pdHNUb1BvaW50cyhtYXJnaW4udG9wLCAwKSxcbiAgICAgICAgICAgICAgICByaWdodCAgOiB1bml0c1RvUG9pbnRzKG1hcmdpbi5yaWdodCwgMCksXG4gICAgICAgICAgICAgICAgYm90dG9tIDogdW5pdHNUb1BvaW50cyhtYXJnaW4uYm90dG9tLCAwKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2V0T3B0aW9uKFwiYWRkTWFyZ2luXCIpKSB7XG4gICAgICAgICAgICBwYXBlclNpemVbMF0gKz0gbWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQ7XG4gICAgICAgICAgICBwYXBlclNpemVbMV0gKz0gbWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b207XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgcGFwZXJTaXplOiBwYXBlclNpemUsIG1hcmdpbjogbWFyZ2luIH07XG59XG5cbnZhciBGT05UX0NBQ0hFID0ge1xuICAgIFwiVGltZXMtUm9tYW5cIiAgICAgICAgICAgOiB0cnVlLFxuICAgIFwiVGltZXMtQm9sZFwiICAgICAgICAgICAgOiB0cnVlLFxuICAgIFwiVGltZXMtSXRhbGljXCIgICAgICAgICAgOiB0cnVlLFxuICAgIFwiVGltZXMtQm9sZEl0YWxpY1wiICAgICAgOiB0cnVlLFxuICAgIFwiSGVsdmV0aWNhXCIgICAgICAgICAgICAgOiB0cnVlLFxuICAgIFwiSGVsdmV0aWNhLUJvbGRcIiAgICAgICAgOiB0cnVlLFxuICAgIFwiSGVsdmV0aWNhLU9ibGlxdWVcIiAgICAgOiB0cnVlLFxuICAgIFwiSGVsdmV0aWNhLUJvbGRPYmxpcXVlXCIgOiB0cnVlLFxuICAgIFwiQ291cmllclwiICAgICAgICAgICAgICAgOiB0cnVlLFxuICAgIFwiQ291cmllci1Cb2xkXCIgICAgICAgICAgOiB0cnVlLFxuICAgIFwiQ291cmllci1PYmxpcXVlXCIgICAgICAgOiB0cnVlLFxuICAgIFwiQ291cmllci1Cb2xkT2JsaXF1ZVwiICAgOiB0cnVlLFxuICAgIFwiU3ltYm9sXCIgICAgICAgICAgICAgICAgOiB0cnVlLFxuICAgIFwiWmFwZkRpbmdiYXRzXCIgICAgICAgICAgOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBsb2FkQmluYXJ5KHVybCwgY29udCkge1xuICAgIC8vIElFIHRocm93cyBBY2Nlc3NzIGRlbmllZCBlcnJvciBmb3IgRGF0YSBVUklzXG4gICAgbGV0IG07XG4gICAgaWYgKGJyb3dzZXIubXNpZSAmJiAobSA9IC9eZGF0YTouKj87YmFzZTY0LC9pLmV4ZWModXJsKSkpIHtcbiAgICAgICAgY29udChiYXNlNjRUb1VpbnQ4QXJyYXkodXJsLnN1YnN0cihtWzBdLmxlbmd0aCkpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgICBpZiAod2luZG93LmNvbnNvbGUpIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuY29uc29sZS5lcnJvcikge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKFwiQ2Fubm90IGxvYWQgVVJMOiAlc1wiLCB1cmwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY29uc29sZS5sb2coXCJDYW5ub3QgbG9hZCBVUkw6ICVzXCIsIHVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udChudWxsKTtcbiAgICB9XG4gICAgdmFyIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHJlcS5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgIGlmIChIQVNfVFlQRURfQVJSQVlTKSB7XG4gICAgICAgIHJlcS5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgfVxuICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHJlcS5zdGF0dXMgPT0gMjAwIHx8IHJlcS5zdGF0dXMgPT0gMzA0KSB7XG4gICAgICAgICAgICBpZiAoSEFTX1RZUEVEX0FSUkFZUykge1xuICAgICAgICAgICAgICAgIGNvbnQobmV3IFVpbnQ4QXJyYXkocmVxLnJlc3BvbnNlKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnQobmV3IHdpbmRvdy5WQkFycmF5KHJlcS5yZXNwb25zZUJvZHkpLnRvQXJyYXkoKSk7IC8vIElFOSBvbmx5XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlcnJvcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXEub25lcnJvciA9IGVycm9yO1xuICAgIHJlcS5zZW5kKG51bGwpO1xufVxuXG5mdW5jdGlvbiBsb2FkRm9udCh1cmwsIGNvbnQpIHtcbiAgICB2YXIgZm9udCA9IEZPTlRfQ0FDSEVbdXJsXTtcbiAgICBpZiAoZm9udCkge1xuICAgICAgICBjb250KGZvbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRCaW5hcnkodXJsLCBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgbG9hZCBmb250IGZyb20gXCIgKyB1cmwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZm9udCA9IG5ldyBUVEZGb250KGRhdGEpO1xuICAgICAgICAgICAgICAgIEZPTlRfQ0FDSEVbdXJsXSA9IGZvbnQ7XG4gICAgICAgICAgICAgICAgY29udChmb250KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG52YXIgSU1BR0VfQ0FDSEUgPSB7fTtcblxuZnVuY3Rpb24gY2xlYXJJbWFnZUNhY2hlKCkge1xuICAgIElNQUdFX0NBQ0hFID0ge307XG59XG5cbmZ1bmN0aW9uIGxvYWRJbWFnZSh1cmwsIHNpemUsIGNvbnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgaW1nID0gSU1BR0VfQ0FDSEVbdXJsXSwgYmxvYnVybCwgYmxvYjtcbiAgICBpZiAoaW1nKSB7XG4gICAgICAgIGNvbnQoaW1nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaWYgKCEoL15kYXRhOi9pLnRlc3QodXJsKSkpIHtcbiAgICAgICAgICAgIGltZy5jcm9zc09yaWdpbiA9IFwiQW5vbnltb3VzXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEhBU19UWVBFRF9BUlJBWVMgJiYgISgvXmRhdGE6L2kudGVzdCh1cmwpKSkge1xuICAgICAgICAgICAgLy8gSUUxMCBmYWlscyB0byBsb2FkIGltYWdlcyBmcm9tIGFub3RoZXIgZG9tYWluIGV2ZW4gd2hlbiB0aGUgc2VydmVyIHNlbmRzIHRoZVxuICAgICAgICAgICAgLy8gcHJvcGVyIENPUlMgaGVhZGVycy4gIGEgWEhSLCBob3dldmVyLCB3aWxsIGJlIGFibGUgdG8gbG9hZCB0aGUgZGF0YS5cbiAgICAgICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE5NzM0NTE2LzE1NDk4NVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIE9uIHRoZSBvdGhlciBoYW5kLCBpdCdzIHdvcnRoIGRvaW5nIGl0IHRoaXMgd2F5IGZvciBhbGwgYnJvd3NlcnMgd2hpY2ggc3VwcG9ydFxuICAgICAgICAgICAgLy8gcmVzcG9uc2VUeXBlID0gXCJibG9iXCIgKEhBU19UWVBFRF9BUlJBWVMgd2lsbCBiZSB0cnVlKSwgYmVjYXVzZSB3ZSBjYW4gaW5zcGVjdCB0aGVcbiAgICAgICAgICAgIC8vIG1pbWUgdHlwZSBhbmQgaWYgaXQncyBhIEpQRUcgKHZlcnkgY29tbW9uIGNhc2UpIHdlIGNhbiBzYXZlIGEgbG90IG9mIHRpbWUgaW5cbiAgICAgICAgICAgIC8vIF9sb2FkIGJlbG93LlxuICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGJsb2IgPSB4aHIucmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgaWYgKGJyb3dzZXIubW96aWxsYSAmJiBibG9iLnR5cGUgPT0gXCJpbWFnZS9zdmcreG1sXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCB3b24ndCByZW5kZXIgU1ZHcyB0aGF0IGRvbid0IGNvbnRhaW4gd2lkdGggYW5kIGhlaWdodCBhdHRyaWJ1dGVzLlxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRvYyA9IG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHRoaXMucmVzdWx0LCBcImltYWdlL3N2Zyt4bWxcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3ZnID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdmcuZ2V0QXR0cmlidXRlKFwid2lkdGhcIikgJiYgc3ZnLmdldEF0dHJpYnV0ZShcImhlaWdodFwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlJ3JlIGdvb2QsIGNvbnRpbnVlIHdpdGggdGhlIGV4aXN0aW5nIGJsb2IuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvYnVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvYWQoYmxvYnVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBzaXplLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIHNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgeG1sID0gbmV3IHdpbmRvdy5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcoc3ZnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YVVSTCA9IGBkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCR7ZW5jb2RlQmFzZTY0KHhtbCl9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbG9hZChkYXRhVVJMKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvYnVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgICAgICAgICAgICAgIF9sb2FkKGJsb2J1cmwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB4aHIub25lcnJvciA9IF9vbmVycm9yO1xuICAgICAgICAgICAgeGhyLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcbiAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBcImJsb2JcIjtcbiAgICAgICAgICAgIHhoci5zZW5kKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfbG9hZCh1cmwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2xvYWQodXJsKSB7XG4gICAgICAgIGltZy5zcmMgPSB1cmw7XG4gICAgICAgIGlmIChpbWcuY29tcGxldGUgJiYgIWJyb3dzZXIubXNpZSkge1xuICAgICAgICAgICAgLy8gSUUsIGJsZXNzIGl0cyBsaXR0bGUgaGVhcnQsIHNheXMgaW1nLmNvbXBsZXRlID09IHRydWUgZXZlbiB0aG91Z2ggdGhlIGltYWdlIGlzXG4gICAgICAgICAgICAvLyBub3QgbG9hZGVkICh3aWR0aD0wKSwgdGhlcmVmb3JlIHdlIG11c3QgZ28gdGhlIG9ubG9hZCByb3V0ZSAodGlja2V0IDkyOTYzNSkuXG4gICAgICAgICAgICBfb25sb2FkLmNhbGwoaW1nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSBfb25sb2FkO1xuICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSBfb25lcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF90cnljYW52YXMoKSB7XG4gICAgICAgIGlmICghc2l6ZSkge1xuICAgICAgICAgICAgc2l6ZSA9IHsgd2lkdGg6IGltZy53aWR0aCwgaGVpZ2h0OiBpbWcuaGVpZ2h0IH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZS53aWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuXG4gICAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCwgc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQpO1xuXG4gICAgICAgIHZhciBpbWdkYXRhO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaW1nZGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgLy8gaXQgdGFpbnRlZCB0aGUgY2FudmFzIC0tIGNhbid0IGRyYXcgaXQuXG4gICAgICAgICAgICBfb25lcnJvcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGJsb2J1cmwpIHtcbiAgICAgICAgICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKGJsb2J1cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW4gY2FzZSBpdCBjb250YWlucyB0cmFuc3BhcmVuY3ksIHdlIG11c3Qgc2VwYXJhdGUgcmdiIGRhdGEgZnJvbSB0aGUgYWxwaGFcbiAgICAgICAgLy8gY2hhbm5lbCBhbmQgY3JlYXRlIGEgUERGUmF3SW1hZ2UgaW1hZ2Ugd2l0aCBvcGFjaXR5LiAgb3RoZXJ3aXNlIHdlIGNhbiB1c2UgYVxuICAgICAgICAvLyBQREZKcGVnSW1hZ2UuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIHRvIGRvIHRoaXMgaW4gb25lIHN0ZXAsIHdlIGNyZWF0ZSB0aGUgcmdiIGFuZCBhbHBoYSBzdHJlYW1zIGFueXdheSwgZXZlbiBpZlxuICAgICAgICAvLyB3ZSBtaWdodCBlbmQgdXAgbm90IHVzaW5nIHRoZW0gaWYgaGFzQWxwaGEgcmVtYWlucyBmYWxzZS5cblxuICAgICAgICB2YXIgaGFzQWxwaGEgPSBmYWxzZSwgcmdiID0gQmluYXJ5U3RyZWFtKCksIGFscGhhID0gQmluYXJ5U3RyZWFtKCk7XG4gICAgICAgIHZhciByYXdieXRlcyA9IGltZ2RhdGEuZGF0YTtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHJhd2J5dGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmdiLndyaXRlQnl0ZShyYXdieXRlc1tpKytdKTtcbiAgICAgICAgICAgIHJnYi53cml0ZUJ5dGUocmF3Ynl0ZXNbaSsrXSk7XG4gICAgICAgICAgICByZ2Iud3JpdGVCeXRlKHJhd2J5dGVzW2krK10pO1xuICAgICAgICAgICAgdmFyIGEgPSByYXdieXRlc1tpKytdO1xuICAgICAgICAgICAgaWYgKGEgPCAyNTUpIHtcbiAgICAgICAgICAgICAgICBoYXNBbHBoYSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbHBoYS53cml0ZUJ5dGUoYSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzQWxwaGEgfHwgb3B0aW9ucy5rZWVwUE5HKSB7XG4gICAgICAgICAgICBpbWcgPSBuZXcgUERGUmF3SW1hZ2Uoc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQsIHJnYiwgYWxwaGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbm8gdHJhbnNwYXJlbmN5LCBlbmNvZGUgYXMgSlBFRy5cbiAgICAgICAgICAgIHZhciBkYXRhID0gY2FudmFzLnRvRGF0YVVSTChcImltYWdlL2pwZWdcIiwgb3B0aW9ucy5qcGVnUXVhbGl0eSk7XG4gICAgICAgICAgICBkYXRhID0gZGF0YS5zdWJzdHIoZGF0YS5pbmRleE9mKFwiO2Jhc2U2NCxcIikgKyA4KTtcblxuICAgICAgICAgICAgdmFyIHN0cmVhbSA9IEJpbmFyeVN0cmVhbSgpO1xuICAgICAgICAgICAgc3RyZWFtLndyaXRlQmFzZTY0KGRhdGEpO1xuICAgICAgICAgICAgaW1nID0gbmV3IFBERkpwZWdJbWFnZShzdHJlYW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udChJTUFHRV9DQUNIRVt1cmxdID0gaW1nKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25lcnJvcigpIHtcbiAgICAgICAgY29udChJTUFHRV9DQUNIRVt1cmxdID0gXCJFUlJPUlwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25sb2FkKCkge1xuICAgICAgICBpZiAoc2l6ZSkge1xuICAgICAgICAgICAgY29uc3Qgc3ZnID0gKGJsb2IgJiYgYmxvYi50eXBlID09PSAnaW1hZ2Uvc3ZnK3htbCcpIHx8IChcbiAgICAgICAgICAgICAgL15kYXRhOmltYWdlXFwvc3ZnXFwreG1sOy9pLnRlc3QodGhpcy5zcmMuc3Vic3RyaW5nKDAsIDE5KSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHVwc2NhbGUgPSBzaXplLndpZHRoID49IGltZy53aWR0aCB8fCBzaXplLmhlaWdodCA+PSBpbWcuaGVpZ2h0O1xuXG4gICAgICAgICAgICAvLyBVc2UgdGhlIG9yaWdpbmFsIGltYWdlIGlmIHJlcXVlc3RlZCBzaXplIGlzIGJpZ2dlciB0aGFuIHRoZSBzb3VyY2UsXG4gICAgICAgICAgICAvLyB1bmxlc3MgaXQncyBhbiBTVkcgdGhhdCBjYW4gYmUgdXBzY2FsZWQuXG4gICAgICAgICAgICBpZiAoIXN2ZyAmJiB1cHNjYWxlKSB7XG4gICAgICAgICAgICAgICAgc2l6ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaXplICYmIGJsb2IgJiYgL15pbWFnZVxcL2pwZT9nJC9pLnRlc3QoYmxvYi50eXBlKSkge1xuICAgICAgICAgICAgLy8gSWYgd2Uga25vdyB3ZSBnb3QgYSBKUEVHLCB3ZSBjYW4gc2tpcCB0aGUgcHJvY2VzcyBvZiByZW5kZXJpbmcgaXQgdG8gYVxuICAgICAgICAgICAgLy8gY2FudmFzLCBnZXR0aW5nIHRoZSBwaXhlbCBkYXRhLCBzZWFyY2hpbmcgZm9yIHRyYW5zcGFyZW5jeSB3ZSBrbm93IHdlIHdvbid0XG4gICAgICAgICAgICAvLyBmaW5kLCBnZXR0aW5nIGJhY2sgYSBkYXRhIFVSSSBhbmQgdGhlbiBkZWNvZGluZyB0aGUgQkFTRTY0IHRvIGZpbmFsbHkgZ2V0IHRoZVxuICAgICAgICAgICAgLy8gYmluYXJ5IHdlIGFscmVhZHkgaGF2ZS4gIEFsc28sIHdlIGF2b2lkIGRvd25ncmFkaW5nIHRoZSBpbWFnZSBxdWFsaXR5LCB3aXRoXG4gICAgICAgICAgICAvLyB0aGUgcG9zc2libGUgZHJhd2JhY2sgb2YgbWFraW5nIGEgYmlnZ2VyIFBERjsgc3RpbGwsIHNlZW1zIGxlZ2l0LlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEJlc2lkZXMgc2F2aW5nIGEgbG90IG9mIHdvcmssIHRoaXMgYWxzbyByZXVzZXMgdGhlIGJ1ZmZlciBtZW1vcnlcbiAgICAgICAgICAgIC8vIChCaW5hcnlTdHJlYW0gZG9lcyBub3QgY3JlYXRlIGEgY29weSksIHBvdGVudGlhbGx5IHNhdmluZyBzb21lIEdDIGN5Y2xlcy5cbiAgICAgICAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWcgPSBuZXcgUERGSnBlZ0ltYWdlKEJpbmFyeVN0cmVhbShuZXcgVWludDhBcnJheSh0aGlzLnJlc3VsdCkpKTtcbiAgICAgICAgICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChibG9idXJsKTtcbiAgICAgICAgICAgICAgICAgICAgY29udChJTUFHRV9DQUNIRVt1cmxdID0gaW1nKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSdzIGFuIGVycm9yIHBhcnNpbmcgdGhlIEpQRUcgc3RyZWFtLCBpdCBjb3VsZCBiZSBkdWUgdG8gYVxuICAgICAgICAgICAgICAgICAgICAvLyBtaXNjb25maWd1cmVkIHNlcnZlciAoaW1wcm9wZXIgY29udGVudC10eXBlOlxuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby11aS1jb3JlL2lzc3Vlcy80MTg0KS4gIElmIHRoYXQncyB0aGUgY2FzZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGNhbnZhcyB3aWxsIHN0aWxsIGJlIGFibGUgdG8gZHJhdyBpdC5cbiAgICAgICAgICAgICAgICAgICAgX3RyeWNhbnZhcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdHJ5Y2FudmFzKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1hbnlMb2FkZXIobG9hZE9uZSkge1xuICAgIHJldHVybiBmdW5jdGlvbih1cmxzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgbiA9IHVybHMubGVuZ3RoLCBpID0gbjtcbiAgICAgICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgICBpZiAoLS1uID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgICAgbG9hZE9uZSh1cmxzW2ldLCBuZXh0KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbnZhciBsb2FkRm9udHMgPSBtYW55TG9hZGVyKGxvYWRGb250KTtcbnZhciBsb2FkSW1hZ2VzID0gZnVuY3Rpb24oaW1hZ2VzLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAganBlZ1F1YWxpdHkgOiAwLjkyLFxuICAgICAgICBrZWVwUE5HICAgICA6IGZhbHNlXG4gICAgfSwgb3B0aW9ucyk7XG4gICAgdmFyIHVybHMgPSBPYmplY3Qua2V5cyhpbWFnZXMpLCBuID0gdXJscy5sZW5ndGg7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIGlmICgtLW4gPT09IDApIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXJscy5mb3JFYWNoKGZ1bmN0aW9uKHVybCl7XG4gICAgICAgIGxvYWRJbWFnZSh1cmwsIGltYWdlc1t1cmxdLCBuZXh0LCBvcHRpb25zKTtcbiAgICB9KTtcbn07XG5cbmNsYXNzIFBERkRvY3VtZW50IHtcbiAgICBjb25zdHJ1Y3RvciAob3B0aW9ucykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBvdXQgPSBtYWtlT3V0cHV0KCk7XG4gICAgICAgIHZhciBvYmpjb3VudCA9IDA7XG4gICAgICAgIHZhciBvYmplY3RzID0gW107XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0T3B0aW9uKG5hbWUsIGRlZnZhbCkge1xuICAgICAgICAgICAgcmV0dXJuIChvcHRpb25zICYmIG9wdGlvbnNbbmFtZV0gIT0gbnVsbCkgPyBvcHRpb25zW25hbWVdIDogZGVmdmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5nZXRPcHRpb24gPSBnZXRPcHRpb247XG5cbiAgICAgICAgc2VsZi5hdHRhY2ggPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKG9iamVjdHMuaW5kZXhPZih2YWx1ZSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgd3JhcE9iamVjdCh2YWx1ZSwgKytvYmpjb3VudCk7XG4gICAgICAgICAgICAgICAgb2JqZWN0cy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLnBhZ2VzID0gW107XG5cbiAgICAgICAgc2VsZi5GT05UUyA9IHt9O1xuICAgICAgICBzZWxmLklNQUdFUyA9IHt9O1xuICAgICAgICBzZWxmLkdSQURfQ09MX0ZVTkNUSU9OUyA9IHt9OyAvLyBjYWNoZSBmb3IgY29sb3IgZ3JhZGllbnQgZnVuY3Rpb25zXG4gICAgICAgIHNlbGYuR1JBRF9PUENfRlVOQ1RJT05TID0ge307IC8vIGNhY2hlIGZvciBvcGFjaXR5IGdyYWRpZW50IGZ1bmN0aW9uc1xuICAgICAgICBzZWxmLkdSQURfQ09MID0ge307ICAgICAvLyBjYWNoZSBmb3Igd2hvbGUgY29sb3IgZ3JhZGllbnQgb2JqZWN0c1xuICAgICAgICBzZWxmLkdSQURfT1BDID0ge307ICAgICAvLyBjYWNoZSBmb3Igd2hvbGUgb3BhY2l0eSBncmFkaWVudCBvYmplY3RzXG5cbiAgICAgICAgdmFyIGNhdGFsb2cgPSBzZWxmLmF0dGFjaChuZXcgUERGQ2F0YWxvZygpKTtcbiAgICAgICAgdmFyIHBhZ2VUcmVlID0gc2VsZi5hdHRhY2gobmV3IFBERlBhZ2VUcmVlKCkpO1xuXG4gICAgICAgIGlmIChnZXRPcHRpb24oXCJhdXRvUHJpbnRcIikpIHtcbiAgICAgICAgICAgIGxldCBuYW1lVHJlZSA9IHt9O1xuICAgICAgICAgICAgbmFtZVRyZWUuSmF2YVNjcmlwdCA9IG5ldyBQREZEaWN0aW9uYXJ5KHsgTmFtZXM6IFtcbiAgICAgICAgICAgICAgICBuZXcgUERGU3RyaW5nKFwiSlNcIiksIHNlbGYuYXR0YWNoKG5ldyBQREZEaWN0aW9uYXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgUzogXyhcIkphdmFTY3JpcHRcIiksXG4gICAgICAgICAgICAgICAgICAgIEpTOiBuZXcgUERGU3RyaW5nKFwicHJpbnQodHJ1ZSk7XCIpXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICBdIH0pO1xuICAgICAgICAgICAgY2F0YWxvZy5wcm9wcy5OYW1lcyA9IG5ldyBQREZEaWN0aW9uYXJ5KG5hbWVUcmVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhdGFsb2cuc2V0UGFnZXMocGFnZVRyZWUpO1xuXG4gICAgICAgIHZhciBpbmZvID0gc2VsZi5hdHRhY2gobmV3IFBERkRpY3Rpb25hcnkoe1xuICAgICAgICAgICAgUHJvZHVjZXIgICAgIDogbmV3IFBERlN0cmluZyhnZXRPcHRpb24oXCJwcm9kdWNlclwiLCBcIktlbmRvIFVJIFBERiBHZW5lcmF0b3JcIiksIHRydWUpLCAvLyBYWFg6IGtlbmRvLnZlcnNpb24/XG4gICAgICAgICAgICBUaXRsZSAgICAgICAgOiBuZXcgUERGU3RyaW5nKGdldE9wdGlvbihcInRpdGxlXCIsIFwiXCIpLCB0cnVlKSxcbiAgICAgICAgICAgIEF1dGhvciAgICAgICA6IG5ldyBQREZTdHJpbmcoZ2V0T3B0aW9uKFwiYXV0aG9yXCIsIFwiXCIpLCB0cnVlKSxcbiAgICAgICAgICAgIFN1YmplY3QgICAgICA6IG5ldyBQREZTdHJpbmcoZ2V0T3B0aW9uKFwic3ViamVjdFwiLCBcIlwiKSwgdHJ1ZSksXG4gICAgICAgICAgICBLZXl3b3JkcyAgICAgOiBuZXcgUERGU3RyaW5nKGdldE9wdGlvbihcImtleXdvcmRzXCIsIFwiXCIpLCB0cnVlKSxcbiAgICAgICAgICAgIENyZWF0b3IgICAgICA6IG5ldyBQREZTdHJpbmcoZ2V0T3B0aW9uKFwiY3JlYXRvclwiLCBcIktlbmRvIFVJIFBERiBHZW5lcmF0b3JcIiksIHRydWUpLFxuICAgICAgICAgICAgQ3JlYXRpb25EYXRlIDogZ2V0T3B0aW9uKFwiZGF0ZVwiLCBuZXcgRGF0ZSgpKVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgc2VsZi5hZGRQYWdlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIHBhcGVyT3B0aW9ucyAgPSBnZXRQYXBlck9wdGlvbnMoZnVuY3Rpb24obmFtZSwgZGVmdmFsKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gKG9wdGlvbnMgJiYgb3B0aW9uc1tuYW1lXSAhPSBudWxsKSA/IG9wdGlvbnNbbmFtZV0gOiBkZWZ2YWw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBwYXBlclNpemUgICAgID0gcGFwZXJPcHRpb25zLnBhcGVyU2l6ZTtcbiAgICAgICAgICAgIHZhciBtYXJnaW4gICAgICAgID0gcGFwZXJPcHRpb25zLm1hcmdpbjtcbiAgICAgICAgICAgIHZhciBjb250ZW50V2lkdGggID0gcGFwZXJTaXplWzBdO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRIZWlnaHQgPSBwYXBlclNpemVbMV07XG4gICAgICAgICAgICBpZiAobWFyZ2luKSB7XG4gICAgICAgICAgICAgICAgY29udGVudFdpZHRoIC09IG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0O1xuICAgICAgICAgICAgICAgIGNvbnRlbnRIZWlnaHQgLT0gbWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b207XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IG5ldyBQREZTdHJlYW0obWFrZU91dHB1dCgpLCBudWxsLCB0cnVlKTtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICBDb250ZW50cyA6IHNlbGYuYXR0YWNoKGNvbnRlbnQpLFxuICAgICAgICAgICAgICAgIFBhcmVudCAgIDogcGFnZVRyZWUsXG4gICAgICAgICAgICAgICAgTWVkaWFCb3ggOiBbIDAsIDAsIHBhcGVyU2l6ZVswXSwgcGFwZXJTaXplWzFdIF1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgcGFnZSA9IG5ldyBQREZQYWdlKHNlbGYsIHByb3BzKTtcbiAgICAgICAgICAgIHBhZ2UuX2NvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICAgICAgcGFnZVRyZWUuYWRkUGFnZShzZWxmLmF0dGFjaChwYWdlKSk7XG5cbiAgICAgICAgICAgIC8vIGNhbnZhcy1saWtlIGNvb3JkLiBzeXN0ZW0uICAoMCwwKSBpcyB1cHBlci1sZWZ0LlxuICAgICAgICAgICAgLy8gdGV4dCBtdXN0IGJlIHZlcnRpY2FsbHkgbWlyb3JyZWQgYmVmb3JlIGRyYXdpbmcuXG4gICAgICAgICAgICBwYWdlLnRyYW5zZm9ybSgxLCAwLCAwLCAtMSwgMCwgcGFwZXJTaXplWzFdKTtcblxuICAgICAgICAgICAgaWYgKG1hcmdpbikge1xuICAgICAgICAgICAgICAgIHBhZ2UudHJhbnNsYXRlKG1hcmdpbi5sZWZ0LCBtYXJnaW4udG9wKTtcbiAgICAgICAgICAgICAgICAvLyBYWFg6IGNsaXAgdG8gcmlnaHQvYm90dG9tIG1hcmdpbi4gIE1ha2UgdGhpcyBvcHRpb25hbD9cbiAgICAgICAgICAgICAgICBwYWdlLnJlY3QoMCwgMCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBwYWdlLmNsaXAoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5wYWdlcy5wdXNoKHBhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgLy8vIGZpbGUgaGVhZGVyXG4gICAgICAgICAgICBvdXQoXCIlUERGLTEuNFwiLCBOTCwgXCIlXFx4YzJcXHhjMVxceGRhXFx4Y2ZcXHhjZVwiLCBOTCwgTkwpO1xuXG4gICAgICAgICAgICAvLy8gZmlsZSBib2R5XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIG9iamVjdHNbaV0ucmVuZGVyRnVsbChvdXQpO1xuICAgICAgICAgICAgICAgIG91dChOTCwgTkwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLy8gY3Jvc3MtcmVmZXJlbmNlIHRhYmxlXG4gICAgICAgICAgICB2YXIgeHJlZk9mZnNldCA9IG91dC5vZmZzZXQoKTtcbiAgICAgICAgICAgIG91dChcInhyZWZcIiwgTkwsIDAsIFwiIFwiLCBvYmplY3RzLmxlbmd0aCArIDEsIE5MKTtcbiAgICAgICAgICAgIG91dChcIjAwMDAwMDAwMDAgNjU1MzUgZiBcIiwgTkwpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBvdXQoemVyb3BhZChvYmplY3RzW2ldLl9vZmZzZXQsIDEwKSwgXCIgMDAwMDAgbiBcIiwgTkwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0KE5MKTtcblxuICAgICAgICAgICAgLy8vIHRyYWlsZXJcbiAgICAgICAgICAgIG91dChcInRyYWlsZXJcIiwgTkwpO1xuICAgICAgICAgICAgb3V0KG5ldyBQREZEaWN0aW9uYXJ5KHtcbiAgICAgICAgICAgICAgICBTaXplOiBvYmplY3RzLmxlbmd0aCArIDEsXG4gICAgICAgICAgICAgICAgUm9vdDogY2F0YWxvZyxcbiAgICAgICAgICAgICAgICBJbmZvOiBpbmZvXG4gICAgICAgICAgICB9KSwgTkwsIE5MKTtcblxuICAgICAgICAgICAgLy8vIGVuZFxuICAgICAgICAgICAgb3V0KFwic3RhcnR4cmVmXCIsIE5MLCB4cmVmT2Zmc2V0LCBOTCk7XG4gICAgICAgICAgICBvdXQoXCIlJUVPRlwiLCBOTCk7XG5cbiAgICAgICAgICAgIHJldHVybiBvdXQuc3RyZWFtKCkub2Zmc2V0KDApO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYubG9hZEZvbnRzID0gbG9hZEZvbnRzO1xuICAgICAgICBzZWxmLmxvYWRJbWFnZXMgPSBsb2FkSW1hZ2VzO1xuICAgIH1cblxuICAgIGdldEZvbnQodXJsKSB7XG4gICAgICAgIHZhciBmb250ID0gdGhpcy5GT05UU1t1cmxdO1xuICAgICAgICBpZiAoIWZvbnQpIHtcbiAgICAgICAgICAgIGZvbnQgPSBGT05UX0NBQ0hFW3VybF07XG4gICAgICAgICAgICBpZiAoIWZvbnQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGb250IFwiICsgdXJsICsgXCIgaGFzIG5vdCBiZWVuIGxvYWRlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmb250ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgZm9udCA9IHRoaXMuYXR0YWNoKG5ldyBQREZTdGFuZGFyZEZvbnQodXJsKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvbnQgPSB0aGlzLmF0dGFjaChuZXcgUERGRm9udCh0aGlzLCBmb250KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLkZPTlRTW3VybF0gPSBmb250O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb250O1xuICAgIH1cblxuICAgIGdldEltYWdlKHVybCkge1xuICAgICAgICB2YXIgaW1nID0gdGhpcy5JTUFHRVNbdXJsXTtcbiAgICAgICAgaWYgKCFpbWcpIHtcbiAgICAgICAgICAgIGltZyA9IElNQUdFX0NBQ0hFW3VybF07XG4gICAgICAgICAgICBpZiAoIWltZykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkltYWdlIFwiICsgdXJsICsgXCIgaGFzIG5vdCBiZWVuIGxvYWRlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbWcgPT09IFwiRVJST1JcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW1nID0gdGhpcy5JTUFHRVNbdXJsXSA9IHRoaXMuYXR0YWNoKGltZy5hc1N0cmVhbSh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGltZztcbiAgICB9XG5cbiAgICBnZXRPcGFjaXR5R1Mob3BhY2l0eSwgZm9yU3Ryb2tlKSB7XG4gICAgICAgIHZhciBpZCA9IHBhcnNlRmxvYXQob3BhY2l0eSkudG9GaXhlZCgzKTtcbiAgICAgICAgb3BhY2l0eSA9IHBhcnNlRmxvYXQoaWQpO1xuICAgICAgICBpZCArPSBmb3JTdHJva2UgPyBcIlNcIiA6IFwiRlwiO1xuICAgICAgICB2YXIgY2FjaGUgPSB0aGlzLl9vcGFjaXR5R1NDYWNoZSB8fCAodGhpcy5fb3BhY2l0eUdTQ2FjaGUgPSB7fSk7XG4gICAgICAgIHZhciBncyA9IGNhY2hlW2lkXTtcbiAgICAgICAgaWYgKCFncykge1xuICAgICAgICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICAgICAgICAgIFR5cGU6IF8oXCJFeHRHU3RhdGVcIilcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZm9yU3Ryb2tlKSB7XG4gICAgICAgICAgICAgICAgcHJvcHMuQ0EgPSBvcGFjaXR5O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcm9wcy5jYSA9IG9wYWNpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBncyA9IHRoaXMuYXR0YWNoKG5ldyBQREZEaWN0aW9uYXJ5KHByb3BzKSk7XG4gICAgICAgICAgICBncy5fcmVzb3VyY2VOYW1lID0gXyhcIkdTXCIgKyAoKytSRVNPVVJDRV9DT1VOVEVSKSk7XG4gICAgICAgICAgICBjYWNoZVtpZF0gPSBncztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ3M7XG4gICAgfVxuXG4gICAgZGljdChwcm9wcykge1xuICAgICAgICByZXR1cm4gbmV3IFBERkRpY3Rpb25hcnkocHJvcHMpO1xuICAgIH1cblxuICAgIG5hbWUoc3RyKSB7XG4gICAgICAgIHJldHVybiBfKHN0cik7XG4gICAgfVxuXG4gICAgc3RyZWFtKHByb3BzLCBjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGU3RyZWFtKGNvbnRlbnQsIHByb3BzKTtcbiAgICB9XG59XG5cbi8qIC0tLS0tWyB1dGlscyBdLS0tLS0gKi9cblxuZnVuY3Rpb24gcGFkKHN0ciwgbGVuLCBjaCkge1xuICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgbGVuKSB7XG4gICAgICAgIHN0ciA9IGNoICsgc3RyO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG5mdW5jdGlvbiB6ZXJvcGFkKG4sIGxlbikge1xuICAgIHJldHVybiBwYWQoU3RyaW5nKG4pLCBsZW4sIFwiMFwiKTtcbn1cblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBBcnJheTtcbn07XG5cbmZ1bmN0aW9uIGlzRGF0ZShvYmopIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRGF0ZTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQXJyYXkoYSwgb3V0KSB7XG4gICAgb3V0KFwiW1wiKTtcbiAgICBpZiAoYS5sZW5ndGggPiAwKSB7XG4gICAgICAgIG91dC53aXRoSW5kZW50KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDAgJiYgaSAlIDggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0LmluZGVudChhW2ldKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvdXQoXCIgXCIsIGFbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vb3V0LmluZGVudCgpO1xuICAgIH1cbiAgICBvdXQoXCIgXVwiKTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyRGF0ZShkYXRlLCBvdXQpIHtcbiAgICBvdXQoXCIoRDpcIixcbiAgICAgICAgemVyb3BhZChkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIDQpLFxuICAgICAgICB6ZXJvcGFkKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsIDIpLFxuICAgICAgICB6ZXJvcGFkKGRhdGUuZ2V0VVRDRGF0ZSgpLCAyKSxcbiAgICAgICAgemVyb3BhZChkYXRlLmdldFVUQ0hvdXJzKCksIDIpLFxuICAgICAgICB6ZXJvcGFkKGRhdGUuZ2V0VVRDTWludXRlcygpLCAyKSxcbiAgICAgICAgemVyb3BhZChkYXRlLmdldFVUQ1NlY29uZHMoKSwgMiksXG4gICAgICAgIFwiWilcIik7XG59XG5cbmZ1bmN0aW9uIG1tMnB0KG1tKSB7XG4gICAgcmV0dXJuIG1tICogKDcyLzI1LjQpO1xufVxuXG5mdW5jdGlvbiBjbTJwdChjbSkge1xuICAgIHJldHVybiBtbTJwdChjbSAqIDEwKTtcbn1cblxuZnVuY3Rpb24gaW4ycHQoaW5jaCkgIHtcbiAgICByZXR1cm4gaW5jaCAqIDcyO1xufVxuXG5cbmZ1bmN0aW9uIHVuaXRzVG9Qb2ludHMoeCwgZGVmKSB7XG4gICAgaWYgKHR5cGVvZiB4ID09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgeCA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHZhciBtO1xuICAgICAgICBtID0gL15cXHMqKFswLTkuXSspXFxzKihtbXxjbXxpbnxwdClcXHMqJC8uZXhlYyh4KTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIHZhciBudW0gPSBwYXJzZUZsb2F0KG1bMV0pO1xuICAgICAgICAgICAgaWYgKCFpc05hTihudW0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1bMl0gPT0gXCJwdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIFwibW1cIjogbW0ycHQsXG4gICAgICAgICAgICAgICAgICAgIFwiY21cIjogY20ycHQsXG4gICAgICAgICAgICAgICAgICAgIFwiaW5cIjogaW4ycHRcbiAgICAgICAgICAgICAgICB9W21bMl1dKG51bSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRlZiAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBkZWY7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHBhcnNlIHVuaXQ6IFwiICsgeCk7XG59XG5cbi8qIC0tLS0tWyBQREYgYmFzaWMgb2JqZWN0cyBdLS0tLS0gKi9cblxuY2xhc3MgUERGVmFsdWUge1xuICAgIGJlZm9yZVJlbmRlcigpIHt9XG59XG5cbmNsYXNzIFBERlN0cmluZyBleHRlbmRzIFBERlZhbHVlIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgdXRmMTZiZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMudXRmMTZiZSA9IEJvb2xlYW4odXRmMTZiZSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKG91dCkge1xuICAgICAgICBsZXQgdHh0ID0gdGhpcy52YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMudXRmMTZiZSkge1xuICAgICAgICAgICAgdHh0ID0gQk9NICsgZW5jb2RlVVRGMTZCRSh0eHQpO1xuICAgICAgICAgICAgdHh0ID0gdHh0LnJlcGxhY2UoLyhbXFwoXFwpXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuICAgICAgICAgICAgb3V0KFwiKFwiLCB0eHQsIFwiKVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG91dC53cml0ZVN0cmluZyB0cnVuY2F0ZXMgY2hhcmNvZGVzIHRvIDggYml0cyBhbmRcbiAgICAgICAgICAgIC8vIDB4MTI4ICYgMHhGRiBpcyA0MCwgdGhlIGNvZGUgZm9yIG9wZW4gcGFyZW4uXG4gICAgICAgICAgICAvLyB0aGVyZWZvcmUgd2UgbmVlZCB0byBkbyB0aGUgY2hvcHBpbmcgaGVyZSB0byBtYWtlXG4gICAgICAgICAgICAvLyBzdXJlIHdlIGJhY2tzbGFzaCBhbGwgY2FzZXMuXG4gICAgICAgICAgICBsZXQgZGF0YSA9IFsgNDAgXTsgLy8gb3BlbiBQREYgc3RyaW5nICcoJ1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eHQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBsZXQgY29kZSA9IHR4dC5jaGFyQ29kZUF0KGkpICYgMHhGRjtcbiAgICAgICAgICAgICAgICBpZiAoY29kZSA9PSA0MCB8fCBjb2RlID09IDQxIHx8IGNvZGUgPT0gOTIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYmFja3NsYXNoIGJlZm9yZSAoLCApIGFuZCBcXFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2goOTIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goY29kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhLnB1c2goNDEpOyAgLy8gJyknIGNsb3NlIFBERiBzdHJpbmdcbiAgICAgICAgICAgIG91dC53cml0ZURhdGEoZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxufVxuXG5jbGFzcyBQREZIZXhTdHJpbmcgZXh0ZW5kcyBQREZTdHJpbmcge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHN1cGVyKHZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJlbmRlcihvdXQpIHtcbiAgICAgICAgb3V0KFwiPFwiKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnZhbHVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBvdXQoemVyb3BhZCh0aGlzLnZhbHVlLmNoYXJDb2RlQXQoaSkudG9TdHJpbmcoMTYpLCA0KSk7XG4gICAgICAgIH1cbiAgICAgICAgb3V0KFwiPlwiKTtcbiAgICB9XG59XG5cbi8vLyBuYW1lc1xuY2xhc3MgUERGTmFtZSBleHRlbmRzIFBERlZhbHVlIHtcbiAgICBzdGF0aWMgZ2V0KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF8obmFtZSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IobmFtZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cblxuICAgIHJlbmRlcihvdXQpIHtcbiAgICAgICAgb3V0KFwiL1wiICsgdGhpcy5lc2NhcGUoKSk7XG4gICAgfVxuXG4gICAgZXNjYXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lLnJlcGxhY2UoL1teXFx4MjEtXFx4N0VdL2csIGZ1bmN0aW9uKGMpe1xuICAgICAgICAgICAgcmV0dXJuIFwiI1wiICsgemVyb3BhZChjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLCAyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfVxufVxuXG52YXIgUERGTmFtZV9jYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBfKG5hbWUpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkoUERGTmFtZV9jYWNoZSwgbmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIFBERk5hbWVfY2FjaGVbbmFtZV07XG4gICAgfVxuICAgIHJldHVybiAoUERGTmFtZV9jYWNoZVtuYW1lXSA9IG5ldyBQREZOYW1lKG5hbWUpKTtcbn1cblxuLy8vIGRpY3Rpb25hcnlcblxuY2xhc3MgUERGRGljdGlvbmFyeSBleHRlbmRzIFBERlZhbHVlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgfVxuXG4gICAgcmVuZGVyKG91dCkge1xuICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzLCBlbXB0eSA9IHRydWU7XG4gICAgICAgIG91dChcIjw8XCIpO1xuICAgICAgICBvdXQud2l0aEluZGVudChmdW5jdGlvbigpe1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBwcm9wcykge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShwcm9wcywgaSkgJiYgIS9eXy8udGVzdChpKSkge1xuICAgICAgICAgICAgICAgICAgICBlbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBvdXQuaW5kZW50KF8oaSksIFwiIFwiLCBwcm9wc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFlbXB0eSkge1xuICAgICAgICAgICAgb3V0LmluZGVudCgpO1xuICAgICAgICB9XG4gICAgICAgIG91dChcIj4+XCIpO1xuICAgIH1cbn1cblxuLy8vIHN0cmVhbXNcblxuY2xhc3MgUERGU3RyZWFtIGV4dGVuZHMgUERGVmFsdWUge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIHByb3BzLCBjb21wcmVzcykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdmFyIHRtcCA9IEJpbmFyeVN0cmVhbSgpO1xuICAgICAgICAgICAgdG1wLndyaXRlKGRhdGEpO1xuICAgICAgICAgICAgZGF0YSA9IHRtcDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHMgfHwge307XG4gICAgICAgIHRoaXMuY29tcHJlc3MgPSBjb21wcmVzcztcbiAgICB9XG5cbiAgICByZW5kZXIob3V0KSB7XG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5kYXRhLmdldCgpLCBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIGlmICh0aGlzLmNvbXByZXNzICYmIHN1cHBvcnRzRGVmbGF0ZSgpKSB7XG4gICAgICAgICAgICBpZiAoIXByb3BzLkZpbHRlcikge1xuICAgICAgICAgICAgICAgIHByb3BzLkZpbHRlciA9IFtdO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghKHByb3BzLkZpbHRlciBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICAgICAgICAgIHByb3BzLkZpbHRlciA9IFsgcHJvcHMuRmlsdGVyIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9wcy5GaWx0ZXIudW5zaGlmdChfKFwiRmxhdGVEZWNvZGVcIikpO1xuICAgICAgICAgICAgZGF0YSA9IGRlZmxhdGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvcHMuTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIG91dChuZXcgUERGRGljdGlvbmFyeShwcm9wcyksIFwiIHN0cmVhbVwiLCBOTCk7XG4gICAgICAgIG91dC53cml0ZURhdGEoZGF0YSk7XG4gICAgICAgIG91dChOTCwgXCJlbmRzdHJlYW1cIik7XG4gICAgfVxufVxuXG4vLy8gY2F0YWxvZ1xuXG5jbGFzcyBQREZDYXRhbG9nIGV4dGVuZHMgUERGRGljdGlvbmFyeSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIFR5cGU6IF8oXCJDYXRhbG9nXCIpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldFBhZ2VzKHBhZ2VzT2JqKSB7XG4gICAgICAgIHRoaXMucHJvcHMuUGFnZXMgPSBwYWdlc09iajtcbiAgICB9XG59XG5cbi8vLyBwYWdlIHRyZWVcblxuY2xhc3MgUERGUGFnZVRyZWUgZXh0ZW5kcyBQREZEaWN0aW9uYXJ5IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgVHlwZSAgOiBfKFwiUGFnZXNcIiksXG4gICAgICAgICAgICBLaWRzICA6IFtdLFxuICAgICAgICAgICAgQ291bnQgOiAwXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZFBhZ2UocGFnZU9iaikge1xuICAgICAgICB0aGlzLnByb3BzLktpZHMucHVzaChwYWdlT2JqKTtcbiAgICAgICAgdGhpcy5wcm9wcy5Db3VudCsrO1xuICAgIH1cbn1cblxuLy8vIGltYWdlc1xuXG4vLyBKUEVHXG5cbnZhciBTT0ZfQ09ERVMgPSBbMHhjMCwgMHhjMSwgMHhjMiwgMHhjMywgMHhjNSwgMHhjNiwgMHhjNywgMHhjOSwgMHhjYSwgMHhjYiwgMHhjZCwgMHhjZSwgMHhjZl07XG5cbmNsYXNzIFBERkpwZWdJbWFnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICAvLyB3ZSBtdXN0IGRldGVybWluZSB0aGUgY29ycmVjdCBjb2xvciBzcGFjZS4gIHdlJ2xsIHBhcnNlIGEgYml0XG4gICAgICAgIC8vIG9mIHRoZSBKUEVHIHN0cmVhbSBmb3IgdGhpcywgaXQncyBzdGlsbCBiZXR0ZXIgdGhhbiBnb2luZ1xuICAgICAgICAvLyB0aHJvdWdoIHRoZSBjYW52YXMuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLXVpLWNvcmUvaXNzdWVzLzI4NDVcbiAgICAgICAgZGF0YS5vZmZzZXQoMCk7XG4gICAgICAgIHZhciB3aWR0aCwgaGVpZ2h0LCBjb2xvclNwYWNlLCBiaXRzUGVyQ29tcG9uZW50O1xuICAgICAgICB2YXIgc29pID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgaWYgKHNvaSAhPSAweEZGRDgpIHtcbiAgICAgICAgICAgIC8vIFhYWDogZG8gd2UgaGF2ZSBzb21lIGJldHRlciBvcHRpb25zIGhlcmU/XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIEpQRUcgaW1hZ2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKCFkYXRhLmVvZigpKSB7XG4gICAgICAgICAgICB2YXIgZmYgPSBkYXRhLnJlYWRCeXRlKCk7XG4gICAgICAgICAgICBpZiAoZmYgIT0gMHhGRikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSlBFRyBpbWFnZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtYXJrZXIgPSBkYXRhLnJlYWRCeXRlKCk7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgIGlmIChTT0ZfQ09ERVMuaW5kZXhPZihtYXJrZXIpID49IDApIHtcbiAgICAgICAgICAgICAgICAvLyBcInN0YXJ0IG9mIGZyYW1lXCIgbWFya2VyXG4gICAgICAgICAgICAgICAgYml0c1BlckNvbXBvbmVudCA9IGRhdGEucmVhZEJ5dGUoKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgICAgIHdpZHRoID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgICAgICBjb2xvclNwYWNlID0gZGF0YS5yZWFkQnl0ZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS5za2lwKGxlbmd0aCAtIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbG9yU3BhY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBKUEVHIGltYWdlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICAgICAgVHlwZSAgICAgICAgICAgICA6IF8oXCJYT2JqZWN0XCIpLFxuICAgICAgICAgICAgU3VidHlwZSAgICAgICAgICA6IF8oXCJJbWFnZVwiKSxcbiAgICAgICAgICAgIFdpZHRoICAgICAgICAgICAgOiB3aWR0aCxcbiAgICAgICAgICAgIEhlaWdodCAgICAgICAgICAgOiBoZWlnaHQsXG4gICAgICAgICAgICBCaXRzUGVyQ29tcG9uZW50IDogYml0c1BlckNvbXBvbmVudCxcbiAgICAgICAgICAgIEZpbHRlciAgICAgICAgICAgOiBfKFwiRENURGVjb2RlXCIpXG4gICAgICAgIH07XG5cbiAgICAgICAgc3dpdGNoIChjb2xvclNwYWNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHByb3BzLkNvbG9yU3BhY2UgPSBfKFwiRGV2aWNlR3JheVwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBwcm9wcy5Db2xvclNwYWNlID0gXyhcIkRldmljZVJHQlwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBwcm9wcy5Db2xvclNwYWNlID0gXyhcIkRldmljZUNNWUtcIik7XG4gICAgICAgICAgICBwcm9wcy5EZWNvZGUgPSBbIDEsIDAsIDEsIDAsIDEsIDAsIDEsIDAgXTsgLy8gaW52ZXJ0IGNvbG9yc1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFzU3RyZWFtID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkYXRhLm9mZnNldCgwKTtcbiAgICAgICAgICAgIHZhciBzdHJlYW0gPSBuZXcgUERGU3RyZWFtKGRhdGEsIHByb3BzKTtcbiAgICAgICAgICAgIHN0cmVhbS5fcmVzb3VyY2VOYW1lID0gXyhcIklcIiArICgrK1JFU09VUkNFX0NPVU5URVIpKTtcbiAgICAgICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vLyBQREZSYXdJbWFnZSB3aWxsIGJlIHVzZWQgZm9yIGltYWdlcyB3aXRoIHRyYW5zcGFyZW5jeSAoUE5HKVxuXG5jbGFzcyBQREZSYXdJbWFnZSB7XG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgcmdiLCBhbHBoYSkge1xuICAgICAgICB0aGlzLmFzU3RyZWFtID0gZnVuY3Rpb24ocGRmKSB7XG4gICAgICAgICAgICB2YXIgbWFzayA9IG5ldyBQREZTdHJlYW0oYWxwaGEsIHtcbiAgICAgICAgICAgICAgICBUeXBlICAgICAgICAgICAgIDogXyhcIlhPYmplY3RcIiksXG4gICAgICAgICAgICAgICAgU3VidHlwZSAgICAgICAgICA6IF8oXCJJbWFnZVwiKSxcbiAgICAgICAgICAgICAgICBXaWR0aCAgICAgICAgICAgIDogd2lkdGgsXG4gICAgICAgICAgICAgICAgSGVpZ2h0ICAgICAgICAgICA6IGhlaWdodCxcbiAgICAgICAgICAgICAgICBCaXRzUGVyQ29tcG9uZW50IDogOCxcbiAgICAgICAgICAgICAgICBDb2xvclNwYWNlICAgICAgIDogXyhcIkRldmljZUdyYXlcIilcbiAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgdmFyIHN0cmVhbSA9IG5ldyBQREZTdHJlYW0ocmdiLCB7XG4gICAgICAgICAgICAgICAgVHlwZSAgICAgICAgICAgICA6IF8oXCJYT2JqZWN0XCIpLFxuICAgICAgICAgICAgICAgIFN1YnR5cGUgICAgICAgICAgOiBfKFwiSW1hZ2VcIiksXG4gICAgICAgICAgICAgICAgV2lkdGggICAgICAgICAgICA6IHdpZHRoLFxuICAgICAgICAgICAgICAgIEhlaWdodCAgICAgICAgICAgOiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgQml0c1BlckNvbXBvbmVudCA6IDgsXG4gICAgICAgICAgICAgICAgQ29sb3JTcGFjZSAgICAgICA6IF8oXCJEZXZpY2VSR0JcIiksXG4gICAgICAgICAgICAgICAgU01hc2sgICAgICAgICAgICA6IHBkZi5hdHRhY2gobWFzaylcbiAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgc3RyZWFtLl9yZXNvdXJjZU5hbWUgPSBfKFwiSVwiICsgKCsrUkVTT1VSQ0VfQ09VTlRFUikpO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8vLyBzdGFuZGFyZCBmb250c1xuXG5jbGFzcyBQREZTdGFuZGFyZEZvbnQgZXh0ZW5kcyBQREZEaWN0aW9uYXJ5IHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lKXtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgVHlwZSAgICAgOiBfKFwiRm9udFwiKSxcbiAgICAgICAgICAgIFN1YnR5cGUgIDogXyhcIlR5cGUxXCIpLFxuICAgICAgICAgICAgQmFzZUZvbnQgOiBfKG5hbWUpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX3Jlc291cmNlTmFtZSA9IF8oXCJGXCIgKyAoKytSRVNPVVJDRV9DT1VOVEVSKSk7XG4gICAgfVxuXG4gICAgZW5jb2RlVGV4dChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQREZTdHJpbmcoU3RyaW5nKHN0cikpO1xuICAgIH1cbn1cblxuLy8vIFRURiBmb250c1xuXG5jbGFzcyBQREZGb250IGV4dGVuZHMgUERGRGljdGlvbmFyeSB7XG4gICAgY29uc3RydWN0b3IocGRmLCBmb250LCBwcm9wcyl7XG4gICAgICAgIHN1cGVyKHt9KTtcblxuICAgICAgICBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHByb3BzLlR5cGUgPSBfKFwiRm9udFwiKTtcbiAgICAgICAgcHJvcHMuU3VidHlwZSA9IF8oXCJUeXBlMFwiKTtcbiAgICAgICAgcHJvcHMuRW5jb2RpbmcgPSBfKFwiSWRlbnRpdHktSFwiKTtcblxuICAgICAgICB0aGlzLl9wZGYgPSBwZGY7XG4gICAgICAgIHRoaXMuX2ZvbnQgPSBmb250O1xuICAgICAgICB0aGlzLl9zdWIgPSBmb250Lm1ha2VTdWJzZXQoKTtcbiAgICAgICAgdGhpcy5fcmVzb3VyY2VOYW1lID0gXyhcIkZcIiArICgrK1JFU09VUkNFX0NPVU5URVIpKTtcblxuICAgICAgICB2YXIgaGVhZCA9IGZvbnQuaGVhZDtcblxuICAgICAgICB0aGlzLm5hbWUgPSBmb250LnBzTmFtZTtcbiAgICAgICAgdmFyIHNjYWxlID0gdGhpcy5zY2FsZSA9IGZvbnQuc2NhbGU7XG4gICAgICAgIHRoaXMuYmJveCA9IFtcbiAgICAgICAgICAgIGhlYWQueE1pbiAqIHNjYWxlLFxuICAgICAgICAgICAgaGVhZC55TWluICogc2NhbGUsXG4gICAgICAgICAgICBoZWFkLnhNYXggKiBzY2FsZSxcbiAgICAgICAgICAgIGhlYWQueU1heCAqIHNjYWxlXG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy5pdGFsaWNBbmdsZSA9IGZvbnQucG9zdC5pdGFsaWNBbmdsZTtcbiAgICAgICAgdGhpcy5hc2NlbnQgPSBmb250LmFzY2VudCAqIHNjYWxlO1xuICAgICAgICB0aGlzLmRlc2NlbnQgPSBmb250LmRlc2NlbnQgKiBzY2FsZTtcbiAgICAgICAgdGhpcy5saW5lR2FwID0gZm9udC5saW5lR2FwICogc2NhbGU7XG4gICAgICAgIHRoaXMuY2FwSGVpZ2h0ID0gZm9udC5vczIuY2FwSGVpZ2h0IHx8IHRoaXMuYXNjZW50O1xuICAgICAgICB0aGlzLnhIZWlnaHQgPSBmb250Lm9zMi54SGVpZ2h0IHx8IDA7XG4gICAgICAgIHRoaXMuc3RlbVYgPSAwO1xuXG4gICAgICAgIHRoaXMuZmFtaWx5Q2xhc3MgPSAoZm9udC5vczIuZmFtaWx5Q2xhc3MgfHwgMCkgPj4gODtcbiAgICAgICAgdGhpcy5pc1NlcmlmID0gdGhpcy5mYW1pbHlDbGFzcyA+PSAxICYmIHRoaXMuZmFtaWx5Q2xhc3MgPD0gNztcbiAgICAgICAgdGhpcy5pc1NjcmlwdCA9IHRoaXMuZmFtaWx5Q2xhc3MgPT0gMTA7XG5cbiAgICAgICAgdGhpcy5mbGFncyA9ICgoZm9udC5wb3N0LmlzRml4ZWRQaXRjaCA/IDEgOiAwKSB8XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmlzU2VyaWYgPyAxIDw8IDEgOiAwKSB8XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmlzU2NyaXB0ID8gMSA8PCAzIDogMCkgfFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5pdGFsaWNBbmdsZSAhPT0gMCA/IDEgPDwgNiA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgKDEgPDwgNSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5jb2RlVGV4dCh0ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBERkhleFN0cmluZyh0aGlzLl9zdWIuZW5jb2RlVGV4dChTdHJpbmcodGV4dCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFRleHRXaWR0aChmb250U2l6ZSwgdGV4dCkge1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gMCwgY29kZU1hcCA9IHRoaXMuX2ZvbnQuY21hcC5jb2RlTWFwO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdseXBoSWQgPSBjb2RlTWFwW3RleHQuY2hhckNvZGVBdChpKV07XG4gICAgICAgICAgICAgICAgd2lkdGggKz0gdGhpcy5fZm9udC53aWR0aE9mR2x5cGgoZ2x5cGhJZCB8fCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3aWR0aCAqIGZvbnRTaXplIC8gMTAwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGJlZm9yZVJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHZhciBzdWIgPSBzZWxmLl9zdWI7XG5cbiAgICAgICAgICAgIC8vIHdyaXRlIHRoZSBUVEYgZGF0YVxuICAgICAgICAgICAgdmFyIGRhdGEgPSBzdWIucmVuZGVyKCk7XG4gICAgICAgICAgICB2YXIgZm9udFN0cmVhbSA9IG5ldyBQREZTdHJlYW0oQmluYXJ5U3RyZWFtKGRhdGEpLCB7XG4gICAgICAgICAgICAgICAgTGVuZ3RoMTogZGF0YS5sZW5ndGhcbiAgICAgICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHNlbGYuX3BkZi5hdHRhY2gobmV3IFBERkRpY3Rpb25hcnkoe1xuICAgICAgICAgICAgICAgIFR5cGUgICAgICAgICA6IF8oXCJGb250RGVzY3JpcHRvclwiKSxcbiAgICAgICAgICAgICAgICBGb250TmFtZSAgICAgOiBfKHNlbGYuX3N1Yi5wc05hbWUpLFxuICAgICAgICAgICAgICAgIEZvbnRCQm94ICAgICA6IHNlbGYuYmJveCxcbiAgICAgICAgICAgICAgICBGbGFncyAgICAgICAgOiBzZWxmLmZsYWdzLFxuICAgICAgICAgICAgICAgIFN0ZW1WICAgICAgICA6IHNlbGYuc3RlbVYsXG4gICAgICAgICAgICAgICAgSXRhbGljQW5nbGUgIDogc2VsZi5pdGFsaWNBbmdsZSxcbiAgICAgICAgICAgICAgICBBc2NlbnQgICAgICAgOiBzZWxmLmFzY2VudCxcbiAgICAgICAgICAgICAgICBEZXNjZW50ICAgICAgOiBzZWxmLmRlc2NlbnQsXG4gICAgICAgICAgICAgICAgQ2FwSGVpZ2h0ICAgIDogc2VsZi5jYXBIZWlnaHQsXG4gICAgICAgICAgICAgICAgWEhlaWdodCAgICAgIDogc2VsZi54SGVpZ2h0LFxuICAgICAgICAgICAgICAgIEZvbnRGaWxlMiAgICA6IHNlbGYuX3BkZi5hdHRhY2goZm9udFN0cmVhbSlcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgdmFyIGNtYXAgPSBzdWIubmNpZDJvZ2lkO1xuICAgICAgICAgICAgdmFyIGZpcnN0Q2hhciA9IHN1Yi5maXJzdENoYXI7XG4gICAgICAgICAgICB2YXIgbGFzdENoYXIgPSBzdWIubGFzdENoYXI7XG4gICAgICAgICAgICB2YXIgY2hhcldpZHRocyA9IFtdO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIGxvb3AoaSwgY2h1bmspe1xuICAgICAgICAgICAgICAgIGlmIChpIDw9IGxhc3RDaGFyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnaWQgPSBjbWFwW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2lkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvb3AoaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjaHVuaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJXaWR0aHMucHVzaChpLCBjaHVuayA9IFtdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLnB1c2goc2VsZi5fZm9udC53aWR0aE9mR2x5cGgoZ2lkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb29wKGkgKyAxLCBjaHVuayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KShmaXJzdENoYXIpO1xuXG4gICAgICAgICAgICAvLyBBcyBpZiB0d28gZGljdGlvbmFyaWVzIHdlcmVuJ3QgZW5vdWdoLCB3ZSBuZWVkIGFub3RoZXJcbiAgICAgICAgICAgIC8vIG9uZSwgdGhlIFwiZGVzY2VuZGFudCBmb250XCIuICBPbmx5IHRoYXQgb25lIGNhbiBiZSBvZlxuICAgICAgICAgICAgLy8gU3VidHlwZSBDSURGb250VHlwZTIuICBQREYgaXMgdGhlIFgxMSBvZiBkb2N1bWVudFxuICAgICAgICAgICAgLy8gZm9ybWF0czogcG9ydGFibGUgYnV0IGZ1bGwgb2YgbGVnYWN5IHRoYXQgbm9ib2R5IGNhcmVzXG4gICAgICAgICAgICAvLyBhYm91dCBhbnltb3JlLlxuXG4gICAgICAgICAgICB2YXIgZGVzY2VuZGFudCA9IG5ldyBQREZEaWN0aW9uYXJ5KHtcbiAgICAgICAgICAgICAgICBUeXBlOiBfKFwiRm9udFwiKSxcbiAgICAgICAgICAgICAgICBTdWJ0eXBlOiBfKFwiQ0lERm9udFR5cGUyXCIpLFxuICAgICAgICAgICAgICAgIEJhc2VGb250OiBfKHNlbGYuX3N1Yi5wc05hbWUpLFxuICAgICAgICAgICAgICAgIENJRFN5c3RlbUluZm86IG5ldyBQREZEaWN0aW9uYXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgUmVnaXN0cnkgICA6IG5ldyBQREZTdHJpbmcoXCJBZG9iZVwiKSxcbiAgICAgICAgICAgICAgICAgICAgT3JkZXJpbmcgICA6IG5ldyBQREZTdHJpbmcoXCJJZGVudGl0eVwiKSxcbiAgICAgICAgICAgICAgICAgICAgU3VwcGxlbWVudCA6IDBcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBGb250RGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgICAgICAgICAgICBGaXJzdENoYXI6IGZpcnN0Q2hhcixcbiAgICAgICAgICAgICAgICBMYXN0Q2hhcjogbGFzdENoYXIsXG4gICAgICAgICAgICAgICAgRFc6IE1hdGgucm91bmQoc2VsZi5fZm9udC53aWR0aE9mR2x5cGgoMCkpLFxuICAgICAgICAgICAgICAgIFc6IGNoYXJXaWR0aHMsXG4gICAgICAgICAgICAgICAgQ0lEVG9HSURNYXA6IHNlbGYuX3BkZi5hdHRhY2goc2VsZi5fbWFrZUNpZFRvR2lkTWFwKCkpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGRpY3QgPSBzZWxmLnByb3BzO1xuICAgICAgICAgICAgZGljdC5CYXNlRm9udCA9IF8oc2VsZi5fc3ViLnBzTmFtZSk7XG4gICAgICAgICAgICBkaWN0LkRlc2NlbmRhbnRGb250cyA9IFsgc2VsZi5fcGRmLmF0dGFjaChkZXNjZW5kYW50KSBdO1xuXG4gICAgICAgICAgICAvLyBDb21wdXRlIHRoZSBUb1VuaWNvZGUgbWFwIHNvIHRoYXQgYXBwcyBjYW4gZXh0cmFjdFxuICAgICAgICAgICAgLy8gbWVhbmluZ2Z1bCB0ZXh0IGZyb20gdGhlIFBERi5cbiAgICAgICAgICAgIHZhciB1bmltYXAgPSBuZXcgUERGVG9Vbmljb2RlQ21hcChmaXJzdENoYXIsIGxhc3RDaGFyLCBzdWIuc3Vic2V0KTtcbiAgICAgICAgICAgIHZhciB1bmltYXBTdHJlYW0gPSBuZXcgUERGU3RyZWFtKG1ha2VPdXRwdXQoKSwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICB1bmltYXBTdHJlYW0uZGF0YSh1bmltYXApO1xuICAgICAgICAgICAgZGljdC5Ub1VuaWNvZGUgPSBzZWxmLl9wZGYuYXR0YWNoKHVuaW1hcFN0cmVhbSk7XG4gICAgICAgIH1cblxuICAgICAgICBfbWFrZUNpZFRvR2lkTWFwKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQREZTdHJlYW0oQmluYXJ5U3RyZWFtKHRoaXMuX3N1Yi5jaWRUb0dpZE1hcCgpKSwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgIH1cbn1cblxuY2xhc3MgUERGVG9Vbmljb2RlQ21hcCBleHRlbmRzIFBERlZhbHVlIHtcbiAgICBjb25zdHJ1Y3RvcihmaXJzdENoYXIsIGxhc3RDaGFyLCBtYXApe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZpcnN0Q2hhciA9IGZpcnN0Q2hhcjtcbiAgICAgICAgdGhpcy5sYXN0Q2hhciA9IGxhc3RDaGFyO1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICB9XG5cbiAgICByZW5kZXIob3V0KSB7XG4gICAgICAgIG91dC5pbmRlbnQoXCIvQ0lESW5pdCAvUHJvY1NldCBmaW5kcmVzb3VyY2UgYmVnaW5cIik7XG4gICAgICAgIG91dC5pbmRlbnQoXCIxMiBkaWN0IGJlZ2luXCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiYmVnaW5jbWFwXCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiL0NJRFN5c3RlbUluZm8gPDxcIik7XG4gICAgICAgIG91dC5pbmRlbnQoXCIgIC9SZWdpc3RyeSAoQWRvYmUpXCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiICAvT3JkZXJpbmcgKFVDUylcIik7XG4gICAgICAgIG91dC5pbmRlbnQoXCIgIC9TdXBwbGVtZW50IDBcIik7XG4gICAgICAgIG91dC5pbmRlbnQoXCI+PiBkZWZcIik7XG4gICAgICAgIG91dC5pbmRlbnQoXCIvQ01hcE5hbWUgL0Fkb2JlLUlkZW50aXR5LVVDUyBkZWZcIik7XG4gICAgICAgIG91dC5pbmRlbnQoXCIvQ01hcFR5cGUgMiBkZWZcIik7XG4gICAgICAgIG91dC5pbmRlbnQoXCIxIGJlZ2luY29kZXNwYWNlcmFuZ2VcIik7XG4gICAgICAgIG91dC5pbmRlbnQoXCIgIDwwMDAwPjxmZmZmPlwiKTtcbiAgICAgICAgb3V0LmluZGVudChcImVuZGNvZGVzcGFjZXJhbmdlXCIpO1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgb3V0LmluZGVudChzZWxmLmxhc3RDaGFyIC0gc2VsZi5maXJzdENoYXIgKyAxLCBcIiBiZWdpbmJmY2hhclwiKTtcbiAgICAgICAgb3V0LndpdGhJbmRlbnQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGZvciAodmFyIGNvZGUgPSBzZWxmLmZpcnN0Q2hhcjsgY29kZSA8PSBzZWxmLmxhc3RDaGFyOyArK2NvZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdW5pY29kZSA9IHNlbGYubWFwW2NvZGVdO1xuICAgICAgICAgICAgICAgIHZhciBzdHIgPSB1Y3MyZW5jb2RlKFsgdW5pY29kZSBdKTtcbiAgICAgICAgICAgICAgICBvdXQuaW5kZW50KFwiPFwiLCB6ZXJvcGFkKGNvZGUudG9TdHJpbmcoMTYpLCA0KSwgXCI+XCIsIFwiPFwiKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBvdXQoemVyb3BhZChzdHIuY2hhckNvZGVBdChpKS50b1N0cmluZygxNiksIDQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3V0KFwiPlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG91dC5pbmRlbnQoXCJlbmRiZmNoYXJcIik7XG5cbiAgICAgICAgb3V0LmluZGVudChcImVuZGNtYXBcIik7XG4gICAgICAgIG91dC5pbmRlbnQoXCJDTWFwTmFtZSBjdXJyZW50ZGljdCAvQ01hcCBkZWZpbmVyZXNvdXJjZSBwb3BcIik7XG4gICAgICAgIG91dC5pbmRlbnQoXCJlbmRcIik7XG4gICAgICAgIG91dC5pbmRlbnQoXCJlbmRcIik7XG4gICAgfVxufVxuXG4vLy8gZ3JhZGllbnRzXG5cbmZ1bmN0aW9uIG1ha2VIYXNoKGEpIHtcbiAgICByZXR1cm4gYS5tYXAoZnVuY3Rpb24oeCl7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHgpID8gbWFrZUhhc2goeClcbiAgICAgICAgICAgIDogdHlwZW9mIHggPT0gXCJudW1iZXJcIiA/IChNYXRoLnJvdW5kKHggKiAxMDAwKSAvIDEwMDApLnRvRml4ZWQoMylcbiAgICAgICAgICAgIDogeDtcbiAgICB9KS5qb2luKFwiIFwiKTtcbn1cblxuZnVuY3Rpb24gY2FjaGVDb2xvckdyYWRpZW50RnVuY3Rpb24ocGRmLCByMSwgZzEsIGIxLCByMiwgZzIsIGIyKSB7XG4gICAgdmFyIGhhc2ggPSBtYWtlSGFzaChbIHIxLCBnMSwgYjEsIHIyLCBnMiwgYjIgXSk7XG4gICAgdmFyIGZ1bmMgPSBwZGYuR1JBRF9DT0xfRlVOQ1RJT05TW2hhc2hdO1xuICAgIGlmICghZnVuYykge1xuICAgICAgICBmdW5jID0gcGRmLkdSQURfQ09MX0ZVTkNUSU9OU1toYXNoXSA9IHBkZi5hdHRhY2gobmV3IFBERkRpY3Rpb25hcnkoe1xuICAgICAgICAgICAgRnVuY3Rpb25UeXBlOiAyLFxuICAgICAgICAgICAgRG9tYWluOiBbIDAsIDEgXSxcbiAgICAgICAgICAgIFJhbmdlOiBbIDAsIDEsIDAsIDEsIDAsIDEgXSxcbiAgICAgICAgICAgIE46IDEsXG4gICAgICAgICAgICBDMDogWyByMSAsIGcxICwgYjEgXSxcbiAgICAgICAgICAgIEMxOiBbIHIyICwgZzIgLCBiMiBdXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmM7XG59XG5cbmZ1bmN0aW9uIGNhY2hlT3BhY2l0eUdyYWRpZW50RnVuY3Rpb24ocGRmLCBhMSwgYTIpIHtcbiAgICB2YXIgaGFzaCA9IG1ha2VIYXNoKFsgYTEsIGEyIF0pO1xuICAgIHZhciBmdW5jID0gcGRmLkdSQURfT1BDX0ZVTkNUSU9OU1toYXNoXTtcbiAgICBpZiAoIWZ1bmMpIHtcbiAgICAgICAgZnVuYyA9IHBkZi5HUkFEX09QQ19GVU5DVElPTlNbaGFzaF0gPSBwZGYuYXR0YWNoKG5ldyBQREZEaWN0aW9uYXJ5KHtcbiAgICAgICAgICAgIEZ1bmN0aW9uVHlwZTogMixcbiAgICAgICAgICAgIERvbWFpbjogWyAwLCAxIF0sXG4gICAgICAgICAgICBSYW5nZTogWyAwLCAxIF0sXG4gICAgICAgICAgICBOOiAxLFxuICAgICAgICAgICAgQzA6IFsgYTEgXSxcbiAgICAgICAgICAgIEMxOiBbIGEyIF1cbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYztcbn1cblxuZnVuY3Rpb24gbWFrZUdyYWRpZW50RnVuY3Rpb25zKHBkZiwgc3RvcHMpIHtcbiAgICB2YXIgaGFzQWxwaGEgPSBmYWxzZTtcbiAgICB2YXIgb3BhY2l0aWVzID0gW107XG4gICAgdmFyIGNvbG9ycyA9IFtdO1xuICAgIHZhciBvZmZzZXRzID0gW107XG4gICAgdmFyIGVuY29kZSA9IFtdO1xuICAgIHZhciBpLCBwcmV2LCBjdXIsIHByZXZDb2xvciwgY3VyQ29sb3I7XG4gICAgZm9yIChpID0gMTsgaSA8IHN0b3BzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHByZXYgPSBzdG9wc1tpIC0gMV07XG4gICAgICAgIGN1ciA9IHN0b3BzW2ldO1xuICAgICAgICBwcmV2Q29sb3IgPSBwcmV2LmNvbG9yO1xuICAgICAgICBjdXJDb2xvciA9IGN1ci5jb2xvcjtcbiAgICAgICAgY29sb3JzLnB1c2goY2FjaGVDb2xvckdyYWRpZW50RnVuY3Rpb24oXG4gICAgICAgICAgICBwZGYsXG4gICAgICAgICAgICBwcmV2Q29sb3IuciwgcHJldkNvbG9yLmcsIHByZXZDb2xvci5iLFxuICAgICAgICAgICAgY3VyQ29sb3IuciwgIGN1ckNvbG9yLmcsICBjdXJDb2xvci5iXG4gICAgICAgICkpO1xuICAgICAgICBpZiAocHJldkNvbG9yLmEgPCAxIHx8IGN1ckNvbG9yLmEgPCAxKSB7XG4gICAgICAgICAgICBoYXNBbHBoYSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0cy5wdXNoKGN1ci5vZmZzZXQpO1xuICAgICAgICBlbmNvZGUucHVzaCgwLCAxKTtcbiAgICB9XG4gICAgaWYgKGhhc0FscGhhKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBzdG9wcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgcHJldiA9IHN0b3BzW2kgLSAxXTtcbiAgICAgICAgICAgIGN1ciA9IHN0b3BzW2ldO1xuICAgICAgICAgICAgcHJldkNvbG9yID0gcHJldi5jb2xvcjtcbiAgICAgICAgICAgIGN1ckNvbG9yID0gY3VyLmNvbG9yO1xuICAgICAgICAgICAgb3BhY2l0aWVzLnB1c2goY2FjaGVPcGFjaXR5R3JhZGllbnRGdW5jdGlvbihcbiAgICAgICAgICAgICAgICBwZGYsIHByZXZDb2xvci5hLCBjdXJDb2xvci5hXG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvZmZzZXRzLnBvcCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGhhc0FscGhhICA6IGhhc0FscGhhLFxuICAgICAgICBjb2xvcnMgICAgOiBhc3NlbWJsZShjb2xvcnMpLFxuICAgICAgICBvcGFjaXRpZXMgOiBoYXNBbHBoYSA/IGFzc2VtYmxlKG9wYWNpdGllcykgOiBudWxsXG4gICAgfTtcbiAgICBmdW5jdGlvbiBhc3NlbWJsZShmdW5jcykge1xuICAgICAgICBpZiAoZnVuY3MubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jc1swXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgRnVuY3Rpb25UeXBlOiAzLFxuICAgICAgICAgICAgRnVuY3Rpb25zOiBmdW5jcyxcbiAgICAgICAgICAgIERvbWFpbjogWyAwLCAxIF0sXG4gICAgICAgICAgICBCb3VuZHM6IG9mZnNldHMsXG4gICAgICAgICAgICBFbmNvZGU6IGVuY29kZVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2FjaGVDb2xvckdyYWRpZW50KHBkZiwgaXNSYWRpYWwsIHN0b3BzLCBjb29yZHMsIGZ1bmNzLCBib3gpIHtcbiAgICB2YXIgc2hhZGluZywgaGFzaDtcbiAgICAvLyBpZiBib3ggaXMgZ2l2ZW4gdGhlbiB3ZSBoYXZlIHVzZXItc3BhY2UgY29vcmRpbmF0ZXMsIHdoaWNoXG4gICAgLy8gbWVhbnMgdGhlIGdyYWRpZW50IGlzIGRlc2lnbmVkIGZvciBhIGNlcnRhaW4gcG9zaXRpb24vc2l6ZVxuICAgIC8vIG9uIHBhZ2UuICBjYWNoaW5nIHdvbid0IGRvIGFueSBnb29kLlxuICAgIGlmICghYm94KSB7XG4gICAgICAgIHZhciBhID0gWyBpc1JhZGlhbCBdLmNvbmNhdChjb29yZHMpO1xuICAgICAgICBzdG9wcy5mb3JFYWNoKGZ1bmN0aW9uKHgpe1xuICAgICAgICAgICAgYS5wdXNoKHgub2Zmc2V0LCB4LmNvbG9yLnIsIHguY29sb3IuZywgeC5jb2xvci5iKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGhhc2ggPSBtYWtlSGFzaChhKTtcbiAgICAgICAgc2hhZGluZyA9IHBkZi5HUkFEX0NPTFtoYXNoXTtcbiAgICB9XG4gICAgaWYgKCFzaGFkaW5nKSB7XG4gICAgICAgIHNoYWRpbmcgPSBuZXcgUERGRGljdGlvbmFyeSh7XG4gICAgICAgICAgICBUeXBlOiBfKFwiU2hhZGluZ1wiKSxcbiAgICAgICAgICAgIFNoYWRpbmdUeXBlOiBpc1JhZGlhbCA/IDMgOiAyLFxuICAgICAgICAgICAgQ29sb3JTcGFjZTogXyhcIkRldmljZVJHQlwiKSxcbiAgICAgICAgICAgIENvb3JkczogY29vcmRzLFxuICAgICAgICAgICAgRG9tYWluOiBbIDAsIDEgXSxcbiAgICAgICAgICAgIEZ1bmN0aW9uOiBmdW5jcyxcbiAgICAgICAgICAgIEV4dGVuZDogWyB0cnVlLCB0cnVlIF1cbiAgICAgICAgfSk7XG4gICAgICAgIHBkZi5hdHRhY2goc2hhZGluZyk7XG4gICAgICAgIHNoYWRpbmcuX3Jlc291cmNlTmFtZSA9IFwiU1wiICsgKCsrUkVTT1VSQ0VfQ09VTlRFUik7XG4gICAgICAgIGlmIChoYXNoKSB7XG4gICAgICAgICAgICBwZGYuR1JBRF9DT0xbaGFzaF0gPSBzaGFkaW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzaGFkaW5nO1xufVxuXG5mdW5jdGlvbiBjYWNoZU9wYWNpdHlHcmFkaWVudChwZGYsIGlzUmFkaWFsLCBzdG9wcywgY29vcmRzLCBmdW5jcywgYm94KSB7XG4gICAgdmFyIG9wYWNpdHksIGhhc2g7XG4gICAgLy8gaWYgYm94IGlzIGdpdmVuIHRoZW4gd2UgaGF2ZSB1c2VyLXNwYWNlIGNvb3JkaW5hdGVzLCB3aGljaFxuICAgIC8vIG1lYW5zIHRoZSBncmFkaWVudCBpcyBkZXNpZ25lZCBmb3IgYSBjZXJ0YWluIHBvc2l0aW9uL3NpemVcbiAgICAvLyBvbiBwYWdlLiAgY2FjaGluZyB3b24ndCBkbyBhbnkgZ29vZC5cbiAgICBpZiAoIWJveCkge1xuICAgICAgICB2YXIgYSA9IFsgaXNSYWRpYWwgXS5jb25jYXQoY29vcmRzKTtcbiAgICAgICAgc3RvcHMuZm9yRWFjaChmdW5jdGlvbih4KXtcbiAgICAgICAgICAgIGEucHVzaCh4Lm9mZnNldCwgeC5jb2xvci5hKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGhhc2ggPSBtYWtlSGFzaChhKTtcbiAgICAgICAgb3BhY2l0eSA9IHBkZi5HUkFEX09QQ1toYXNoXTtcbiAgICB9XG4gICAgaWYgKCFvcGFjaXR5KSB7XG4gICAgICAgIG9wYWNpdHkgPSBuZXcgUERGRGljdGlvbmFyeSh7XG4gICAgICAgICAgICBUeXBlOiBfKFwiRXh0R1N0YXRlXCIpLFxuICAgICAgICAgICAgQUlTOiBmYWxzZSxcbiAgICAgICAgICAgIENBOiAxLFxuICAgICAgICAgICAgY2E6IDEsXG4gICAgICAgICAgICBTTWFzazoge1xuICAgICAgICAgICAgICAgIFR5cGU6IF8oXCJNYXNrXCIpLFxuICAgICAgICAgICAgICAgIFM6IF8oXCJMdW1pbm9zaXR5XCIpLFxuICAgICAgICAgICAgICAgIEc6IHBkZi5hdHRhY2gobmV3IFBERlN0cmVhbShcIi9hMCBncyAvczAgc2hcIiwge1xuICAgICAgICAgICAgICAgICAgICBUeXBlOiBfKFwiWE9iamVjdFwiKSxcbiAgICAgICAgICAgICAgICAgICAgU3VidHlwZTogXyhcIkZvcm1cIiksXG4gICAgICAgICAgICAgICAgICAgIEZvcm1UeXBlOiAxLFxuICAgICAgICAgICAgICAgICAgICBCQm94OiAoYm94ID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmxlZnQsIGJveC50b3AgKyBib3guaGVpZ2h0LCBib3gubGVmdCArIGJveC53aWR0aCwgYm94LnRvcFxuICAgICAgICAgICAgICAgICAgICBdIDogWyAwLCAxLCAxLCAwIF0pLFxuICAgICAgICAgICAgICAgICAgICBHcm91cDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgVHlwZTogXyhcIkdyb3VwXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgUzogXyhcIlRyYW5zcGFyZW5jeVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIENTOiBfKFwiRGV2aWNlR3JheVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEk6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBFeHRHU3RhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhMDogeyBDQTogMSwgY2E6IDEgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFNoYWRpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb2xvclNwYWNlOiBfKFwiRGV2aWNlR3JheVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29vcmRzOiBjb29yZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvbWFpbjogWyAwLCAxIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNoYWRpbmdUeXBlOiBpc1JhZGlhbCA/IDMgOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGdW5jdGlvbjogZnVuY3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4dGVuZDogWyB0cnVlLCB0cnVlIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHBkZi5hdHRhY2gob3BhY2l0eSk7XG4gICAgICAgIG9wYWNpdHkuX3Jlc291cmNlTmFtZSA9IFwiT1wiICsgKCsrUkVTT1VSQ0VfQ09VTlRFUik7XG4gICAgICAgIGlmIChoYXNoKSB7XG4gICAgICAgICAgICBwZGYuR1JBRF9PUENbaGFzaF0gPSBvcGFjaXR5O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcGFjaXR5O1xufVxuXG5mdW5jdGlvbiBjYWNoZUdyYWRpZW50KHBkZiwgZ3JhZGllbnQsIGJveCkge1xuICAgIHZhciBpc1JhZGlhbCA9IGdyYWRpZW50LnR5cGUgPT0gXCJyYWRpYWxcIjtcbiAgICB2YXIgZnVuY3MgPSBtYWtlR3JhZGllbnRGdW5jdGlvbnMocGRmLCBncmFkaWVudC5zdG9wcyk7XG4gICAgdmFyIGNvb3JkcyA9IGlzUmFkaWFsID8gW1xuICAgICAgICBncmFkaWVudC5zdGFydC54ICwgZ3JhZGllbnQuc3RhcnQueSAsIGdyYWRpZW50LnN0YXJ0LnIsXG4gICAgICAgIGdyYWRpZW50LmVuZC54ICAgLCBncmFkaWVudC5lbmQueSAgICwgZ3JhZGllbnQuZW5kLnJcbiAgICBdIDogW1xuICAgICAgICBncmFkaWVudC5zdGFydC54ICwgZ3JhZGllbnQuc3RhcnQueSxcbiAgICAgICAgZ3JhZGllbnQuZW5kLnggICAsIGdyYWRpZW50LmVuZC55XG4gICAgXTtcbiAgICB2YXIgc2hhZGluZyA9IGNhY2hlQ29sb3JHcmFkaWVudChcbiAgICAgICAgcGRmLCBpc1JhZGlhbCwgZ3JhZGllbnQuc3RvcHMsIGNvb3JkcywgZnVuY3MuY29sb3JzLCBncmFkaWVudC51c2VyU3BhY2UgJiYgYm94XG4gICAgKTtcbiAgICB2YXIgb3BhY2l0eSA9IGZ1bmNzLmhhc0FscGhhID8gY2FjaGVPcGFjaXR5R3JhZGllbnQoXG4gICAgICAgIHBkZiwgaXNSYWRpYWwsIGdyYWRpZW50LnN0b3BzLCBjb29yZHMsIGZ1bmNzLm9wYWNpdGllcywgZ3JhZGllbnQudXNlclNwYWNlICYmIGJveFxuICAgICkgOiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIGhhc0FscGhhOiBmdW5jcy5oYXNBbHBoYSxcbiAgICAgICAgc2hhZGluZzogc2hhZGluZyxcbiAgICAgICAgb3BhY2l0eTogb3BhY2l0eVxuICAgIH07XG59XG5cbi8vLyBwYWdlIG9iamVjdFxuXG5jbGFzcyBQREZQYWdlIGV4dGVuZHMgUERGRGljdGlvbmFyeSB7XG4gICAgY29uc3RydWN0b3IocGRmLCBwcm9wcyl7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLl9wZGYgPSBwZGY7XG4gICAgICAgIHRoaXMuX3Jjb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX3RleHRNb2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2ZvbnRSZXNvdXJjZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fZ3NSZXNvdXJjZXMgPSB7fTtcbiAgICAgICAgdGhpcy5feFJlc291cmNlcyA9IHt9O1xuICAgICAgICB0aGlzLl9wYXRSZXNvdXJjZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fc2hSZXNvdXJjZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fb3BhY2l0eSA9IDE7XG4gICAgICAgIHRoaXMuX21hdHJpeCA9IFsgMSwgMCwgMCwgMSwgMCwgMCBdO1xuICAgICAgICB0aGlzLl9hbm5vdGF0aW9ucyA9IFtdO1xuXG4gICAgICAgIHRoaXMuX2ZvbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9mb250U2l6ZSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fY29udGV4dFN0YWNrID0gW107XG5cbiAgICAgICAgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICBwcm9wcy5UeXBlID0gXyhcIlBhZ2VcIik7XG4gICAgICAgIHByb3BzLlByb2NTZXQgPSBbXG4gICAgICAgICAgICBfKFwiUERGXCIpLFxuICAgICAgICAgICAgXyhcIlRleHRcIiksXG4gICAgICAgICAgICBfKFwiSW1hZ2VCXCIpLFxuICAgICAgICAgICAgXyhcIkltYWdlQ1wiKSxcbiAgICAgICAgICAgIF8oXCJJbWFnZUlcIilcbiAgICAgICAgXTtcbiAgICAgICAgcHJvcHMuUmVzb3VyY2VzID0gbmV3IFBERkRpY3Rpb25hcnkoe1xuICAgICAgICAgICAgRm9udCAgICAgIDogbmV3IFBERkRpY3Rpb25hcnkodGhpcy5fZm9udFJlc291cmNlcyksXG4gICAgICAgICAgICBFeHRHU3RhdGUgOiBuZXcgUERGRGljdGlvbmFyeSh0aGlzLl9nc1Jlc291cmNlcyksXG4gICAgICAgICAgICBYT2JqZWN0ICAgOiBuZXcgUERGRGljdGlvbmFyeSh0aGlzLl94UmVzb3VyY2VzKSxcbiAgICAgICAgICAgIFBhdHRlcm4gICA6IG5ldyBQREZEaWN0aW9uYXJ5KHRoaXMuX3BhdFJlc291cmNlcyksXG4gICAgICAgICAgICBTaGFkaW5nICAgOiBuZXcgUERGRGljdGlvbmFyeSh0aGlzLl9zaFJlc291cmNlcylcbiAgICAgICAgfSk7XG4gICAgICAgIHByb3BzLkFubm90cyA9IHRoaXMuX2Fubm90YXRpb25zO1xuICAgIH1cblxuICAgIF9vdXQoKSB7XG4gICAgICAgIHRoaXMuX2NvbnRlbnQuZGF0YS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgICAgIGlmICghaXNJZGVudGl0eU1hdHJpeChhcmd1bWVudHMpKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXRyaXggPSBtbXVsKGFyZ3VtZW50cywgdGhpcy5fbWF0cml4KTtcbiAgICAgICAgICAgIHRoaXMuX291dChhLCBcIiBcIiwgYiwgXCIgXCIsIGMsIFwiIFwiLCBkLCBcIiBcIiwgZSwgXCIgXCIsIGYsIFwiIGNtXCIpO1xuICAgICAgICAgICAgLy8gWFhYOiBkZWJ1Z1xuICAgICAgICAgICAgLy8gdGhpcy5fb3V0KFwiICUgY3VycmVudCBtYXRyaXg6IFwiLCB0aGlzLl9tYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5fb3V0KE5MKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRyYW5zbGF0ZShkeCwgZHkpIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0oMSwgMCwgMCwgMSwgZHgsIGR5KTtcbiAgICB9XG5cbiAgICBzY2FsZShzeCwgc3kpIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0oc3gsIDAsIDAsIHN5LCAwLCAwKTtcbiAgICB9XG5cbiAgICByb3RhdGUoYW5nbGUpIHtcbiAgICAgICAgdmFyIGNvcyA9IE1hdGguY29zKGFuZ2xlKSwgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybShjb3MsIHNpbiwgLXNpbiwgY29zLCAwLCAwKTtcbiAgICB9XG5cbiAgICBiZWdpblRleHQoKSB7XG4gICAgICAgIHRoaXMuX3RleHRNb2RlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fb3V0KFwiQlRcIiwgTkwpO1xuICAgIH1cblxuICAgIGVuZFRleHQoKSB7XG4gICAgICAgIHRoaXMuX3RleHRNb2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX291dChcIkVUXCIsIE5MKTtcbiAgICB9XG5cbiAgICBfcmVxdWlyZVRleHRNb2RlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3RleHRNb2RlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUZXh0IG1vZGUgcmVxdWlyZWQ7IGNhbGwgcGFnZS5iZWdpblRleHQoKSBmaXJzdFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9yZXF1aXJlRm9udCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mb250KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBmb250IHNlbGVjdGVkOyBjYWxsIHBhZ2Uuc2V0Rm9udCgpIGZpcnN0XCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0Rm9udChmb250LCBzaXplKSB7XG4gICAgICAgIHRoaXMuX3JlcXVpcmVUZXh0TW9kZSgpO1xuICAgICAgICBpZiAoZm9udCA9PSBudWxsKSB7XG4gICAgICAgICAgICBmb250ID0gdGhpcy5fZm9udDtcbiAgICAgICAgfSBlbHNlIGlmICghKGZvbnQgaW5zdGFuY2VvZiBQREZGb250KSkge1xuICAgICAgICAgICAgZm9udCA9IHRoaXMuX3BkZi5nZXRGb250KGZvbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaXplID09IG51bGwpIHtcbiAgICAgICAgICAgIHNpemUgPSB0aGlzLl9mb250U2l6ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9mb250UmVzb3VyY2VzW2ZvbnQuX3Jlc291cmNlTmFtZV0gPSBmb250O1xuICAgICAgICB0aGlzLl9mb250ID0gZm9udDtcbiAgICAgICAgdGhpcy5fZm9udFNpemUgPSBzaXplO1xuICAgICAgICB0aGlzLl9vdXQoZm9udC5fcmVzb3VyY2VOYW1lLCBcIiBcIiwgc2l6ZSwgXCIgVGZcIiwgTkwpO1xuICAgIH1cblxuICAgIHNldFRleHRMZWFkaW5nKHNpemUpIHtcbiAgICAgICAgdGhpcy5fcmVxdWlyZVRleHRNb2RlKCk7XG4gICAgICAgIHRoaXMuX291dChzaXplLCBcIiBUTFwiLCBOTCk7XG4gICAgfVxuXG4gICAgc2V0VGV4dFJlbmRlcmluZ01vZGUobW9kZSkge1xuICAgICAgICB0aGlzLl9yZXF1aXJlVGV4dE1vZGUoKTtcbiAgICAgICAgdGhpcy5fb3V0KG1vZGUsIFwiIFRyXCIsIE5MKTtcbiAgICB9XG5cbiAgICBzaG93VGV4dCh0ZXh0LCByZXF1ZXN0ZWRXaWR0aCkge1xuICAgICAgICB0aGlzLl9yZXF1aXJlRm9udCgpO1xuICAgICAgICBpZiAodGV4dC5sZW5ndGggPiAxICYmIHJlcXVlc3RlZFdpZHRoICYmIHRoaXMuX2ZvbnQgaW5zdGFuY2VvZiBQREZGb250KSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0V2lkdGggPSB0aGlzLl9mb250LmdldFRleHRXaWR0aCh0aGlzLl9mb250U2l6ZSwgdGV4dCk7XG4gICAgICAgICAgICB2YXIgc2NhbGUgPSByZXF1ZXN0ZWRXaWR0aCAvIG91dHB1dFdpZHRoICogMTAwO1xuICAgICAgICAgICAgdGhpcy5fb3V0KHNjYWxlLCBcIiBUeiBcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb3V0KHRoaXMuX2ZvbnQuZW5jb2RlVGV4dCh0ZXh0KSwgXCIgVGpcIiwgTkwpO1xuICAgIH1cblxuICAgIHNob3dUZXh0TkwodGV4dCkge1xuICAgICAgICB0aGlzLl9yZXF1aXJlRm9udCgpO1xuICAgICAgICB0aGlzLl9vdXQodGhpcy5fZm9udC5lbmNvZGVUZXh0KHRleHQpLCBcIiAnXCIsIE5MKTtcbiAgICB9XG5cbiAgICBhZGRMaW5rKHVyaSwgYm94KSB7XG4gICAgICAgIHZhciBsbCA9IHRoaXMuX3RvUGFnZSh7IHg6IGJveC5sZWZ0LCB5OiBib3guYm90dG9tIH0pO1xuICAgICAgICB2YXIgdXIgPSB0aGlzLl90b1BhZ2UoeyB4OiBib3gucmlnaHQsIHk6IGJveC50b3AgfSk7XG4gICAgICAgIHRoaXMuX2Fubm90YXRpb25zLnB1c2gobmV3IFBERkRpY3Rpb25hcnkoe1xuICAgICAgICAgICAgVHlwZSAgICA6IF8oXCJBbm5vdFwiKSxcbiAgICAgICAgICAgIFN1YnR5cGUgOiBfKFwiTGlua1wiKSxcbiAgICAgICAgICAgIFJlY3QgICAgOiBbIGxsLngsIGxsLnksIHVyLngsIHVyLnkgXSxcbiAgICAgICAgICAgIEJvcmRlciAgOiBbIDAsIDAsIDAgXSxcbiAgICAgICAgICAgIEEgICAgICAgOiBuZXcgUERGRGljdGlvbmFyeSh7XG4gICAgICAgICAgICAgICAgVHlwZSA6IF8oXCJBY3Rpb25cIiksXG4gICAgICAgICAgICAgICAgUyAgICA6IF8oXCJVUklcIiksXG4gICAgICAgICAgICAgICAgVVJJICA6IG5ldyBQREZTdHJpbmcodXJpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIHNldFN0cm9rZUNvbG9yKHIsIGcsIGIpIHtcbiAgICAgICAgdGhpcy5fb3V0KHIsIFwiIFwiLCBnLCBcIiBcIiwgYiwgXCIgUkdcIiwgTkwpO1xuICAgIH1cblxuICAgIHNldE9wYWNpdHkob3BhY2l0eSkge1xuICAgICAgICB0aGlzLnNldEZpbGxPcGFjaXR5KG9wYWNpdHkpO1xuICAgICAgICB0aGlzLnNldFN0cm9rZU9wYWNpdHkob3BhY2l0eSk7XG4gICAgICAgIHRoaXMuX29wYWNpdHkgKj0gb3BhY2l0eTtcbiAgICB9XG5cbiAgICBzZXRTdHJva2VPcGFjaXR5KG9wYWNpdHkpIHtcbiAgICAgICAgaWYgKG9wYWNpdHkgPCAxKSB7XG4gICAgICAgICAgICB2YXIgZ3MgPSB0aGlzLl9wZGYuZ2V0T3BhY2l0eUdTKHRoaXMuX29wYWNpdHkgKiBvcGFjaXR5LCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuX2dzUmVzb3VyY2VzW2dzLl9yZXNvdXJjZU5hbWVdID0gZ3M7XG4gICAgICAgICAgICB0aGlzLl9vdXQoZ3MuX3Jlc291cmNlTmFtZSwgXCIgZ3NcIiwgTkwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0RmlsbENvbG9yKHIsIGcsIGIpIHtcbiAgICAgICAgdGhpcy5fb3V0KHIsIFwiIFwiLCBnLCBcIiBcIiwgYiwgXCIgcmdcIiwgTkwpO1xuICAgIH1cblxuICAgIHNldEZpbGxPcGFjaXR5KG9wYWNpdHkpIHtcbiAgICAgICAgaWYgKG9wYWNpdHkgPCAxKSB7XG4gICAgICAgICAgICB2YXIgZ3MgPSB0aGlzLl9wZGYuZ2V0T3BhY2l0eUdTKHRoaXMuX29wYWNpdHkgKiBvcGFjaXR5LCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLl9nc1Jlc291cmNlc1tncy5fcmVzb3VyY2VOYW1lXSA9IGdzO1xuICAgICAgICAgICAgdGhpcy5fb3V0KGdzLl9yZXNvdXJjZU5hbWUsIFwiIGdzXCIsIE5MKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdyYWRpZW50KGdyYWRpZW50LCBib3gpIHtcbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIHRoaXMucmVjdChib3gubGVmdCwgYm94LnRvcCwgYm94LndpZHRoLCBib3guaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5jbGlwKCk7XG4gICAgICAgIGlmICghZ3JhZGllbnQudXNlclNwYWNlKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybShib3gud2lkdGgsIDAsIDAsIGJveC5oZWlnaHQsIGJveC5sZWZ0LCBib3gudG9wKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZyA9IGNhY2hlR3JhZGllbnQodGhpcy5fcGRmLCBncmFkaWVudCwgYm94KTtcbiAgICAgICAgdmFyIHNuYW1lID0gZy5zaGFkaW5nLl9yZXNvdXJjZU5hbWUsIG9uYW1lO1xuICAgICAgICB0aGlzLl9zaFJlc291cmNlc1tzbmFtZV0gPSBnLnNoYWRpbmc7XG4gICAgICAgIGlmIChnLmhhc0FscGhhKSB7XG4gICAgICAgICAgICBvbmFtZSA9IGcub3BhY2l0eS5fcmVzb3VyY2VOYW1lO1xuICAgICAgICAgICAgdGhpcy5fZ3NSZXNvdXJjZXNbb25hbWVdID0gZy5vcGFjaXR5O1xuICAgICAgICAgICAgdGhpcy5fb3V0KFwiL1wiICsgb25hbWUgKyBcIiBncyBcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb3V0KFwiL1wiICsgc25hbWUgKyBcIiBzaFwiLCBOTCk7XG4gICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIHNldERhc2hQYXR0ZXJuKGRhc2hBcnJheSwgZGFzaFBoYXNlKSB7XG4gICAgICAgIHRoaXMuX291dChkYXNoQXJyYXksIFwiIFwiLCBkYXNoUGhhc2UsIFwiIGRcIiwgTkwpO1xuICAgIH1cblxuICAgIHNldExpbmVXaWR0aCh3aWR0aCkge1xuICAgICAgICB0aGlzLl9vdXQod2lkdGgsIFwiIHdcIiwgTkwpO1xuICAgIH1cblxuICAgIHNldExpbmVDYXAobGluZUNhcCkge1xuICAgICAgICB0aGlzLl9vdXQobGluZUNhcCwgXCIgSlwiLCBOTCk7XG4gICAgfVxuXG4gICAgc2V0TGluZUpvaW4obGluZUpvaW4pIHtcbiAgICAgICAgdGhpcy5fb3V0KGxpbmVKb2luLCBcIiBqXCIsIE5MKTtcbiAgICB9XG5cbiAgICBzZXRNaXR0ZXJMaW1pdChtaXR0ZXJMaW1pdCkge1xuICAgICAgICB0aGlzLl9vdXQobWl0dGVyTGltaXQsIFwiIE1cIiwgTkwpO1xuICAgIH1cblxuICAgIHNhdmUoKSB7XG4gICAgICAgIHRoaXMuX2NvbnRleHRTdGFjay5wdXNoKHRoaXMuX2NvbnRleHQoKSk7XG4gICAgICAgIHRoaXMuX291dChcInFcIiwgTkwpO1xuICAgIH1cblxuICAgIHJlc3RvcmUoKSB7XG4gICAgICAgIHRoaXMuX291dChcIlFcIiwgTkwpO1xuICAgICAgICB0aGlzLl9jb250ZXh0KHRoaXMuX2NvbnRleHRTdGFjay5wb3AoKSk7XG4gICAgfVxuXG5cbiAgICAvLyBwYXRoc1xuICAgIG1vdmVUbyh4LCB5KSB7XG4gICAgICAgIHRoaXMuX291dCh4LCBcIiBcIiwgeSwgXCIgbVwiLCBOTCk7XG4gICAgfVxuXG4gICAgbGluZVRvKHgsIHkpIHtcbiAgICAgICAgdGhpcy5fb3V0KHgsIFwiIFwiLCB5LCBcIiBsXCIsIE5MKTtcbiAgICB9XG5cbiAgICBiZXppZXIoeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xuICAgICAgICB0aGlzLl9vdXQoeDEsIFwiIFwiLCB5MSwgXCIgXCIsIHgyLCBcIiBcIiwgeTIsIFwiIFwiLCB4MywgXCIgXCIsIHkzLCBcIiBjXCIsIE5MKTtcbiAgICB9XG5cbiAgICBiZXppZXIxKHgxLCB5MSwgeDMsIHkzKSB7XG4gICAgICAgIHRoaXMuX291dCh4MSwgXCIgXCIsIHkxLCBcIiBcIiwgeDMsIFwiIFwiLCB5MywgXCIgeVwiLCBOTCk7XG4gICAgfVxuXG4gICAgYmV6aWVyMih4MiwgeTIsIHgzLCB5Mykge1xuICAgICAgICB0aGlzLl9vdXQoeDIsIFwiIFwiLCB5MiwgXCIgXCIsIHgzLCBcIiBcIiwgeTMsIFwiIHZcIiwgTkwpO1xuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLl9vdXQoXCJoXCIsIE5MKTtcbiAgICB9XG5cbiAgICByZWN0KHgsIHksIHcsIGgpIHtcbiAgICAgICAgdGhpcy5fb3V0KHgsIFwiIFwiLCB5LCBcIiBcIiwgdywgXCIgXCIsIGgsIFwiIHJlXCIsIE5MKTtcbiAgICB9XG5cbiAgICBlbGxpcHNlKHgsIHksIHJ4LCByeSkge1xuICAgICAgICBmdW5jdGlvbiBfWCh2KSB7IHJldHVybiB4ICsgdjsgfVxuICAgICAgICBmdW5jdGlvbiBfWSh2KSB7IHJldHVybiB5ICsgdjsgfVxuXG4gICAgICAgIC8vIGhvdyB0byBnZXQgdG8gdGhlIFwibWFnaWMgbnVtYmVyXCIgaXMgZXhwbGFpbmVkIGhlcmU6XG4gICAgICAgIC8vIGh0dHA6Ly93d3cud2hpemtpZHRlY2gucmVkcHJpbmNlLm5ldC9iZXppZXIvY2lyY2xlL2thcHBhL1xuICAgICAgICB2YXIgayA9IDAuNTUyMjg0NzQ5ODMwNzkzNjtcblxuICAgICAgICB0aGlzLm1vdmVUbyhfWCgwKSwgX1kocnkpKTtcbiAgICAgICAgdGhpcy5iZXppZXIoXG4gICAgICAgICAgICBfWChyeCAqIGspICwgX1kocnkpLFxuICAgICAgICAgICAgX1gocngpICAgICAsIF9ZKHJ5ICogayksXG4gICAgICAgICAgICBfWChyeCkgICAgICwgX1koMClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5iZXppZXIoXG4gICAgICAgICAgICBfWChyeCkgICAgICwgX1koLXJ5ICogayksXG4gICAgICAgICAgICBfWChyeCAqIGspICwgX1koLXJ5KSxcbiAgICAgICAgICAgIF9YKDApICAgICAgLCBfWSgtcnkpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYmV6aWVyKFxuICAgICAgICAgICAgX1goLXJ4ICogaykgLCBfWSgtcnkpLFxuICAgICAgICAgICAgX1goLXJ4KSAgICAgLCBfWSgtcnkgKiBrKSxcbiAgICAgICAgICAgIF9YKC1yeCkgICAgICwgX1koMClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5iZXppZXIoXG4gICAgICAgICAgICBfWCgtcngpICAgICAsIF9ZKHJ5ICogayksXG4gICAgICAgICAgICBfWCgtcnggKiBrKSAsIF9ZKHJ5KSxcbiAgICAgICAgICAgIF9YKDApICAgICAgICwgX1kocnkpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY2lyY2xlKHgsIHksIHIpIHtcbiAgICAgICAgdGhpcy5lbGxpcHNlKHgsIHksIHIsIHIpO1xuICAgIH1cblxuICAgIHN0cm9rZSgpIHtcbiAgICAgICAgdGhpcy5fb3V0KFwiU1wiLCBOTCk7XG4gICAgfVxuXG4gICAgbm9wKCkge1xuICAgICAgICB0aGlzLl9vdXQoXCJuXCIsIE5MKTtcbiAgICB9XG5cbiAgICBjbGlwKCkge1xuICAgICAgICB0aGlzLl9vdXQoXCJXIG5cIiwgTkwpO1xuICAgIH1cblxuICAgIGNsaXBTdHJva2UoKSB7XG4gICAgICAgIHRoaXMuX291dChcIlcgU1wiLCBOTCk7XG4gICAgfVxuXG4gICAgY2xvc2VTdHJva2UoKSB7XG4gICAgICAgIHRoaXMuX291dChcInNcIiwgTkwpO1xuICAgIH1cblxuICAgIGZpbGwoKSB7XG4gICAgICAgIHRoaXMuX291dChcImZcIiwgTkwpO1xuICAgIH1cblxuICAgIGZpbGxTdHJva2UoKSB7XG4gICAgICAgIHRoaXMuX291dChcIkJcIiwgTkwpO1xuICAgIH1cblxuICAgIGRyYXdJbWFnZSh1cmwpIHtcbiAgICAgICAgdmFyIGltZyA9IHRoaXMuX3BkZi5nZXRJbWFnZSh1cmwpO1xuICAgICAgICBpZiAoaW1nKSB7IC8vIHRoZSByZXN1bHQgY2FuIGJlIG51bGwgZm9yIGEgY3Jvc3MtZG9tYWluIGltYWdlXG4gICAgICAgICAgICB0aGlzLl94UmVzb3VyY2VzW2ltZy5fcmVzb3VyY2VOYW1lXSA9IGltZztcbiAgICAgICAgICAgIHRoaXMuX291dChpbWcuX3Jlc291cmNlTmFtZSwgXCIgRG9cIiwgTkwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tbWVudCh0eHQpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0eHQuc3BsaXQoL1xccj9cXG4vZykuZm9yRWFjaChmdW5jdGlvbihsaW5lKXtcbiAgICAgICAgICAgIHNlbGYuX291dChcIiUgXCIsIGxpbmUsIE5MKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gaW50ZXJuYWxcbiAgICBfY29udGV4dCh2YWwpIHtcbiAgICAgICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9vcGFjaXR5ID0gdmFsLm9wYWNpdHk7XG4gICAgICAgICAgICB0aGlzLl9tYXRyaXggPSB2YWwubWF0cml4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiB0aGlzLl9vcGFjaXR5LFxuICAgICAgICAgICAgICAgIG1hdHJpeDogdGhpcy5fbWF0cml4XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3RvUGFnZShwKSB7XG4gICAgICAgIHZhciBtID0gdGhpcy5fbWF0cml4O1xuICAgICAgICB2YXIgYSA9IG1bMF0sIGIgPSBtWzFdLCBjID0gbVsyXSwgZCA9IG1bM10sIGUgPSBtWzRdLCBmID0gbVs1XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGEqcC54ICsgYypwLnkgKyBlLFxuICAgICAgICAgICAgeTogYipwLnggKyBkKnAueSArIGZcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVucXVvdGUoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKihbJ1wiXSkoLiopXFwxXFxzKiQvLCBcIiQyXCIpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZvbnREZWYoZm9udGRlZikge1xuICAgIC8vIFhYWDogdGhpcyBpcyB2ZXJ5IGNydWRlIGZvciBub3cgYW5kIGJ1Z2d5LiAgUHJvcGVyIHBhcnNpbmcgaXMgcXVpdGUgaW52b2x2ZWQuXG4gICAgdmFyIHJ4ID0gL15cXHMqKChub3JtYWx8aXRhbGljKVxccyspPygobm9ybWFsfHNtYWxsLWNhcHMpXFxzKyk/KChub3JtYWx8Ym9sZHxcXGQrKVxccyspPygoWzAtOS5dKykocHh8cHQpKShcXC8oKFswLTkuXSspKHB4fHB0KXxub3JtYWwpKT9cXHMrKC4qPylcXHMqJC9pO1xuICAgIHZhciBtID0gcnguZXhlYyhmb250ZGVmKTtcbiAgICBpZiAoIW0pIHtcbiAgICAgICAgcmV0dXJuIHsgZm9udFNpemU6IDEyLCBmb250RmFtaWx5OiBcInNhbnMtc2VyaWZcIiB9O1xuICAgIH1cbiAgICB2YXIgZm9udFNpemUgPSBtWzhdID8gcGFyc2VJbnQobVs4XSwgMTApIDogMTI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXRhbGljICAgICA6IG1bMl0gJiYgbVsyXS50b0xvd2VyQ2FzZSgpID09IFwiaXRhbGljXCIsXG4gICAgICAgIHZhcmlhbnQgICAgOiBtWzRdLFxuICAgICAgICBib2xkICAgICAgIDogbVs2XSAmJiAvYm9sZHw3MDAvaS50ZXN0KG1bNl0pLFxuICAgICAgICBmb250U2l6ZSAgIDogZm9udFNpemUsXG4gICAgICAgIGxpbmVIZWlnaHQgOiBtWzEyXSA/IG1bMTJdID09IFwibm9ybWFsXCIgPyBmb250U2l6ZSA6IHBhcnNlSW50KG1bMTJdLCAxMCkgOiBudWxsLFxuICAgICAgICBmb250RmFtaWx5IDogbVsxNF0uc3BsaXQoL1xccyosXFxzKi9nKS5tYXAodW5xdW90ZSlcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRGb250VVJMKHN0eWxlKSB7XG4gICAgZnVuY3Rpb24gbWtGYW1pbHkobmFtZSkge1xuICAgICAgICBpZiAoc3R5bGUuYm9sZCkge1xuICAgICAgICAgICAgbmFtZSArPSBcInxib2xkXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0eWxlLml0YWxpYykge1xuICAgICAgICAgICAgbmFtZSArPSBcInxpdGFsaWNcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICB2YXIgZm9udEZhbWlseSA9IHN0eWxlLmZvbnRGYW1pbHk7XG4gICAgdmFyIG5hbWUsIHVybDtcbiAgICBpZiAoZm9udEZhbWlseSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9udEZhbWlseS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgbmFtZSA9IG1rRmFtaWx5KGZvbnRGYW1pbHlbaV0pO1xuICAgICAgICAgICAgdXJsID0gRk9OVF9NQVBQSU5HU1tuYW1lXTtcbiAgICAgICAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHVybCA9IEZPTlRfTUFQUElOR1NbZm9udEZhbWlseS50b0xvd2VyQ2FzZSgpXTtcbiAgICB9XG4gICAgd2hpbGUgKHR5cGVvZiB1cmwgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHVybCA9IHVybCgpO1xuICAgIH1cbiAgICBpZiAoIXVybCkge1xuICAgICAgICB1cmwgPSBcIlRpbWVzLVJvbWFuXCI7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG59XG5cbnZhciBGT05UX01BUFBJTkdTID0ge1xuICAgIFwic2VyaWZcIiAgICAgICAgICAgICAgICAgICAgOiBcIlRpbWVzLVJvbWFuXCIsXG4gICAgXCJzZXJpZnxib2xkXCIgICAgICAgICAgICAgICA6IFwiVGltZXMtQm9sZFwiLFxuICAgIFwic2VyaWZ8aXRhbGljXCIgICAgICAgICAgICAgOiBcIlRpbWVzLUl0YWxpY1wiLFxuICAgIFwic2VyaWZ8Ym9sZHxpdGFsaWNcIiAgICAgICAgOiBcIlRpbWVzLUJvbGRJdGFsaWNcIixcbiAgICBcInNhbnMtc2VyaWZcIiAgICAgICAgICAgICAgIDogXCJIZWx2ZXRpY2FcIixcbiAgICBcInNhbnMtc2VyaWZ8Ym9sZFwiICAgICAgICAgIDogXCJIZWx2ZXRpY2EtQm9sZFwiLFxuICAgIFwic2Fucy1zZXJpZnxpdGFsaWNcIiAgICAgICAgOiBcIkhlbHZldGljYS1PYmxpcXVlXCIsXG4gICAgXCJzYW5zLXNlcmlmfGJvbGR8aXRhbGljXCIgICA6IFwiSGVsdmV0aWNhLUJvbGRPYmxpcXVlXCIsXG4gICAgXCJtb25vc3BhY2VcIiAgICAgICAgICAgICAgICA6IFwiQ291cmllclwiLFxuICAgIFwibW9ub3NwYWNlfGJvbGRcIiAgICAgICAgICAgOiBcIkNvdXJpZXItQm9sZFwiLFxuICAgIFwibW9ub3NwYWNlfGl0YWxpY1wiICAgICAgICAgOiBcIkNvdXJpZXItT2JsaXF1ZVwiLFxuICAgIFwibW9ub3NwYWNlfGJvbGR8aXRhbGljXCIgICAgOiBcIkNvdXJpZXItQm9sZE9ibGlxdWVcIixcbiAgICBcInphcGZkaW5nYmF0c1wiICAgICAgICAgICAgIDogXCJaYXBmRGluZ2JhdHNcIixcbiAgICBcInphcGZkaW5nYmF0c3xib2xkXCIgICAgICAgIDogXCJaYXBmRGluZ2JhdHNcIixcbiAgICBcInphcGZkaW5nYmF0c3xpdGFsaWNcIiAgICAgIDogXCJaYXBmRGluZ2JhdHNcIixcbiAgICBcInphcGZkaW5nYmF0c3xib2xkfGl0YWxpY1wiIDogXCJaYXBmRGluZ2JhdHNcIlxufTtcblxuZnVuY3Rpb24gZm9udEFsaWFzKGFsaWFzLCBuYW1lKSB7XG4gICAgYWxpYXMgPSBhbGlhcy50b0xvd2VyQ2FzZSgpO1xuICAgIEZPTlRfTUFQUElOR1NbYWxpYXNdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGT05UX01BUFBJTkdTW25hbWVdO1xuICAgIH07XG4gICAgRk9OVF9NQVBQSU5HU1thbGlhcyArIFwifGJvbGRcIl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEZPTlRfTUFQUElOR1NbbmFtZSArIFwifGJvbGRcIl07XG4gICAgfTtcbiAgICBGT05UX01BUFBJTkdTW2FsaWFzICsgXCJ8aXRhbGljXCJdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGT05UX01BUFBJTkdTW25hbWUgKyBcInxpdGFsaWNcIl07XG4gICAgfTtcbiAgICBGT05UX01BUFBJTkdTW2FsaWFzICsgXCJ8Ym9sZHxpdGFsaWNcIl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEZPTlRfTUFQUElOR1NbbmFtZSArIFwifGJvbGR8aXRhbGljXCJdO1xuICAgIH07XG59XG5cbi8vIExldCdzIGRlZmluZSBzb21lIGNvbW1vbiBuYW1lcyB0byBhbiBhcHByb3ByaWF0ZSByZXBsYWNlbWVudC5cbi8vIFRoZXNlIGFyZSBvdmVycmlkYWJsZSB2aWEgcGRmLmRlZmluZUZvbnQsIHNob3VsZCB0aGUgdXNlciB3YW50IHRvXG4vLyBpbmNsdWRlIHRoZSBwcm9wZXIgdmVyc2lvbnMuXG5cbmZvbnRBbGlhcyhcIlRpbWVzIE5ldyBSb21hblwiICwgXCJzZXJpZlwiKTtcbmZvbnRBbGlhcyhcIkNvdXJpZXIgTmV3XCIgICAgICwgXCJtb25vc3BhY2VcIik7XG5mb250QWxpYXMoXCJBcmlhbFwiICAgICAgICAgICAsIFwic2Fucy1zZXJpZlwiKTtcbmZvbnRBbGlhcyhcIkhlbHZldGljYVwiICAgICAgICwgXCJzYW5zLXNlcmlmXCIpO1xuZm9udEFsaWFzKFwiVmVyZGFuYVwiICAgICAgICAgLCBcInNhbnMtc2VyaWZcIik7XG5mb250QWxpYXMoXCJUYWhvbWFcIiAgICAgICAgICAsIFwic2Fucy1zZXJpZlwiKTtcbmZvbnRBbGlhcyhcIkdlb3JnaWFcIiAgICAgICAgICwgXCJzYW5zLXNlcmlmXCIpO1xuZm9udEFsaWFzKFwiTW9uYWNvXCIgICAgICAgICAgLCBcIm1vbm9zcGFjZVwiKTtcbmZvbnRBbGlhcyhcIkFuZGFsZSBNb25vXCIgICAgICwgXCJtb25vc3BhY2VcIik7XG5cbmZ1bmN0aW9uIGRlZmluZUZvbnQobmFtZSwgdXJsKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkge1xuICAgICAgICBmb3IgKHZhciBpIGluIG5hbWUpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShuYW1lLCBpKSkge1xuICAgICAgICAgICAgICAgIGRlZmluZUZvbnQoaSwgbmFtZVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBGT05UX01BUFBJTkdTW25hbWVdID0gdXJsO1xuXG4gICAgICAgIC8vIHNwZWNpYWwgaGFuZGxpbmcgZm9yIERlamFWdSBmb250czogaWYgdGhleSBnZXQgZGVmaW5lZCxcbiAgICAgICAgLy8gbGV0IHRoZW0gYWxzbyByZXBsYWNlIHRoZSBkZWZhdWx0IGZhbWlsaWVzLCBmb3IgZ29vZFxuICAgICAgICAvLyBVbmljb2RlIHN1cHBvcnQgb3V0IG9mIHRoZSBib3guXG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgIGNhc2UgXCJkZWphdnUgc2Fuc1wiICAgICAgICAgICAgICAgOiBGT05UX01BUFBJTkdTW1wic2Fucy1zZXJpZlwiXSAgICAgICAgICAgICAgPSB1cmw7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJkZWphdnUgc2Fuc3xib2xkXCIgICAgICAgICAgOiBGT05UX01BUFBJTkdTW1wic2Fucy1zZXJpZnxib2xkXCJdICAgICAgICAgPSB1cmw7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJkZWphdnUgc2Fuc3xpdGFsaWNcIiAgICAgICAgOiBGT05UX01BUFBJTkdTW1wic2Fucy1zZXJpZnxpdGFsaWNcIl0gICAgICAgPSB1cmw7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJkZWphdnUgc2Fuc3xib2xkfGl0YWxpY1wiICAgOiBGT05UX01BUFBJTkdTW1wic2Fucy1zZXJpZnxib2xkfGl0YWxpY1wiXSAgPSB1cmw7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJkZWphdnUgc2VyaWZcIiAgICAgICAgICAgICAgOiBGT05UX01BUFBJTkdTW1wic2VyaWZcIl0gICAgICAgICAgICAgICAgICAgPSB1cmw7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJkZWphdnUgc2VyaWZ8Ym9sZFwiICAgICAgICAgOiBGT05UX01BUFBJTkdTW1wic2VyaWZ8Ym9sZFwiXSAgICAgICAgICAgICAgPSB1cmw7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJkZWphdnUgc2VyaWZ8aXRhbGljXCIgICAgICAgOiBGT05UX01BUFBJTkdTW1wic2VyaWZ8aXRhbGljXCJdICAgICAgICAgICAgPSB1cmw7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJkZWphdnUgc2VyaWZ8Ym9sZHxpdGFsaWNcIiAgOiBGT05UX01BUFBJTkdTW1wic2VyaWZ8Ym9sZHxpdGFsaWNcIl0gICAgICAgPSB1cmw7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJkZWphdnUgbW9ub1wiICAgICAgICAgICAgICAgOiBGT05UX01BUFBJTkdTW1wibW9ub3NwYWNlXCJdICAgICAgICAgICAgICAgPSB1cmw7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJkZWphdnUgbW9ub3xib2xkXCIgICAgICAgICAgOiBGT05UX01BUFBJTkdTW1wibW9ub3NwYWNlfGJvbGRcIl0gICAgICAgICAgPSB1cmw7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJkZWphdnUgbW9ub3xpdGFsaWNcIiAgICAgICAgOiBGT05UX01BUFBJTkdTW1wibW9ub3NwYWNlfGl0YWxpY1wiXSAgICAgICAgPSB1cmw7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJkZWphdnUgbW9ub3xib2xkfGl0YWxpY1wiICAgOiBGT05UX01BUFBJTkdTW1wibW9ub3NwYWNlfGJvbGR8aXRhbGljXCJdICAgPSB1cmw7IGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtbXVsKGEsIGIpIHtcbiAgICB2YXIgYTEgPSBhWzBdLCBiMSA9IGFbMV0sIGMxID0gYVsyXSwgZDEgPSBhWzNdLCBlMSA9IGFbNF0sIGYxID0gYVs1XTtcbiAgICB2YXIgYTIgPSBiWzBdLCBiMiA9IGJbMV0sIGMyID0gYlsyXSwgZDIgPSBiWzNdLCBlMiA9IGJbNF0sIGYyID0gYls1XTtcbiAgICByZXR1cm4gW1xuICAgICAgICBhMSphMiArIGIxKmMyLCAgICAgICAgICBhMSpiMiArIGIxKmQyLFxuICAgICAgICBjMSphMiArIGQxKmMyLCAgICAgICAgICBjMSpiMiArIGQxKmQyLFxuICAgICAgICBlMSphMiArIGYxKmMyICsgZTIsICAgICBlMSpiMiArIGYxKmQyICsgZjJcbiAgICBdO1xufVxuXG5mdW5jdGlvbiBpc0lkZW50aXR5TWF0cml4KG0pIHtcbiAgICByZXR1cm4gbVswXSA9PT0gMSAmJiBtWzFdID09PSAwICYmIG1bMl0gPT09IDAgJiYgbVszXSA9PT0gMSAmJiBtWzRdID09PSAwICYmIG1bNV0gPT09IDA7XG59XG5cbmNvbnN0IFRFWFRfUkVOREVSSU5HX01PREUgPSB7XG4gICAgZmlsbCAgICAgICAgICAgOiAwLFxuICAgIHN0cm9rZSAgICAgICAgIDogMSxcbiAgICBmaWxsQW5kU3Ryb2tlICA6IDIsXG4gICAgaW52aXNpYmxlICAgICAgOiAzLFxuICAgIGZpbGxBbmRDbGlwICAgIDogNCxcbiAgICBzdHJva2VBbmRDbGlwICA6IDUsXG4gICAgZmlsbFN0cm9rZUNsaXAgOiA2LFxuICAgIGNsaXAgICAgICAgICAgIDogN1xufTtcblxuZXhwb3J0IHtcbiAgICBQREZEb2N1bWVudCBhcyBEb2N1bWVudCxcbiAgICBCaW5hcnlTdHJlYW0sXG4gICAgZGVmaW5lRm9udCxcbiAgICBwYXJzZUZvbnREZWYsXG4gICAgZ2V0Rm9udFVSTCxcbiAgICBsb2FkRm9udHMsXG4gICAgbG9hZEltYWdlcyxcbiAgICBnZXRQYXBlck9wdGlvbnMsXG4gICAgY2xlYXJJbWFnZUNhY2hlLFxuICAgIFRFWFRfUkVOREVSSU5HX01PREVcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1tdWx0aS1zcGFjZXMsIGtleS1zcGFjaW5nLCBpbmRlbnQsIGNhbWVsY2FzZSwgc3BhY2UtYmVmb3JlLWJsb2NrcywgZXFlcWVxLCBicmFjZS1zdHlsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgc3BhY2UtaW5maXgtb3BzLCBzcGFjZS1iZWZvcmUtZnVuY3Rpb24tcGFyZW4sIGFycmF5LWJyYWNrZXQtc3BhY2luZywgb2JqZWN0LWN1cmx5LXNwYWNpbmcgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLW5lc3RlZC10ZXJuYXJ5LCBtYXgtcGFyYW1zLCBkZWZhdWx0LWNhc2UsIG5vLWVsc2UtcmV0dXJuLCBuby1lbXB0eSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24sIG5vLXZhciwgYmxvY2stc2NvcGVkLXZhciAqL1xuXG5pbXBvcnQgeyBjcmVhdGVQcm9taXNlIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7IHBhcnNlQ29sb3IgYXMgdXRpbHNfcGFyc2VDb2xvciwgc2F2ZUFzIGFzIHV0aWxfc2F2ZUFzLCBzdXBwb3J0IH0gZnJvbSBcIi4uL2NvbW1vblwiO1xuaW1wb3J0ICogYXMgUERGIGZyb20gXCIuL2NvcmVcIjtcbmltcG9ydCB7IEdyb3VwLCBQYXRoLCBNdWx0aVBhdGgsIEdyYWRpZW50LCBSYWRpYWxHcmFkaWVudCB9IGZyb20gJy4uL2RyYXdpbmcnO1xuaW1wb3J0ICogYXMgZ2VvIGZyb20gXCIuLi9nZW9tZXRyeVwiO1xuXG5jb25zdCBERUZBVUxUX0lNQUdFX0RQSSA9IDMwMDtcbmNvbnN0IFRFWFRfUkVOREVSSU5HX01PREUgPSBQREYuVEVYVF9SRU5ERVJJTkdfTU9ERTtcblxuY29uc3QgREFTSF9QQVRURVJOUyA9IHtcbiAgICBkYXNoICAgICAgICAgICA6IFsgNCBdLFxuICAgIGRhc2hEb3QgICAgICAgIDogWyA0LCAyLCAxLCAyIF0sXG4gICAgZG90ICAgICAgICAgICAgOiBbIDEsIDIgXSxcbiAgICBsb25nRGFzaCAgICAgICA6IFsgOCwgMiBdLFxuICAgIGxvbmdEYXNoRG90ICAgIDogWyA4LCAyLCAxLCAyIF0sXG4gICAgbG9uZ0Rhc2hEb3REb3QgOiBbIDgsIDIsIDEsIDIsIDEsIDIgXSxcbiAgICBzb2xpZCAgICAgICAgICA6IFtdXG59O1xuXG5jb25zdCBMSU5FX0NBUCA9IHtcbiAgICBidXR0ICAgOiAwLFxuICAgIHJvdW5kICA6IDEsXG4gICAgc3F1YXJlIDogMlxufTtcblxuY29uc3QgTElORV9KT0lOID0ge1xuICAgIG1pdGVyIDogMCxcbiAgICByb3VuZCA6IDEsXG4gICAgYmV2ZWwgOiAyXG59O1xuXG5mdW5jdGlvbiByZW5kZXIoZ3JvdXAsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGZvbnRzID0gW10sIGltYWdlcyA9IHt9LCBvcHRpb25zID0gZ3JvdXAub3B0aW9ucztcblxuICAgIGZ1bmN0aW9uIGdldE9wdGlvbihuYW1lLCBkZWZ2YWwsIGhhc2gpIHtcbiAgICAgICAgaWYgKCFoYXNoKSB7XG4gICAgICAgICAgICBoYXNoID0gb3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzaC5wZGYgJiYgaGFzaC5wZGZbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhc2gucGRmW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZ2YWw7XG4gICAgfVxuXG4gICAgdmFyIG11bHRpUGFnZSA9IGdldE9wdGlvbihcIm11bHRpUGFnZVwiKTtcbiAgICB2YXIgaW1nRFBJID0gZ2V0T3B0aW9uKFwiaW1nRFBJXCIsIERFRkFVTFRfSU1BR0VfRFBJKTtcblxuICAgIFBERi5jbGVhckltYWdlQ2FjaGUoKTtcblxuICAgIGdyb3VwLnRyYXZlcnNlKGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICBJbWFnZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBlbGVtZW50LnNyYygpO1xuICAgICAgICAgICAgICAgIHZhciBzaXplID0gZWxlbWVudC5iYm94KCkuc2l6ZTtcbiAgICAgICAgICAgICAgICBpZiAoaW1nRFBJKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gaW1hZ2VzW3VybF07XG4gICAgICAgICAgICAgICAgICAgIHNpemUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IE1hdGguY2VpbChzaXplLndpZHRoICogaW1nRFBJIC8gNzIpLFxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogTWF0aC5jZWlsKHNpemUuaGVpZ2h0ICogaW1nRFBJIC8gNzIpXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzaXplLndpZHRoID0gTWF0aC5tYXgocHJldi53aWR0aCwgc2l6ZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBNYXRoLm1heChwcmV2LmhlaWdodCwgc2l6ZS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW1hZ2VzW3VybF0gPSBzaXplO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFRleHQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3R5bGUgPSBQREYucGFyc2VGb250RGVmKGVsZW1lbnQub3B0aW9ucy5mb250KTtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gUERGLmdldEZvbnRVUkwoc3R5bGUpO1xuICAgICAgICAgICAgICAgIGlmIChmb250cy5pbmRleE9mKHVybCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRzLnB1c2godXJsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGVsZW1lbnQpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gZG9JdCgpIHtcbiAgICAgICAgaWYgKC0tY291bnQgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGRmID0gbmV3IChQREYuRG9jdW1lbnQpKHtcbiAgICAgICAgICAgIHByb2R1Y2VyICA6IGdldE9wdGlvbihcInByb2R1Y2VyXCIpLFxuICAgICAgICAgICAgdGl0bGUgICAgIDogZ2V0T3B0aW9uKFwidGl0bGVcIiksXG4gICAgICAgICAgICBhdXRob3IgICAgOiBnZXRPcHRpb24oXCJhdXRob3JcIiksXG4gICAgICAgICAgICBzdWJqZWN0ICAgOiBnZXRPcHRpb24oXCJzdWJqZWN0XCIpLFxuICAgICAgICAgICAga2V5d29yZHMgIDogZ2V0T3B0aW9uKFwia2V5d29yZHNcIiksXG4gICAgICAgICAgICBjcmVhdG9yICAgOiBnZXRPcHRpb24oXCJjcmVhdG9yXCIpLFxuICAgICAgICAgICAgZGF0ZSAgICAgIDogZ2V0T3B0aW9uKFwiZGF0ZVwiKSxcblxuICAgICAgICAgICAgYXV0b1ByaW50IDogZ2V0T3B0aW9uKFwiYXV0b1ByaW50XCIpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGRyYXdQYWdlKGdyb3VwKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGdyb3VwLm9wdGlvbnM7XG5cbiAgICAgICAgICAgIHZhciB0bXAgPSBvcHRpbWl6ZShncm91cCk7XG4gICAgICAgICAgICB2YXIgYmJveCA9IHRtcC5iYm94O1xuICAgICAgICAgICAgZ3JvdXAgPSB0bXAucm9vdDtcbiAgICAgICAgICAgIC8vIHZhciB0bXAsIGJib3g7XG5cbiAgICAgICAgICAgIHZhciBwYXBlclNpemUgPSBnZXRPcHRpb24oXCJwYXBlclNpemVcIiwgZ2V0T3B0aW9uKFwicGFwZXJTaXplXCIsIFwiYXV0b1wiKSwgb3B0aW9ucyksIGFkZE1hcmdpbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHBhcGVyU2l6ZSA9PSBcImF1dG9cIikge1xuICAgICAgICAgICAgICAgIGlmIChiYm94KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaXplID0gYmJveC5nZXRTaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIHBhcGVyU2l6ZSA9IFsgc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQgXTtcbiAgICAgICAgICAgICAgICAgICAgYWRkTWFyZ2luID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbiA9IGJib3guZ2V0T3JpZ2luKCk7XG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IG5ldyBHcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICB0bXAudHJhbnNmb3JtKG5ldyBnZW8uTWF0cml4KDEsIDAsIDAsIDEsIC1vcmlnaW4ueCwgLW9yaWdpbi55KSk7XG4gICAgICAgICAgICAgICAgICAgIHRtcC5hcHBlbmQoZ3JvdXApO1xuICAgICAgICAgICAgICAgICAgICBncm91cCA9IHRtcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcGVyU2l6ZSA9IFwiQTRcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYWdlO1xuICAgICAgICAgICAgcGFnZSA9IHBkZi5hZGRQYWdlKHtcbiAgICAgICAgICAgICAgICBwYXBlclNpemUgOiBwYXBlclNpemUsXG4gICAgICAgICAgICAgICAgbWFyZ2luICAgIDogZ2V0T3B0aW9uKFwibWFyZ2luXCIsIGdldE9wdGlvbihcIm1hcmdpblwiKSwgb3B0aW9ucyksXG4gICAgICAgICAgICAgICAgYWRkTWFyZ2luIDogYWRkTWFyZ2luLFxuICAgICAgICAgICAgICAgIGxhbmRzY2FwZSA6IGdldE9wdGlvbihcImxhbmRzY2FwZVwiLCBnZXRPcHRpb24oXCJsYW5kc2NhcGVcIiwgZmFsc2UpLCBvcHRpb25zKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkcmF3RWxlbWVudChncm91cCwgcGFnZSwgcGRmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtdWx0aVBhZ2UpIHtcbiAgICAgICAgICAgIGdyb3VwLmNoaWxkcmVuLmZvckVhY2goZHJhd1BhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHJhd1BhZ2UoZ3JvdXApO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2socGRmLnJlbmRlcigpLCBwZGYpO1xuICAgIH1cblxuICAgIHZhciBjb3VudCA9IDI7XG4gICAgUERGLmxvYWRGb250cyhmb250cywgZG9JdCk7XG4gICAgUERGLmxvYWRJbWFnZXMoaW1hZ2VzLCBkb0l0LCB7XG4gICAgICAgIGpwZWdRdWFsaXR5IDogZ2V0T3B0aW9uKFwianBlZ1F1YWxpdHlcIiwgMC45MiksXG4gICAgICAgIGtlZXBQTkcgICAgIDogZ2V0T3B0aW9uKFwia2VlcFBOR1wiLCBmYWxzZSlcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdG9EYXRhVVJMKGdyb3VwLCBjYWxsYmFjaykge1xuICAgIHJlbmRlcihncm91cCwgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgIGNhbGxiYWNrKFwiZGF0YTphcHBsaWNhdGlvbi9wZGY7YmFzZTY0LFwiICsgZGF0YS5iYXNlNjQoKSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHRvQmxvYihncm91cCwgY2FsbGJhY2spIHtcbiAgICByZW5kZXIoZ3JvdXAsIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICBjYWxsYmFjayhuZXcgd2luZG93LkJsb2IoWyBkYXRhLmdldCgpIF0sIHsgdHlwZTogXCJhcHBsaWNhdGlvbi9wZGZcIiB9KSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNhdmVBcyhncm91cCwgZmlsZW5hbWUsIHByb3h5LCBjYWxsYmFjaykge1xuICAgIC8vIFhYWDogU2FmYXJpIGhhcyBCbG9iLCBidXQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgZG93bmxvYWQgYXR0cmlidXRlXG4gICAgLy8gICAgICBzbyB3ZSdkIGVuZCB1cCBjb252ZXJ0aW5nIHRvIGRhdGFVUkwgYW5kIHVzaW5nIHRoZSBwcm94eSBhbnl3YXkuXG4gICAgaWYgKHdpbmRvdy5CbG9iICYmICFzdXBwb3J0LmJyb3dzZXIuc2FmYXJpKSB7XG4gICAgICAgIHRvQmxvYihncm91cCwgZnVuY3Rpb24oYmxvYil7XG4gICAgICAgICAgICB1dGlsX3NhdmVBcyh7IGRhdGFVUkk6IGJsb2IsIGZpbGVOYW1lOiBmaWxlbmFtZSB9KTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGJsb2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0b0RhdGFVUkwoZ3JvdXAsIGZ1bmN0aW9uKGRhdGFVUkwpe1xuICAgICAgICAgICAgdXRpbF9zYXZlQXMoeyBkYXRhVVJJOiBkYXRhVVJMLCBmaWxlTmFtZTogZmlsZW5hbWUsIHByb3h5VVJMOiBwcm94eSB9KTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGFVUkwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKGhhbmRsZXJzLCBlbGVtZW50KSB7XG4gICAgdmFyIGhhbmRsZXIgPSBoYW5kbGVyc1tlbGVtZW50Lm5vZGVUeXBlXTtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlci5jYWxsLmFwcGx5KGhhbmRsZXIsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50O1xufVxuXG5mdW5jdGlvbiBkcmF3RWxlbWVudChlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICBpZiAoZWxlbWVudC5vcHRpb25zLl9wZGZEZWJ1Zykge1xuICAgICAgICBwYWdlLmNvbW1lbnQoXCJCRUdJTjogXCIgKyBlbGVtZW50Lm9wdGlvbnMuX3BkZkRlYnVnKTtcbiAgICB9XG5cbiAgICB2YXIgdHJhbnNmb3JtID0gZWxlbWVudC50cmFuc2Zvcm0oKTtcbiAgICB2YXIgb3BhY2l0eSA9IGVsZW1lbnQub3BhY2l0eSgpO1xuXG4gICAgcGFnZS5zYXZlKCk7XG5cbiAgICBpZiAob3BhY2l0eSAhPSBudWxsICYmIG9wYWNpdHkgPCAxKSB7XG4gICAgICAgIHBhZ2Uuc2V0T3BhY2l0eShvcGFjaXR5KTtcbiAgICB9XG5cbiAgICBzZXRTdHJva2VPcHRpb25zKGVsZW1lbnQsIHBhZ2UsIHBkZik7XG4gICAgc2V0RmlsbE9wdGlvbnMoZWxlbWVudCwgcGFnZSwgcGRmKTtcblxuICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgdmFyIG0gPSB0cmFuc2Zvcm0ubWF0cml4KCk7XG4gICAgICAgIHBhZ2UudHJhbnNmb3JtKG0uYSwgbS5iLCBtLmMsIG0uZCwgbS5lLCBtLmYpO1xuICAgIH1cblxuICAgIHNldENsaXBwaW5nKGVsZW1lbnQsIHBhZ2UsIHBkZik7XG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICAgIFBhdGggICAgICA6IGRyYXdQYXRoLFxuICAgICAgICBNdWx0aVBhdGggOiBkcmF3TXVsdGlQYXRoLFxuICAgICAgICBDaXJjbGUgICAgOiBkcmF3Q2lyY2xlLFxuICAgICAgICBBcmMgICAgICAgOiBkcmF3QXJjLFxuICAgICAgICBUZXh0ICAgICAgOiBkcmF3VGV4dCxcbiAgICAgICAgSW1hZ2UgICAgIDogZHJhd0ltYWdlLFxuICAgICAgICBHcm91cCAgICAgOiBkcmF3R3JvdXAsXG4gICAgICAgIFJlY3QgICAgICA6IGRyYXdSZWN0XG4gICAgfSwgZWxlbWVudCwgcGFnZSwgcGRmKTtcblxuICAgIHBhZ2UucmVzdG9yZSgpO1xuXG4gICAgaWYgKGVsZW1lbnQub3B0aW9ucy5fcGRmRGVidWcpIHtcbiAgICAgICAgcGFnZS5jb21tZW50KFwiRU5EOiBcIiArIGVsZW1lbnQub3B0aW9ucy5fcGRmRGVidWcpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0U3Ryb2tlT3B0aW9ucyhlbGVtZW50LCBwYWdlKSB7XG4gICAgdmFyIHN0cm9rZSA9IGVsZW1lbnQuc3Ryb2tlICYmIGVsZW1lbnQuc3Ryb2tlKCk7XG4gICAgaWYgKCFzdHJva2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjb2xvciA9IHN0cm9rZS5jb2xvcjtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgY29sb3IgPSBwYXJzZUNvbG9yKGNvbG9yKTtcbiAgICAgICAgaWYgKGNvbG9yID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gbm8gc3Ryb2tlXG4gICAgICAgIH1cbiAgICAgICAgcGFnZS5zZXRTdHJva2VDb2xvcihjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcbiAgICAgICAgaWYgKGNvbG9yLmEgIT0gMSkge1xuICAgICAgICAgICAgcGFnZS5zZXRTdHJva2VPcGFjaXR5KGNvbG9yLmEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHdpZHRoID0gc3Ryb2tlLndpZHRoO1xuICAgIGlmICh3aWR0aCAhPSBudWxsKSB7XG4gICAgICAgIGlmICh3aWR0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBubyBzdHJva2VcbiAgICAgICAgfVxuICAgICAgICBwYWdlLnNldExpbmVXaWR0aCh3aWR0aCk7XG4gICAgfVxuXG4gICAgdmFyIGRhc2hUeXBlID0gc3Ryb2tlLmRhc2hUeXBlO1xuICAgIGlmIChkYXNoVHlwZSkge1xuICAgICAgICBwYWdlLnNldERhc2hQYXR0ZXJuKERBU0hfUEFUVEVSTlNbZGFzaFR5cGVdLCAwKTtcbiAgICB9XG5cbiAgICB2YXIgbGluZUNhcCA9IHN0cm9rZS5saW5lQ2FwO1xuICAgIGlmIChsaW5lQ2FwKSB7XG4gICAgICAgIHBhZ2Uuc2V0TGluZUNhcChMSU5FX0NBUFtsaW5lQ2FwXSk7XG4gICAgfVxuXG4gICAgdmFyIGxpbmVKb2luID0gc3Ryb2tlLmxpbmVKb2luO1xuICAgIGlmIChsaW5lSm9pbikge1xuICAgICAgICBwYWdlLnNldExpbmVKb2luKExJTkVfSk9JTltsaW5lSm9pbl0pO1xuICAgIH1cblxuICAgIHZhciBvcGFjaXR5ID0gc3Ryb2tlLm9wYWNpdHk7XG4gICAgaWYgKG9wYWNpdHkgIT0gbnVsbCkge1xuICAgICAgICBwYWdlLnNldFN0cm9rZU9wYWNpdHkob3BhY2l0eSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRGaWxsT3B0aW9ucyhlbGVtZW50LCBwYWdlKSB7XG4gICAgdmFyIGZpbGwgPSBlbGVtZW50LmZpbGwgJiYgZWxlbWVudC5maWxsKCk7XG4gICAgaWYgKCFmaWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZmlsbCBpbnN0YW5jZW9mIEdyYWRpZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY29sb3IgPSBmaWxsLmNvbG9yO1xuICAgIGlmIChjb2xvcikge1xuICAgICAgICBjb2xvciA9IHBhcnNlQ29sb3IoY29sb3IpO1xuICAgICAgICBpZiAoY29sb3IgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBubyBmaWxsXG4gICAgICAgIH1cbiAgICAgICAgcGFnZS5zZXRGaWxsQ29sb3IoY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XG4gICAgICAgIGlmIChjb2xvci5hICE9IDEpIHtcbiAgICAgICAgICAgIHBhZ2Uuc2V0RmlsbE9wYWNpdHkoY29sb3IuYSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgb3BhY2l0eSA9IGZpbGwub3BhY2l0eTtcbiAgICBpZiAob3BhY2l0eSAhPSBudWxsKSB7XG4gICAgICAgIHBhZ2Uuc2V0RmlsbE9wYWNpdHkob3BhY2l0eSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRDbGlwcGluZyhlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICAvLyBYWFg6IG9ubHkgUGF0aCBzdXBwb3J0ZWQgYXQgdGhlIG1vbWVudC5cbiAgICB2YXIgY2xpcCA9IGVsZW1lbnQuY2xpcCgpO1xuICAgIGlmIChjbGlwKSB7XG4gICAgICAgIF9kcmF3UGF0aChjbGlwLCBwYWdlLCBwZGYpO1xuICAgICAgICBwYWdlLmNsaXAoKTtcbiAgICAgICAgLy8gcGFnZS5zZXRTdHJva2VDb2xvcihNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpKTtcbiAgICAgICAgLy8gcGFnZS5zZXRMaW5lV2lkdGgoMSk7XG4gICAgICAgIC8vIHBhZ2Uuc3Ryb2tlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGREcmF3KHRoaW5nKSB7XG4gICAgcmV0dXJuICh0aGluZyAmJlxuICAgICAgICAgICAgKHRoaW5nIGluc3RhbmNlb2YgR3JhZGllbnQgfHxcbiAgICAgICAgICAgICAodGhpbmcuY29sb3IgJiYgIS9eKG5vbmV8dHJhbnNwYXJlbnQpJC9pLnRlc3QodGhpbmcuY29sb3IpICYmXG4gICAgICAgICAgICAgICh0aGluZy53aWR0aCA9PSBudWxsIHx8IHRoaW5nLndpZHRoID4gMCkgJiZcbiAgICAgICAgICAgICAgKHRoaW5nLm9wYWNpdHkgPT0gbnVsbCB8fCB0aGluZy5vcGFjaXR5ID4gMCkpKSk7XG59XG5cbmZ1bmN0aW9uIG1heWJlR3JhZGllbnQoZWxlbWVudCwgcGFnZSwgcGRmLCBzdHJva2UpIHtcbiAgICB2YXIgZmlsbCA9IGVsZW1lbnQuZmlsbCgpO1xuICAgIGlmIChmaWxsIGluc3RhbmNlb2YgR3JhZGllbnQpIHtcbiAgICAgICAgaWYgKHN0cm9rZSkge1xuICAgICAgICAgICAgcGFnZS5jbGlwU3Ryb2tlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYWdlLmNsaXAoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNSYWRpYWwgPSBmaWxsIGluc3RhbmNlb2YgUmFkaWFsR3JhZGllbnQ7XG4gICAgICAgIHZhciBzdGFydCwgZW5kO1xuICAgICAgICBpZiAoaXNSYWRpYWwpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0geyB4OiBmaWxsLmNlbnRlcigpLnggLCB5OiBmaWxsLmNlbnRlcigpLnkgLCByOiAwIH07XG4gICAgICAgICAgICBlbmQgICA9IHsgeDogZmlsbC5jZW50ZXIoKS54ICwgeTogZmlsbC5jZW50ZXIoKS55ICwgcjogZmlsbC5yYWRpdXMoKSB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnQgPSB7IHg6IGZpbGwuc3RhcnQoKS54ICwgeTogZmlsbC5zdGFydCgpLnkgfTtcbiAgICAgICAgICAgIGVuZCAgID0geyB4OiBmaWxsLmVuZCgpLnggICAsIHk6IGZpbGwuZW5kKCkueSAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RvcHMgPSBmaWxsLnN0b3BzLmVsZW1lbnRzKCkubWFwKGZ1bmN0aW9uKHN0b3Ape1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHN0b3Aub2Zmc2V0KCk7XG4gICAgICAgICAgICBpZiAoLyUkLy50ZXN0KG9mZnNldCkpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBwYXJzZUZsb2F0KG9mZnNldCkgLyAxMDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IHBhcnNlRmxvYXQob2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb2xvciA9IHBhcnNlQ29sb3Ioc3RvcC5jb2xvcigpKTtcbiAgICAgICAgICAgIGNvbG9yLmEgKj0gc3RvcC5vcGFjaXR5KCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRHVwbGljYXRzIGZpcnN0IGFuZCBsYXN0IHN0b3AgdG8gZml4XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLXVpLWNvcmUvaXNzdWVzLzE3ODJcbiAgICAgICAgc3RvcHMudW5zaGlmdChzdG9wc1swXSk7XG4gICAgICAgIHN0b3BzLnB1c2goc3RvcHNbc3RvcHMubGVuZ3RoIC0gMV0pO1xuXG4gICAgICAgIHZhciBncmFkaWVudCA9IHtcbiAgICAgICAgICAgIHVzZXJTcGFjZSA6IGZpbGwudXNlclNwYWNlKCksXG4gICAgICAgICAgICB0eXBlICAgICAgOiBpc1JhZGlhbCA/IFwicmFkaWFsXCIgOiBcImxpbmVhclwiLFxuICAgICAgICAgICAgc3RhcnQgICAgIDogc3RhcnQsXG4gICAgICAgICAgICBlbmQgICAgICAgOiBlbmQsXG4gICAgICAgICAgICBzdG9wcyAgICAgOiBzdG9wc1xuICAgICAgICB9O1xuICAgICAgICB2YXIgYm94ID0gZWxlbWVudC5yYXdCQm94KCk7XG4gICAgICAgIHZhciB0bCA9IGJveC50b3BMZWZ0KCksIHNpemUgPSBib3guZ2V0U2l6ZSgpO1xuICAgICAgICBib3ggPSB7XG4gICAgICAgICAgICBsZWZ0ICAgOiB0bC54LFxuICAgICAgICAgICAgdG9wICAgIDogdGwueSxcbiAgICAgICAgICAgIHdpZHRoICA6IHNpemUud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQgOiBzaXplLmhlaWdodFxuICAgICAgICB9O1xuICAgICAgICBwYWdlLmdyYWRpZW50KGdyYWRpZW50LCBib3gpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlRmlsbFN0cm9rZShlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICBpZiAoc2hvdWxkRHJhdyhlbGVtZW50LmZpbGwoKSkgJiYgc2hvdWxkRHJhdyhlbGVtZW50LnN0cm9rZSgpKSkge1xuICAgICAgICBpZiAoIW1heWJlR3JhZGllbnQoZWxlbWVudCwgcGFnZSwgcGRmLCB0cnVlKSkge1xuICAgICAgICAgICAgcGFnZS5maWxsU3Ryb2tlKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNob3VsZERyYXcoZWxlbWVudC5maWxsKCkpKSB7XG4gICAgICAgIGlmICghbWF5YmVHcmFkaWVudChlbGVtZW50LCBwYWdlLCBwZGYsIGZhbHNlKSkge1xuICAgICAgICAgICAgcGFnZS5maWxsKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNob3VsZERyYXcoZWxlbWVudC5zdHJva2UoKSkpIHtcbiAgICAgICAgcGFnZS5zdHJva2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB3ZSBzaG91bGQgbm90IGdldCBoZXJlOyB0aGUgcGF0aCBzaG91bGQgaGF2ZSBiZWVuXG4gICAgICAgIC8vIG9wdGltaXplZCBhd2F5LiAgYnV0IGxldCdzIGJlIHByZXBhcmVkLlxuICAgICAgICBwYWdlLm5vcCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVEcmF3UmVjdChwYXRoLCBwYWdlKSB7XG4gICAgdmFyIHNlZ21lbnRzID0gcGF0aC5zZWdtZW50cztcbiAgICBpZiAoc2VnbWVudHMubGVuZ3RoID09IDQgJiYgcGF0aC5vcHRpb25zLmNsb3NlZCkge1xuICAgICAgICAvLyBkZXRlY3QgaWYgdGhpcyBwYXRoIGxvb2tzIGxpa2UgYSByZWN0YW5nbGUgcGFyYWxsZWwgdG8gdGhlIGF4aXNcbiAgICAgICAgdmFyIGEgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHNlZ21lbnRzW2ldLmNvbnRyb2xJbigpKSB7IC8vIGhhcyBjdXJ2ZT9cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhW2ldID0gc2VnbWVudHNbaV0uYW5jaG9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaXQncyBhIHJlY3RhbmdsZSBpZiB0aGUgeS94L3kveCBvciB4L3kveC95IGNvb3JkcyBvZlxuICAgICAgICAvLyBjb25zZWN1dGl2ZSBwb2ludHMgYXJlIHRoZSBzYW1lLlxuICAgICAgICB2YXIgaXNSZWN0ID0gKFxuICAgICAgICAgICAgYVswXS55ID09IGFbMV0ueSAmJiBhWzFdLnggPT0gYVsyXS54ICYmIGFbMl0ueSA9PSBhWzNdLnkgJiYgYVszXS54ID09IGFbMF0ueFxuICAgICAgICApIHx8IChcbiAgICAgICAgICAgIGFbMF0ueCA9PSBhWzFdLnggJiYgYVsxXS55ID09IGFbMl0ueSAmJiBhWzJdLnggPT0gYVszXS54ICYmIGFbM10ueSA9PSBhWzBdLnlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGlzUmVjdCkge1xuICAgICAgICAgICAgLy8gdGhpcyBzYXZlcyBhIGJ1bmNoIG9mIGluc3RydWN0aW9ucyBpbiBQREY6XG4gICAgICAgICAgICAvLyBtb3ZlVG8sIGxpbmVUbywgbGluZVRvLCBsaW5lVG8sIGNsb3NlIC0+IHJlY3QuXG4gICAgICAgICAgICBwYWdlLnJlY3QoYVswXS54LCBhWzBdLnksXG4gICAgICAgICAgICAgICAgICAgICAgYVsyXS54IC0gYVswXS54IC8qd2lkdGgqLyxcbiAgICAgICAgICAgICAgICAgICAgICBhWzJdLnkgLSBhWzBdLnkgLypoZWlnaHQqLyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gX2RyYXdQYXRoKGVsZW1lbnQsIHBhZ2UsIHBkZikge1xuICAgIHZhciBzZWdtZW50cyA9IGVsZW1lbnQuc2VnbWVudHM7XG4gICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghbWF5YmVEcmF3UmVjdChlbGVtZW50LCBwYWdlLCBwZGYpKSB7XG4gICAgICAgIGZvciAodmFyIHByZXYsIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBzZWcgPSBzZWdtZW50c1tpXTtcbiAgICAgICAgICAgIHZhciBhbmNob3IgPSBzZWcuYW5jaG9yKCk7XG4gICAgICAgICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgICAgICAgICBwYWdlLm1vdmVUbyhhbmNob3IueCwgYW5jaG9yLnkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldk91dCA9IHByZXYuY29udHJvbE91dCgpO1xuICAgICAgICAgICAgICAgIHZhciBjb250cm9sSW4gPSBzZWcuY29udHJvbEluKCk7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZPdXQgJiYgY29udHJvbEluKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2UuYmV6aWVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldk91dC54ICAgLCBwcmV2T3V0LnksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sSW4ueCAsIGNvbnRyb2xJbi55LFxuICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yLnggICAgLCBhbmNob3IueVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2UubGluZVRvKGFuY2hvci54LCBhbmNob3IueSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldiA9IHNlZztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudC5vcHRpb25zLmNsb3NlZCkge1xuICAgICAgICAgICAgcGFnZS5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmF3UGF0aChlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICBfZHJhd1BhdGgoZWxlbWVudCwgcGFnZSwgcGRmKTtcbiAgICBtYXliZUZpbGxTdHJva2UoZWxlbWVudCwgcGFnZSwgcGRmKTtcbn1cblxuZnVuY3Rpb24gZHJhd011bHRpUGF0aChlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICB2YXIgcGF0aHMgPSBlbGVtZW50LnBhdGhzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgX2RyYXdQYXRoKHBhdGhzW2ldLCBwYWdlLCBwZGYpO1xuICAgIH1cbiAgICBtYXliZUZpbGxTdHJva2UoZWxlbWVudCwgcGFnZSwgcGRmKTtcbn1cblxuZnVuY3Rpb24gZHJhd0NpcmNsZShlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICB2YXIgZyA9IGVsZW1lbnQuZ2VvbWV0cnkoKTtcbiAgICBwYWdlLmNpcmNsZShnLmNlbnRlci54LCBnLmNlbnRlci55LCBnLnJhZGl1cyk7XG4gICAgbWF5YmVGaWxsU3Ryb2tlKGVsZW1lbnQsIHBhZ2UsIHBkZik7XG59XG5cbmZ1bmN0aW9uIGRyYXdBcmMoZWxlbWVudCwgcGFnZSwgcGRmKSB7XG4gICAgdmFyIHBvaW50cyA9IGVsZW1lbnQuZ2VvbWV0cnkoKS5jdXJ2ZVBvaW50cygpO1xuICAgIHBhZ2UubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOykge1xuICAgICAgICBwYWdlLmJlemllcihcbiAgICAgICAgICAgIHBvaW50c1tpXS54LCBwb2ludHNbaSsrXS55LFxuICAgICAgICAgICAgcG9pbnRzW2ldLngsIHBvaW50c1tpKytdLnksXG4gICAgICAgICAgICBwb2ludHNbaV0ueCwgcG9pbnRzW2krK10ueVxuICAgICAgICApO1xuICAgIH1cbiAgICBtYXliZUZpbGxTdHJva2UoZWxlbWVudCwgcGFnZSwgcGRmKTtcbn1cblxuZnVuY3Rpb24gZHJhd1RleHQoZWxlbWVudCwgcGFnZSkge1xuICAgIHZhciBzdHlsZSA9IFBERi5wYXJzZUZvbnREZWYoZWxlbWVudC5vcHRpb25zLmZvbnQpO1xuICAgIHZhciBwb3MgPSBlbGVtZW50Ll9wb3NpdGlvbjtcbiAgICB2YXIgbW9kZTtcbiAgICBpZiAoZWxlbWVudC5maWxsKCkgJiYgZWxlbWVudC5zdHJva2UoKSkge1xuICAgICAgICBtb2RlID0gVEVYVF9SRU5ERVJJTkdfTU9ERS5maWxsQW5kU3Ryb2tlO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudC5maWxsKCkpIHtcbiAgICAgICAgbW9kZSA9IFRFWFRfUkVOREVSSU5HX01PREUuZmlsbDtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuc3Ryb2tlKCkpIHtcbiAgICAgICAgbW9kZSA9IFRFWFRfUkVOREVSSU5HX01PREUuc3Ryb2tlO1xuICAgIH1cblxuICAgIHBhZ2UudHJhbnNmb3JtKDEsIDAsIDAsIC0xLCBwb3MueCwgcG9zLnkgKyBzdHlsZS5mb250U2l6ZSk7XG4gICAgcGFnZS5iZWdpblRleHQoKTtcbiAgICBwYWdlLnNldEZvbnQoUERGLmdldEZvbnRVUkwoc3R5bGUpLCBzdHlsZS5mb250U2l6ZSk7XG4gICAgcGFnZS5zZXRUZXh0UmVuZGVyaW5nTW9kZShtb2RlKTtcbiAgICBwYWdlLnNob3dUZXh0KGVsZW1lbnQuY29udGVudCgpLCBlbGVtZW50Ll9wZGZSZWN0ID8gZWxlbWVudC5fcGRmUmVjdC53aWR0aCgpIDogbnVsbCk7XG4gICAgcGFnZS5lbmRUZXh0KCk7XG59XG5cbmZ1bmN0aW9uIGRyYXdHcm91cChlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICBpZiAoZWxlbWVudC5fcGRmTGluaykge1xuICAgICAgICBwYWdlLmFkZExpbmsoZWxlbWVudC5fcGRmTGluay51cmwsIGVsZW1lbnQuX3BkZkxpbmspO1xuICAgIH1cbiAgICB2YXIgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgZHJhd0VsZW1lbnQoY2hpbGRyZW5baV0sIHBhZ2UsIHBkZik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmF3SW1hZ2UoZWxlbWVudCwgcGFnZSkge1xuICAgIHZhciB1cmwgPSBlbGVtZW50LnNyYygpO1xuICAgIGlmICghdXJsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcmVjdCA9IGVsZW1lbnQucmVjdCgpO1xuICAgIHZhciB0bCA9IHJlY3QuZ2V0T3JpZ2luKCk7XG4gICAgdmFyIHN6ID0gcmVjdC5nZXRTaXplKCk7XG4gICAgcGFnZS50cmFuc2Zvcm0oc3oud2lkdGgsIDAsIDAsIC1zei5oZWlnaHQsIHRsLngsIHRsLnkgKyBzei5oZWlnaHQpO1xuICAgIHBhZ2UuZHJhd0ltYWdlKHVybCk7XG59XG5cbmZ1bmN0aW9uIGRyYXdSZWN0KGVsZW1lbnQsIHBhZ2UsIHBkZikge1xuICAgIHZhciBnZW9tZXRyeSA9IGVsZW1lbnQuZ2VvbWV0cnkoKTtcbiAgICBjb25zdCBbIHJ4LCByeSBdID0gZ2VvbWV0cnkuY29ybmVyUmFkaXVzO1xuICAgIGlmIChyeCA9PT0gMCAmJiByeSA9PT0gMCkge1xuICAgICAgICBwYWdlLnJlY3QoZ2VvbWV0cnkub3JpZ2luLngsIGdlb21ldHJ5Lm9yaWdpbi55LCBnZW9tZXRyeS5zaXplLndpZHRoLCBnZW9tZXRyeS5zaXplLmhlaWdodCk7XG4gICAgICAgIG1heWJlRmlsbFN0cm9rZShlbGVtZW50LCBwYWdlLCBwZGYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYXdQYXRoKFBhdGguZnJvbVJlY3QoZ2VvbWV0cnksIGVsZW1lbnQub3B0aW9ucyksIHBhZ2UsIHBkZik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZUNvbG9yKHZhbHVlKSB7XG4gICAgdmFyIGNvbG9yID0gdXRpbHNfcGFyc2VDb2xvcih2YWx1ZSwgdHJ1ZSk7XG4gICAgcmV0dXJuIGNvbG9yID8gY29sb3IudG9SR0IoKSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIG9wdGltaXplKHJvb3QpIHtcbiAgICB2YXIgY2xpcGJveCA9IGZhbHNlO1xuICAgIHZhciBtYXRyaXggPSBnZW8uTWF0cml4LnVuaXQoKTtcbiAgICB2YXIgY3VycmVudEJveCA9IG51bGw7XG4gICAgdmFyIGNoYW5nZWQ7XG4gICAgZG8ge1xuICAgICAgICBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHJvb3QgPSBvcHQocm9vdCk7XG4gICAgfSB3aGlsZSAocm9vdCAmJiBjaGFuZ2VkKTtcbiAgICByZXR1cm4geyByb290OiByb290LCBiYm94OiBjdXJyZW50Qm94IH07XG5cbiAgICBmdW5jdGlvbiBjaGFuZ2UobmV3U2hhcGUpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBuZXdTaGFwZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2aXNpYmxlKHNoYXBlKSB7XG4gICAgICAgIHJldHVybiAoc2hhcGUudmlzaWJsZSgpICYmIHNoYXBlLm9wYWNpdHkoKSA+IDAgJiZcbiAgICAgICAgICAgICAgICAoIHNob3VsZERyYXcoc2hhcGUuZmlsbCgpKSB8fFxuICAgICAgICAgICAgICAgICAgc2hvdWxkRHJhdyhzaGFwZS5zdHJva2UoKSkgKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb3B0QXJyYXkoYSkge1xuICAgICAgICB2YXIgYiA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBlbCA9IG9wdChhW2ldKTtcbiAgICAgICAgICAgIGlmIChlbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYi5wdXNoKGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3aXRoQ2xpcHBpbmcoc2hhcGUsIGYpIHtcbiAgICAgICAgdmFyIHNhdmVjbGlwYm94ID0gY2xpcGJveDtcbiAgICAgICAgdmFyIHNhdmVtYXRyaXggPSBtYXRyaXg7XG5cbiAgICAgICAgaWYgKHNoYXBlLnRyYW5zZm9ybSgpKSB7XG4gICAgICAgICAgICBtYXRyaXggPSBtYXRyaXgubXVsdGlwbHlDb3B5KHNoYXBlLnRyYW5zZm9ybSgpLm1hdHJpeCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjbGlwID0gc2hhcGUuY2xpcCgpO1xuICAgICAgICBpZiAoY2xpcCkge1xuICAgICAgICAgICAgY2xpcCA9IGNsaXAuYmJveCgpO1xuICAgICAgICAgICAgaWYgKGNsaXApIHtcbiAgICAgICAgICAgICAgICBjbGlwID0gY2xpcC5iYm94KG1hdHJpeCk7XG4gICAgICAgICAgICAgICAgY2xpcGJveCA9IGNsaXBib3ggPyBnZW8uUmVjdC5pbnRlcnNlY3QoY2xpcGJveCwgY2xpcCkgOiBjbGlwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBjbGlwYm94ID0gc2F2ZWNsaXBib3g7XG4gICAgICAgICAgICBtYXRyaXggPSBzYXZlbWF0cml4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5DbGlwYm94KHNoYXBlKSB7XG4gICAgICAgIGlmIChjbGlwYm94ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYm94ID0gc2hhcGUucmF3QkJveCgpLmJib3gobWF0cml4KTtcbiAgICAgICAgaWYgKGNsaXBib3ggJiYgYm94KSB7XG4gICAgICAgICAgICBib3ggPSBnZW8uUmVjdC5pbnRlcnNlY3QoYm94LCBjbGlwYm94KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm94O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9wdChzaGFwZSkge1xuICAgICAgICByZXR1cm4gd2l0aENsaXBwaW5nKHNoYXBlLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYgKCEoc2hhcGUgaW5zdGFuY2VvZiBHcm91cCB8fCBzaGFwZSBpbnN0YW5jZW9mIE11bHRpUGF0aCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm94ID0gaW5DbGlwYm94KHNoYXBlKTtcbiAgICAgICAgICAgICAgICBpZiAoIWJveCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbmdlKG51bGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50Qm94ID0gY3VycmVudEJveCA/IGdlby5SZWN0LnVuaW9uKGN1cnJlbnRCb3gsIGJveCkgOiBib3g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIFBhdGg6IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaGFwZS5zZWdtZW50cy5sZW5ndGggPT09IDAgfHwgIXZpc2libGUoc2hhcGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbmdlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaGFwZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIE11bHRpUGF0aDogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2aXNpYmxlKHNoYXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5nZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSBuZXcgTXVsdGlQYXRoKHNoYXBlLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBlbC5wYXRocyA9IG9wdEFycmF5KHNoYXBlLnBhdGhzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsLnBhdGhzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5nZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBDaXJjbGU6IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdmlzaWJsZShzaGFwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2UobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNoYXBlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgQXJjOiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZpc2libGUoc2hhcGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbmdlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaGFwZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFRleHQ6IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghL1xcUy8udGVzdChzaGFwZS5jb250ZW50KCkpIHx8ICF2aXNpYmxlKHNoYXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5nZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hhcGU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBJbWFnZTogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoc2hhcGUudmlzaWJsZSgpICYmIHNoYXBlLm9wYWNpdHkoKSA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbmdlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaGFwZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIEdyb3VwOiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShzaGFwZS52aXNpYmxlKCkgJiYgc2hhcGUub3BhY2l0eSgpID4gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2UobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gbmV3IEdyb3VwKHNoYXBlLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBlbC5jaGlsZHJlbiA9IG9wdEFycmF5KHNoYXBlLmNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAgICAgZWwuX3BkZkxpbmsgPSBzaGFwZS5fcGRmTGluaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoYXBlICE9PSByb290ICYmIGVsLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCAmJiAhc2hhcGUuX3BkZkxpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2UobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgUmVjdDogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2aXNpYmxlKHNoYXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5nZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hhcGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgc2hhcGUpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGV4cG9ydFBERihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBwcm9taXNlID0gY3JlYXRlUHJvbWlzZSgpO1xuXG4gICAgZm9yICh2YXIgaSBpbiBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpID09IFwibWFyZ2luXCIgJiYgZ3JvdXAub3B0aW9ucy5wZGYgJiYgZ3JvdXAub3B0aW9ucy5wZGYuX2lnbm9yZU1hcmdpbikge1xuICAgICAgICAgICAgLy8gVGhpcyBoYWNraXNoIG9wdGlvbiBpcyBzZXQgYnkgdGhlIHBhZ2UgYnJlYWtpbmcgY29kZSBpbiBkcmF3RE9NLiAgVGhlIGlkZWEgaXNcbiAgICAgICAgICAgIC8vIHRoYXQgbWFyZ2luIGlzIGFscmVhZHkgdGFrZW4gaW50byBhY2NvdW50IHRoZXJlICh0aGF0J3MgcmVxdWlyZWQgdG8gZG8gcHJvcGVyXG4gICAgICAgICAgICAvLyBwYWdlIGJyZWFraW5nKSBhbmQgd2UgZG9uJ3Qgd2FudCB0byBzZXQgaXQgYWdhaW4gaGVyZSwgYXMgaXQgd291bGQgZG91YmxlIHRoZVxuICAgICAgICAgICAgLy8gdG9wLWxlZnQgbWFyZ2luLCBhbmQgdHJ1bmNhdGUgdGhlIGNvbnRlbnQgb24gYm90dG9tL3JpZ2h0LlxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXAub3B0aW9ucy5zZXQoXCJwZGYuXCIgKyBpLCBvcHRpb25zW2ldKTtcbiAgICB9XG5cbiAgICB0b0RhdGFVUkwoZ3JvdXAsIHByb21pc2UucmVzb2x2ZSk7XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gWFhYOiB0aGUgZHVwbGljYXRpb24gaXMgaW4gb3JkZXIgdG8ga2VlcCBleHBvcnRQREYgcmV0dXJuIGEgZGF0YVxuLy8gVVJJLCB3aGljaCBpcyB3aGF0IHByZXZpb3VzIHZlcnNpb25zIGRvLiAgQ3VycmVudGx5IG9ubHkgSUU5IGRvZXNcbi8vIG5vdCBzdXBwb3J0IEJsb2IsIElNTyB3ZSBzaG91bGQgc3dpdGNoIHRvIEJsb2IgYnkgZGVmYXVsdFxuLy8gZXZlcnl3aGVyZS5cbmZ1bmN0aW9uIGV4cG9ydFBERlRvQmxvYihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBwcm9taXNlID0gY3JlYXRlUHJvbWlzZSgpO1xuXG4gICAgZm9yICh2YXIgaSBpbiBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpID09IFwibWFyZ2luXCIgJiYgZ3JvdXAub3B0aW9ucy5wZGYgJiYgZ3JvdXAub3B0aW9ucy5wZGYuX2lnbm9yZU1hcmdpbikge1xuICAgICAgICAgICAgLy8gVGhpcyBoYWNraXNoIG9wdGlvbiBpcyBzZXQgYnkgdGhlIHBhZ2UgYnJlYWtpbmcgY29kZSBpbiBkcmF3RE9NLiAgVGhlIGlkZWEgaXNcbiAgICAgICAgICAgIC8vIHRoYXQgbWFyZ2luIGlzIGFscmVhZHkgdGFrZW4gaW50byBhY2NvdW50IHRoZXJlICh0aGF0J3MgcmVxdWlyZWQgdG8gZG8gcHJvcGVyXG4gICAgICAgICAgICAvLyBwYWdlIGJyZWFraW5nKSBhbmQgd2UgZG9uJ3Qgd2FudCB0byBzZXQgaXQgYWdhaW4gaGVyZSwgYXMgaXQgd291bGQgZG91YmxlIHRoZVxuICAgICAgICAgICAgLy8gdG9wLWxlZnQgbWFyZ2luLCBhbmQgdHJ1bmNhdGUgdGhlIGNvbnRlbnQgb24gYm90dG9tL3JpZ2h0LlxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXAub3B0aW9ucy5zZXQoXCJwZGYuXCIgKyBpLCBvcHRpb25zW2ldKTtcbiAgICB9XG5cbiAgICBpZiAod2luZG93LkJsb2IgJiYgIXN1cHBvcnQuYnJvd3Nlci5zYWZhcmkpIHtcbiAgICAgICAgdG9CbG9iKGdyb3VwLCBwcm9taXNlLnJlc29sdmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRvRGF0YVVSTChncm91cCwgcHJvbWlzZS5yZXNvbHZlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuXG5leHBvcnQgeyBleHBvcnRQREYsIGV4cG9ydFBERlRvQmxvYiwgc2F2ZUFzLCB0b0RhdGFVUkwsIHRvQmxvYiwgcmVuZGVyIH07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1tdWx0aS1zcGFjZXMsIGtleS1zcGFjaW5nLCBpbmRlbnQsIGNhbWVsY2FzZSwgc3BhY2UtYmVmb3JlLWJsb2NrcywgZXFlcWVxLCBicmFjZS1zdHlsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgc3BhY2UtaW5maXgtb3BzLCBzcGFjZS1iZWZvcmUtZnVuY3Rpb24tcGFyZW4sIGFycmF5LWJyYWNrZXQtc3BhY2luZywgb2JqZWN0LWN1cmx5LXNwYWNpbmcgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLW5lc3RlZC10ZXJuYXJ5LCBtYXgtcGFyYW1zLCBkZWZhdWx0LWNhc2UsIG5vLWVsc2UtcmV0dXJuLCBuby1lbXB0eSwgeW9kYSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24sIG5vLXZhciwgYmxvY2stc2NvcGVkLXZhciAqL1xuXG5pbXBvcnQgKiBhcyBnZW8gZnJvbSBcIi4uL2dlb21ldHJ5XCI7XG5pbXBvcnQgKiBhcyBQREYgZnJvbSBcIi4uL3BkZlwiO1xuaW1wb3J0IHsgYXJhYmljVG9Sb21hbiwgY3JlYXRlUHJvbWlzZSwgbWVhc3VyZVRleHQsIG1lcmdlU29ydCB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgcGFyc2VDb2xvciBhcyB1dGlsc19wYXJzZUNvbG9yLCBzdXBwb3J0LCB0ZW1wbGF0ZSBhcyBjb21waWxlVGVtcGxhdGUgfSBmcm9tIFwiLi4vY29tbW9uXCI7XG5pbXBvcnQgeyBQYXRoLCBUZXh0LCBHcm91cCwgSW1hZ2UsIENpcmNsZSwgTGluZWFyR3JhZGllbnQgfSBmcm9tIFwiLi4vZHJhd2luZ1wiO1xuaW1wb3J0IHsgZW5jb2RlQmFzZTY0IH0gZnJvbSBcIi4uL3V0aWxcIjtcblxuY29uc3QgYnJvd3NlciA9IHN1cHBvcnQuYnJvd3NlciB8fCB7fTtcbi8qXG5cbiAgWFhYOiB0byB0ZXN0OlxuXG4gIC0gY2xvbmVOb2RlcyBmdW5jdGlvbjpcbiAgICAtIGRyYXdpbmcgZG9jdW1lbnQgY29udGFpbmluZyBjYW52YXMgd2l0aCBwYWdlIGJyZWFraW5nXG4gICAgLSBkcmF3aW5nIGRvY3VtZW50IHdpdGggbmFtZWQgcmFkaW8gPGlucHV0Pi1zIChzaG91bGQgbm90IGNsZWFyIHNlbGVjdGlvbilcbiAgICAtIElFOS9JRTEwIGRvbid0IHN1cHBvcnQgZWwuZGF0YXNldDsgZG8gdGhleSBjb3B5IHVzZXIgZGF0YT9cblxuICAtIHJlcGVhdGluZyB0YWJsZSBoZWFkZXJzL2Zvb3RlcnMgb24gcGFnZSBicmVha2luZ1xuXG4gIC0gZm9yY2VCcmVhaywga2VlcFRvZ2V0aGVyXG5cbiAgLSBhdm9pZExpbmtzXG5cbiAqL1xuXG4vKiAtLS0tLVsgbG9jYWwgdmFycyBdLS0tLS0gKi9cblxuZnVuY3Rpb24gc2xpY2UodGhpbmcpIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpbmcpO1xufVxuXG52YXIgS0VORE9fUFNFVURPX0VMRU1FTlQgPSBcIktFTkRPLVBTRVVETy1FTEVNRU5UXCI7XG5cbnZhciBJTUFHRV9DQUNIRSA9IHt9O1xuXG52YXIgbm9kZUluZm8gPSB7fTtcbm5vZGVJbmZvLl9yb290ID0gbm9kZUluZm87XG5cbi8qIC0tLS0tWyBDdXN0b20gVGV4dCBub2RlIHRvIHNwZWVkIHVwIHJlbmRlcmluZyBpbiBQREYgXS0tLS0tICovXG5cbmNvbnN0IGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuY29uc3QgbWljcm9zb2Z0ID0gaW5Ccm93c2VyID8gYnJvd3Nlci5tc2llIHx8IGJyb3dzZXIuZWRnZSA6IGZhbHNlO1xuXG5jbGFzcyBUZXh0UmVjdCBleHRlbmRzIFRleHQge1xuICAgIGNvbnN0cnVjdG9yKHN0ciwgcmVjdCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihzdHIsIHJlY3QuZ2V0T3JpZ2luKCksIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9wZGZSZWN0ID0gcmVjdDtcbiAgICB9XG4gICAgcmVjdCgpIHtcbiAgICAgICAgLy8gdGhpcyBpcyB0aGUgY3J1eCBvZiBpdDogd2UgY2FuIGF2b2lkIGEgY2FsbCB0b1xuICAgICAgICAvLyBtZWFzdXJlKCksIHdoaWNoIGlzIHdoYXQgdGhlIGJhc2UgY2xhc3MgZG9lcywgc2luY2Ugd2VcbiAgICAgICAgLy8gYWxyZWFkeSBrbm93IHRoZSByZWN0LiAgbWVhc3VyZSgpIGlzIHMtbC1vLXcuXG4gICAgICAgIHJldHVybiB0aGlzLl9wZGZSZWN0O1xuICAgIH1cbiAgICByYXdCQm94KCkge1xuICAgICAgICAvLyBhbHNvIGxldCdzIGF2b2lkIGNyZWF0aW5nIGEgbmV3IHJlY3RhbmdsZS5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3BkZlJlY3Q7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRDbGFzcyhlbCwgY2xzKSB7XG4gICAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWwuY2xhc3NOYW1lICs9IFwiIFwiICsgY2xzO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNscykge1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pLnJlZHVjZShmdW5jdGlvbihhLCB3b3JkKXtcbiAgICAgICAgICAgIGlmICh3b3JkICE9IGNscykge1xuICAgICAgICAgICAgICAgIGEucHVzaCh3b3JkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9LCBbXSkuam9pbihcIiBcIik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRDU1MoZWwsIHN0eWxlcykge1xuICAgIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbihrZXkpe1xuICAgICAgICBlbC5zdHlsZVtrZXldID0gc3R5bGVzW2tleV07XG4gICAgfSk7XG59XG5cbnZhciBtYXRjaGVzID0gdHlwZW9mIEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgRWxlbWVudC5wcm90b3R5cGUgJiYgKGZ1bmN0aW9uKHApe1xuICAgIGlmIChwLm1hdGNoZXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVsLCBzZWxlY3RvcikgeyByZXR1cm4gZWwubWF0Y2hlcyhzZWxlY3Rvcik7IH07XG4gICAgfVxuICAgIGlmIChwLndlYmtpdE1hdGNoZXNTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWwsIHNlbGVjdG9yKSB7IHJldHVybiBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpOyB9O1xuICAgIH1cbiAgICBpZiAocC5tb3pNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVsLCBzZWxlY3RvcikgeyByZXR1cm4gZWwubW96TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTsgfTtcbiAgICB9XG4gICAgaWYgKHAubXNNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVsLCBzZWxlY3RvcikgeyByZXR1cm4gZWwubXNNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpOyB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24ocykge1xuXHRyZXR1cm4gW10uaW5kZXhPZi5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocyksIHRoaXMpICE9PSAtMTtcbiAgICB9O1xufSkoRWxlbWVudC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjbG9zZXN0KGVsLCBzZWxlY3Rvcikge1xuICAgIGlmIChlbC5jbG9zZXN0KSB7XG4gICAgICAgIHJldHVybiBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgICB9XG4gICAgLy8gSUU6IHN0cmluZ2lmeWluZyByYXRoZXIgdGhhbiBzaW1wbHkgY29tcGFyaW5nIHdpdGggYGRvY3VtZW50YCxcbiAgICAvLyB3aGljaCBpcyBub3QgaWZyYW1lLXByb29mIGFuZCBmYWlscyBpbiBlZGl0b3IgZXhwb3J0IOKAlFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvL2lzc3Vlcy82NzIxXG4gICAgd2hpbGUgKGVsICYmICEvXlxcW29iamVjdCAoPzpIVE1MKT9Eb2N1bWVudFxcXSQvLnRlc3QoU3RyaW5nKGVsKSkpIHtcbiAgICAgICAgaWYgKGVsLm5vZGVUeXBlID09IDEgLyogRWxlbWVudCAqLyAmJiBtYXRjaGVzKGVsLCBzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgfVxuICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG4gICAgfVxufVxuXG4vLyBjbG9uZSBub2RlcyBvdXJzZWx2ZXMsIHNvIHRoYXQgd2UgcmVkcmF3IDxjYW52YXM+IChET00gb3Jcbi8vIGpRdWVyeSBjbG9uZSB3aWxsIG5vdClcbnZhciBjbG9uZU5vZGVzID0gKGZ1bmN0aW9uKCQpe1xuICAgIGlmICgkKSB7XG4gICAgICAgIC8vIGlmIHdlIGhhdmUgS2VuZG8gYW5kIGpRdWVyeSwgdXNlIHRoaXMgdmVyc2lvbiBhcyBpdCB3aWxsXG4gICAgICAgIC8vIG1haW50YWluIHByb3BlciBsaW5rcyBiZXR3ZWVuIGNsb25lZCBlbGVtZW50IGFuZCBLZW5kb1xuICAgICAgICAvLyB3aWRnZXRzIChpLmUuIGl0IGNsb25lcyBqUXVlcnkgZGF0YSgpLCB3aGljaCBpc24ndCB0aGUgc2FtZVxuICAgICAgICAvLyBhcyBlbGVtZW50J3MgZGF0YSBhdHRyaWJ1dGVzKS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tdWktY29yZS9pc3N1ZXMvMjc1MFxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gY2xvbmVOb2RlcyhlbCkge1xuICAgICAgICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChlbC5ub2RlVHlwZSA9PSAxIC8qIEVsZW1lbnQgKi8pIHtcbiAgICAgICAgICAgICAgICB2YXIgJGVsID0gJChlbCksICRjbG9uZSA9ICQoY2xvbmUpLCBpO1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gJGVsLmRhdGEoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGkgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkY2xvbmUuZGF0YShpLCBkYXRhW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKC9eY2FudmFzJC9pLnRlc3QoZWwudGFnTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuZ2V0Q29udGV4dChcIjJkXCIpLmRyYXdJbWFnZShlbCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxvcHRpb24pJC9pLnRlc3QoZWwudGFnTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZHJvcCB0aGUgbmFtZSBhdHRyaWJ1dGVzIHNvIHRoYXQgd2UgZG9uJ3QgYWZmZWN0IHRoZSBzZWxlY3Rpb24gb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIG9yaWdpbmFsIG5vZGVzIChpLmUuIGNoZWNrZWQgc3RhdHVzIG9mIHJhZGlvIGJ1dHRvbnMpIHdoZW4gd2UgaW5zZXJ0IG91ciBjb3B5XG4gICAgICAgICAgICAgICAgICAgIC8vIGludG8gdGhlIERPTS4gIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvL2lzc3Vlcy81NDA5XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuICAgICAgICAgICAgICAgICAgICBjbG9uZS5yZW1vdmVBdHRyaWJ1dGUoXCJuYW1lXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIS9edGV4dGFyZWEkL2kudGVzdChlbC50YWdOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUudmFsdWUgPSBlbC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjbG9uZS5jaGVja2VkID0gZWwuY2hlY2tlZDtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuc2VsZWN0ZWQgPSBlbC5zZWxlY3RlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChpID0gZWwuZmlyc3RDaGlsZDsgaTsgaSA9IGkubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuYXBwZW5kQ2hpbGQoY2xvbmVOb2RlcyhpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRoZSBuby1qUXVlcnkgdmVyc2lvblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gY2xvbmVOb2RlcyhlbCkge1xuICAgICAgICAgICAgY29uc3QgY2xvbmUgPSAoZnVuY3Rpb24gZGl2ZShub2RlKXtcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9uZSA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5fa2VuZG9FeHBvcnRWaXN1YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuX2tlbmRvRXhwb3J0VmlzdWFsID0gbm9kZS5fa2VuZG9FeHBvcnRWaXN1YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBub2RlLmZpcnN0Q2hpbGQ7IGk7IGkgPSBpLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLmFwcGVuZENoaWxkKGRpdmUoaSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICB9KShlbCk7XG5cbiAgICAgICAgICAgIC8vIHJlLWRyYXcgY2FudmFzZXMgLSBodHRwczovL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby9pc3N1ZXMvNDg3MlxuICAgICAgICAgICAgY29uc3QgY2FudmFzZXMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiY2FudmFzXCIpO1xuICAgICAgICAgICAgaWYgKGNhbnZhc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNsaWNlKGNsb25lLnF1ZXJ5U2VsZWN0b3JBbGwoXCJjYW52YXNcIikpLmZvckVhY2goKGNhbnZhcywgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLmRyYXdJbWFnZShjYW52YXNlc1tpXSwgMCwgMCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSBcIm5hbWVcIiBhdHRyaWJ1dGVzIGZyb20gPGlucHV0PiBlbGVtZW50cyAtXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby9pc3N1ZXMvNTQwOVxuICAgICAgICAgICAgY29uc3Qgb3JpZyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgb3B0aW9uXCIpO1xuICAgICAgICAgICAgc2xpY2UoY2xvbmUucXVlcnlTZWxlY3RvckFsbChcImlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBvcHRpb25cIikpLmZvckVhY2goKGVsLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwibmFtZVwiKTtcbiAgICAgICAgICAgICAgICBpZiAoIS9edGV4dGFyZWEkL2kudGVzdChlbC50YWdOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBlbC52YWx1ZSA9IG9yaWdbaV0udmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsLmNoZWNrZWQgPSBvcmlnW2ldLmNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgZWwuc2VsZWN0ZWQgPSBvcmlnW2ldLnNlbGVjdGVkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgfTtcbiAgICB9XG59KSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5rZW5kbyAmJiB3aW5kb3cua2VuZG8ualF1ZXJ5KTtcblxuZnVuY3Rpb24gZ2V0WFkodGhpbmcpIHtcbiAgICBpZiAodHlwZW9mIHRoaW5nID09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogdGhpbmcsIHk6IHRoaW5nIH07XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaW5nKSkge1xuICAgICAgICByZXR1cm4geyB4OiB0aGluZ1swXSwgeTogdGhpbmdbMV0gfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgeDogdGhpbmcueCwgeTogdGhpbmcueSB9O1xufVxuXG5mdW5jdGlvbiBkcmF3RE9NKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB2YXIgcHJvbWlzZSA9IGNyZWF0ZVByb21pc2UoKTtcblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZS5yZWplY3QoXCJObyBlbGVtZW50IHRvIGV4cG9ydFwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSBpcyBtaXNzaW5nLiAgWW91IGFyZSB1c2luZyBhbiB1bnN1cHBvcnRlZCBicm93c2VyLCBvciBydW5uaW5nIGluIElFOCBjb21wYXRpYmlsaXR5IG1vZGUuICBEcmF3aW5nIEhUTUwgaXMgc3VwcG9ydGVkIGluIENocm9tZSwgRmlyZWZveCwgU2FmYXJpIGFuZCBJRTkrLlwiKTtcbiAgICB9XG5cbiAgICBQREYuZGVmaW5lRm9udChnZXRGb250RmFjZXMoZWxlbWVudC5vd25lckRvY3VtZW50KSk7XG5cbiAgICB2YXIgc2NhbGUgPSBnZXRYWShvcHRpb25zLnNjYWxlIHx8IDEpO1xuXG4gICAgZnVuY3Rpb24gZG9PbmUoZWxlbWVudCkge1xuICAgICAgICB2YXIgZ3JvdXAgPSBuZXcgR3JvdXAoKTtcblxuICAgICAgICAvLyB0cmFuc2xhdGUgdG8gc3RhcnQgb2YgcGFnZVxuICAgICAgICB2YXIgcG9zID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgc2V0VHJhbnNmb3JtKGdyb3VwLCBbXG4gICAgICAgICAgICBzY2FsZS54LFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBzY2FsZS55LFxuICAgICAgICAgICAgKC1wb3MubGVmdCAqIHNjYWxlLngpLFxuICAgICAgICAgICAgKC1wb3MudG9wICogc2NhbGUueSlcbiAgICAgICAgXSk7XG5cbiAgICAgICAgbm9kZUluZm8uX2NsaXBib3ggPSBmYWxzZTtcbiAgICAgICAgbm9kZUluZm8uX21hdHJpeCA9IGdlby5NYXRyaXgudW5pdCgpO1xuICAgICAgICBub2RlSW5mby5fc3RhY2tpbmdDb250ZXh0ID0ge1xuICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgICAgIGdyb3VwOiBncm91cFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChvcHRpb25zLmF2b2lkTGlua3MgPT09IHRydWUpIHtcbiAgICAgICAgICAgIG5vZGVJbmZvLl9hdm9pZExpbmtzID0gXCJhXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlSW5mby5fYXZvaWRMaW5rcyA9IG9wdGlvbnMuYXZvaWRMaW5rcztcbiAgICAgICAgfVxuXG4gICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIFwiay1wZGYtZXhwb3J0XCIpO1xuICAgICAgICByZW5kZXJFbGVtZW50KGVsZW1lbnQsIGdyb3VwKTtcbiAgICAgICAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgXCJrLXBkZi1leHBvcnRcIik7XG5cbiAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cblxuICAgIGNhY2hlSW1hZ2VzKFsgZWxlbWVudCBdLCBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgZm9yY2VCcmVhayA9IG9wdGlvbnMgJiYgb3B0aW9ucy5mb3JjZVBhZ2VCcmVhaztcbiAgICAgICAgdmFyIGhhc1BhcGVyU2l6ZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wYXBlclNpemUgJiYgb3B0aW9ucy5wYXBlclNpemUgIT0gXCJhdXRvXCI7XG4gICAgICAgIHZhciBwYXBlck9wdGlvbnMgPSBQREYuZ2V0UGFwZXJPcHRpb25zKGZ1bmN0aW9uKGtleSwgZGVmKXtcbiAgICAgICAgICAgIGlmIChrZXkgPT0gXCJwYXBlclNpemVcIikge1xuICAgICAgICAgICAgICAgIC8vIFBERi5nZXRQYXBlck9wdGlvbnMgY3JvYWtzIG9uIFwiYXV0b1wiLCBqdXN0IHBhc3MgZHVtbXkgQTQgYXMgd2UgbWlnaHRcbiAgICAgICAgICAgICAgICAvLyBzdGlsbCBiZSBpbnRlcmVzdGVkIGluIG1hcmdpbnMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhc1BhcGVyU2l6ZSA/IG9wdGlvbnNba2V5XSA6IFwiQTRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBrZXkgaW4gb3B0aW9ucyA/IG9wdGlvbnNba2V5XSA6IGRlZjtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBwYWdlV2lkdGggPSBoYXNQYXBlclNpemUgJiYgcGFwZXJPcHRpb25zLnBhcGVyU2l6ZVswXTtcbiAgICAgICAgdmFyIHBhZ2VIZWlnaHQgPSBoYXNQYXBlclNpemUgJiYgcGFwZXJPcHRpb25zLnBhcGVyU2l6ZVsxXTtcbiAgICAgICAgdmFyIG1hcmdpbiA9IG9wdGlvbnMubWFyZ2luICYmIHBhcGVyT3B0aW9ucy5tYXJnaW47XG4gICAgICAgIHZhciBoYXNNYXJnaW4gPSBCb29sZWFuKG1hcmdpbik7XG4gICAgICAgIGlmIChmb3JjZUJyZWFrIHx8IHBhZ2VIZWlnaHQpIHtcbiAgICAgICAgICAgIGlmICghbWFyZ2luKSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luID0geyBsZWZ0OiAwLCB0b3A6IDAsIHJpZ2h0OiAwLCBib3R0b206IDAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gd2Ugd2FudCBwYXBlciBzaXplIGFuZCBtYXJnaW4gdG8gYmUgdW5hZmZlY3RlZCBieVxuICAgICAgICAgICAgLy8gc2NhbGluZyBpbiB0aGUgb3V0cHV0LCBzbyB3ZSBoYXZlIHRvIHJldmVyc2Utc2NhbGVcbiAgICAgICAgICAgIC8vIGJlZm9yZSBvdXIgY2FsY3VsYXRpb25zIGJlZ2luLlxuICAgICAgICAgICAgaWYgKHBhZ2VXaWR0aCkgIHsgcGFnZVdpZHRoICAvPSBzY2FsZS54OyB9XG4gICAgICAgICAgICBpZiAocGFnZUhlaWdodCkgeyBwYWdlSGVpZ2h0IC89IHNjYWxlLnk7IH1cbiAgICAgICAgICAgIG1hcmdpbi5sZWZ0ICAgLz0gc2NhbGUueDtcbiAgICAgICAgICAgIG1hcmdpbi5yaWdodCAgLz0gc2NhbGUueDtcbiAgICAgICAgICAgIG1hcmdpbi50b3AgICAgLz0gc2NhbGUueTtcbiAgICAgICAgICAgIG1hcmdpbi5ib3R0b20gLz0gc2NhbGUueTtcblxuICAgICAgICAgICAgdmFyIGdyb3VwID0gbmV3IEdyb3VwKHtcbiAgICAgICAgICAgICAgICBwZGY6IHtcbiAgICAgICAgICAgICAgICAgICAgbXVsdGlQYWdlICAgICA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHBhcGVyU2l6ZSAgICAgOiBoYXNQYXBlclNpemUgPyBwYXBlck9wdGlvbnMucGFwZXJTaXplIDogXCJhdXRvXCIsXG4gICAgICAgICAgICAgICAgICAgIF9pZ25vcmVNYXJnaW4gOiBoYXNNYXJnaW4gLy8gSEFDSyEgIHNlZSBleHBvcnRQREYgaW4gcGRmL2RyYXdpbmcuanNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGhhbmRsZVBhZ2VCcmVha3MoXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5wcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhbmNlbGVkID0gZmFsc2UsIHBhZ2VOdW0gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIG5leHQoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFnZU51bSA8IHgucGFnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWdlID0gZG9PbmUoeC5wYWdlc1twYWdlTnVtXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLmFwcGVuZChwYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wcm9ncmVzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZU51bTogKytwYWdlTnVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxQYWdlczogeC5wYWdlcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FuY2VsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobmV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBYWFg6IHNob3VsZCB3ZSBhbHNvIGZhaWwoKSB0aGUgZGVmZXJyZWQgb2JqZWN0P1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeC5jb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh4LmNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LmNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHguY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgeC5wYWdlcy5mb3JFYWNoKGZ1bmN0aW9uKHBhZ2Upe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLmFwcGVuZChkb09uZShwYWdlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHguY29udGFpbmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoeC5jb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGdyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICBmb3JjZUJyZWFrLFxuICAgICAgICAgICAgICAgIHBhZ2VXaWR0aCA/IHBhZ2VXaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0IDogbnVsbCxcbiAgICAgICAgICAgICAgICBwYWdlSGVpZ2h0ID8gcGFnZUhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tIDogbnVsbCxcbiAgICAgICAgICAgICAgICBtYXJnaW4sXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZShkb09uZShlbGVtZW50KSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG1ha2VUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgICAgICBpZiAodGVtcGxhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUgPSBjb21waWxlVGVtcGxhdGUodGVtcGxhdGUucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgXCJcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSB0ZW1wbGF0ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsICYmIHR5cGVvZiBlbCA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsID0gZGl2LmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYXNzdW1lZCBET00gZWxlbWVudFxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlUGFnZUJyZWFrcyhjYWxsYmFjaywgZWxlbWVudCwgZm9yY2VCcmVhaywgcGFnZVdpZHRoLCBwYWdlSGVpZ2h0LCBtYXJnaW4sIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gbWFrZVRlbXBsYXRlKG9wdGlvbnMudGVtcGxhdGUpO1xuICAgICAgICB2YXIgZG9jID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICAgICAgICB2YXIgcGFnZXMgPSBbXTtcbiAgICAgICAgdmFyIGNvcHkgPSBvcHRpb25zLl9kZXN0cnVjdGl2ZSA/IGVsZW1lbnQgOiBjbG9uZU5vZGVzKGVsZW1lbnQpO1xuICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJLRU5ETy1QREYtRE9DVU1FTlRcIik7XG4gICAgICAgIHZhciBhZGp1c3QgPSAwO1xuXG4gICAgICAgIC8vIG1ha2Ugc3VyZSA8dGZvb3Q+IGVsZW1lbnRzIGFyZSBhdCB0aGUgZW5kIChHcmlkIHdpZGdldFxuICAgICAgICAvLyBwbGFjZXMgVEZPT1QgYmVmb3JlIFRCT0RZLCB0cmlja2luZyBvdXIgYWxnb3JpdGhtIHRvXG4gICAgICAgIC8vIGluc2VydCBhIHBhZ2UgYnJlYWsgcmlnaHQgYWZ0ZXIgdGhlIGhlYWRlcikuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvL2lzc3Vlcy80Njk5XG4gICAgICAgIHNsaWNlKGNvcHkucXVlcnlTZWxlY3RvckFsbChcInRmb290XCIpKS5mb3JFYWNoKGZ1bmN0aW9uKHRmb290KXtcbiAgICAgICAgICAgIHRmb290LnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGZvb3QpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW1lbWJlciB0aGUgaW5kZXggb2YgZWFjaCBMSSBmcm9tIGFuIG9yZGVyZWQgbGlzdC5cbiAgICAgICAgLy8gd2UnbGwgdXNlIGl0IHRvIHJlY29uc3RydWN0IHRoZSBwcm9wZXIgbnVtYmVyaW5nLlxuICAgICAgICBzbGljZShjb3B5LnF1ZXJ5U2VsZWN0b3JBbGwoXCJvbFwiKSkuZm9yRWFjaChmdW5jdGlvbihvbCl7XG4gICAgICAgICAgICBzbGljZShvbC5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbihsaSwgaW5kZXgpe1xuICAgICAgICAgICAgICAgIGxpLnNldEF0dHJpYnV0ZShcImtlbmRvLXNwbGl0LWluZGV4XCIsIGluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBzZXRDU1MoY29udGFpbmVyLCB7XG4gICAgICAgICAgICBkaXNwbGF5ICAgOiBcImJsb2NrXCIsXG4gICAgICAgICAgICBwb3NpdGlvbiAgOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICBib3hTaXppbmcgOiBcImNvbnRlbnQtYm94XCIsXG4gICAgICAgICAgICBsZWZ0ICAgICAgOiBcIi0xMDAwMHB4XCIsXG4gICAgICAgICAgICB0b3AgICAgICAgOiBcIi0xMDAwMHB4XCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHBhZ2VXaWR0aCkge1xuICAgICAgICAgICAgLy8gc3VidGxlOiBpZiB3ZSBkb24ndCBzZXQgdGhlIHdpZHRoICphbmQqIG1hcmdpbnMgaGVyZSwgdGhlIGxheW91dCBpbiB0aGlzXG4gICAgICAgICAgICAvLyBjb250YWluZXIgd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgb25lIGluIG91ciBmaW5hbCBwYWdlIGVsZW1lbnRzLCBhbmQgd2UnbGxcbiAgICAgICAgICAgIC8vIHNwbGl0IGF0IHRoZSB3cm9uZyBwbGFjZXMuXG4gICAgICAgICAgICBzZXRDU1MoY29udGFpbmVyLCB7XG4gICAgICAgICAgICAgICAgd2lkdGggICAgICAgIDogcGFnZVdpZHRoICsgXCJweFwiLFxuICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0ICA6IG1hcmdpbi5sZWZ0ICsgXCJweFwiLFxuICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodCA6IG1hcmdpbi5yaWdodCArIFwicHhcIlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIHdoZW4gdGhlIGZpcnN0IGVsZW1lbnQgaGFzIGEgbWFyZ2luLXRvcCAoaS5lLiBhIDxoMT4pIHRoZSBwYWdlIHdpbGwgYmVcbiAgICAgICAgICAgIC8vIGluYWR2ZXJ0ZW50bHkgZW5sYXJnZWQgYnkgdGhhdCBudW1iZXIgKHRoZSBicm93c2VyIHdpbGwgcmVwb3J0IHRoZSBjb250YWluZXInc1xuICAgICAgICAgICAgLy8gYm91bmRpbmcgYm94IHRvcCB0byBzdGFydCBhdCB0aGUgZWxlbWVudCdzIHRvcCwgcmF0aGVyIHRoYW4gaW5jbHVkaW5nIGl0c1xuICAgICAgICAgICAgLy8gbWFyZ2luKS4gIEFkZGluZyBvdmVyZmxvdzogaGlkZGVuIHNlZW1zIHRvIGZpeCBpdC5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyB0byB1bmRlcnN0YW5kIHRoZSBkaWZmZXJlbmNlLCB0cnkgdGhlIGZvbGxvd2luZyBzbmlwcGV0cyBpbiB5b3VyIGJyb3dzZXI6XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gMS4gPGRpdiBzdHlsZT1cImJhY2tncm91bmQ6IHllbGxvd1wiPlxuICAgICAgICAgICAgLy8gICAgICA8aDEgc3R5bGU9XCJtYXJnaW46IDNlbVwiPkZvbzwvaDE+XG4gICAgICAgICAgICAvLyAgICA8L2Rpdj5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAyLiA8ZGl2IHN0eWxlPVwiYmFja2dyb3VuZDogeWVsbG93OyBvdmVyZmxvdzogaGlkZGVuXCI+XG4gICAgICAgICAgICAvLyAgICAgIDxoMSBzdHlsZT1cIm1hcmdpbjogM2VtXCI+Rm9vPC9oMT5cbiAgICAgICAgICAgIC8vICAgIDwvZGl2PlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIHRoaXMgZGV0YWlsIGlzIG5vdCBpbXBvcnRhbnQgd2hlbiBhdXRvbWF0aWMgcGFnZSBicmVha2luZyBpcyBub3QgcmVxdWVzdGVkLCBoZW5jZVxuICAgICAgICAgICAgLy8gZG9pbmcgaXQgb25seSBpZiBwYWdlV2lkdGggaXMgZGVmaW5lZC5cbiAgICAgICAgICAgIHNldENTUyhjb3B5LCB7IG92ZXJmbG93OiBcImhpZGRlblwiIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjb250YWluZXIsIGVsZW1lbnQpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY29weSk7XG5cbiAgICAgICAgLy8gV2l0aCBjYWNoZSBkaXNhYmxlZCwgaW1hZ2VzIHdpbGwgc3RpbGwgaGF2ZSBoZWlnaHQgemVybyB1bnRpbCB0aGVpciBgY29tcGxldGVgIGF0dHJpYnV0ZVxuICAgICAgICAvLyBpcyB0cnVlLiAgYHdoZW5JbWFnZXNBcmVBY3R1YWxseUxvYWRlZGAgd2lsbCB3YWl0IGZvciBpdC5cbiAgICAgICAgaWYgKG9wdGlvbnMuYmVmb3JlUGFnZUJyZWFrKSB7XG4gICAgICAgICAgICB3aGVuSW1hZ2VzQXJlQWN0dWFsbHlMb2FkZWQoWyBjb250YWluZXIgXSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5iZWZvcmVQYWdlQnJlYWsoY29udGFpbmVyLCBkb1BhZ2VCcmVhayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoZW5JbWFnZXNBcmVBY3R1YWxseUxvYWRlZChbIGNvbnRhaW5lciBdLCBkb1BhZ2VCcmVhayk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkb1BhZ2VCcmVhaygpIHtcbiAgICAgICAgICAgIGlmIChmb3JjZUJyZWFrICE9IFwiLVwiIHx8IHBhZ2VIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBzcGxpdEVsZW1lbnQoY29weSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsZXQgcGFnZSA9IG1ha2VQYWdlKCk7XG4gICAgICAgICAgICAgICAgY29weS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwYWdlLCBjb3B5KTtcbiAgICAgICAgICAgICAgICBwYWdlLmFwcGVuZENoaWxkKGNvcHkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICBwYWdlcy5mb3JFYWNoKGZ1bmN0aW9uKHBhZ2UsIGkpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbCA9IHRlbXBsYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgICAgOiBwYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZU51bSAgICA6IGkgKyAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxQYWdlcyA6IHBhZ2VzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlLmFwcGVuZENoaWxkKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYWNoZUltYWdlcyhwYWdlcywgY2FsbGJhY2suYmluZChudWxsLCB7IHBhZ2VzOiBwYWdlcywgY29udGFpbmVyOiBjb250YWluZXIgfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24ga2VlcFRvZ2V0aGVyKGVsKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5rZWVwVG9nZXRoZXIgJiYgbWF0Y2hlcyhlbCwgb3B0aW9ucy5rZWVwVG9nZXRoZXIpICYmIGVsLm9mZnNldEhlaWdodCA8PSBwYWdlSGVpZ2h0IC0gYWRqdXN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0YWcgPSBlbC50YWdOYW1lO1xuICAgICAgICAgICAgaWYgKC9eaFsxLTZdJC9pLnRlc3QodGFnKSAmJiBlbC5vZmZzZXRIZWlnaHQgPj0gcGFnZUhlaWdodCAtIGFkanVzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIChlbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWtlbmRvLWNoYXJ0XCIpIHx8XG4gICAgICAgICAgICAgICAgICAgIC9eKD86aW1nfHRyfHRoZWFkfHRofHRmb290fGlmcmFtZXxzdmd8b2JqZWN0fGNhbnZhc3xpbnB1dHx0ZXh0YXJlYXxzZWxlY3R8dmlkZW98aFsxLTZdKS9pLnRlc3QoZWwudGFnTmFtZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc3BsaXRFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT0gXCJUQUJMRVwiKSB7XG4gICAgICAgICAgICAgICAgc2V0Q1NTKGVsZW1lbnQsIHsgdGFibGVMYXlvdXQ6IFwiZml4ZWRcIiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrZWVwVG9nZXRoZXIoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgICAgICAgICAgdmFyIGJvdHRvbVBhZGRpbmcgPSBwYXJzZUZsb2F0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwicGFkZGluZy1ib3R0b21cIikpO1xuICAgICAgICAgICAgdmFyIGJvdHRvbUJvcmRlciA9IHBhcnNlRmxvYXQoZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJib3JkZXItYm90dG9tLXdpZHRoXCIpKTtcbiAgICAgICAgICAgIHZhciBzYXZlQWRqdXN0ID0gYWRqdXN0O1xuICAgICAgICAgICAgYWRqdXN0ICs9IGJvdHRvbVBhZGRpbmcgKyBib3R0b21Cb3JkZXI7XG4gICAgICAgICAgICB2YXIgaXNGaXJzdCA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKHZhciBlbCA9IGVsZW1lbnQuZmlyc3RDaGlsZDsgZWw7IGVsID0gZWwubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWwubm9kZVR5cGUgPT0gMSAvKiBFbGVtZW50ICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMoZWwsIGZvcmNlQnJlYWspKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha0F0RWxlbWVudChlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhZ2VIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlJ3JlIGluIFwibWFudWFsIGJyZWFrcyBtb2RlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0RWxlbWVudChlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIS9eKD86c3RhdGljfHJlbGF0aXZlKSQvLnRlc3QoZ2V0UHJvcGVydHlWYWx1ZShnZXRDb21wdXRlZFN0eWxlKGVsKSwgXCJwb3NpdGlvblwiKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBmYWxsID0gZmFsbHNPbk1hcmdpbihlbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmYWxsID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgc3RhcnRzIG9uIG5leHQgcGFnZSwgYnJlYWsgYmVmb3JlIGFueXdheS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrQXRFbGVtZW50KGVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChmYWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50cyBlbmRzIHVwIG9uIG5leHQgcGFnZSwgb3IgcG9zc2libHkgZG9lc24ndCBmaXQgb24gYSBwYWdlIGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbGwuICBicmVhayBiZWZvcmUgaXQgYW55d2F5IGlmIGl0J3MgYW4gPGltZz4gb3IgPHRyPiwgb3RoZXJ3aXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhdHRlbXB0IHRvIHNwbGl0LlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtlZXBUb2dldGhlcihlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha0F0RWxlbWVudChlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0RWxlbWVudChlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpdEVsZW1lbnQoZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVsLm5vZGVUeXBlID09IDMgLyogVGV4dCAqLyAmJiBwYWdlSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0VGV4dChlbCwgaXNGaXJzdCk7XG4gICAgICAgICAgICAgICAgICAgIGlzRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGp1c3QgPSBzYXZlQWRqdXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZmlyc3RJblBhcmVudChlbCkge1xuICAgICAgICAgICAgdmFyIHAgPSBlbC5wYXJlbnROb2RlLCBmaXJzdCA9IHAuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGlmIChlbCA9PT0gZmlyc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbCA9PT0gcC5jaGlsZHJlblswXSkge1xuICAgICAgICAgICAgICAgIGlmIChmaXJzdC5ub2RlVHlwZSA9PSA3IC8qIGNvbW1lbnQgKi8gfHxcbiAgICAgICAgICAgICAgICAgICAgZmlyc3Qubm9kZVR5cGUgPT0gOCAvKiBwcm9jZXNzaW5nIGluc3RydWN0aW9uICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZmlyc3Qubm9kZVR5cGUgPT0gMyAvKiB0ZXh0ICovKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHdoaXRlc3BhY2Ugb25seSB3ZSBjYW4gcHJvYmFibHkgY29uc2lkZXIgaXQncyBmaXJzdFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIS9cXFMvLnRlc3QoZmlyc3QuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYnJlYWtBdEVsZW1lbnQoZWwpIHtcbiAgICAgICAgICAgIGlmIChlbC5ub2RlVHlwZSA9PSAxICYmIGVsICE9PSBjb3B5ICYmIGZpcnN0SW5QYXJlbnQoZWwpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJyZWFrQXRFbGVtZW50KGVsLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRhYmxlLCBjb2xncm91cCwgdGhlYWQsIGdyaWQsIGdyaWRIZWFkO1xuICAgICAgICAgICAgdGFibGUgPSBjbG9zZXN0KGVsLCBcInRhYmxlXCIpO1xuICAgICAgICAgICAgY29sZ3JvdXAgPSB0YWJsZSAmJiB0YWJsZS5xdWVyeVNlbGVjdG9yKFwiY29sZ3JvdXBcIik7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yZXBlYXRIZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgdGhlYWQgPSB0YWJsZSAmJiB0YWJsZS5xdWVyeVNlbGVjdG9yKFwidGhlYWRcIik7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBicmVhayBwYWdlIGluIGEgS2VuZG8gR3JpZCwgcmVwZWF0IGl0cyBoZWFkZXIuICBUaGlzIHVnbHkgaGFjayBpc1xuICAgICAgICAgICAgICAgIC8vIG5lY2Vzc2FyeSBiZWNhdXNlIGEgc2Nyb2xsYWJsZSBncmlkIHdpbGwga2VlcCB0aGUgaGVhZGVyIGluIGEgc2VwYXJhdGVcbiAgICAgICAgICAgICAgICAvLyA8dGFibGU+IGVsZW1lbnQgZnJvbSBpdHMgY29udGVudC5cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIFhYWDogVGhpcyBpcyBsaWtlbHkgdG8gYnJlYWsgYXMgc29vbiBhcyB0aGUgd2lkZ2V0IEhUTUwgaXMgbW9kaWZpZWQuXG4gICAgICAgICAgICAgICAgZ3JpZCA9IGNsb3Nlc3QoZWwsIFwiLmstZ3JpZC5rLXdpZGdldFwiKTtcbiAgICAgICAgICAgICAgICBpZiAoZ3JpZCAmJiBncmlkLnF1ZXJ5U2VsZWN0b3IoXCIuay1hdXRvLXNjcm9sbGFibGVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JpZEhlYWQgPSBncmlkLnF1ZXJ5U2VsZWN0b3IoXCIuay1ncmlkLWhlYWRlclwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcGFnZSA9IG1ha2VQYWdlKCk7XG4gICAgICAgICAgICB2YXIgcmFuZ2UgPSBkb2MuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QmVmb3JlKGNvcHkpO1xuICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kQmVmb3JlKGVsKTtcbiAgICAgICAgICAgIHBhZ2UuYXBwZW5kQ2hpbGQocmFuZ2UuZXh0cmFjdENvbnRlbnRzKCkpO1xuICAgICAgICAgICAgY29weS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwYWdlLCBjb3B5KTtcbiAgICAgICAgICAgIHByZXZlbnRCdWxsZXRPbkxpc3RJdGVtKGVsLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgaWYgKHRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGFibGUgPSBjbG9zZXN0KGVsLCBcInRhYmxlXCIpOyAvLyB0aGF0J3MgdGhlIDx0YWJsZT4gb24gbmV4dCBwYWdlIVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJlcGVhdEhlYWRlcnMgJiYgdGhlYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0QmVmb3JlKHRoZWFkLmNsb25lTm9kZSh0cnVlKSwgdGFibGUuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb2xncm91cCkge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnRCZWZvcmUoY29sZ3JvdXAuY2xvbmVOb2RlKHRydWUpLCB0YWJsZS5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yZXBlYXRIZWFkZXJzICYmIGdyaWRIZWFkKSB7XG4gICAgICAgICAgICAgICAgZ3JpZCA9IGNsb3Nlc3QoZWwsIFwiLmstZ3JpZC5rLXdpZGdldFwiKTtcbiAgICAgICAgICAgICAgICBncmlkLmluc2VydEJlZm9yZShncmlkSGVhZC5jbG9uZU5vZGUodHJ1ZSksIGdyaWQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtYWtlUGFnZSgpIHtcbiAgICAgICAgICAgIHZhciBwYWdlID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJLRU5ETy1QREYtUEFHRVwiKTtcbiAgICAgICAgICAgIHNldENTUyhwYWdlLCB7XG4gICAgICAgICAgICAgICAgZGlzcGxheSAgOiBcImJsb2NrXCIsXG4gICAgICAgICAgICAgICAgYm94U2l6aW5nOiBcImNvbnRlbnQtYm94XCIsXG4gICAgICAgICAgICAgICAgd2lkdGggICAgOiBwYWdlV2lkdGggPyAocGFnZVdpZHRoICsgXCJweFwiKSA6IFwiYXV0b1wiLFxuICAgICAgICAgICAgICAgIHBhZGRpbmcgIDogKG1hcmdpbi50b3AgKyBcInB4IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4ucmlnaHQgKyBcInB4IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4uYm90dG9tICsgXCJweCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLmxlZnQgKyBcInB4XCIpLFxuXG4gICAgICAgICAgICAgICAgLy8gYWxsb3cgYWJzb2x1dGVseSBwb3NpdGlvbmVkIGVsZW1lbnRzIHRvIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgcGFnZVxuICAgICAgICAgICAgICAgIHBvc2l0aW9uIDogXCJyZWxhdGl2ZVwiLFxuXG4gICAgICAgICAgICAgICAgLy8gd2l0aG91dCB0aGUgZm9sbG93aW5nIHdlIG1pZ2h0IGFmZmVjdCBsYXlvdXQgb2Ygc3Vic2VxdWVudCBwYWdlc1xuICAgICAgICAgICAgICAgIGhlaWdodCAgIDogcGFnZUhlaWdodCA/IChwYWdlSGVpZ2h0ICsgXCJweFwiKSA6IFwiYXV0b1wiLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93IDogcGFnZUhlaWdodCB8fCBwYWdlV2lkdGggPyBcImhpZGRlblwiIDogXCJ2aXNpYmxlXCIsXG4gICAgICAgICAgICAgICAgY2xlYXIgICAgOiBcImJvdGhcIlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGRlYnVnXG4gICAgICAgICAgICAvLyAkKFwiPGRpdj5cIikuY3NzKHtcbiAgICAgICAgICAgIC8vICAgICBwb3NpdGlvbiAgOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICAvLyAgICAgbGVmdCAgICAgIDogbWFyZ2luLmxlZnQsXG4gICAgICAgICAgICAvLyAgICAgdG9wICAgICAgIDogbWFyZ2luLnRvcCxcbiAgICAgICAgICAgIC8vICAgICB3aWR0aCAgICAgOiBwYWdlV2lkdGgsXG4gICAgICAgICAgICAvLyAgICAgaGVpZ2h0ICAgIDogcGFnZUhlaWdodCxcbiAgICAgICAgICAgIC8vICAgICBib3hTaXppbmcgOiBcImJvcmRlci1ib3hcIixcbiAgICAgICAgICAgIC8vICAgICBiYWNrZ3JvdW5kOiBcInJnYmEoMjU1LCAyNTUsIDAsIDAuNSlcIlxuICAgICAgICAgICAgLy8gICAgIC8vYm9yZGVyICAgIDogXCIxcHggc29saWQgcmVkXCJcbiAgICAgICAgICAgIC8vIH0pLmFwcGVuZFRvKHBhZ2UpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnBhZ2VDbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICBwYWdlLmNsYXNzTmFtZSA9IG9wdGlvbnMucGFnZUNsYXNzTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhZ2VzLnB1c2gocGFnZSk7XG4gICAgICAgICAgICByZXR1cm4gcGFnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZhbGxzT25NYXJnaW4odGhpbmcpIHtcbiAgICAgICAgICAgIHZhciBib3ggPSB0aGluZy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGlmIChib3gud2lkdGggPT09IDAgfHwgYm94LmhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIEknZCBzYXkgYW4gZWxlbWVudCB3aXRoIGRpbWVuc2lvbnMgemVybyBmaXRzIG9uIGN1cnJlbnQgcGFnZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0b3AgPSBjb3B5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgICAgICAgIHZhciBhdmFpbGFibGUgPSBwYWdlSGVpZ2h0IC0gYWRqdXN0O1xuICAgICAgICAgICAgcmV0dXJuIChib3guaGVpZ2h0ID4gYXZhaWxhYmxlKSA/IDNcbiAgICAgICAgICAgICAgICA6IChib3gudG9wIC0gdG9wID4gYXZhaWxhYmxlKSA/IDFcbiAgICAgICAgICAgICAgICA6IChib3guYm90dG9tIC0gdG9wID4gYXZhaWxhYmxlKSA/IDJcbiAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzcGxpdFRleHQobm9kZSwgaXNGaXJzdCkge1xuICAgICAgICAgICAgaWYgKCEvXFxTLy50ZXN0KG5vZGUuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBsZW4gPSBub2RlLmRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobm9kZSk7XG4gICAgICAgICAgICB2YXIgZmFsbCA9IGZhbGxzT25NYXJnaW4ocmFuZ2UpO1xuICAgICAgICAgICAgaWYgKCFmYWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAgICAgLy8gdGhlIHdob2xlIHRleHQgZml0cyBvbiBjdXJyZW50IHBhZ2VcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG5leHRub2RlID0gbm9kZTtcbiAgICAgICAgICAgIGlmIChmYWxsID09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydHMgb24gbmV4dCBwYWdlLCBicmVhayBiZWZvcmUgYW55d2F5LlxuICAgICAgICAgICAgICAgIGlmIChpc0ZpcnN0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGF2b2lkIGxlYXZpbmcgYW4gZW1wdHkgPHA+LCA8bGk+LCBldGMuIG9uIHByZXZpb3VzIHBhZ2UuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrQXRFbGVtZW50KG5vZGUucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtBdEVsZW1lbnQobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uIGZpbmRFT1AobWluLCBwb3MsIG1heCkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmQobm9kZSwgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1pbiA9PSBwb3MgfHwgcG9zID09IG1heCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZmFsbHNPbk1hcmdpbihyYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaW5kRU9QKG1pbiwgKG1pbiArIHBvcykgPj4gMSwgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaW5kRU9QKHBvcywgKHBvcyArIG1heCkgPj4gMSwgbWF4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKDAsIGxlbiA+PiAxLCBsZW4pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCEvXFxTLy50ZXN0KHJhbmdlLnRvU3RyaW5nKCkpICYmIGlzRmlyc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYXZvaWQgbGVhdmluZyBhbiBlbXB0eSA8cD4sIDxsaT4sIGV0Yy4gb24gcHJldmlvdXMgcGFnZS5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWtBdEVsZW1lbnQobm9kZS5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIG9ubHkgbmVlZGVkIGZvciBJRSwgYnV0IGl0IGZlZWxzIGNsZWFuZXIgdG8gZG8gaXQgYW55d2F5LiAgV2l0aG91dFxuICAgICAgICAgICAgICAgICAgICAvLyBpdCwgSUUgd2lsbCB0cnVuY2F0ZSBhIHZlcnkgbG9uZyB0ZXh0IChwbGF5Z3JvdW5kL3BkZi1sb25nLXRleHQtMi5odG1sKS5cbiAgICAgICAgICAgICAgICAgICAgbmV4dG5vZGUgPSBub2RlLnNwbGl0VGV4dChyYW5nZS5lbmRPZmZzZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWdlID0gbWFrZVBhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRCZWZvcmUoY29weSk7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2UuYXBwZW5kQ2hpbGQocmFuZ2UuZXh0cmFjdENvbnRlbnRzKCkpO1xuICAgICAgICAgICAgICAgICAgICBjb3B5LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHBhZ2UsIGNvcHkpO1xuICAgICAgICAgICAgICAgICAgICBwcmV2ZW50QnVsbGV0T25MaXN0SXRlbShuZXh0bm9kZS5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNwbGl0VGV4dChuZXh0bm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwcmV2ZW50QnVsbGV0T25MaXN0SXRlbShlbCkge1xuICAgICAgICAgICAgLy8gc2V0IGEgaGludCBvbiBjb250aW51ZWQgTEkgZWxlbWVudHMsIHRvIHRlbGwgdGhlXG4gICAgICAgICAgICAvLyByZW5kZXJlciBub3QgdG8gZHJhdyB0aGUgYnVsbGV0IGFnYWluLlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tdWktY29yZS9pc3N1ZXMvMjczMlxuICAgICAgICAgICAgdmFyIGxpID0gY2xvc2VzdChlbCwgXCJsaVwiKTtcbiAgICAgICAgICAgIGlmIChsaSkge1xuICAgICAgICAgICAgICAgIGxpLnNldEF0dHJpYnV0ZShcImtlbmRvLW5vLWJ1bGxldFwiLCBcIjFcIik7XG4gICAgICAgICAgICAgICAgcHJldmVudEJ1bGxldE9uTGlzdEl0ZW0obGkucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gVGhpcyBpcyBuZWVkZWQgZm9yIHRoZSBTcHJlYWRzaGVldCBwcmludCBmdW5jdGlvbmFsaXR5LiAgU2luY2Vcbi8vIHRoZXJlIHdlIG9ubHkgbmVlZCB0byBkcmF3IHRleHQsIHRoaXMgY3V0cyB0aHJvdWdoIHRoZSBjZXJlbW9ueVxuLy8gb2YgZHJhd0RPTS9yZW5kZXJFbGVtZW50IGFuZCByZW5kZXJzIHRoZSB0ZXh0IG5vZGUgZGlyZWN0bHkuXG5mdW5jdGlvbiBkcmF3VGV4dChlbGVtZW50KSB7XG4gICAgdmFyIGdyb3VwID0gbmV3IEdyb3VwKCk7XG4gICAgbm9kZUluZm8uX2NsaXBib3ggPSBmYWxzZTtcbiAgICBub2RlSW5mby5fbWF0cml4ID0gZ2VvLk1hdHJpeC51bml0KCk7XG4gICAgbm9kZUluZm8uX3N0YWNraW5nQ29udGV4dCA9IHtcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgZ3JvdXA6IGdyb3VwXG4gICAgfTtcbiAgICBwdXNoTm9kZUluZm8oZWxlbWVudCwgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSwgZ3JvdXApO1xuICAgIGlmIChlbGVtZW50LmZpcnN0Q2hpbGQubm9kZVR5cGUgPT0gMyAvKiBUZXh0ICovKSB7XG4gICAgICAgIC8vIGF2b2lkIHRoZSBwZW5hbHR5IG9mIHJlbmRlckVsZW1lbnRcbiAgICAgICAgcmVuZGVyVGV4dChlbGVtZW50LCBlbGVtZW50LmZpcnN0Q2hpbGQsIGdyb3VwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBfcmVuZGVyRWxlbWVudChlbGVtZW50LCBncm91cCk7XG4gICAgfVxuICAgIHBvcE5vZGVJbmZvKCk7XG4gICAgcmV0dXJuIGdyb3VwO1xufVxuXG52YXIgcGFyc2VCYWNrZ3JvdW5kSW1hZ2UgPSAoZnVuY3Rpb24oKXtcbiAgICB2YXIgdG9rX2xpbmVhcl9ncmFkaWVudCAgPSAvXigoLXdlYmtpdC18LW1vei18LW8tfC1tcy0pP2xpbmVhci1ncmFkaWVudFxccyopXFwoLztcbiAgICAvL3ZhciB0b2tfcmFkaWFsX2dyYWRpZW50ICA9IC9eKCgtd2Via2l0LXwtbW96LXwtby18LW1zLSk/cmFkaWFsLWdyYWRpZW50XFxzKilcXCgvO1xuICAgIHZhciB0b2tfcGVyY2VudCAgICAgICAgICA9IC9eKFstMC05Ll0rJSkvO1xuICAgIHZhciB0b2tfbGVuZ3RoICAgICAgICAgICA9IC9eKFstMC05Ll0rcHgpLztcbiAgICB2YXIgdG9rX2tleXdvcmQgICAgICAgICAgPSAvXihsZWZ0fHJpZ2h0fHRvcHxib3R0b218dG98Y2VudGVyKVxcVy87XG4gICAgdmFyIHRva19hbmdsZSAgICAgICAgICAgID0gL14oWy0wLTkuXSsoZGVnfGdyYWR8cmFkfHR1cm4pfDApLztcbiAgICB2YXIgdG9rX3doaXRlc3BhY2UgICAgICAgPSAvXihcXHMrKS87XG4gICAgdmFyIHRva19wb3BlbiAgICAgICAgICAgID0gL14oXFwoKS87XG4gICAgdmFyIHRva19wY2xvc2UgICAgICAgICAgID0gL14oXFwpKS87XG4gICAgdmFyIHRva19jb21tYSAgICAgICAgICAgID0gL14oLCkvO1xuICAgIHZhciB0b2tfdXJsICAgICAgICAgICAgICA9IC9eKHVybClcXCgvO1xuICAgIHZhciB0b2tfY29udGVudCAgICAgICAgICA9IC9eKC4qPylcXCkvO1xuXG4gICAgdmFyIGNhY2hlMSA9IHt9LCBjYWNoZTIgPSB7fTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gICAgICAgIHZhciBvcmlnID0gaW5wdXQ7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShjYWNoZTEsIG9yaWcpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGUxW29yaWddO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNraXBfd3MoKSB7XG4gICAgICAgICAgICB2YXIgbSA9IHRva193aGl0ZXNwYWNlLmV4ZWMoaW5wdXQpO1xuICAgICAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0LnN1YnN0cihtWzFdLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVhZCh0b2tlbikge1xuICAgICAgICAgICAgc2tpcF93cygpO1xuICAgICAgICAgICAgdmFyIG0gPSB0b2tlbi5leGVjKGlucHV0KTtcbiAgICAgICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5zdWJzdHIobVsxXS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBtWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVhZF9zdG9wKCkge1xuICAgICAgICAgICAgdmFyIGNvbG9yID0gdXRpbHNfcGFyc2VDb2xvcihpbnB1dCwgdHJ1ZSk7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoLCBwZXJjZW50O1xuICAgICAgICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoID1cbiAgICAgICAgICAgICAgICAgICAgL14jWzAtOWEtZl0rL2kuZXhlYyhpbnB1dCkgfHxcbiAgICAgICAgICAgICAgICAgICAgL15yZ2JhP1xcKC4qP1xcKS9pLmV4ZWMoaW5wdXQpIHx8XG4gICAgICAgICAgICAgICAgICAgIC9eLi4qP1xcYi8uZXhlYyhpbnB1dCk7IC8vIG1heWJlIG5hbWVkIGNvbG9yXG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5zdWJzdHIobWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBjb2xvciA9IGNvbG9yLnRvUkdCKCk7XG4gICAgICAgICAgICAgICAgaWYgKCEobGVuZ3RoID0gcmVhZCh0b2tfbGVuZ3RoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudCA9IHJlYWQodG9rX3BlcmNlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBjb2xvcjogY29sb3IsIGxlbmd0aDogbGVuZ3RoLCBwZXJjZW50OiBwZXJjZW50IH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZWFkX2xpbmVhcl9ncmFkaWVudChwcm9wTmFtZSkge1xuICAgICAgICAgICAgdmFyIGFuZ2xlO1xuICAgICAgICAgICAgdmFyIHRvMSwgdG8yO1xuICAgICAgICAgICAgdmFyIHN0b3BzID0gW107XG4gICAgICAgICAgICB2YXIgcmV2ZXJzZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAocmVhZCh0b2tfcG9wZW4pKSB7XG4gICAgICAgICAgICAgICAgLy8gMS4gWyA8YW5nbGU+IHx8IHRvIDxzaWRlLW9yLWNvcm5lcj4sIF0/XG4gICAgICAgICAgICAgICAgYW5nbGUgPSByZWFkKHRva19hbmdsZSk7XG4gICAgICAgICAgICAgICAgaWYgKGFuZ2xlID09IFwiMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlID0gXCIwZGVnXCI7IC8vIEVkZ2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlID0gcGFyc2VBbmdsZShhbmdsZSk7XG4gICAgICAgICAgICAgICAgICAgIHJlYWQodG9rX2NvbW1hKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvMSA9IHJlYWQodG9rX2tleXdvcmQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG8xID09IFwidG9cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG8xID0gcmVhZCh0b2tfa2V5d29yZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG8xICYmIC9eLS8udGVzdChwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldmVyc2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRvMiA9IHJlYWQodG9rX2tleXdvcmQpO1xuICAgICAgICAgICAgICAgICAgICByZWFkKHRva19jb21tYSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKC8tbW96LS8udGVzdChwcm9wTmFtZSkgJiYgYW5nbGUgPT0gbnVsbCAmJiB0bzEgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IHJlYWQodG9rX3BlcmNlbnQpLCB5ID0gcmVhZCh0b2tfcGVyY2VudCk7XG4gICAgICAgICAgICAgICAgICAgIHJldmVyc2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoeCA9PSBcIjAlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvMSA9IFwibGVmdFwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHggPT0gXCIxMDAlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvMSA9IFwicmlnaHRcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoeSA9PSBcIjAlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvMiA9IFwidG9wXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeSA9PSBcIjEwMCVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG8yID0gXCJib3R0b21cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZWFkKHRva19jb21tYSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gMi4gY29sb3Igc3RvcHNcbiAgICAgICAgICAgICAgICB3aGlsZSAoaW5wdXQgJiYgIXJlYWQodG9rX3BjbG9zZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3AgPSByZWFkX3N0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdG9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdG9wcy5wdXNoKHN0b3ApO1xuICAgICAgICAgICAgICAgICAgICByZWFkKHRva19jb21tYSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZSAgICA6IFwibGluZWFyXCIsXG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlICAgOiBhbmdsZSxcbiAgICAgICAgICAgICAgICAgICAgdG8gICAgICA6IHRvMSAmJiB0bzIgPyB0bzEgKyBcIiBcIiArIHRvMiA6IHRvMSA/IHRvMSA6IHRvMiA/IHRvMiA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHN0b3BzICAgOiBzdG9wcyxcbiAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZSA6IHJldmVyc2VcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVhZF91cmwoKSB7XG4gICAgICAgICAgICBpZiAocmVhZCh0b2tfcG9wZW4pKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IHJlYWQodG9rX2NvbnRlbnQpO1xuICAgICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9eWydcIl0rfFtcIiddKyQvZywgXCJcIik7XG4gICAgICAgICAgICAgICAgcmVhZCh0b2tfcGNsb3NlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB0eXBlOiBcInVybFwiLCB1cmw6IHVybCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvaztcblxuICAgICAgICBpZiAoKHRvayA9IHJlYWQodG9rX2xpbmVhcl9ncmFkaWVudCkpKSB7XG4gICAgICAgICAgICB0b2sgPSByZWFkX2xpbmVhcl9ncmFkaWVudCh0b2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCh0b2sgPSByZWFkKHRva191cmwpKSkge1xuICAgICAgICAgICAgdG9rID0gcmVhZF91cmwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoY2FjaGUxW29yaWddID0gdG9rIHx8IHsgdHlwZTogXCJub25lXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShjYWNoZTIsIGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlMltpbnB1dF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChjYWNoZTJbaW5wdXRdID0gc3BsaXRQcm9wZXJ0eShpbnB1dCkubWFwKHBhcnNlKSk7XG4gICAgfTtcbn0pKCk7XG5cbnZhciBzcGxpdFByb3BlcnR5ID0gKGZ1bmN0aW9uKCl7XG4gICAgdmFyIGNhY2hlID0ge307XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBzZXBhcmF0b3IpIHtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9IC9eXFxzKixcXHMqLztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjYWNoZUtleSA9IGlucHV0ICsgc2VwYXJhdG9yO1xuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShjYWNoZSwgY2FjaGVLZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVbY2FjaGVLZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgICB2YXIgbGFzdCA9IDAsIHBvcyA9IDA7XG4gICAgICAgIHZhciBpbl9wYXJlbiA9IDA7XG4gICAgICAgIHZhciBpbl9zdHJpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIG07XG5cbiAgICAgICAgZnVuY3Rpb24gbG9va2luZ19hdChyeCkge1xuICAgICAgICAgICAgcmV0dXJuIChtID0gcnguZXhlYyhpbnB1dC5zdWJzdHIocG9zKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgXCJcIik7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAocG9zIDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoIWluX3N0cmluZyAmJiBsb29raW5nX2F0KC9eW1xcKFxcW1xce10vKSkge1xuICAgICAgICAgICAgICAgIGluX3BhcmVuKys7XG4gICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghaW5fc3RyaW5nICYmIGxvb2tpbmdfYXQoL15bXFwpXFxdXFx9XS8pKSB7XG4gICAgICAgICAgICAgICAgaW5fcGFyZW4tLTtcbiAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFpbl9zdHJpbmcgJiYgbG9va2luZ19hdCgvXltcXFwiXFwnXS8pKSB7XG4gICAgICAgICAgICAgICAgaW5fc3RyaW5nID0gbVswXTtcbiAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGluX3N0cmluZyA9PSBcIidcIiAmJiBsb29raW5nX2F0KC9eXFxcXFxcJy8pKSB7XG4gICAgICAgICAgICAgICAgcG9zICs9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbl9zdHJpbmcgPT0gJ1wiJyAmJiBsb29raW5nX2F0KC9eXFxcXFxcXCIvKSkge1xuICAgICAgICAgICAgICAgIHBvcyArPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5fc3RyaW5nID09IFwiJ1wiICYmIGxvb2tpbmdfYXQoL15cXCcvKSkge1xuICAgICAgICAgICAgICAgIGluX3N0cmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5fc3RyaW5nID09ICdcIicgJiYgbG9va2luZ19hdCgvXlxcXCIvKSkge1xuICAgICAgICAgICAgICAgIGluX3N0cmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobG9va2luZ19hdChzZXBhcmF0b3IpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpbl9zdHJpbmcgJiYgIWluX3BhcmVuICYmIHBvcyA+IGxhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2godHJpbShpbnB1dC5zdWJzdHJpbmcobGFzdCwgcG9zKSkpO1xuICAgICAgICAgICAgICAgICAgICBsYXN0ID0gcG9zICsgbVswXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBvcyArPSBtWzBdLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0IDwgcG9zKSB7XG4gICAgICAgICAgICByZXQucHVzaCh0cmltKGlucHV0LnN1YnN0cmluZyhsYXN0LCBwb3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChjYWNoZVtjYWNoZUtleV0gPSByZXQpO1xuICAgIH07XG59KSgpO1xuXG52YXIgZ2V0Rm9udFVSTCA9IChmdW5jdGlvbihjYWNoZSl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsKXtcbiAgICAgICAgLy8gWFhYOiBmb3IgSUUgd2UgZ2V0IGhlcmUgdGhlIHdob2xlIGNzc1RleHQgb2YgdGhlIHJ1bGUsXG4gICAgICAgIC8vIGJlY2F1c2UgdGhlIGNvbXB1dGVkU3R5bGUuc3JjIGlzIGVtcHR5LiAgTmV4dCB0aW1lIHdlIG5lZWRcbiAgICAgICAgLy8gdG8gZml4IHRoZXNlIHJlZ2V4cHMgd2UgYmV0dGVyIHdyaXRlIGEgQ1NTIHBhcnNlci4gOi1cXFxuICAgICAgICB2YXIgdXJsID0gY2FjaGVbZWxdO1xuICAgICAgICBpZiAoIXVybCkge1xuICAgICAgICAgICAgdmFyIG07XG4gICAgICAgICAgICBpZiAoKG0gPSAvdXJsXFwoKFsnXCJdPykoW14nXCIpXSo/KVxcMVxcKVxccytmb3JtYXRcXCgoWydcIl0/KXRydWV0eXBlXFwzXFwpLy5leGVjKGVsKSkpIHtcbiAgICAgICAgICAgICAgICB1cmwgPSBjYWNoZVtlbF0gPSBtWzJdO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgobSA9IC91cmxcXCgoWydcIl0/KShbXidcIildKj9cXC50dGYpXFwxXFwpLy5leGVjKGVsKSkpIHtcbiAgICAgICAgICAgICAgICB1cmwgPSBjYWNoZVtlbF0gPSBtWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmw7XG4gICAgfTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG52YXIgZ2V0Rm9udEhlaWdodCA9IChmdW5jdGlvbihjYWNoZSl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGZvbnQpIHtcbiAgICAgICAgdmFyIGhlaWdodCA9IGNhY2hlW2ZvbnRdO1xuICAgICAgICBpZiAoaGVpZ2h0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGhlaWdodCA9IGNhY2hlW2ZvbnRdID0gbWVhc3VyZVRleHQoXCJNYXBxXCIsIHsgZm9udDogZm9udCB9KS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICB9O1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmZ1bmN0aW9uIGdldEZvbnRGYWNlcyhkb2MpIHtcbiAgICBpZiAoZG9jID09IG51bGwpIHtcbiAgICAgICAgZG9jID0gZG9jdW1lbnQ7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvYy5zdHlsZVNoZWV0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBkb1N0eWxlc2hlZXQoZG9jLnN0eWxlU2hlZXRzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgICBmdW5jdGlvbiBkb1N0eWxlc2hlZXQoc3MpIHtcbiAgICAgICAgaWYgKHNzKSB7XG4gICAgICAgICAgICB2YXIgcnVsZXMgPSBudWxsO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBydWxlcyA9IHNzLmNzc1J1bGVzO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHt9XG4gICAgICAgICAgICBpZiAocnVsZXMpIHtcbiAgICAgICAgICAgICAgICBhZGRSdWxlcyhzcywgcnVsZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbmRGb250cyhydWxlKSB7XG4gICAgICAgIHZhciBzcmMgPSBnZXRQcm9wZXJ0eVZhbHVlKHJ1bGUuc3R5bGUsIFwic3JjXCIpO1xuICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgICByZXR1cm4gc3BsaXRQcm9wZXJ0eShzcmMpLnJlZHVjZShmdW5jdGlvbihhLCBlbCl7XG4gICAgICAgICAgICAgICAgdmFyIGZvbnQgPSBnZXRGb250VVJMKGVsKTtcbiAgICAgICAgICAgICAgICBpZiAoZm9udCkge1xuICAgICAgICAgICAgICAgICAgICBhLnB1c2goZm9udCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSW50ZXJuZXQgRXhwbG9yZXJcbiAgICAgICAgICAgIC8vIFhYWDogdGhpcyBpcyBncm9zcy4gIHNob3VsZCB3b3JrIHRob3VnaCBmb3IgdmFsaWQgQ1NTLlxuICAgICAgICAgICAgdmFyIGZvbnQgPSBnZXRGb250VVJMKHJ1bGUuY3NzVGV4dCk7XG4gICAgICAgICAgICByZXR1cm4gZm9udCA/IFsgZm9udCBdIDogW107XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkUnVsZXMoc3R5bGVTaGVldCwgcnVsZXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIHIgPSBydWxlc1tpXTtcbiAgICAgICAgICAgIHN3aXRjaCAoci50eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgMzogICAgICAgLy8gQ1NTSW1wb3J0UnVsZVxuICAgICAgICAgICAgICAgIGRvU3R5bGVzaGVldChyLnN0eWxlU2hlZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDU6ICAgICAgIC8vIENTU0ZvbnRGYWNlUnVsZVxuICAgICAgICAgICAgICAgIHZhciBzdHlsZSAgPSByLnN0eWxlO1xuICAgICAgICAgICAgICAgIHZhciBmYW1pbHkgPSBzcGxpdFByb3BlcnR5KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiZm9udC1mYW1pbHlcIikpO1xuICAgICAgICAgICAgICAgIHZhciBib2xkICAgPSAvXihbNTY3ODldMDB8Ym9sZCkkL2kudGVzdChnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImZvbnQtd2VpZ2h0XCIpKTtcbiAgICAgICAgICAgICAgICB2YXIgaXRhbGljID0gXCJpdGFsaWNcIiA9PSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImZvbnQtc3R5bGVcIik7XG4gICAgICAgICAgICAgICAgdmFyIHNyYyAgICA9IGZpbmRGb250cyhyKTtcbiAgICAgICAgICAgICAgICBpZiAoc3JjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkUnVsZShzdHlsZVNoZWV0LCBmYW1pbHksIGJvbGQsIGl0YWxpYywgc3JjWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkUnVsZShzdHlsZVNoZWV0LCBuYW1lcywgYm9sZCwgaXRhbGljLCB1cmwpIHtcbiAgICAgICAgLy8gV2UgZ2V0IGZ1bGwgcmVzb2x2ZWQgYWJzb2x1dGUgVVJMcyBpbiBDaHJvbWUsIGJ1dCBzYWRseVxuICAgICAgICAvLyBub3QgaW4gRmlyZWZveC5cbiAgICAgICAgaWYgKCEoL15kYXRhOi9pLnRlc3QodXJsKSkpIHtcbiAgICAgICAgICAgIGlmICghKC9eW15cXC86XSs6XFwvXFwvLy50ZXN0KHVybCkgfHwgL15cXC8vLnRlc3QodXJsKSkpIHtcbiAgICAgICAgICAgICAgICB1cmwgPSBTdHJpbmcoc3R5bGVTaGVldC5ocmVmKS5yZXBsYWNlKC9bXlxcL10qJC8sIFwiXCIpICsgdXJsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5hbWVzLmZvckVhY2goZnVuY3Rpb24obmFtZSl7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9eKFsnXCJdPykoLio/KVxcMSQvLCBcIiQyXCIpOyAvLyBpdCdzIHF1b3RlZFxuICAgICAgICAgICAgaWYgKGJvbGQpIHtcbiAgICAgICAgICAgICAgICBuYW1lICs9IFwifGJvbGRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGFsaWMpIHtcbiAgICAgICAgICAgICAgICBuYW1lICs9IFwifGl0YWxpY1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gdXJsO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbmZ1bmN0aW9uIGdldENvdW50ZXIobmFtZSkge1xuICAgIG5hbWUgPSBcIl9jb3VudGVyX1wiICsgbmFtZTtcbiAgICByZXR1cm4gbm9kZUluZm9bbmFtZV07XG59XG5cbmZ1bmN0aW9uIGdldEFsbENvdW50ZXJzKG5hbWUpIHtcbiAgICB2YXIgdmFsdWVzID0gW10sIHAgPSBub2RlSW5mbztcbiAgICBuYW1lID0gXCJfY291bnRlcl9cIiArIG5hbWU7XG4gICAgd2hpbGUgKHApIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5KHAsIG5hbWUpKSB7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChwW25hbWVdKTtcbiAgICAgICAgfVxuICAgICAgICBwID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHApO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzLnJldmVyc2UoKTtcbn1cblxuZnVuY3Rpb24gaW5jQ291bnRlcihuYW1lLCBpbmMpIHtcbiAgICB2YXIgcCA9IG5vZGVJbmZvO1xuICAgIG5hbWUgPSBcIl9jb3VudGVyX1wiICsgbmFtZTtcbiAgICB3aGlsZSAocCAmJiAhaGFzT3duUHJvcGVydHkocCwgbmFtZSkpIHtcbiAgICAgICAgcCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwKTtcbiAgICB9XG4gICAgaWYgKCFwKSB7XG4gICAgICAgIHAgPSBub2RlSW5mby5fcm9vdDtcbiAgICB9XG4gICAgcFtuYW1lXSA9IChwW25hbWVdIHx8IDApICsgKGluYyA9PSBudWxsID8gMSA6IGluYyk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0Q291bnRlcihuYW1lLCB2YWwpIHtcbiAgICBuYW1lID0gXCJfY291bnRlcl9cIiArIG5hbWU7XG4gICAgbm9kZUluZm9bbmFtZV0gPSB2YWwgPT0gbnVsbCA/IDAgOiB2YWw7XG59XG5cbmZ1bmN0aW9uIGRvQ291bnRlcnMoYSwgZiwgZGVmKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDspIHtcbiAgICAgICAgdmFyIG5hbWUgPSBhW2krK107XG4gICAgICAgIHZhciB2YWwgPSBwYXJzZUZsb2F0KGFbaV0pO1xuICAgICAgICBpZiAoaXNOYU4odmFsKSkge1xuICAgICAgICAgICAgZihuYW1lLCBkZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZihuYW1lLCB2YWwpO1xuICAgICAgICAgICAgKytpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb3VudGVycyhzdHlsZSkge1xuICAgIHZhciBjb3VudGVyUmVzZXQgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImNvdW50ZXItcmVzZXRcIik7XG4gICAgaWYgKGNvdW50ZXJSZXNldCkge1xuICAgICAgICBkb0NvdW50ZXJzKHNwbGl0UHJvcGVydHkoY291bnRlclJlc2V0LCAvXlxccysvKSwgcmVzZXRDb3VudGVyLCAwKTtcbiAgICB9XG4gICAgdmFyIGNvdW50ZXJJbmNyZW1lbnQgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImNvdW50ZXItaW5jcmVtZW50XCIpO1xuICAgIGlmIChjb3VudGVySW5jcmVtZW50KSB7XG4gICAgICAgIGRvQ291bnRlcnMoc3BsaXRQcm9wZXJ0eShjb3VudGVySW5jcmVtZW50LCAvXlxccysvKSwgaW5jQ291bnRlciwgMSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZUNvbG9yKHN0ciwgY3NzKSB7XG4gICAgdmFyIGNvbG9yID0gdXRpbHNfcGFyc2VDb2xvcihzdHIsIHRydWUpO1xuICAgIGlmIChjb2xvcikge1xuICAgICAgICBjb2xvciA9IGNvbG9yLnRvUkdCKCk7XG4gICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgIGNvbG9yID0gY29sb3IudG9Dc3NSZ2JhKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29sb3IuYSA9PT0gMCkge1xuICAgICAgICAgICAgY29sb3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbn1cblxuZnVuY3Rpb24gd2hlbkltYWdlc0FyZUFjdHVhbGx5TG9hZGVkKGVsZW1lbnRzLCBjYWxsYmFjaykge1xuICAgIHZhciBwZW5kaW5nID0gMDtcbiAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24oZWwpe1xuICAgICAgICB2YXIgaW1hZ2VzID0gZWwucXVlcnlTZWxlY3RvckFsbChcImltZ1wiKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbWFnZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBpbWcgPSBpbWFnZXNbaV07XG4gICAgICAgICAgICBpZiAoIWltZy5jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHBlbmRpbmcrKztcbiAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gaW1nLm9uZXJyb3IgPSBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgbmV4dCgpO1xuXG4gICAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgaWYgKCFkb25lICYmIC0tcGVuZGluZyA8PSAwKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNhY2hlSW1hZ2VzKGVsZW1lbnRzLCBjYWxsYmFjaykge1xuICAgIHZhciB1cmxzID0gW107XG4gICAgZnVuY3Rpb24gYWRkKHVybCkge1xuICAgICAgICBpZiAoIUlNQUdFX0NBQ0hFW3VybF0pIHtcbiAgICAgICAgICAgIElNQUdFX0NBQ0hFW3VybF0gPSB0cnVlO1xuICAgICAgICAgICAgdXJscy5wdXNoKHVybCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIGRpdmUoZWxlbWVudCl7XG4gICAgICAgIGlmICgvXmltZyQvaS50ZXN0KGVsZW1lbnQudGFnTmFtZSkpIHtcbiAgICAgICAgICAgIGFkZChlbGVtZW50LnNyYyk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VCYWNrZ3JvdW5kSW1hZ2UoXG4gICAgICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlKFxuICAgICAgICAgICAgICAgIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCksIFwiYmFja2dyb3VuZC1pbWFnZVwiXG4gICAgICAgICAgICApXG4gICAgICAgICkuZm9yRWFjaChmdW5jdGlvbihiZyl7XG4gICAgICAgICAgICBpZiAoYmcudHlwZSA9PSBcInVybFwiKSB7XG4gICAgICAgICAgICAgICAgYWRkKGJnLnVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChlbGVtZW50LmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBzbGljZShlbGVtZW50LmNoaWxkcmVuKS5mb3JFYWNoKGRpdmUpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgY291bnQgPSB1cmxzLmxlbmd0aDtcbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICBpZiAoLS1jb3VudCA8PSAwKSB7XG4gICAgICAgICAgICAvLyBFdmVuIHRob3VnaCB3ZSBjYWNoZWQgdGhlbSwgdGhleSBzaW1wbHkgd29uJ3QgYmUgYXZhaWxhYmxlIGltbWVkaWF0ZWx5IGluIHRoZSBuZXdseVxuICAgICAgICAgICAgLy8gY3JlYXRlZCBET00uICBQcmV2aW91c2x5IHdlJ2QgYWxsb3cgYSAxMG1zIHRpbWVvdXQsIGJ1dCB0aGF0J3MgYXJiaXRyYXJ5IGFuZCBjbGVhcmx5XG4gICAgICAgICAgICAvLyBub3Qgd29ya2luZyBpbiBhbGwgY2FzZXMgKGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvL2lzc3Vlcy81Mzk5KSwgc28gdGhpc1xuICAgICAgICAgICAgLy8gZnVuY3Rpb24gd2lsbCB3YWl0IGZvciB0aGVpciAuY29tcGxldGUgYXR0cmlidXRlLlxuICAgICAgICAgICAgd2hlbkltYWdlc0FyZUFjdHVhbGx5TG9hZGVkKGVsZW1lbnRzLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgIG5leHQoKTtcbiAgICB9XG4gICAgdXJscy5mb3JFYWNoKGZ1bmN0aW9uKHVybCl7XG4gICAgICAgIHZhciBpbWcgPSBJTUFHRV9DQUNIRVt1cmxdID0gbmV3IHdpbmRvdy5JbWFnZSgpO1xuICAgICAgICBpZiAoISgvXmRhdGE6L2kudGVzdCh1cmwpKSkge1xuICAgICAgICAgICAgaW1nLmNyb3NzT3JpZ2luID0gXCJBbm9ueW1vdXNcIjtcbiAgICAgICAgfVxuICAgICAgICBpbWcuc3JjID0gdXJsO1xuICAgICAgICBpZiAoaW1nLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbWcub25sb2FkID0gbmV4dDtcbiAgICAgICAgICAgIGltZy5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgSU1BR0VfQ0FDSEVbdXJsXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhbHBoYU51bWVyYWwobikge1xuICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgIGRvIHtcbiAgICAgICAgdmFyIHIgPSBuICUgMjY7XG4gICAgICAgIHJlc3VsdCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgKyByKSArIHJlc3VsdDtcbiAgICAgICAgbiA9IE1hdGguZmxvb3IobiAvIDI2KTtcbiAgICB9IHdoaWxlIChuID4gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcHVzaE5vZGVJbmZvKGVsZW1lbnQsIHN0eWxlLCBncm91cCkge1xuICAgIG5vZGVJbmZvID0gT2JqZWN0LmNyZWF0ZShub2RlSW5mbyk7XG4gICAgbm9kZUluZm9bZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCldID0ge1xuICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICB9O1xuICAgIGxldCBkZWNvcmF0aW9uID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJ0ZXh0LWRlY29yYXRpb25cIik7XG4gICAgaWYgKGRlY29yYXRpb24gJiYgZGVjb3JhdGlvbiAhPSBcIm5vbmVcIikge1xuICAgICAgICBsZXQgY29sb3IgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcInRleHQtZGVjb3JhdGlvbi1jb2xvclwiKTtcbiAgICAgICAgZGVjb3JhdGlvbi5zcGxpdCgvXFxzKy9nKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpe1xuICAgICAgICAgICAgaWYgKCFub2RlSW5mb1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIG5vZGVJbmZvW25hbWVdID0gY29sb3I7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT0gXCJ1bmRlcmxpbmVcIikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0ID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJ0ZXh0LXVuZGVybGluZS1vZmZzZXRcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgIT0gXCJhdXRvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJbmZvW1widW5kZXJsaW5lLW9mZnNldFwiXSA9IHBhcnNlRmxvYXQob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNyZWF0ZXNTdGFja2luZ0NvbnRleHQoc3R5bGUpKSB7XG4gICAgICAgIG5vZGVJbmZvLl9zdGFja2luZ0NvbnRleHQgPSB7XG4gICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgZ3JvdXA6IGdyb3VwXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwb3BOb2RlSW5mbygpIHtcbiAgICBub2RlSW5mbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihub2RlSW5mbyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsaXBib3gocGF0aCkge1xuICAgIGlmIChub2RlSW5mby5fY2xpcGJveCAhPSBudWxsKSB7XG4gICAgICAgIHZhciBib3ggPSBwYXRoLmJib3gobm9kZUluZm8uX21hdHJpeCk7XG4gICAgICAgIGlmIChub2RlSW5mby5fY2xpcGJveCkge1xuICAgICAgICAgICAgbm9kZUluZm8uX2NsaXBib3ggPSBnZW8uUmVjdC5pbnRlcnNlY3Qobm9kZUluZm8uX2NsaXBib3gsIGJveCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlSW5mby5fY2xpcGJveCA9IGJveDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZW1wdHlDbGlwYm94KCkge1xuICAgIHZhciBjYiA9IG5vZGVJbmZvLl9jbGlwYm94O1xuICAgIGlmIChjYiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoY2IpIHtcbiAgICAgICAgcmV0dXJuIGNiLndpZHRoKCkgPT09IDAgfHwgY2IuaGVpZ2h0KCkgPT09IDA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVzU3RhY2tpbmdDb250ZXh0KHN0eWxlKSB7XG4gICAgZnVuY3Rpb24gcHJvcChuYW1lKSB7IHJldHVybiBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBuYW1lKTsgfVxuICAgIGlmIChwcm9wKFwidHJhbnNmb3JtXCIpICE9IFwibm9uZVwiIHx8XG4gICAgICAgIHByb3AoXCJwb3NpdGlvblwiKSAhPSBcInN0YXRpY1wiIHx8XG4gICAgICAgIHByb3AoXCJ6LWluZGV4XCIpICE9IFwiYXV0b1wiIHx8XG4gICAgICAgIHByb3AoXCJvcGFjaXR5XCIpIDwgMSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgcHNldWRvRWx0KSB7XG4gICAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIHBzZXVkb0VsdCB8fCBudWxsKTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgcHJvcCwgZGVmYSkge1xuICAgIHZhciB2YWwgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xuICAgIGlmICh2YWwgPT0gbnVsbCB8fCB2YWwgPT09IFwiXCIpIHtcbiAgICAgICAgaWYgKGJyb3dzZXIud2Via2l0KSB7XG4gICAgICAgICAgICB2YWwgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwiLXdlYmtpdC1cIiArIHByb3AgKTtcbiAgICAgICAgfSBlbHNlIGlmIChicm93c2VyLm1vemlsbGEpIHtcbiAgICAgICAgICAgIHZhbCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCItbW96LVwiICsgcHJvcCApO1xuICAgICAgICB9IGVsc2UgaWYgKGJyb3dzZXIub3BlcmEpIHtcbiAgICAgICAgICAgIHZhbCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCItby1cIiArIHByb3ApO1xuICAgICAgICB9IGVsc2UgaWYgKG1pY3Jvc29mdCkge1xuICAgICAgICAgICAgdmFsID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShcIi1tcy1cIiArIHByb3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMiAmJiAodmFsID09IG51bGwgfHwgdmFsID09PSBcIlwiKSkge1xuICAgICAgICByZXR1cm4gZGVmYTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcGxlYXNlU2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgcHJvcCwgdmFsdWUsIGltcG9ydGFudCkge1xuICAgIHN0eWxlLnNldFByb3BlcnR5KHByb3AsIHZhbHVlLCBpbXBvcnRhbnQpO1xuICAgIGlmIChicm93c2VyLndlYmtpdCkge1xuICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShcIi13ZWJraXQtXCIgKyBwcm9wLCB2YWx1ZSwgaW1wb3J0YW50KTtcbiAgICB9IGVsc2UgaWYgKGJyb3dzZXIubW96aWxsYSkge1xuICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShcIi1tb3otXCIgKyBwcm9wLCB2YWx1ZSwgaW1wb3J0YW50KTtcbiAgICB9IGVsc2UgaWYgKGJyb3dzZXIub3BlcmEpIHtcbiAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoXCItby1cIiArIHByb3AsIHZhbHVlLCBpbXBvcnRhbnQpO1xuICAgIH0gZWxzZSBpZiAobWljcm9zb2Z0KSB7XG4gICAgICAgIHN0eWxlLnNldFByb3BlcnR5KFwiLW1zLVwiICsgcHJvcCwgdmFsdWUsIGltcG9ydGFudCk7XG4gICAgICAgIHByb3AgPSBcIm1zXCIgKyBwcm9wLnJlcGxhY2UoLyhefC0pKFthLXpdKS9nLCBmdW5jdGlvbihzLCBwMSwgcDIpe1xuICAgICAgICAgICAgcmV0dXJuIHAxICsgcDIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0eWxlW3Byb3BdID0gdmFsdWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRCb3JkZXIoc3R5bGUsIHNpZGUpIHtcbiAgICBzaWRlID0gXCJib3JkZXItXCIgKyBzaWRlO1xuICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiBwYXJzZUZsb2F0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIHNpZGUgKyBcIi13aWR0aFwiKSksXG4gICAgICAgIHN0eWxlOiBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBzaWRlICsgXCItc3R5bGVcIiksXG4gICAgICAgIGNvbG9yOiBwYXJzZUNvbG9yKGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIHNpZGUgKyBcIi1jb2xvclwiKSwgdHJ1ZSlcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBzYXZlU3R5bGUoZWxlbWVudCwgZnVuYykge1xuICAgIHZhciBwcmV2ID0gZWxlbWVudC5zdHlsZS5jc3NUZXh0O1xuICAgIHZhciByZXN1bHQgPSBmdW5jKCk7XG4gICAgZWxlbWVudC5zdHlsZS5jc3NUZXh0ID0gcHJldjtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRCb3JkZXJSYWRpdXMoc3R5bGUsIHNpZGUpIHtcbiAgICB2YXIgciA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiYm9yZGVyLVwiICsgc2lkZSArIFwiLXJhZGl1c1wiKS5zcGxpdCgvXFxzKy9nKS5tYXAocGFyc2VGbG9hdCk7XG4gICAgaWYgKHIubGVuZ3RoID09IDEpIHtcbiAgICAgICAgci5wdXNoKHJbMF0pO1xuICAgIH1cbiAgICByZXR1cm4gc2FuaXRpemVSYWRpdXMoeyB4OiByWzBdLCB5OiByWzFdIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRDb250ZW50Qm94KGVsZW1lbnQpIHtcbiAgICB2YXIgYm94ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBib3ggPSBpbm5lckJveChib3gsIFwiYm9yZGVyLSotd2lkdGhcIiwgZWxlbWVudCk7XG4gICAgYm94ID0gaW5uZXJCb3goYm94LCBcInBhZGRpbmctKlwiLCBlbGVtZW50KTtcbiAgICByZXR1cm4gYm94O1xufVxuXG5mdW5jdGlvbiBpbm5lckJveChib3gsIHByb3AsIGVsZW1lbnQpIHtcbiAgICB2YXIgc3R5bGUsIHd0LCB3ciwgd2IsIHdsO1xuICAgIGlmICh0eXBlb2YgcHJvcCA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICAgICAgd3QgPSBwYXJzZUZsb2F0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIHByb3AucmVwbGFjZShcIipcIiwgXCJ0b3BcIikpKTtcbiAgICAgICAgd3IgPSBwYXJzZUZsb2F0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIHByb3AucmVwbGFjZShcIipcIiwgXCJyaWdodFwiKSkpO1xuICAgICAgICB3YiA9IHBhcnNlRmxvYXQoZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgcHJvcC5yZXBsYWNlKFwiKlwiLCBcImJvdHRvbVwiKSkpO1xuICAgICAgICB3bCA9IHBhcnNlRmxvYXQoZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgcHJvcC5yZXBsYWNlKFwiKlwiLCBcImxlZnRcIikpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHByb3AgPT0gXCJudW1iZXJcIikge1xuICAgICAgICB3dCA9IHdyID0gd2IgPSB3bCA9IHByb3A7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHRvcCAgICA6IGJveC50b3AgKyB3dCxcbiAgICAgICAgcmlnaHQgIDogYm94LnJpZ2h0IC0gd3IsXG4gICAgICAgIGJvdHRvbSA6IGJveC5ib3R0b20gLSB3YixcbiAgICAgICAgbGVmdCAgIDogYm94LmxlZnQgKyB3bCxcbiAgICAgICAgd2lkdGggIDogYm94LnJpZ2h0IC0gYm94LmxlZnQgLSB3ciAtIHdsLFxuICAgICAgICBoZWlnaHQgOiBib3guYm90dG9tIC0gYm94LnRvcCAtIHdiIC0gd3RcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm0oc3R5bGUpIHtcbiAgICB2YXIgdHJhbnNmb3JtID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJ0cmFuc2Zvcm1cIik7XG4gICAgaWYgKHRyYW5zZm9ybSA9PSBcIm5vbmVcIikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIG1hdHJpeCA9IC9eXFxzKm1hdHJpeFxcKFxccyooLio/KVxccypcXClcXHMqJC8uZXhlYyh0cmFuc2Zvcm0pO1xuICAgIGlmIChtYXRyaXgpIHtcbiAgICAgICAgdmFyIG9yaWdpbiA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwidHJhbnNmb3JtLW9yaWdpblwiKTtcbiAgICAgICAgbWF0cml4ID0gbWF0cml4WzFdLnNwbGl0KC9cXHMqLFxccyovZykubWFwKHBhcnNlRmxvYXQpO1xuICAgICAgICBvcmlnaW4gPSBvcmlnaW4uc3BsaXQoL1xccysvZykubWFwKHBhcnNlRmxvYXQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWF0cml4OiBtYXRyaXgsXG4gICAgICAgICAgICBvcmlnaW46IG9yaWdpblxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmFkaWFuc1RvRGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuICgoMTgwICogcmFkaWFucykgLyBNYXRoLlBJKSAlIDM2MDtcbn1cblxuZnVuY3Rpb24gcGFyc2VBbmdsZShhbmdsZSkge1xuICAgIHZhciBudW0gPSBwYXJzZUZsb2F0KGFuZ2xlKTtcbiAgICBpZiAoL2dyYWQkLy50ZXN0KGFuZ2xlKSkge1xuICAgICAgICByZXR1cm4gTWF0aC5QSSAqIG51bSAvIDIwMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoL3JhZCQvLnRlc3QoYW5nbGUpKSB7XG4gICAgICAgIHJldHVybiBudW07XG4gICAgfVxuICAgIGVsc2UgaWYgKC90dXJuJC8udGVzdChhbmdsZSkpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguUEkgKiBudW0gKiAyO1xuICAgIH1cbiAgICBlbHNlIGlmICgvZGVnJC8udGVzdChhbmdsZSkpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguUEkgKiBudW0gLyAxODA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2Zvcm0oc2hhcGUsIG0pIHtcbiAgICBtID0gbmV3IGdlby5NYXRyaXgobVswXSwgbVsxXSwgbVsyXSwgbVszXSwgbVs0XSwgbVs1XSk7XG4gICAgc2hhcGUudHJhbnNmb3JtKG0pO1xuICAgIHJldHVybiBtO1xufVxuXG5mdW5jdGlvbiBzZXRDbGlwcGluZyhzaGFwZSwgY2xpcFBhdGgpIHtcbiAgICBzaGFwZS5jbGlwKGNsaXBQYXRoKTtcbn1cblxuZnVuY3Rpb24gYWRkQXJjVG9QYXRoKHBhdGgsIHgsIHksIG9wdGlvbnMpIHtcbiAgICB2YXIgcG9pbnRzID0gbmV3IGdlby5BcmMoWyB4LCB5IF0sIG9wdGlvbnMpLmN1cnZlUG9pbnRzKCksIGkgPSAxO1xuICAgIHdoaWxlIChpIDwgcG9pbnRzLmxlbmd0aCkge1xuICAgICAgICBwYXRoLmN1cnZlVG8ocG9pbnRzW2krK10sIHBvaW50c1tpKytdLCBwb2ludHNbaSsrXSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzYW5pdGl6ZVJhZGl1cyhyKSB7XG4gICAgaWYgKHIueCA8PSAwIHx8IHIueSA8PSAwKSB7XG4gICAgICAgIHIueCA9IHIueSA9IDA7XG4gICAgfVxuICAgIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBhZGp1c3RCb3JkZXJSYWRpdXNGb3JCb3goYm94LCByVEwsIHJUUiwgckJSLCByQkwpIHtcbiAgICAvLyBhZGp1c3QgYm9yZGVyIHJhZGl1c2VzIHN1Y2ggdGhhdCB0aGUgc3VtIG9mIGFkamFjZW50XG4gICAgLy8gcmFkaXVzZXMgaXMgbm90IGJpZ2dlciB0aGFuIHRoZSBsZW5ndGggb2YgdGhlIHNpZGUuXG4gICAgLy8gc2VlbXMgdGhlIGNvcnJlY3QgYWxnb3JpdGhtIGlzIHZhcmlhbnQgKDMpIGZyb20gaGVyZTpcbiAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9TdHlsZS9DU1MvVHJhY2tlci9pc3N1ZXMvMjk/Y2hhbmdlbG9nXG4gICAgdmFyIHRsX3ggPSBNYXRoLm1heCgwLCByVEwueCksIHRsX3kgPSBNYXRoLm1heCgwLCByVEwueSk7XG4gICAgdmFyIHRyX3ggPSBNYXRoLm1heCgwLCByVFIueCksIHRyX3kgPSBNYXRoLm1heCgwLCByVFIueSk7XG4gICAgdmFyIGJyX3ggPSBNYXRoLm1heCgwLCByQlIueCksIGJyX3kgPSBNYXRoLm1heCgwLCByQlIueSk7XG4gICAgdmFyIGJsX3ggPSBNYXRoLm1heCgwLCByQkwueCksIGJsX3kgPSBNYXRoLm1heCgwLCByQkwueSk7XG5cbiAgICB2YXIgZiA9IE1hdGgubWluKFxuICAgICAgICBib3gud2lkdGggLyAodGxfeCArIHRyX3gpLFxuICAgICAgICBib3guaGVpZ2h0IC8gKHRyX3kgKyBicl95KSxcbiAgICAgICAgYm94LndpZHRoIC8gKGJyX3ggKyBibF94KSxcbiAgICAgICAgYm94LmhlaWdodCAvIChibF95ICsgdGxfeSlcbiAgICApO1xuXG4gICAgaWYgKGYgPCAxKSB7XG4gICAgICAgIHRsX3ggKj0gZjsgdGxfeSAqPSBmO1xuICAgICAgICB0cl94ICo9IGY7IHRyX3kgKj0gZjtcbiAgICAgICAgYnJfeCAqPSBmOyBicl95ICo9IGY7XG4gICAgICAgIGJsX3ggKj0gZjsgYmxfeSAqPSBmO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHRsOiB7IHg6IHRsX3gsIHk6IHRsX3kgfSxcbiAgICAgICAgdHI6IHsgeDogdHJfeCwgeTogdHJfeSB9LFxuICAgICAgICBicjogeyB4OiBicl94LCB5OiBicl95IH0sXG4gICAgICAgIGJsOiB7IHg6IGJsX3gsIHk6IGJsX3kgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRSb3VuZEJveChlbGVtZW50LCBib3gsIHR5cGUpIHtcbiAgICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgdmFyIHJUTCA9IGdldEJvcmRlclJhZGl1cyhzdHlsZSwgXCJ0b3AtbGVmdFwiKTtcbiAgICB2YXIgclRSID0gZ2V0Qm9yZGVyUmFkaXVzKHN0eWxlLCBcInRvcC1yaWdodFwiKTtcbiAgICB2YXIgckJMID0gZ2V0Qm9yZGVyUmFkaXVzKHN0eWxlLCBcImJvdHRvbS1sZWZ0XCIpO1xuICAgIHZhciByQlIgPSBnZXRCb3JkZXJSYWRpdXMoc3R5bGUsIFwiYm90dG9tLXJpZ2h0XCIpO1xuXG4gICAgaWYgKHR5cGUgPT0gXCJwYWRkaW5nXCIgfHwgdHlwZSA9PSBcImNvbnRlbnRcIikge1xuICAgICAgICB2YXIgYnQgPSBnZXRCb3JkZXIoc3R5bGUsIFwidG9wXCIpO1xuICAgICAgICB2YXIgYnIgPSBnZXRCb3JkZXIoc3R5bGUsIFwicmlnaHRcIik7XG4gICAgICAgIHZhciBiYiA9IGdldEJvcmRlcihzdHlsZSwgXCJib3R0b21cIik7XG4gICAgICAgIHZhciBibCA9IGdldEJvcmRlcihzdHlsZSwgXCJsZWZ0XCIpO1xuICAgICAgICByVEwueCAtPSBibC53aWR0aDsgclRMLnkgLT0gYnQud2lkdGg7XG4gICAgICAgIHJUUi54IC09IGJyLndpZHRoOyByVFIueSAtPSBidC53aWR0aDtcbiAgICAgICAgckJSLnggLT0gYnIud2lkdGg7IHJCUi55IC09IGJiLndpZHRoO1xuICAgICAgICByQkwueCAtPSBibC53aWR0aDsgckJMLnkgLT0gYmIud2lkdGg7XG4gICAgICAgIGlmICh0eXBlID09IFwiY29udGVudFwiKSB7XG4gICAgICAgICAgICB2YXIgcHQgPSBwYXJzZUZsb2F0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwicGFkZGluZy10b3BcIikpO1xuICAgICAgICAgICAgdmFyIHByID0gcGFyc2VGbG9hdChnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcInBhZGRpbmctcmlnaHRcIikpO1xuICAgICAgICAgICAgdmFyIHBiID0gcGFyc2VGbG9hdChnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcInBhZGRpbmctYm90dG9tXCIpKTtcbiAgICAgICAgICAgIHZhciBwbCA9IHBhcnNlRmxvYXQoZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJwYWRkaW5nLWxlZnRcIikpO1xuICAgICAgICAgICAgclRMLnggLT0gcGw7IHJUTC55IC09IHB0O1xuICAgICAgICAgICAgclRSLnggLT0gcHI7IHJUUi55IC09IHB0O1xuICAgICAgICAgICAgckJSLnggLT0gcHI7IHJCUi55IC09IHBiO1xuICAgICAgICAgICAgckJMLnggLT0gcGw7IHJCTC55IC09IHBiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0eXBlID09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgclRMLnggLT0gdHlwZTsgclRMLnkgLT0gdHlwZTtcbiAgICAgICAgclRSLnggLT0gdHlwZTsgclRSLnkgLT0gdHlwZTtcbiAgICAgICAgckJSLnggLT0gdHlwZTsgckJSLnkgLT0gdHlwZTtcbiAgICAgICAgckJMLnggLT0gdHlwZTsgckJMLnkgLT0gdHlwZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm91bmRCb3goYm94LCByVEwsIHJUUiwgckJSLCByQkwpO1xufVxuXG4vLyBDcmVhdGUgYSBkcmF3aW5nLlBhdGggZm9yIGEgcm91bmRlZCByZWN0YW5nbGUuICBSZWNlaXZlcyB0aGVcbi8vIGJvdW5kaW5nIGJveCBhbmQgdGhlIGJvcmRlci1yYWRpdXNlcyBpbiBDU1Mgb3JkZXIgKHRvcC1sZWZ0LFxuLy8gdG9wLXJpZ2h0LCBib3R0b20tcmlnaHQsIGJvdHRvbS1sZWZ0KS4gIFRoZSByYWRpdXNlcyBtdXN0IGJlXG4vLyBvYmplY3RzIGNvbnRhaW5pbmcgeCAoaG9yaXouIHJhZGl1cykgYW5kIHkgKHZlcnRpY2FsIHJhZGl1cykuXG5mdW5jdGlvbiByb3VuZEJveChib3gsIHJUTDAsIHJUUjAsIHJCUjAsIHJCTDApIHtcbiAgICB2YXIgdG1wID0gYWRqdXN0Qm9yZGVyUmFkaXVzRm9yQm94KGJveCwgclRMMCwgclRSMCwgckJSMCwgckJMMCk7XG4gICAgdmFyIHJUTCA9IHRtcC50bDtcbiAgICB2YXIgclRSID0gdG1wLnRyO1xuICAgIHZhciByQlIgPSB0bXAuYnI7XG4gICAgdmFyIHJCTCA9IHRtcC5ibDtcbiAgICB2YXIgcGF0aCA9IG5ldyBQYXRoKHsgZmlsbDogbnVsbCwgc3Ryb2tlOiBudWxsIH0pO1xuICAgIHBhdGgubW92ZVRvKGJveC5sZWZ0LCBib3gudG9wICsgclRMLnkpO1xuICAgIGlmIChyVEwueCkge1xuICAgICAgICBhZGRBcmNUb1BhdGgocGF0aCwgYm94LmxlZnQgKyByVEwueCwgYm94LnRvcCArIHJUTC55LCB7XG4gICAgICAgICAgICBzdGFydEFuZ2xlOiAtMTgwLFxuICAgICAgICAgICAgZW5kQW5nbGU6IC05MCxcbiAgICAgICAgICAgIHJhZGl1c1g6IHJUTC54LFxuICAgICAgICAgICAgcmFkaXVzWTogclRMLnlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBhdGgubGluZVRvKGJveC5yaWdodCAtIHJUUi54LCBib3gudG9wKTtcbiAgICBpZiAoclRSLngpIHtcbiAgICAgICAgYWRkQXJjVG9QYXRoKHBhdGgsIGJveC5yaWdodCAtIHJUUi54LCBib3gudG9wICsgclRSLnksIHtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IC05MCxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiAwLFxuICAgICAgICAgICAgcmFkaXVzWDogclRSLngsXG4gICAgICAgICAgICByYWRpdXNZOiByVFIueVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcGF0aC5saW5lVG8oYm94LnJpZ2h0LCBib3guYm90dG9tIC0gckJSLnkpO1xuICAgIGlmIChyQlIueCkge1xuICAgICAgICBhZGRBcmNUb1BhdGgocGF0aCwgYm94LnJpZ2h0IC0gckJSLngsIGJveC5ib3R0b20gLSByQlIueSwge1xuICAgICAgICAgICAgc3RhcnRBbmdsZTogMCxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiA5MCxcbiAgICAgICAgICAgIHJhZGl1c1g6IHJCUi54LFxuICAgICAgICAgICAgcmFkaXVzWTogckJSLnlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBhdGgubGluZVRvKGJveC5sZWZ0ICsgckJMLngsIGJveC5ib3R0b20pO1xuICAgIGlmIChyQkwueCkge1xuICAgICAgICBhZGRBcmNUb1BhdGgocGF0aCwgYm94LmxlZnQgKyByQkwueCwgYm94LmJvdHRvbSAtIHJCTC55LCB7XG4gICAgICAgICAgICBzdGFydEFuZ2xlOiA5MCxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiAxODAsXG4gICAgICAgICAgICByYWRpdXNYOiByQkwueCxcbiAgICAgICAgICAgIHJhZGl1c1k6IHJCTC55XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aC5jbG9zZSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRDb3VudGVyKHZhbCwgc3R5bGUpIHtcbiAgICB2YXIgc3RyID0gU3RyaW5nKHBhcnNlRmxvYXQodmFsKSk7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSBcImRlY2ltYWwtbGVhZGluZy16ZXJvXCI6XG4gICAgICAgIGlmIChzdHIubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgc3RyID0gXCIwXCIgKyBzdHI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIGNhc2UgXCJsb3dlci1yb21hblwiOlxuICAgICAgICByZXR1cm4gYXJhYmljVG9Sb21hbih2YWwpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjYXNlIFwidXBwZXItcm9tYW5cIjpcbiAgICAgICAgcmV0dXJuIGFyYWJpY1RvUm9tYW4odmFsKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgY2FzZSBcImxvd2VyLWxhdGluXCI6XG4gICAgICBjYXNlIFwibG93ZXItYWxwaGFcIjpcbiAgICAgICAgcmV0dXJuIGFscGhhTnVtZXJhbCh2YWwgLSAxKTtcbiAgICAgIGNhc2UgXCJ1cHBlci1sYXRpblwiOlxuICAgICAgY2FzZSBcInVwcGVyLWFscGhhXCI6XG4gICAgICAgIHJldHVybiBhbHBoYU51bWVyYWwodmFsIC0gMSkudG9VcHBlckNhc2UoKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBldmFsUHNldWRvRWxlbWVudENvbnRlbnQoZWxlbWVudCwgY29udGVudCkge1xuICAgIGZ1bmN0aW9uIGRpc3BsYXlDb3VudGVyKG5hbWUsIHN0eWxlLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRDb3VudGVyKGdldENvdW50ZXIobmFtZSkgfHwgMCwgc3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIHNlcGFyYXRvciA9IHNlcGFyYXRvci5yZXBsYWNlKC9eXFxzKihbXCInXSkoLiopXFwxXFxzKiQvLCBcIiQyXCIpO1xuICAgICAgICByZXR1cm4gZ2V0QWxsQ291bnRlcnMobmFtZSkubWFwKGZ1bmN0aW9uKHZhbCl7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0Q291bnRlcih2YWwsIHN0eWxlKTtcbiAgICAgICAgfSkuam9pbihzZXBhcmF0b3IpO1xuICAgIH1cbiAgICB2YXIgYSA9IHNwbGl0UHJvcGVydHkoY29udGVudCwgL15cXHMrLyk7XG4gICAgdmFyIHJlc3VsdCA9IFtdLCBtO1xuICAgIGEuZm9yRWFjaChmdW5jdGlvbihlbCl7XG4gICAgICAgIHZhciB0bXA7XG4gICAgICAgIGlmICgobSA9IC9eXFxzKihbXCInXSkoLiopXFwxXFxzKiQvLmV4ZWMoZWwpKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobVsyXS5yZXBsYWNlKC9cXFxcKFswLTlhLWZdezR9KS9naSwgZnVuY3Rpb24ocywgcCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQocCwgMTYpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgobSA9IC9eXFxzKmNvdW50ZXJcXCgoLio/KVxcKVxccyokLy5leGVjKGVsKSkpIHtcbiAgICAgICAgICAgIHRtcCA9IHNwbGl0UHJvcGVydHkobVsxXSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaChkaXNwbGF5Q291bnRlcih0bXBbMF0sIHRtcFsxXSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChtID0gL15cXHMqY291bnRlcnNcXCgoLio/KVxcKVxccyokLy5leGVjKGVsKSkpIHtcbiAgICAgICAgICAgIHRtcCA9IHNwbGl0UHJvcGVydHkobVsxXSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaChkaXNwbGF5Q291bnRlcih0bXBbMF0sIHRtcFsyXSwgdG1wWzFdKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKG0gPSAvXlxccyphdHRyXFwoKC4qPylcXClcXHMqJC8uZXhlYyhlbCkpKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChlbGVtZW50LmdldEF0dHJpYnV0ZShtWzFdKSB8fCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVsKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q3NzVGV4dChzdHlsZSkge1xuICAgIGlmIChzdHlsZS5jc3NUZXh0KSB7XG4gICAgICAgIHJldHVybiBzdHlsZS5jc3NUZXh0O1xuICAgIH1cbiAgICAvLyBTdGF0dXM6IE5FVy4gIFJlcG9ydCB5ZWFyOiAyMDAyLiAgQ3VycmVudCB5ZWFyOiAyMDE0LlxuICAgIC8vIE5pY2UgcGxheWVkLCBNb3ppbGxpYW5zLlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzY4N1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHN0eWxlW2ldICsgXCI6IFwiICsgZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgc3R5bGVbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKFwiO1xcblwiKTtcbn1cblxuZnVuY3Rpb24gX3JlbmRlcldpdGhQc2V1ZG9FbGVtZW50cyhlbGVtZW50LCBncm91cCkge1xuICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT0gS0VORE9fUFNFVURPX0VMRU1FTlQpIHtcbiAgICAgICAgX3JlbmRlckVsZW1lbnQoZWxlbWVudCwgZ3JvdXApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBmYWtlID0gW107XG4gICAgZnVuY3Rpb24gcHNldWRvKGtpbmQsIHBsYWNlKSB7XG4gICAgICAgIGxldCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwga2luZCksIGNvbnRlbnQgPSBzdHlsZS5jb250ZW50O1xuICAgICAgICB1cGRhdGVDb3VudGVycyhzdHlsZSk7XG4gICAgICAgIGlmIChjb250ZW50ICYmIGNvbnRlbnQgIT0gXCJub3JtYWxcIiAmJiBjb250ZW50ICE9IFwibm9uZVwiICYmIHN0eWxlLndpZHRoICE9IFwiMHB4XCIpIHtcbiAgICAgICAgICAgIGxldCBwc2VsID0gZWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoS0VORE9fUFNFVURPX0VMRU1FTlQpO1xuICAgICAgICAgICAgcHNlbC5zdHlsZS5jc3NUZXh0ID0gZ2V0Q3NzVGV4dChzdHlsZSk7XG4gICAgICAgICAgICBwc2VsLnRleHRDb250ZW50ID0gZXZhbFBzZXVkb0VsZW1lbnRDb250ZW50KGVsZW1lbnQsIGNvbnRlbnQpO1xuICAgICAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUocHNlbCwgcGxhY2UpO1xuICAgICAgICAgICAgZmFrZS5wdXNoKHBzZWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBzZXVkbyhcIjpiZWZvcmVcIiwgZWxlbWVudC5maXJzdENoaWxkKTtcbiAgICBwc2V1ZG8oXCI6YWZ0ZXJcIiwgbnVsbCk7XG4gICAgaWYgKGZha2UubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgc2F2ZUNsYXNzID0gZWxlbWVudC5jbGFzc05hbWU7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9IFwiIGtlbmRvLXBkZi1oaWRlLXBzZXVkby1lbGVtZW50c1wiO1xuICAgICAgICBfcmVuZGVyRWxlbWVudChlbGVtZW50LCBncm91cCk7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gc2F2ZUNsYXNzO1xuICAgICAgICBmYWtlLmZvckVhY2goZnVuY3Rpb24oZWwpeyBlbGVtZW50LnJlbW92ZUNoaWxkKGVsKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgX3JlbmRlckVsZW1lbnQoZWxlbWVudCwgZ3JvdXApO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX3JlbmRlckVsZW1lbnQoZWxlbWVudCwgZ3JvdXApIHtcbiAgICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgdmFyIHRvcCA9IGdldEJvcmRlcihzdHlsZSwgXCJ0b3BcIik7XG4gICAgdmFyIHJpZ2h0ID0gZ2V0Qm9yZGVyKHN0eWxlLCBcInJpZ2h0XCIpO1xuICAgIHZhciBib3R0b20gPSBnZXRCb3JkZXIoc3R5bGUsIFwiYm90dG9tXCIpO1xuICAgIHZhciBsZWZ0ID0gZ2V0Qm9yZGVyKHN0eWxlLCBcImxlZnRcIik7XG5cbiAgICB2YXIgclRMMCA9IGdldEJvcmRlclJhZGl1cyhzdHlsZSwgXCJ0b3AtbGVmdFwiKTtcbiAgICB2YXIgclRSMCA9IGdldEJvcmRlclJhZGl1cyhzdHlsZSwgXCJ0b3AtcmlnaHRcIik7XG4gICAgdmFyIHJCTDAgPSBnZXRCb3JkZXJSYWRpdXMoc3R5bGUsIFwiYm90dG9tLWxlZnRcIik7XG4gICAgdmFyIHJCUjAgPSBnZXRCb3JkZXJSYWRpdXMoc3R5bGUsIFwiYm90dG9tLXJpZ2h0XCIpO1xuXG4gICAgdmFyIGRpciA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiZGlyZWN0aW9uXCIpO1xuXG4gICAgdmFyIGJhY2tncm91bmRDb2xvciA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiYmFja2dyb3VuZC1jb2xvclwiKTtcbiAgICBiYWNrZ3JvdW5kQ29sb3IgPSBwYXJzZUNvbG9yKGJhY2tncm91bmRDb2xvcik7XG5cbiAgICB2YXIgYmFja2dyb3VuZEltYWdlID0gcGFyc2VCYWNrZ3JvdW5kSW1hZ2UoIGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiYmFja2dyb3VuZC1pbWFnZVwiKSApO1xuICAgIHZhciBiYWNrZ3JvdW5kUmVwZWF0ID0gc3BsaXRQcm9wZXJ0eSggZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJiYWNrZ3JvdW5kLXJlcGVhdFwiKSApO1xuICAgIHZhciBiYWNrZ3JvdW5kUG9zaXRpb24gPSBzcGxpdFByb3BlcnR5KCBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImJhY2tncm91bmQtcG9zaXRpb25cIikgKTtcbiAgICB2YXIgYmFja2dyb3VuZE9yaWdpbiA9IHNwbGl0UHJvcGVydHkoIGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiYmFja2dyb3VuZC1vcmlnaW5cIikgKTtcbiAgICB2YXIgYmFja2dyb3VuZFNpemUgPSBzcGxpdFByb3BlcnR5KCBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImJhY2tncm91bmQtc2l6ZVwiKSApO1xuXG4gICAgLy8gSUUgc2hyaW5rcyB0aGUgdGV4dCB3aXRoIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzLFxuICAgIC8vIGFwcGFyZW50bHkgYmVjYXVzZSB0aGUgcmV0dXJuZWQgYm91bmRpbmcgYm94IGZvciB0aGUgcmFuZ2VcbiAgICAvLyBpcyBsaW1pdGVkIHRvIHRoZSB2aXNpYmxlIGFyZWEgbWludXMgc3BhY2UgZm9yIHRoZSBkb3RzLFxuICAgIC8vIGluc3RlYWQgb2YgYmVpbmcgdGhlIGZ1bGwgd2lkdGggb2YgdGhlIHRleHQuXG4gICAgLy9cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby9pc3N1ZXMvNTIzMlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLXVpLWNvcmUvaXNzdWVzLzE4NjhcbiAgICAvL1xuICAgIC8vIFdlIGhhdmUgdG8gdGVzdCBpdCBoZXJlIHJhdGhlciB0aGFuIGluIHJlbmRlclRleHQgYmVjYXVzZVxuICAgIC8vIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzIGNvdWxkIGJlIHNldCBvbiBhIHBhcmVudCBlbGVtZW50IChub3RcbiAgICAvLyBuZWNlc3NhcmlseSB0aGUgb25lIGNvbnRhaW5pbmcgdGhlIHRleHQpOyBpbiB0aGlzIGNhc2UsXG4gICAgLy8gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50V2l0aFRoZVRleHQpIHdpbGwgcmV0dXJuIFwiY2xpcFwiLCBub3RcbiAgICAvLyBcImVsbGlwc2lzXCIgKHdoaWNoIGlzIHByb2JhYmx5IGEgYnVnLCBidXQgb2ggd2VsbC4uLilcbiAgICB2YXIgdGV4dE92ZXJmbG93LCBzYXZlVGV4dE92ZXJmbG93O1xuICAgIGlmIChtaWNyb3NvZnQpIHtcbiAgICAgICAgdGV4dE92ZXJmbG93ID0gc3R5bGUudGV4dE92ZXJmbG93OyAgICAgICAgICAgICAvLyBjb21wdXRlZCBzdHlsZVxuICAgICAgICBpZiAodGV4dE92ZXJmbG93ID09IFwiZWxsaXBzaXNcIikge1xuICAgICAgICAgICAgc2F2ZVRleHRPdmVyZmxvdyA9IGVsZW1lbnQuc3R5bGUudGV4dE92ZXJmbG93OyAvLyBvd24gc3R5bGUuXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRleHRPdmVyZmxvdyA9IFwiY2xpcFwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGJyb3dzZXIubXNpZSAmJiBicm93c2VyLnZlcnNpb24gPCAxMCkge1xuICAgICAgICAvLyBJRTkgaGFja3MuICBnZXRQcm9wZXJ0eVZhbHVlIHdvbid0IHJldHVybiB0aGUgY29ycmVjdFxuICAgICAgICAvLyB2YWx1ZS4gIFN1Y2tzIHRoYXQgd2UgaGF2ZSB0byBkbyBpdCBoZXJlLCBJJ2QgcHJlZmVyIHRvXG4gICAgICAgIC8vIG1vdmUgaXQgaW4gZ2V0UHJvcGVydHlWYWx1ZSwgYnV0IHdlIGRvbid0IGhhdmUgdGhlXG4gICAgICAgIC8vIGVsZW1lbnQuXG4gICAgICAgIGJhY2tncm91bmRQb3NpdGlvbiA9IHNwbGl0UHJvcGVydHkoZWxlbWVudC5jdXJyZW50U3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICB2YXIgaW5uZXJib3ggPSBpbm5lckJveChlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBcImJvcmRlci0qLXdpZHRoXCIsIGVsZW1lbnQpO1xuXG4gICAgLy8gQ1NTIFwiY2xpcFwiIHByb3BlcnR5IC0gaWYgcHJlc2VudCwgcmVwbGFjZSB0aGUgZ3JvdXAgd2l0aCBhXG4gICAgLy8gbmV3IG9uZSB3aGljaCBpcyBjbGlwcGVkLiAgVGhpcyBtdXN0IGhhcHBlbiBiZWZvcmUgZHJhd2luZ1xuICAgIC8vIHRoZSBib3JkZXJzIGFuZCBiYWNrZ3JvdW5kLlxuICAgIChmdW5jdGlvbigpe1xuICAgICAgICB2YXIgY2xpcCA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiY2xpcFwiKTtcbiAgICAgICAgdmFyIG0gPSAvXlxccypyZWN0XFwoKC4qKVxcKVxccyokLy5leGVjKGNsaXApO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgdmFyIGEgPSBtWzFdLnNwbGl0KC9bICxdKy9nKTtcbiAgICAgICAgICAgIHZhciB0b3AgPSBhWzBdID09IFwiYXV0b1wiID8gaW5uZXJib3gudG9wIDogcGFyc2VGbG9hdChhWzBdKSArIGlubmVyYm94LnRvcDtcbiAgICAgICAgICAgIHZhciByaWdodCA9IGFbMV0gPT0gXCJhdXRvXCIgPyBpbm5lcmJveC5yaWdodCA6IHBhcnNlRmxvYXQoYVsxXSkgKyBpbm5lcmJveC5sZWZ0O1xuICAgICAgICAgICAgdmFyIGJvdHRvbSA9IGFbMl0gPT0gXCJhdXRvXCIgPyBpbm5lcmJveC5ib3R0b20gOiBwYXJzZUZsb2F0KGFbMl0pICsgaW5uZXJib3gudG9wO1xuICAgICAgICAgICAgdmFyIGxlZnQgPSBhWzNdID09IFwiYXV0b1wiID8gaW5uZXJib3gubGVmdCA6IHBhcnNlRmxvYXQoYVszXSkgKyBpbm5lcmJveC5sZWZ0O1xuICAgICAgICAgICAgdmFyIHRtcCA9IG5ldyBHcm91cCgpO1xuICAgICAgICAgICAgdmFyIGNsaXBQYXRoID0gbmV3IFBhdGgoKVxuICAgICAgICAgICAgICAgIC5tb3ZlVG8obGVmdCwgdG9wKVxuICAgICAgICAgICAgICAgIC5saW5lVG8ocmlnaHQsIHRvcClcbiAgICAgICAgICAgICAgICAubGluZVRvKHJpZ2h0LCBib3R0b20pXG4gICAgICAgICAgICAgICAgLmxpbmVUbyhsZWZ0LCBib3R0b20pXG4gICAgICAgICAgICAgICAgLmNsb3NlKCk7XG4gICAgICAgICAgICBzZXRDbGlwcGluZyh0bXAsIGNsaXBQYXRoKTtcbiAgICAgICAgICAgIGdyb3VwLmFwcGVuZCh0bXApO1xuICAgICAgICAgICAgZ3JvdXAgPSB0bXA7XG4gICAgICAgICAgICB1cGRhdGVDbGlwYm94KGNsaXBQYXRoKTtcbiAgICAgICAgfVxuICAgIH0pKCk7XG5cbiAgICB2YXIgYm94ZXMsIGksIGNlbGxzO1xuICAgIHZhciBkaXNwbGF5ID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJkaXNwbGF5XCIpO1xuXG4gICAgaWYgKGRpc3BsYXkgPT0gXCJ0YWJsZS1yb3dcIikge1xuICAgICAgICAvLyBiZWNhdXNlIG9mIHJvd3NwYW4vY29sc3Bhbiwgd2Ugc2hvdWxkbid0IGRyYXcgYmFja2dyb3VuZCBvZiB0YWJsZSByb3cgZWxlbWVudHMgb24gdGhlXG4gICAgICAgIC8vIGJveCBnaXZlbiBieSBpdHMgZ2V0Qm91bmRpbmdDbGllbnRSZWN0LCBiZWNhdXNlIGlmIHdlIGRvIHdlIHJpc2sgb3ZlcndyaXR0aW5nIGFcbiAgICAgICAgLy8gcHJldmlvdXNseSByZW5kZXJlZCBjZWxsLiAgaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8vaXNzdWVzLzQ4ODFcbiAgICAgICAgYm94ZXMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMCwgY2VsbHMgPSBlbGVtZW50LmNoaWxkcmVuOyBpIDwgY2VsbHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGJveGVzLnB1c2goY2VsbHNbaV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYm94ZXMgPSBlbGVtZW50LmdldENsaWVudFJlY3RzKCk7XG4gICAgICAgIGlmIChib3hlcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCB0aGUgbWlzc2luZyBib3JkZXJzIGluIENocm9tZSEgIGdldENsaWVudFJlY3RzKCkgYm94ZXMgY29udGFpbnMgdmFsdWVzXG4gICAgICAgICAgICAvLyByb3VuZGVkIHRvIGludGVnZXIuICBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBhcHBlYXJzIHRvIHdvcmsgZmluZS4gIFdlIHN0aWxsIG5lZWRcbiAgICAgICAgICAgIC8vIGdldENsaWVudFJlY3RzKCkgdG8gc3VwcG9ydCBjYXNlcyB3aGVyZSB0aGVyZSBhcmUgbW9yZSBib3hlcyAoY29udGludWVkIGlubGluZVxuICAgICAgICAgICAgLy8gZWxlbWVudHMgdGhhdCBtaWdodCBoYXZlIGJvcmRlci9iYWNrZ3JvdW5kKS5cbiAgICAgICAgICAgIGJveGVzID0gWyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdvcmthcm91bmRzIGFub3RoZXIgQ2hyb21lIGJ1Zywgd2hlcmUgYm94ZXMgcmV0dXJuZWQgZm9yIGEgdGFibGUgd2l0aFxuICAgIC8vIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2Ugd2lsbCBvdmVybGFwIHRoZSB0YWJsZSBib3JkZXIuICBPdXIgcmVuZGVyaW5nIGlzIG5vdCBwZXJmZWN0IGluXG4gICAgLy8gc3VjaCBjYXNlIGFueXdheSwgYnV0IHdpdGggdGhpcyBpcyBiZXR0ZXIgdGhhbiB3aXRob3V0IGl0LlxuICAgIGJveGVzID0gYWRqdXN0Qm94ZXMoYm94ZXMpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGJveGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGRyYXdPbmVCb3goYm94ZXNbaV0sIGkgPT09IDAsIGkgPT0gYm94ZXMubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgLy8gUmVuZGVyIGxpbmtzIGFzIHNlcGFyYXRlIGdyb3Vwcy4gIFdlIGNhbid0IHVzZSBib3hlcyByZXR1cm5lZCBieSBlbGVtZW50J3MgZ2V0Q2xpZW50UmVjdHNcbiAgICAvLyBiZWNhdXNlIGlmIGRpc3BsYXkgdHlwZSBpcyBcImlubGluZVwiIChkZWZhdWx0IGZvciA8YT4pLCBib3hlcyB3aWxsIG5vdCBpbmNsdWRlIHRoZSBoZWlnaHQgb2ZcbiAgICAvLyBpbWFnZXMgaW5zaWRlLiAgaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tdWktY29yZS9pc3N1ZXMvMzM1OVxuICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT0gXCJBXCIgJiYgZWxlbWVudC5ocmVmICYmICEvXiM/JC8udGVzdChlbGVtZW50LmdldEF0dHJpYnV0ZShcImhyZWZcIikpKSB7XG4gICAgICAgIGlmICghbm9kZUluZm8uX2F2b2lkTGlua3MgfHwgIW1hdGNoZXMoZWxlbWVudCwgbm9kZUluZm8uX2F2b2lkTGlua3MpKSB7XG4gICAgICAgICAgICBjb25zdCByID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgIHIuc2VsZWN0Tm9kZUNvbnRlbnRzKGVsZW1lbnQpO1xuICAgICAgICAgICAgc2xpY2Uoci5nZXRDbGllbnRSZWN0cygpKS5mb3JFYWNoKGZ1bmN0aW9uKGJveCl7XG4gICAgICAgICAgICAgICAgY29uc3QgZyA9IG5ldyBHcm91cCgpO1xuICAgICAgICAgICAgICAgIGcuX3BkZkxpbmsgPSB7XG4gICAgICAgICAgICAgICAgICAgIHVybCAgICA6IGVsZW1lbnQuaHJlZixcbiAgICAgICAgICAgICAgICAgICAgdG9wICAgIDogYm94LnRvcCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgIDogYm94LnJpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBib3R0b20gOiBib3guYm90dG9tLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgOiBib3gubGVmdFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKGcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYm94ZXMubGVuZ3RoID4gMCAmJiBkaXNwbGF5ID09IFwibGlzdC1pdGVtXCIgJiYgIWVsZW1lbnQuZ2V0QXR0cmlidXRlKFwia2VuZG8tbm8tYnVsbGV0XCIpKSB7XG4gICAgICAgIGRyYXdCdWxsZXQoYm94ZXNbMF0pO1xuICAgIH1cblxuICAgIC8vIG92ZXJmbG93OiBoaWRkZW4vYXV0byAtIGlmIHByZXNlbnQsIHJlcGxhY2UgdGhlIGdyb3VwIHdpdGhcbiAgICAvLyBhIG5ldyBvbmUgY2xpcHBlZCBieSB0aGUgaW5uZXIgYm94LlxuICAgIChmdW5jdGlvbigpe1xuICAgICAgICBmdW5jdGlvbiBjbGlwaXQoKSB7XG4gICAgICAgICAgICB2YXIgY2xpcFBhdGggPSBlbGVtZW50Um91bmRCb3goZWxlbWVudCwgaW5uZXJib3gsIFwicGFkZGluZ1wiKTtcbiAgICAgICAgICAgIHZhciB0bXAgPSBuZXcgR3JvdXAoKTtcbiAgICAgICAgICAgIHNldENsaXBwaW5nKHRtcCwgY2xpcFBhdGgpO1xuICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKHRtcCk7XG4gICAgICAgICAgICBncm91cCA9IHRtcDtcbiAgICAgICAgICAgIHVwZGF0ZUNsaXBib3goY2xpcFBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Zvcm1GaWVsZChlbGVtZW50KSkge1xuICAgICAgICAgICAgY2xpcGl0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoL14oaGlkZGVufGF1dG98c2Nyb2xsKS8udGVzdChnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcIm92ZXJmbG93XCIpKSkge1xuICAgICAgICAgICAgY2xpcGl0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoL14oaGlkZGVufGF1dG98c2Nyb2xsKS8udGVzdChnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcIm92ZXJmbG93LXhcIikpKSB7XG4gICAgICAgICAgICBjbGlwaXQoKTtcbiAgICAgICAgfSBlbHNlIGlmICgvXihoaWRkZW58YXV0b3xzY3JvbGwpLy50ZXN0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwib3ZlcmZsb3cteVwiKSkpIHtcbiAgICAgICAgICAgIGNsaXBpdCgpO1xuICAgICAgICB9XG4gICAgfSkoKTtcblxuICAgIGlmICghbWF5YmVSZW5kZXJXaWRnZXQoZWxlbWVudCwgZ3JvdXApKSB7XG4gICAgICAgIHJlbmRlckNvbnRlbnRzKGVsZW1lbnQsIGdyb3VwKTtcbiAgICB9XG5cbiAgICBpZiAobWljcm9zb2Z0ICYmIHRleHRPdmVyZmxvdyA9PSBcImVsbGlwc2lzXCIpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS50ZXh0T3ZlcmZsb3cgPSBzYXZlVGV4dE92ZXJmbG93O1xuICAgIH1cblxuICAgIHJldHVybiBncm91cDsgLy8gb25seSB1dGlsaXR5IGZ1bmN0aW9ucyBhZnRlciB0aGlzIGxpbmUuXG5cbiAgICBmdW5jdGlvbiBhZGp1c3RCb3hlcyhib3hlcykge1xuICAgICAgICBpZiAoL150ZCQvaS50ZXN0KGVsZW1lbnQudGFnTmFtZSkpIHtcbiAgICAgICAgICAgIHZhciB0YWJsZSA9IG5vZGVJbmZvLnRhYmxlO1xuICAgICAgICAgICAgaWYgKHRhYmxlICYmIGdldFByb3BlcnR5VmFsdWUodGFibGUuc3R5bGUsIFwiYm9yZGVyLWNvbGxhcHNlXCIpID09IFwiY29sbGFwc2VcIikge1xuICAgICAgICAgICAgICAgIHZhciB0YWJsZUJvcmRlckxlZnQgPSBnZXRCb3JkZXIodGFibGUuc3R5bGUsIFwibGVmdFwiKS53aWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgdGFibGVCb3JkZXJUb3AgPSBnZXRCb3JkZXIodGFibGUuc3R5bGUsIFwidG9wXCIpLndpZHRoO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gYWRqdXN0XG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlQm9yZGVyTGVmdCA9PT0gMCAmJiB0YWJsZUJvcmRlclRvcCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYm94ZXM7IC8vIG5vcGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHRhYmxlQm94ID0gdGFibGUuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RDZWxsID0gdGFibGUuZWxlbWVudC5yb3dzWzBdLmNlbGxzWzBdO1xuICAgICAgICAgICAgICAgIHZhciBmaXJzdENlbGxCb3ggPSBmaXJzdENlbGwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0Q2VsbEJveC50b3AgPT0gdGFibGVCb3gudG9wIHx8IGZpcnN0Q2VsbEJveC5sZWZ0ID09IHRhYmxlQm94LmxlZnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsaWNlKGJveGVzKS5tYXAoZnVuY3Rpb24oYm94KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAgIDogYm94LmxlZnQgKyB0YWJsZUJvcmRlckxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wICAgIDogYm94LnRvcCArIHRhYmxlQm9yZGVyVG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0ICA6IGJveC5yaWdodCArIHRhYmxlQm9yZGVyTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3R0b20gOiBib3guYm90dG9tICsgdGFibGVCb3JkZXJUb3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0IDogYm94LmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAgOiBib3gud2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm94ZXM7XG4gICAgfVxuXG4gICAgLy8gdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB0byBkcmF3IGVhY2ggYm9yZGVyLiAgaXRcbiAgICAvLyBkcmF3cyBzdGFydGluZyBhdCBvcmlnaW4gYW5kIHRoZSByZXN1bHRlZCBwYXRoIG11c3QgYmVcbiAgICAvLyB0cmFuc2xhdGVkL3JvdGF0ZWQgdG8gYmUgcGxhY2VkIGluIHRoZSBwcm9wZXIgcG9zaXRpb24uXG4gICAgLy9cbiAgICAvLyBhcmd1bWVudHMgYXJlIG5hbWVkIGFzIGlmIGl0IGRyYXdzIHRoZSB0b3AgYm9yZGVyOlxuICAgIC8vXG4gICAgLy8gICAgLSBgbGVuYCB0aGUgbGVuZ3RoIG9mIHRoZSBlZGdlXG4gICAgLy8gICAgLSBgV3RvcGAgdGhlIHdpZHRoIG9mIHRoZSBlZGdlIChpLmUuIGJvcmRlci10b3Atd2lkdGgpXG4gICAgLy8gICAgLSBgV2xlZnRgIHRoZSB3aWR0aCBvZiB0aGUgbGVmdCBlZGdlIChib3JkZXItbGVmdC13aWR0aClcbiAgICAvLyAgICAtIGBXcmlnaHRgIHRoZSB3aWR0aCBvZiB0aGUgcmlnaHQgZWRnZVxuICAgIC8vICAgIC0gYHJsYCBhbmQgYHJsYCAtLSB0aGUgYm9yZGVyIHJhZGl1cyBvbiB0aGUgbGVmdCBhbmQgcmlnaHRcbiAgICAvLyAgICAgIChvYmplY3RzIGNvbnRhaW5pbmcgeCBhbmQgeSwgZm9yIGhvcml6L3ZlcnRpY2FsIHJhZGl1cylcbiAgICAvLyAgICAtIGB0cmFuc2Zvcm1gIC0tIHRyYW5zZm9ybWF0aW9uIHRvIGFwcGx5XG4gICAgLy9cbiAgICBmdW5jdGlvbiBkcmF3RWRnZShjb2xvciwgbGVuLCBXdG9wLCBXbGVmdCwgV3JpZ2h0LCBybCwgcnIsIHRyYW5zZm9ybSkge1xuICAgICAgICBpZiAoV3RvcCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGF0aCwgZWRnZSA9IG5ldyBHcm91cCgpO1xuICAgICAgICBzZXRUcmFuc2Zvcm0oZWRnZSwgdHJhbnNmb3JtKTtcbiAgICAgICAgZ3JvdXAuYXBwZW5kKGVkZ2UpO1xuXG4gICAgICAgIHNhbml0aXplUmFkaXVzKHJsKTtcbiAgICAgICAgc2FuaXRpemVSYWRpdXMocnIpO1xuXG4gICAgICAgIC8vIGRyYXcgbWFpbiBib3JkZXIuICB0aGlzIGlzIHRoZSBhcmVhIHdpdGhvdXQgdGhlIHJvdW5kZWQgY29ybmVyc1xuICAgICAgICBwYXRoID0gbmV3IFBhdGgoe1xuICAgICAgICAgICAgZmlsbDogeyBjb2xvcjogY29sb3IgfSxcbiAgICAgICAgICAgIHN0cm9rZTogbnVsbFxuICAgICAgICB9KTtcbiAgICAgICAgZWRnZS5hcHBlbmQocGF0aCk7XG4gICAgICAgIHBhdGgubW92ZVRvKHJsLnggPyBNYXRoLm1heChybC54LCBXbGVmdCkgOiAwLCAwKVxuICAgICAgICAgICAgLmxpbmVUbyhsZW4gLSAocnIueCA/IE1hdGgubWF4KHJyLngsIFdyaWdodCkgOiAwKSwgMClcbiAgICAgICAgICAgIC5saW5lVG8obGVuIC0gTWF0aC5tYXgocnIueCwgV3JpZ2h0KSwgV3RvcClcbiAgICAgICAgICAgIC5saW5lVG8oTWF0aC5tYXgocmwueCwgV2xlZnQpLCBXdG9wKVxuICAgICAgICAgICAgLmNsb3NlKCk7XG5cbiAgICAgICAgaWYgKHJsLngpIHtcbiAgICAgICAgICAgIGRyYXdSb3VuZENvcm5lcihXbGVmdCwgcmwsIFsgLTEsIDAsIDAsIDEsIHJsLngsIDAgXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocnIueCkge1xuICAgICAgICAgICAgZHJhd1JvdW5kQ29ybmVyKFdyaWdodCwgcnIsIFsgMSwgMCwgMCwgMSwgbGVuIC0gcnIueCwgMCBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRyYXdzIG9uZSByb3VuZCBjb3JuZXIsIHN0YXJ0aW5nIGF0IG9yaWdpbiAobmVlZHMgdG8gYmVcbiAgICAgICAgLy8gdHJhbnNsYXRlZC9yb3RhdGVkIHRvIGJlIHBsYWNlZCBwcm9wZXJseSkuXG4gICAgICAgIGZ1bmN0aW9uIGRyYXdSb3VuZENvcm5lcihXcmlnaHQsIHIsIHRyYW5zZm9ybSkge1xuICAgICAgICAgICAgdmFyIGFuZ2xlID0gTWF0aC5QSS8yICogV3JpZ2h0IC8gKFdyaWdodCArIFd0b3ApO1xuXG4gICAgICAgICAgICAvLyBub3Qgc2FuaXRpemluZyB0aGlzIG9uZSwgYmVjYXVzZSBuZWdhdGl2ZSB2YWx1ZXNcbiAgICAgICAgICAgIC8vIGFyZSB1c2VmdWwgdG8gZmlsbCB0aGUgYm94IGNvcnJlY3RseS5cbiAgICAgICAgICAgIHZhciByaSA9IHtcbiAgICAgICAgICAgICAgICB4OiByLnggLSBXcmlnaHQsXG4gICAgICAgICAgICAgICAgeTogci55IC0gV3RvcFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHBhdGggPSBuZXcgUGF0aCh7XG4gICAgICAgICAgICAgICAgZmlsbDogeyBjb2xvcjogY29sb3IgfSxcbiAgICAgICAgICAgICAgICBzdHJva2U6IG51bGxcbiAgICAgICAgICAgIH0pLm1vdmVUbygwLCAwKTtcblxuICAgICAgICAgICAgc2V0VHJhbnNmb3JtKHBhdGgsIHRyYW5zZm9ybSk7XG5cbiAgICAgICAgICAgIGFkZEFyY1RvUGF0aChwYXRoLCAwLCByLnksIHtcbiAgICAgICAgICAgICAgICBzdGFydEFuZ2xlOiAtOTAsXG4gICAgICAgICAgICAgICAgZW5kQW5nbGU6IC1yYWRpYW5zVG9EZWdyZWVzKGFuZ2xlKSxcbiAgICAgICAgICAgICAgICByYWRpdXNYOiByLngsXG4gICAgICAgICAgICAgICAgcmFkaXVzWTogci55XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHJpLnggPiAwICYmIHJpLnkgPiAwKSB7XG4gICAgICAgICAgICAgICAgcGF0aC5saW5lVG8ocmkueCAqIE1hdGguY29zKGFuZ2xlKSwgci55IC0gcmkueSAqIE1hdGguc2luKGFuZ2xlKSk7XG4gICAgICAgICAgICAgICAgYWRkQXJjVG9QYXRoKHBhdGgsIDAsIHIueSwge1xuICAgICAgICAgICAgICAgICAgICBzdGFydEFuZ2xlOiAtcmFkaWFuc1RvRGVncmVlcyhhbmdsZSksXG4gICAgICAgICAgICAgICAgICAgIGVuZEFuZ2xlOiAtOTAsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1c1g6IHJpLngsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1c1k6IHJpLnksXG4gICAgICAgICAgICAgICAgICAgIGFudGljbG9ja3dpc2U6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJpLnggPiAwKSB7XG4gICAgICAgICAgICAgICAgcGF0aC5saW5lVG8ocmkueCwgV3RvcClcbiAgICAgICAgICAgICAgICAgICAgLmxpbmVUbygwLCBXdG9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhdGgubGluZVRvKHJpLngsIFd0b3ApXG4gICAgICAgICAgICAgICAgICAgIC5saW5lVG8ocmkueCwgMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVkZ2UuYXBwZW5kKHBhdGguY2xvc2UoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmF3QmFja2dyb3VuZChib3gpIHtcbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSBuZXcgR3JvdXAoKTtcbiAgICAgICAgc2V0Q2xpcHBpbmcoYmFja2dyb3VuZCwgcm91bmRCb3goYm94LCByVEwwLCByVFIwLCByQlIwLCByQkwwKSk7XG4gICAgICAgIGdyb3VwLmFwcGVuZChiYWNrZ3JvdW5kKTtcblxuICAgICAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IG5ldyBQYXRoKHtcbiAgICAgICAgICAgICAgICBmaWxsOiB7IGNvbG9yOiBiYWNrZ3JvdW5kQ29sb3IudG9Dc3NSZ2JhKCkgfSxcbiAgICAgICAgICAgICAgICBzdHJva2U6IG51bGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcGF0aC5tb3ZlVG8oYm94LmxlZnQsIGJveC50b3ApXG4gICAgICAgICAgICAgICAgLmxpbmVUbyhib3gucmlnaHQsIGJveC50b3ApXG4gICAgICAgICAgICAgICAgLmxpbmVUbyhib3gucmlnaHQsIGJveC5ib3R0b20pXG4gICAgICAgICAgICAgICAgLmxpbmVUbyhib3gubGVmdCwgYm94LmJvdHRvbSlcbiAgICAgICAgICAgICAgICAuY2xvc2UoKTtcbiAgICAgICAgICAgIGJhY2tncm91bmQuYXBwZW5kKHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IGJhY2tncm91bmRJbWFnZS5sZW5ndGg7IC0taSA+PSAwOykge1xuICAgICAgICAgICAgZHJhd09uZUJhY2tncm91bmQoXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZCwgYm94LFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZVtpXSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0W2kgJSBiYWNrZ3JvdW5kUmVwZWF0Lmxlbmd0aF0sXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uW2kgJSBiYWNrZ3JvdW5kUG9zaXRpb24ubGVuZ3RoXSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kT3JpZ2luW2kgJSBiYWNrZ3JvdW5kT3JpZ2luLmxlbmd0aF0sXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFNpemVbaSAlIGJhY2tncm91bmRTaXplLmxlbmd0aF1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmF3T25lQmFja2dyb3VuZChncm91cCwgYm94LCBiYWNrZ3JvdW5kLCBiYWNrZ3JvdW5kUmVwZWF0LCBiYWNrZ3JvdW5kUG9zaXRpb24sIGJhY2tncm91bmRPcmlnaW4sIGJhY2tncm91bmRTaXplKSB7XG4gICAgICAgIGlmICghYmFja2dyb3VuZCB8fCAoYmFja2dyb3VuZCA9PSBcIm5vbmVcIikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiYWNrZ3JvdW5kLnR5cGUgPT0gXCJ1cmxcIikge1xuICAgICAgICAgICAgdmFyIGltZyA9IElNQUdFX0NBQ0hFW2JhY2tncm91bmQudXJsXTtcbiAgICAgICAgICAgIGlmIChpbWcgJiYgaW1nLndpZHRoID4gMCAmJiBpbWcuaGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgICAgIGRyYXdCYWNrZ3JvdW5kSW1hZ2UoZ3JvdXAsIGJveCwgaW1nLndpZHRoLCBpbWcuaGVpZ2h0LCBmdW5jdGlvbihncm91cCwgcmVjdCl7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmFwcGVuZChuZXcgSW1hZ2UoYmFja2dyb3VuZC51cmwsIHJlY3QpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChiYWNrZ3JvdW5kLnR5cGUgPT0gXCJsaW5lYXJcIikge1xuICAgICAgICAgICAgZHJhd0JhY2tncm91bmRJbWFnZShncm91cCwgYm94LCBib3gud2lkdGgsIGJveC5oZWlnaHQsIGdyYWRpZW50UmVuZGVyZXIoYmFja2dyb3VuZCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZHJhd0JhY2tncm91bmRJbWFnZShncm91cCwgYm94LCBpbWdfd2lkdGgsIGltZ19oZWlnaHQsIHJlbmRlckJHKSB7XG4gICAgICAgICAgICB2YXIgYXNwZWN0X3JhdGlvID0gaW1nX3dpZHRoIC8gaW1nX2hlaWdodCwgZjtcblxuICAgICAgICAgICAgLy8gZm9yIGJhY2tncm91bmQtb3JpZ2luOiBib3JkZXItYm94IHRoZSBib3ggaXMgYWxyZWFkeSBhcHByb3ByaWF0ZVxuICAgICAgICAgICAgdmFyIG9yZ0JveCA9IGJveDtcbiAgICAgICAgICAgIGlmIChiYWNrZ3JvdW5kT3JpZ2luID09IFwiY29udGVudC1ib3hcIikge1xuICAgICAgICAgICAgICAgIG9yZ0JveCA9IGlubmVyQm94KG9yZ0JveCwgXCJib3JkZXItKi13aWR0aFwiLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBvcmdCb3ggPSBpbm5lckJveChvcmdCb3gsIFwicGFkZGluZy0qXCIsIGVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChiYWNrZ3JvdW5kT3JpZ2luID09IFwicGFkZGluZy1ib3hcIikge1xuICAgICAgICAgICAgICAgIG9yZ0JveCA9IGlubmVyQm94KG9yZ0JveCwgXCJib3JkZXItKi13aWR0aFwiLCBlbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEvXlxccyphdXRvKFxccythdXRvKT9cXHMqJC8udGVzdChiYWNrZ3JvdW5kU2l6ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYmFja2dyb3VuZFNpemUgPT0gXCJjb250YWluXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZiA9IE1hdGgubWluKG9yZ0JveC53aWR0aCAvIGltZ193aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZ0JveC5oZWlnaHQgLyBpbWdfaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgaW1nX3dpZHRoICo9IGY7XG4gICAgICAgICAgICAgICAgICAgIGltZ19oZWlnaHQgKj0gZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYmFja2dyb3VuZFNpemUgPT0gXCJjb3ZlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGYgPSBNYXRoLm1heChvcmdCb3gud2lkdGggLyBpbWdfd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmdCb3guaGVpZ2h0IC8gaW1nX2hlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIGltZ193aWR0aCAqPSBmO1xuICAgICAgICAgICAgICAgICAgICBpbWdfaGVpZ2h0ICo9IGY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IGJhY2tncm91bmRTaXplLnNwbGl0KC9cXHMrL2cpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb21wdXRlIHdpZHRoXG4gICAgICAgICAgICAgICAgICAgIGlmICgvJSQvLnRlc3Qoc2l6ZVswXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZ193aWR0aCA9IG9yZ0JveC53aWR0aCAqIHBhcnNlRmxvYXQoc2l6ZVswXSkgLyAxMDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWdfd2lkdGggPSBwYXJzZUZsb2F0KHNpemVbMF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbXB1dGUgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaXplLmxlbmd0aCA9PSAxIHx8IHNpemVbMV0gPT0gXCJhdXRvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZ19oZWlnaHQgPSBpbWdfd2lkdGggLyBhc3BlY3RfcmF0aW87XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoLyUkLy50ZXN0KHNpemVbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWdfaGVpZ2h0ID0gb3JnQm94LmhlaWdodCAqIHBhcnNlRmxvYXQoc2l6ZVsxXSkgLyAxMDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWdfaGVpZ2h0ID0gcGFyc2VGbG9hdChzaXplWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBvcyA9IFN0cmluZyhiYWNrZ3JvdW5kUG9zaXRpb24pO1xuXG4gICAgICAgICAgICAvLyBJRSBzb21ldGltZXMgcmVwb3J0cyBzaW5nbGUtd29yZCBwb3NpdGlvbnNcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLXVpLWNvcmUvaXNzdWVzLzI3ODZcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBpdCBzZWVtcyB0byBzd2l0Y2ggdG8gcGVyY2VudGFnZXMgd2hlbiB0aGUgaG9yaXpvbnRhbFxuICAgICAgICAgICAgLy8gcG9zaXRpb24gaXMgbm90IFwiY2VudGVyXCIsIHRoZXJlZm9yZSB3ZSBkb24ndCBoYW5kbGVcbiAgICAgICAgICAgIC8vIG11bHRpLXdvcmQgY2FzZXMgaGVyZS4gIEFsbCBvdGhlciBicm93c2VycyByZXR1cm5cbiAgICAgICAgICAgIC8vIHBlcmNlbnRhZ2VzIG9yIHBpeGVscyBpbnN0ZWFkIG9mIGtleXdvcmRzLiAgQXQgbGVhc3RcbiAgICAgICAgICAgIC8vIGZvciBub3cuLi5cbiAgICAgICAgICAgIHN3aXRjaCAocG9zKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJib3R0b21cIiA6IHBvcyA9IFwiNTAlIDEwMCVcIjsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJ0b3BcIiAgICA6IHBvcyA9IFwiNTAlIDBcIjsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJsZWZ0XCIgICA6IHBvcyA9IFwiMCA1MCVcIjsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiICA6IHBvcyA9IFwiMTAwJSA1MCVcIjsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJjZW50ZXJcIiA6IHBvcyA9IFwiNTAlIDUwJVwiOyBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcG9zID0gcG9zLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgICAgICBpZiAocG9zLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgcG9zWzFdID0gXCI1MCVcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKC8lJC8udGVzdChwb3NbMF0pKSB7XG4gICAgICAgICAgICAgICAgcG9zWzBdID0gcGFyc2VGbG9hdChwb3NbMF0pIC8gMTAwICogKG9yZ0JveC53aWR0aCAtIGltZ193aWR0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvc1swXSA9IHBhcnNlRmxvYXQocG9zWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgvJSQvLnRlc3QocG9zWzFdKSkge1xuICAgICAgICAgICAgICAgIHBvc1sxXSA9IHBhcnNlRmxvYXQocG9zWzFdKSAvIDEwMCAqIChvcmdCb3guaGVpZ2h0IC0gaW1nX2hlaWdodCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvc1sxXSA9IHBhcnNlRmxvYXQocG9zWzFdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlY3QgPSBuZXcgZ2VvLlJlY3QoWyBvcmdCb3gubGVmdCArIHBvc1swXSwgb3JnQm94LnRvcCArIHBvc1sxXSBdLCBbIGltZ193aWR0aCwgaW1nX2hlaWdodCBdKTtcblxuICAgICAgICAgICAgLy8gWFhYOiBiYWNrZ3JvdW5kLXJlcGVhdCBjb3VsZCBiZSBpbXBsZW1lbnRlZCBtb3JlXG4gICAgICAgICAgICAvLyAgICAgIGVmZmljaWVudGx5IGFzIGEgZmlsbCBwYXR0ZXJuIChhdCBsZWFzdCBmb3IgUERGXG4gICAgICAgICAgICAvLyAgICAgIG91dHB1dCwgcHJvYmFibHkgU1ZHIHRvbykuXG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJld1goKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlY3Qub3JpZ2luLnggPiBib3gubGVmdCkge1xuICAgICAgICAgICAgICAgICAgICByZWN0Lm9yaWdpbi54IC09IGltZ193aWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJld1koKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlY3Qub3JpZ2luLnkgPiBib3gudG9wKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY3Qub3JpZ2luLnkgLT0gaW1nX2hlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlcGVhdFgoKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlY3Qub3JpZ2luLnggPCBib3gucmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyQkcoZ3JvdXAsIHJlY3QuY2xvbmUoKSk7XG4gICAgICAgICAgICAgICAgICAgIHJlY3Qub3JpZ2luLnggKz0gaW1nX3dpZHRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJhY2tncm91bmRSZXBlYXQgPT0gXCJuby1yZXBlYXRcIikge1xuICAgICAgICAgICAgICAgIHJlbmRlckJHKGdyb3VwLCByZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGJhY2tncm91bmRSZXBlYXQgPT0gXCJyZXBlYXQteFwiKSB7XG4gICAgICAgICAgICAgICAgcmV3WCgpO1xuICAgICAgICAgICAgICAgIHJlcGVhdFgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGJhY2tncm91bmRSZXBlYXQgPT0gXCJyZXBlYXQteVwiKSB7XG4gICAgICAgICAgICAgICAgcmV3WSgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChyZWN0Lm9yaWdpbi55IDwgYm94LmJvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJCRyhncm91cCwgcmVjdC5jbG9uZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgcmVjdC5vcmlnaW4ueSArPSBpbWdfaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGJhY2tncm91bmRSZXBlYXQgPT0gXCJyZXBlYXRcIikge1xuICAgICAgICAgICAgICAgIHJld1goKTtcbiAgICAgICAgICAgICAgICByZXdZKCk7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpbiA9IHJlY3Qub3JpZ2luLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlY3Qub3JpZ2luLnkgPCBib3guYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY3Qub3JpZ2luLnggPSBvcmlnaW4ueDtcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0WCgpO1xuICAgICAgICAgICAgICAgICAgICByZWN0Lm9yaWdpbi55ICs9IGltZ19oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHJhd0J1bGxldCgpIHtcbiAgICAgICAgdmFyIGxpc3RTdHlsZVR5cGUgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImxpc3Qtc3R5bGUtdHlwZVwiKTtcbiAgICAgICAgaWYgKGxpc3RTdHlsZVR5cGUgPT0gXCJub25lXCIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGlzdFN0eWxlUG9zaXRpb24gPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImxpc3Qtc3R5bGUtcG9zaXRpb25cIik7XG5cbiAgICAgICAgZnVuY3Rpb24gX2RyYXdCdWxsZXQoZikge1xuICAgICAgICAgICAgc2F2ZVN0eWxlKGVsZW1lbnQsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgICAgICAgICAgICAgICB2YXIgYnVsbGV0ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoS0VORE9fUFNFVURPX0VMRU1FTlQpO1xuICAgICAgICAgICAgICAgIGJ1bGxldC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICAgICAgICBidWxsZXQuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RTdHlsZVBvc2l0aW9uID09IFwib3V0c2lkZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1bGxldC5zdHlsZS53aWR0aCA9IFwiNmVtXCI7XG4gICAgICAgICAgICAgICAgICAgIGJ1bGxldC5zdHlsZS5sZWZ0ID0gXCItNi44ZW1cIjtcbiAgICAgICAgICAgICAgICAgICAgYnVsbGV0LnN0eWxlLnRleHRBbGlnbiA9IFwicmlnaHRcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBidWxsZXQuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGYoYnVsbGV0KTtcbiAgICAgICAgICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShidWxsZXQsIGVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgcmVuZGVyRWxlbWVudChidWxsZXQsIGdyb3VwKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGJ1bGxldCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGVsZW1lbnRJbmRleChmKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGVsZW1lbnQucGFyZW50Tm9kZS5jaGlsZHJlbjtcbiAgICAgICAgICAgIHZhciBrID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJrZW5kby1zcGxpdC1pbmRleFwiKTtcbiAgICAgICAgICAgIGlmIChrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZihrfDAsIGEubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmIChhW2ldID09PSBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmKGksIGEubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGxpc3RTdHlsZVR5cGUpIHtcbiAgICAgICAgICBjYXNlIFwiY2lyY2xlXCI6XG4gICAgICAgICAgY2FzZSBcImRpc2NcIjpcbiAgICAgICAgICBjYXNlIFwic3F1YXJlXCI6XG4gICAgICAgICAgICBfZHJhd0J1bGxldChmdW5jdGlvbihidWxsZXQpe1xuICAgICAgICAgICAgICAgIC8vIFhYWDogdGhlIHNjaWVuY2UgYmVoaW5kIHRoZXNlIHZhbHVlcyBpcyBjYWxsZWQgXCJ0cmlhbCBhbmQgZXJyb3JcIi5cbiAgICAgICAgICAgICAgICBidWxsZXQuc3R5bGUuZm9udFNpemUgPSBcIjYwJVwiO1xuICAgICAgICAgICAgICAgIGJ1bGxldC5zdHlsZS5saW5lSGVpZ2h0ID0gXCIyMDAlXCI7XG4gICAgICAgICAgICAgICAgYnVsbGV0LnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiMC41ZW1cIjtcbiAgICAgICAgICAgICAgICBidWxsZXQuc3R5bGUuZm9udEZhbWlseSA9IFwiRGVqYVZ1IFNlcmlmXCI7XG4gICAgICAgICAgICAgICAgYnVsbGV0LmlubmVySFRNTCA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJkaXNjXCIgICA6IFwiXFx1MjVjZlwiLFxuICAgICAgICAgICAgICAgICAgICBcImNpcmNsZVwiIDogXCJcXHUyNWVmXCIsXG4gICAgICAgICAgICAgICAgICAgIFwic3F1YXJlXCIgOiBcIlxcdTI1YTBcIlxuICAgICAgICAgICAgICAgIH1bbGlzdFN0eWxlVHlwZV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcImRlY2ltYWxcIjpcbiAgICAgICAgICBjYXNlIFwiZGVjaW1hbC1sZWFkaW5nLXplcm9cIjpcbiAgICAgICAgICAgIF9kcmF3QnVsbGV0KGZ1bmN0aW9uKGJ1bGxldCl7XG4gICAgICAgICAgICAgICAgZWxlbWVudEluZGV4KGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgICAgICAgICAgICsraWR4O1xuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdFN0eWxlVHlwZSA9PSBcImRlY2ltYWwtbGVhZGluZy16ZXJvXCIgJiYgaWR4IDwgMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeCA9IFwiMFwiICsgaWR4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJ1bGxldC5pbm5lckhUTUwgPSBpZHggKyBcIi5cIjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwibG93ZXItcm9tYW5cIjpcbiAgICAgICAgICBjYXNlIFwidXBwZXItcm9tYW5cIjpcbiAgICAgICAgICAgIF9kcmF3QnVsbGV0KGZ1bmN0aW9uKGJ1bGxldCl7XG4gICAgICAgICAgICAgICAgZWxlbWVudEluZGV4KGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgICAgICAgICAgIGlkeCA9IGFyYWJpY1RvUm9tYW4oaWR4ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0U3R5bGVUeXBlID09IFwidXBwZXItcm9tYW5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWR4ID0gaWR4LnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnVsbGV0LmlubmVySFRNTCA9IGlkeCArIFwiLlwiO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJsb3dlci1sYXRpblwiOlxuICAgICAgICAgIGNhc2UgXCJsb3dlci1hbHBoYVwiOlxuICAgICAgICAgIGNhc2UgXCJ1cHBlci1sYXRpblwiOlxuICAgICAgICAgIGNhc2UgXCJ1cHBlci1hbHBoYVwiOlxuICAgICAgICAgICAgX2RyYXdCdWxsZXQoZnVuY3Rpb24oYnVsbGV0KXtcbiAgICAgICAgICAgICAgICBlbGVtZW50SW5kZXgoZnVuY3Rpb24oaWR4KXtcbiAgICAgICAgICAgICAgICAgICAgaWR4ID0gYWxwaGFOdW1lcmFsKGlkeCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgvXnVwcGVyL2kudGVzdChsaXN0U3R5bGVUeXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWR4ID0gaWR4LnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnVsbGV0LmlubmVySFRNTCA9IGlkeCArIFwiLlwiO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRyYXdzIGEgc2luZ2xlIGJvcmRlciBib3hcbiAgICBmdW5jdGlvbiBkcmF3T25lQm94KGJveCwgaXNGaXJzdCwgaXNMYXN0KSB7XG4gICAgICAgIGlmIChib3gud2lkdGggPT09IDAgfHwgYm94LmhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZHJhd0JhY2tncm91bmQoYm94KTtcblxuICAgICAgICB2YXIgc2hvdWxkRHJhd0xlZnQgPSAobGVmdC53aWR0aCA+IDAgJiYgKChpc0ZpcnN0ICYmIGRpciA9PSBcImx0clwiKSB8fCAoaXNMYXN0ICYmIGRpciA9PSBcInJ0bFwiKSkpO1xuICAgICAgICB2YXIgc2hvdWxkRHJhd1JpZ2h0ID0gKHJpZ2h0LndpZHRoID4gMCAmJiAoKGlzTGFzdCAmJiBkaXIgPT0gXCJsdHJcIikgfHwgKGlzRmlyc3QgJiYgZGlyID09IFwicnRsXCIpKSk7XG5cbiAgICAgICAgLy8gVGhlIG1vc3QgZ2VuZXJhbCBjYXNlIGlzIHRoYXQgdGhlIDQgYm9yZGVycyBoYXZlIGRpZmZlcmVudCB3aWR0aHMgYW5kIGJvcmRlclxuICAgICAgICAvLyByYWRpdXNlcy4gIFRoZSB3YXkgdGhhdCBpcyBoYW5kbGVkIGlzIGJ5IGRyYXdpbmcgMyBQYXRocyBmb3IgZWFjaCBib3JkZXI6IHRoZVxuICAgICAgICAvLyBzdHJhaWdodCBsaW5lLCBhbmQgdHdvIHJvdW5kIGNvcm5lcnMgd2hpY2ggcmVwcmVzZW50IGhhbGYgb2YgdGhlIGVudGlyZSByb3VuZGVkXG4gICAgICAgIC8vIGNvcm5lci4gIFRvIHNpbXBsaWZ5IGNvZGUgdGhvc2Ugc2hhcGVzIGFyZSBkcmF3ZWQgYXQgb3JpZ2luIChieSB0aGUgZHJhd0VkZ2VcbiAgICAgICAgLy8gZnVuY3Rpb24pLCB0aGVuIHRyYW5zbGF0ZWQvcm90YXRlZCBpbnRvIHRoZSByaWdodCBwb3NpdGlvbi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSG93ZXZlciwgdGhpcyBsZWFkcyB0byBwb29yIHJlc3VsdHMgZHVlIHRvIHJvdW5kaW5nIGluIHRoZSBzaW1wbGVyIGNhc2VzIHdoZXJlXG4gICAgICAgIC8vIGJvcmRlcnMgYXJlIHN0cmFpZ2h0IGxpbmVzLiAgVGhlcmVmb3JlIHdlIGhhbmRsZSBhIGZldyBzdWNoIGNhc2VzIHNlcGFyYXRlbHkgd2l0aFxuICAgICAgICAvLyBzdHJhaWdodCBsaW5lcy4gQ153Q153Q153IC0tIG5vcGUsIHNjcmF0Y2ggdGhhdC4gIHBvb3IgcmVuZGVyaW5nIHdhcyBiZWNhdXNlIG9mIGEgYnVnXG4gICAgICAgIC8vIGluIENocm9tZSAoZ2V0Q2xpZW50UmVjdHMoKSByZXR1cm5zIHJvdW5kZWQgaW50ZWdlciB2YWx1ZXMgcmF0aGVyIHRoYW4gZXhhY3QgZmxvYXRzLlxuICAgICAgICAvLyB3ZWIgZGV2IGlzIHN0aWxsIGEgZ2hldHRvLilcblxuICAgICAgICAvLyBmaXJzdCwganVzdCBpbiBjYXNlIHRoZXJlIGlzIG5vIGJvcmRlci4uLlxuICAgICAgICBpZiAodG9wLndpZHRoID09PSAwICYmIGxlZnQud2lkdGggPT09IDAgJiYgcmlnaHQud2lkdGggPT09IDAgJiYgYm90dG9tLndpZHRoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTVEFSVCBwYWludCBib3JkZXJzXG4gICAgICAgIC8vIGlmIGFsbCBib3JkZXJzIGhhdmUgZXF1YWwgY29sb3JzLi4uXG4gICAgICAgIGlmICh0b3AuY29sb3IgPT0gcmlnaHQuY29sb3IgJiYgdG9wLmNvbG9yID09IGJvdHRvbS5jb2xvciAmJiB0b3AuY29sb3IgPT0gbGVmdC5jb2xvcikge1xuXG4gICAgICAgICAgICAvLyBpZiBzYW1lIHdpZHRocyB0b28sIHdlIGNhbiBkcmF3IHRoZSB3aG9sZSBib3JkZXIgYnkgc3Ryb2tpbmcgYSBzaW5nbGUgcGF0aC5cbiAgICAgICAgICAgIGlmICh0b3Aud2lkdGggPT0gcmlnaHQud2lkdGggJiYgdG9wLndpZHRoID09IGJvdHRvbS53aWR0aCAmJiB0b3Aud2lkdGggPT0gbGVmdC53aWR0aClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkRHJhd0xlZnQgJiYgc2hvdWxkRHJhd1JpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlZHVjZSBib3ggYnkgaGFsZiB0aGUgYm9yZGVyIHdpZHRoLCBzbyB3ZSBjYW4gZHJhdyBpdCBieSBzdHJva2luZy5cbiAgICAgICAgICAgICAgICAgICAgYm94ID0gaW5uZXJCb3goYm94LCB0b3Aud2lkdGgvMik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYWRqdXN0IHRoZSBib3JkZXIgcmFkaXVzZXMsIGFnYWluIGJ5IHRvcC53aWR0aC8yLCBhbmQgbWFrZSB0aGUgcGF0aCBlbGVtZW50LlxuICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IGVsZW1lbnRSb3VuZEJveChlbGVtZW50LCBib3gsIHRvcC53aWR0aC8yKTtcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5vcHRpb25zLnN0cm9rZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0b3AuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdG9wLndpZHRoXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmFwcGVuZChwYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIGJvcmRlciByYWRpdXNlcyBhcmUgemVybyBhbmQgd2lkdGhzIGFyZSBhdCBtb3N0IG9uZSBwaXhlbCwgd2UgY2FuIGFnYWluIHVzZSBzaW1wbGVcbiAgICAgICAgLy8gcGF0aHMuXG4gICAgICAgIGlmIChyVEwwLnggPT09IDAgJiYgclRSMC54ID09PSAwICYmIHJCUjAueCA9PT0gMCAmJiByQkwwLnggPT09IDApIHtcbiAgICAgICAgICAgIC8vIGFscmlnaHQsIDEuOXB4IHdpbGwgZG8gYXMgd2VsbC4gIHRoZSBkaWZmZXJlbmNlIGluIGNvbG9yIGJsZW5kaW5nIHNob3VsZCBub3QgYmVcbiAgICAgICAgICAgIC8vIG5vdGljZWFibGUuXG4gICAgICAgICAgICBpZiAodG9wLndpZHRoIDwgMiAmJiBsZWZ0LndpZHRoIDwgMiAmJiByaWdodC53aWR0aCA8IDIgJiYgYm90dG9tLndpZHRoIDwgMikge1xuICAgICAgICAgICAgICAgIC8vIHRvcCBib3JkZXJcbiAgICAgICAgICAgICAgICBpZiAodG9wLndpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBncm91cC5hcHBlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUGF0aCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7IHdpZHRoOiB0b3Aud2lkdGgsIGNvbG9yOiB0b3AuY29sb3IgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubW92ZVRvKGJveC5sZWZ0LCBib3gudG9wICsgdG9wLndpZHRoLzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmxpbmVUbyhib3gucmlnaHQsIGJveC50b3AgKyB0b3Aud2lkdGgvMilcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBib3R0b20gYm9yZGVyXG4gICAgICAgICAgICAgICAgaWYgKGJvdHRvbS53aWR0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBhdGgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogeyB3aWR0aDogYm90dG9tLndpZHRoLCBjb2xvcjogYm90dG9tLmNvbG9yIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1vdmVUbyhib3gubGVmdCwgYm94LmJvdHRvbSAtIGJvdHRvbS53aWR0aC8yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5saW5lVG8oYm94LnJpZ2h0LCBib3guYm90dG9tIC0gYm90dG9tLndpZHRoLzIpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gbGVmdCBib3JkZXJcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkRHJhd0xlZnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBhdGgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogeyB3aWR0aDogbGVmdC53aWR0aCwgY29sb3I6IGxlZnQuY29sb3IgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubW92ZVRvKGJveC5sZWZ0ICsgbGVmdC53aWR0aC8yLCBib3gudG9wKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5saW5lVG8oYm94LmxlZnQgKyBsZWZ0LndpZHRoLzIsIGJveC5ib3R0b20pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcmlnaHQgYm9yZGVyXG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZERyYXdSaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBncm91cC5hcHBlbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUGF0aCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7IHdpZHRoOiByaWdodC53aWR0aCwgY29sb3I6IHJpZ2h0LmNvbG9yIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1vdmVUbyhib3gucmlnaHQgLSByaWdodC53aWR0aC8yLCBib3gudG9wKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5saW5lVG8oYm94LnJpZ2h0IC0gcmlnaHQud2lkdGgvMiwgYm94LmJvdHRvbSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRU5EIHBhaW50IGJvcmRlcnNcblxuICAgICAgICB2YXIgdG1wID0gYWRqdXN0Qm9yZGVyUmFkaXVzRm9yQm94KGJveCwgclRMMCwgclRSMCwgckJSMCwgckJMMCk7XG4gICAgICAgIHZhciByVEwgPSB0bXAudGw7XG4gICAgICAgIHZhciByVFIgPSB0bXAudHI7XG4gICAgICAgIHZhciByQlIgPSB0bXAuYnI7XG4gICAgICAgIHZhciByQkwgPSB0bXAuYmw7XG5cbiAgICAgICAgLy8gdG9wIGJvcmRlclxuICAgICAgICBkcmF3RWRnZSh0b3AuY29sb3IsXG4gICAgICAgICAgICAgICAgIGJveC53aWR0aCwgdG9wLndpZHRoLCBsZWZ0LndpZHRoLCByaWdodC53aWR0aCxcbiAgICAgICAgICAgICAgICAgclRMLCByVFIsXG4gICAgICAgICAgICAgICAgIFsgMSwgMCwgMCwgMSwgYm94LmxlZnQsIGJveC50b3AgXSk7XG5cbiAgICAgICAgLy8gYm90dG9tIGJvcmRlclxuICAgICAgICBkcmF3RWRnZShib3R0b20uY29sb3IsXG4gICAgICAgICAgICAgICAgIGJveC53aWR0aCwgYm90dG9tLndpZHRoLCByaWdodC53aWR0aCwgbGVmdC53aWR0aCxcbiAgICAgICAgICAgICAgICAgckJSLCByQkwsXG4gICAgICAgICAgICAgICAgIFsgLTEsIDAsIDAsIC0xLCBib3gucmlnaHQsIGJveC5ib3R0b20gXSk7XG5cbiAgICAgICAgLy8gZm9yIGxlZnQvcmlnaHQgYm9yZGVycyB3ZSBuZWVkIHRvIGludmVydCB0aGUgYm9yZGVyLXJhZGl1c2VzXG4gICAgICAgIGZ1bmN0aW9uIGludihwKSB7XG4gICAgICAgICAgICByZXR1cm4geyB4OiBwLnksIHk6IHAueCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbGVmdCBib3JkZXJcbiAgICAgICAgZHJhd0VkZ2UobGVmdC5jb2xvcixcbiAgICAgICAgICAgICAgICAgYm94LmhlaWdodCwgbGVmdC53aWR0aCwgYm90dG9tLndpZHRoLCB0b3Aud2lkdGgsXG4gICAgICAgICAgICAgICAgIGludihyQkwpLCBpbnYoclRMKSxcbiAgICAgICAgICAgICAgICAgWyAwLCAtMSwgMSwgMCwgYm94LmxlZnQsIGJveC5ib3R0b20gXSk7XG5cbiAgICAgICAgLy8gcmlnaHQgYm9yZGVyXG4gICAgICAgIGRyYXdFZGdlKHJpZ2h0LmNvbG9yLFxuICAgICAgICAgICAgICAgICBib3guaGVpZ2h0LCByaWdodC53aWR0aCwgdG9wLndpZHRoLCBib3R0b20ud2lkdGgsXG4gICAgICAgICAgICAgICAgIGludihyVFIpLCBpbnYockJSKSxcbiAgICAgICAgICAgICAgICAgWyAwLCAxLCAtMSwgMCwgYm94LnJpZ2h0LCBib3gudG9wIF0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ3JhZGllbnRSZW5kZXJlcihncmFkaWVudCkge1xuICAgIHJldHVybiBmdW5jdGlvbihncm91cCwgcmVjdCkge1xuICAgICAgICB2YXIgd2lkdGggPSByZWN0LndpZHRoKCksIGhlaWdodCA9IHJlY3QuaGVpZ2h0KCk7XG5cbiAgICAgICAgc3dpdGNoIChncmFkaWVudC50eXBlKSB7XG4gICAgICAgICAgY2FzZSBcImxpbmVhclwiOlxuXG4gICAgICAgICAgICAvLyBmaWd1cmUgb3V0IHRoZSBhbmdsZS5cbiAgICAgICAgICAgIHZhciBhbmdsZSA9IGdyYWRpZW50LmFuZ2xlICE9IG51bGwgPyBncmFkaWVudC5hbmdsZSA6IE1hdGguUEk7XG4gICAgICAgICAgICBzd2l0Y2ggKGdyYWRpZW50LnRvKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJ0b3BcIjpcbiAgICAgICAgICAgICAgICBhbmdsZSA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICAgICAgICAgICAgYW5nbGUgPSAtTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJib3R0b21cIjpcbiAgICAgICAgICAgICAgICBhbmdsZSA9IE1hdGguUEk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgICAgICAgICAgIGFuZ2xlID0gTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJ0b3AgbGVmdFwiOiBjYXNlIFwibGVmdCB0b3BcIjpcbiAgICAgICAgICAgICAgICBhbmdsZSA9IC1NYXRoLmF0YW4yKGhlaWdodCwgd2lkdGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwidG9wIHJpZ2h0XCI6IGNhc2UgXCJyaWdodCB0b3BcIjpcbiAgICAgICAgICAgICAgICBhbmdsZSA9IE1hdGguYXRhbjIoaGVpZ2h0LCB3aWR0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJib3R0b20gbGVmdFwiOiBjYXNlIFwibGVmdCBib3R0b21cIjpcbiAgICAgICAgICAgICAgICBhbmdsZSA9IE1hdGguUEkgKyBNYXRoLmF0YW4yKGhlaWdodCwgd2lkdGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiYm90dG9tIHJpZ2h0XCI6IGNhc2UgXCJyaWdodCBib3R0b21cIjpcbiAgICAgICAgICAgICAgICBhbmdsZSA9IE1hdGguUEkgLSBNYXRoLmF0YW4yKGhlaWdodCwgd2lkdGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZ3JhZGllbnQucmV2ZXJzZSkge1xuICAgICAgICAgICAgICAgIGFuZ2xlIC09IE1hdGguUEk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGxpbWl0IHRoZSBhbmdsZSBiZXR3ZWVuIDAuLjJQSVxuICAgICAgICAgICAgYW5nbGUgJT0gMiAqIE1hdGguUEk7XG4gICAgICAgICAgICBpZiAoYW5nbGUgPCAwKSB7XG4gICAgICAgICAgICAgICAgYW5nbGUgKz0gMiAqIE1hdGguUEk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNvbXB1dGUgZ3JhZGllbnQncyBzdGFydC9lbmQgcG9pbnRzLiAgaGVyZSBsZW4gaXMgdGhlIGxlbmd0aCBvZiB0aGUgZ3JhZGllbnQgbGluZVxuICAgICAgICAgICAgLy8gYW5kIHgseSBpcyB0aGUgZW5kIHBvaW50IHJlbGF0aXZlIHRvIHRoZSBjZW50ZXIgb2YgdGhlIHJlY3RhbmdsZSBpbiBjb252ZW50aW9uYWxcbiAgICAgICAgICAgIC8vIChtYXRoKSBheGlzIGRpcmVjdGlvbi5cblxuICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgb3JpZ2luYWwgKHVuc2NhbGVkKSBsZW5ndGggb2YgdGhlIGdyYWRpZW50IGxpbmUuICBuZWVkZWQgdG8gZGVhbCB3aXRoXG4gICAgICAgICAgICAvLyBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQgY29sb3Igc3RvcHMuICBmb3JtdWxhIGZyb20gdGhlIENTUyBzcGVjOlxuICAgICAgICAgICAgLy8gaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3NzLWltYWdlcy0zLyNsaW5lYXItZ3JhZGllbnQtc3ludGF4XG4gICAgICAgICAgICB2YXIgcHhsZW4gPSBNYXRoLmFicyh3aWR0aCAqIE1hdGguc2luKGFuZ2xlKSkgKyBNYXRoLmFicyhoZWlnaHQgKiBNYXRoLmNvcyhhbmdsZSkpO1xuXG4gICAgICAgICAgICAvLyBUaGUgbWF0aCBiZWxvdyBpcyBwcmV0dHkgc2ltcGxlLCBidXQgaXQgdG9vayBhIHdoaWxlIHRvIGZpZ3VyZSBvdXQuICBXZSBjb21wdXRlIHhcbiAgICAgICAgICAgIC8vIGFuZCB5LCB0aGUgKmVuZCogb2YgdGhlIGdyYWRpZW50IGxpbmUuICBIb3dldmVyLCB3ZSB3YW50IHRvIHRyYW5zZm9ybSB0aGVtIGludG9cbiAgICAgICAgICAgIC8vIGVsZW1lbnQtYmFzZWQgY29vcmRpbmF0ZXMgKFNWRydzIGdyYWRpZW50VW5pdHM9XCJvYmplY3RCb3VuZGluZ0JveFwiKS4gIFRoYXQgbWVhbnMsXG4gICAgICAgICAgICAvLyB4PTAgaXMgdGhlIGxlZnQgZWRnZSwgeD0xIGlzIHRoZSByaWdodCBlZGdlLCB5PTAgaXMgdGhlIHRvcCBlZGdlIGFuZCB5PTEgaXMgdGhlXG4gICAgICAgICAgICAvLyBib3R0b20gZWRnZS5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBBIG5haXZlIGFwcHJvYWNoIHdvdWxkIHVzZSB0aGUgb3JpZ2luYWwgYW5nbGUgZm9yIHRoZXNlIGNhbGN1bGF0aW9ucy4gIFNheSB3ZSdkXG4gICAgICAgICAgICAvLyBsaWtlIHRvIGRyYXcgYSBncmFkaWVudCBhbmdsZWQgYXQgNDVkZWcgaW4gYSAxMDB4NDAwIGJveC4gIFdoZW4gd2UgdXNlXG4gICAgICAgICAgICAvLyBvYmplY3RCb3VuZGluZ0JveCwgdGhlIHJlbmRlcmVyIHdpbGwgZHJhdyBpdCBpbiBhIDF4MSAqc3F1YXJlKiBib3gsIGFuZCB0aGVuXG4gICAgICAgICAgICAvLyBzY2FsZSB0aGF0IHRvIHRoZSBkZXNpcmVkIGRpbWVuc2lvbnMuICBUaGUgNDVkZWcgYW5nbGUgd2lsbCBsb29rIG1vcmUgbGlrZSA3MGRlZ1xuICAgICAgICAgICAgLy8gYWZ0ZXIgc2NhbGluZy4gIFNWRyAoaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3BzZXJ2ZXJzLmh0bWwjTGluZWFyR3JhZGllbnRzKSBzYXlzXG4gICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nOlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgICBXaGVuIGdyYWRpZW50VW5pdHM9XCJvYmplY3RCb3VuZGluZ0JveFwiIGFuZCAnZ3JhZGllbnRUcmFuc2Zvcm0nIGlzIHRoZVxuICAgICAgICAgICAgLy8gICAgIGlkZW50aXR5IG1hdHJpeCwgdGhlIG5vcm1hbCBvZiB0aGUgbGluZWFyIGdyYWRpZW50IGlzIHBlcnBlbmRpY3VsYXIgdG8gdGhlXG4gICAgICAgICAgICAvLyAgICAgZ3JhZGllbnQgdmVjdG9yIGluIG9iamVjdCBib3VuZGluZyBib3ggc3BhY2UgKGkuZS4sIHRoZSBhYnN0cmFjdCBjb29yZGluYXRlXG4gICAgICAgICAgICAvLyAgICAgc3lzdGVtIHdoZXJlICgwLDApIGlzIGF0IHRoZSB0b3AvbGVmdCBvZiB0aGUgb2JqZWN0IGJvdW5kaW5nIGJveCBhbmQgKDEsMSkgaXNcbiAgICAgICAgICAgIC8vICAgICBhdCB0aGUgYm90dG9tL3JpZ2h0IG9mIHRoZSBvYmplY3QgYm91bmRpbmcgYm94KS4gV2hlbiB0aGUgb2JqZWN0J3MgYm91bmRpbmdcbiAgICAgICAgICAgIC8vICAgICBib3ggaXMgbm90IHNxdWFyZSwgdGhlIGdyYWRpZW50IG5vcm1hbCB3aGljaCBpcyBpbml0aWFsbHkgcGVycGVuZGljdWxhciB0b1xuICAgICAgICAgICAgLy8gICAgIHRoZSBncmFkaWVudCB2ZWN0b3Igd2l0aGluIG9iamVjdCBib3VuZGluZyBib3ggc3BhY2UgbWF5IHJlbmRlclxuICAgICAgICAgICAgLy8gICAgIG5vbi1wZXJwZW5kaWN1bGFyIHJlbGF0aXZlIHRvIHRoZSBncmFkaWVudCB2ZWN0b3IgaW4gdXNlciBzcGFjZS4gSWYgdGhlXG4gICAgICAgICAgICAvLyAgICAgZ3JhZGllbnQgdmVjdG9yIGlzIHBhcmFsbGVsIHRvIG9uZSBvZiB0aGUgYXhlcyBvZiB0aGUgYm91bmRpbmcgYm94LCB0aGVcbiAgICAgICAgICAgIC8vICAgICBncmFkaWVudCBub3JtYWwgd2lsbCByZW1haW4gcGVycGVuZGljdWxhci4gVGhpcyB0cmFuc2Zvcm1hdGlvbiBpcyBkdWUgdG9cbiAgICAgICAgICAgIC8vICAgICBhcHBsaWNhdGlvbiBvZiB0aGUgbm9uLXVuaWZvcm0gc2NhbGluZyB0cmFuc2Zvcm1hdGlvbiBmcm9tIGJvdW5kaW5nIGJveCBzcGFjZVxuICAgICAgICAgICAgLy8gICAgIHRvIHVzZXIgc3BhY2UuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gd2hpY2ggaXMgYW4gZXh0cmVtZWx5IGxvbmcgYW5kIGNvbmZ1c2luZyB3YXkgdG8gdGVsbCB3aGF0IEkganVzdCBzYWlkIGFib3ZlLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEZvciB0aGlzIHJlYXNvbiB3ZSBuZWVkIHRvIGFwcGx5IHRoZSByZXZlcnNlIHNjYWxpbmcgdG8gdGhlIG9yaWdpbmFsIGFuZ2xlLCBzb1xuICAgICAgICAgICAgLy8gdGhhdCB3aGVuIGl0J2xsIGZpbmFsbHkgYmUgcmVuZGVyZWQgaXQnbGwgYWN0dWFsbHkgYmUgYXQgdGhlIGRlc2lyZWQgc2xvcGUuICBOb3dcbiAgICAgICAgICAgIC8vIEknbGwgbGV0IHlvdSBmaWd1cmUgb3V0IHRoZSBtYXRoIHlvdXJzZWxmLlxuXG4gICAgICAgICAgICB2YXIgc2NhbGVkQW5nbGUgPSBNYXRoLmF0YW4od2lkdGggKiBNYXRoLnRhbihhbmdsZSkgLyBoZWlnaHQpO1xuICAgICAgICAgICAgdmFyIHNpbiA9IE1hdGguc2luKHNjYWxlZEFuZ2xlKSwgY29zID0gTWF0aC5jb3Moc2NhbGVkQW5nbGUpO1xuICAgICAgICAgICAgdmFyIGxlbiA9IE1hdGguYWJzKHNpbikgKyBNYXRoLmFicyhjb3MpO1xuICAgICAgICAgICAgdmFyIHggPSBsZW4vMiAqIHNpbjtcbiAgICAgICAgICAgIHZhciB5ID0gbGVuLzIgKiBjb3M7XG5cbiAgICAgICAgICAgIC8vIEJlY2F1c2Ugb2YgdGhlIGFyY3RhbmdlbnQsIG91ciBzY2FsZWRBbmdsZSBlbmRzIHVwIGJldHdlZW4gLVBJLzIuLlBJLzIsIHBvc3NpYmx5XG4gICAgICAgICAgICAvLyBsb3NpbmcgdGhlIGludGVuZGVkIGRpcmVjdGlvbiBvZiB0aGUgZ3JhZGllbnQuICBUaGUgZm9sbG93aW5nIGZpeGVzIGl0LlxuICAgICAgICAgICAgaWYgKGFuZ2xlID4gTWF0aC5QSS8yICYmIGFuZ2xlIDw9IDMqTWF0aC5QSS8yKSB7XG4gICAgICAgICAgICAgICAgeCA9IC14O1xuICAgICAgICAgICAgICAgIHkgPSAteTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY29tcHV0ZSB0aGUgY29sb3Igc3RvcHMuXG4gICAgICAgICAgICB2YXIgaW1wbGljaXQgPSBbXSwgcmlnaHQgPSAwO1xuICAgICAgICAgICAgdmFyIHN0b3BzID0gZ3JhZGllbnQuc3RvcHMubWFwKGZ1bmN0aW9uKHMsIGkpe1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBzLnBlcmNlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBwYXJzZUZsb2F0KG9mZnNldCkgLyAxMDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBwYXJzZUZsb2F0KHMubGVuZ3RoKSAvIHB4bGVuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PSBncmFkaWVudC5zdG9wcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBzdG9wID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogcy5jb2xvci50b0Nzc1JnYmEoKSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByaWdodCA9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgLy8gZml4IGltcGxpY2l0IG9mZnNldHNcbiAgICAgICAgICAgICAgICAgICAgaW1wbGljaXQuZm9yRWFjaChmdW5jdGlvbihzLCBpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdG9wID0gcy5zdG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcC5vZmZzZXQgPSBzLmxlZnQgKyAocmlnaHQgLSBzLmxlZnQpICogKGkgKyAxKSAvIChpbXBsaWNpdC5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGltcGxpY2l0ID0gW107XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW1wbGljaXQucHVzaCh7IGxlZnQ6IHJpZ2h0LCBzdG9wOiBzdG9wIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RvcDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBbIDAuNSAtIHgsIDAuNSArIHkgXTtcbiAgICAgICAgICAgIHZhciBlbmQgPSBbIDAuNSArIHgsIDAuNSAtIHkgXTtcblxuICAgICAgICAgICAgLy8gZmluYWxseSwgZHJhdyBpdC5cbiAgICAgICAgICAgIGdyb3VwLmFwcGVuZChcbiAgICAgICAgICAgICAgICBQYXRoLmZyb21SZWN0KHJlY3QpXG4gICAgICAgICAgICAgICAgICAgIC5zdHJva2UobnVsbClcbiAgICAgICAgICAgICAgICAgICAgLmZpbGwobmV3IExpbmVhckdyYWRpZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ICAgICA6IHN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kICAgICAgIDogZW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcHMgICAgIDogc3RvcHMsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyU3BhY2UgOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwicmFkaWFsXCI6XG4gICAgICAgICAgICAvLyBYWFg6XG4gICAgICAgICAgICBpZiAod2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUubG9nKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmNvbnNvbGUubG9nKFwiUmFkaWFsIGdyYWRpZW50cyBhcmUgbm90IHlldCBzdXBwb3J0ZWQgaW4gSFRNTCByZW5kZXJlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gbWF5YmVSZW5kZXJXaWRnZXQoZWxlbWVudCwgZ3JvdXApIHtcbiAgICB2YXIgdmlzdWFsO1xuXG4gICAgaWYgKGVsZW1lbnQuX2tlbmRvRXhwb3J0VmlzdWFsKSB7XG4gICAgICAgIHZpc3VhbCA9IGVsZW1lbnQuX2tlbmRvRXhwb3J0VmlzdWFsKCk7XG4gICAgfSBlbHNlIGlmICh3aW5kb3cua2VuZG8gJiYgd2luZG93LmtlbmRvLmpRdWVyeSAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSh3aW5kb3cua2VuZG8uYXR0cihcInJvbGVcIikpKSB7XG4gICAgICAgIHZhciB3aWRnZXQgPSB3aW5kb3cua2VuZG8ud2lkZ2V0SW5zdGFuY2Uod2luZG93LmtlbmRvLmpRdWVyeShlbGVtZW50KSk7XG4gICAgICAgIGlmICh3aWRnZXQgJiYgKHdpZGdldC5leHBvcnRET01WaXN1YWwgfHwgd2lkZ2V0LmV4cG9ydFZpc3VhbCkpIHtcbiAgICAgICAgICAgIGlmICh3aWRnZXQuZXhwb3J0RE9NVmlzdWFsKSB7XG4gICAgICAgICAgICAgICAgdmlzdWFsID0gd2lkZ2V0LmV4cG9ydERPTVZpc3VhbCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2aXN1YWwgPSB3aWRnZXQuZXhwb3J0VmlzdWFsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXZpc3VhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHdyYXAgPSBuZXcgR3JvdXAoKTtcbiAgICB3cmFwLmNoaWxkcmVuLnB1c2godmlzdWFsKTtcblxuICAgIHZhciBiYm94ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB3cmFwLnRyYW5zZm9ybShnZW8udHJhbnNmb3JtKCkudHJhbnNsYXRlKGJib3gubGVmdCwgYmJveC50b3ApKTtcblxuICAgIGdyb3VwLmFwcGVuZCh3cmFwKTtcblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZW5kZXJJbWFnZShlbGVtZW50LCB1cmwsIGdyb3VwKSB7XG4gICAgdmFyIGJveCA9IGdldENvbnRlbnRCb3goZWxlbWVudCk7XG4gICAgdmFyIHJlY3QgPSBuZXcgZ2VvLlJlY3QoWyBib3gubGVmdCwgYm94LnRvcCBdLCBbIGJveC53aWR0aCwgYm94LmhlaWdodCBdKTtcbiAgICB2YXIgaW1hZ2UgPSBuZXcgSW1hZ2UodXJsLCByZWN0KTtcbiAgICBzZXRDbGlwcGluZyhpbWFnZSwgZWxlbWVudFJvdW5kQm94KGVsZW1lbnQsIGJveCwgXCJjb250ZW50XCIpKTtcbiAgICBncm91cC5hcHBlbmQoaW1hZ2UpO1xufVxuXG5mdW5jdGlvbiB6SW5kZXhTb3J0KGEsIGIpIHtcbiAgICB2YXIgc2EgPSBnZXRDb21wdXRlZFN0eWxlKGEpO1xuICAgIHZhciBzYiA9IGdldENvbXB1dGVkU3R5bGUoYik7XG4gICAgdmFyIHphID0gcGFyc2VGbG9hdChnZXRQcm9wZXJ0eVZhbHVlKHNhLCBcInotaW5kZXhcIikpO1xuICAgIHZhciB6YiA9IHBhcnNlRmxvYXQoZ2V0UHJvcGVydHlWYWx1ZShzYiwgXCJ6LWluZGV4XCIpKTtcbiAgICB2YXIgcGEgPSBnZXRQcm9wZXJ0eVZhbHVlKHNhLCBcInBvc2l0aW9uXCIpO1xuICAgIHZhciBwYiA9IGdldFByb3BlcnR5VmFsdWUoc2IsIFwicG9zaXRpb25cIik7XG4gICAgaWYgKGlzTmFOKHphKSAmJiBpc05hTih6YikpIHtcbiAgICAgICAgaWYgKCgvc3RhdGljfGFic29sdXRlLy50ZXN0KHBhKSkgJiYgKC9zdGF0aWN8YWJzb2x1dGUvLnRlc3QocGIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhID09IFwic3RhdGljXCIpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGIgPT0gXCJzdGF0aWNcIikge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmIChpc05hTih6YSkpIHtcbiAgICAgICAgcmV0dXJuIHpiID09PSAwID8gMCA6IHpiID4gMCA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKGlzTmFOKHpiKSkge1xuICAgICAgICByZXR1cm4gemEgPT09IDAgPyAwIDogemEgPiAwID8gMSA6IC0xO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VGbG9hdCh6YSkgLSBwYXJzZUZsb2F0KHpiKTtcbn1cblxuZnVuY3Rpb24gaXNGb3JtRmllbGQoZWxlbWVudCkge1xuICAgIHJldHVybiAvXig/OnRleHRhcmVhfHNlbGVjdHxpbnB1dCkkL2kudGVzdChlbGVtZW50LnRhZ05hbWUpO1xufVxuXG5mdW5jdGlvbiBnZXRTZWxlY3RlZE9wdGlvbihlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQuc2VsZWN0ZWRPcHRpb25zICYmIGVsZW1lbnQuc2VsZWN0ZWRPcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuc2VsZWN0ZWRPcHRpb25zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudC5vcHRpb25zW2VsZW1lbnQuc2VsZWN0ZWRJbmRleF07XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNoZWNrYm94KGVsZW1lbnQsIGdyb3VwKSB7XG4gICAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICB2YXIgY29sb3IgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImNvbG9yXCIpO1xuICAgIHZhciBib3ggPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChlbGVtZW50LnR5cGUgPT0gXCJjaGVja2JveFwiKSB7XG4gICAgICAgIGdyb3VwLmFwcGVuZChcbiAgICAgICAgICAgIFBhdGguZnJvbVJlY3QoXG4gICAgICAgICAgICAgICAgbmV3IGdlby5SZWN0KFsgYm94LmxlZnQrMSwgYm94LnRvcCsxIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgYm94LndpZHRoLTIsIGJveC5oZWlnaHQtMiBdKVxuICAgICAgICAgICAgKS5zdHJva2UoY29sb3IsIDEpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChlbGVtZW50LmNoZWNrZWQpIHtcbiAgICAgICAgICAgIC8vIGZpbGwgYSByZWN0YW5nbGUgaW5zaWRlPyAgbG9va3Mga2luZGEgdWdseS5cbiAgICAgICAgICAgIC8vIGdyb3VwLmFwcGVuZChcbiAgICAgICAgICAgIC8vICAgICBQYXRoLmZyb21SZWN0KFxuICAgICAgICAgICAgLy8gICAgICAgICBuZXcgZ2VvLlJlY3QoWyBib3gubGVmdCs0LCBib3gudG9wKzQgXSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIFsgYm94LndpZHRoLTgsIGJveC5oZWlnaHQtOF0pXG4gICAgICAgICAgICAvLyAgICAgKS5maWxsKGNvbG9yKS5zdHJva2UobnVsbClcbiAgICAgICAgICAgIC8vICk7XG5cbiAgICAgICAgICAgIC8vIGxldCdzIGRyYXcgYSBjaGVja21hcmsgaW5zdGVhZC4gIGFydGlzdGljLCBlaD9cbiAgICAgICAgICAgIGdyb3VwLmFwcGVuZChcbiAgICAgICAgICAgICAgICBuZXcgUGF0aCgpXG4gICAgICAgICAgICAgICAgICAgIC5zdHJva2UoY29sb3IsIDEuMilcbiAgICAgICAgICAgICAgICAgICAgLm1vdmVUbyhib3gubGVmdCArIDAuMjIgKiBib3gud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LnRvcCArIDAuNTUgKiBib3guaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAubGluZVRvKGJveC5sZWZ0ICsgMC40NSAqIGJveC53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gudG9wICsgMC43NSAqIGJveC5oZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgIC5saW5lVG8oYm94LmxlZnQgKyAwLjc4ICogYm94LndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC50b3AgKyAwLjIyICogYm94LndpZHRoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGdyb3VwLmFwcGVuZChcbiAgICAgICAgICAgIG5ldyBDaXJjbGUoXG4gICAgICAgICAgICAgICAgbmV3IGdlby5DaXJjbGUoW1xuICAgICAgICAgICAgICAgICAgICAoYm94LmxlZnQgKyBib3gucmlnaHQpIC8gMixcbiAgICAgICAgICAgICAgICAgICAgKGJveC50b3AgKyBib3guYm90dG9tKSAvIDJcbiAgICAgICAgICAgICAgICBdLCBNYXRoLm1pbihib3gud2lkdGgtMiwgYm94LmhlaWdodC0yKSAvIDIpXG4gICAgICAgICAgICApLnN0cm9rZShjb2xvciwgMSlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGVsZW1lbnQuY2hlY2tlZCkge1xuICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKFxuICAgICAgICAgICAgICAgIG5ldyBDaXJjbGUoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBnZW8uQ2lyY2xlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIChib3gubGVmdCArIGJveC5yaWdodCkgLyAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGJveC50b3AgKyBib3guYm90dG9tKSAvIDJcbiAgICAgICAgICAgICAgICAgICAgXSwgTWF0aC5taW4oYm94LndpZHRoLTgsIGJveC5oZWlnaHQtOCkgLyAyKVxuICAgICAgICAgICAgICAgICkuZmlsbChjb2xvcikuc3Ryb2tlKG51bGwpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJGb3JtRmllbGQoZWxlbWVudCwgZ3JvdXApIHtcbiAgICB2YXIgdGFnID0gZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHRhZyA9PSBcImlucHV0XCIgJiYgKGVsZW1lbnQudHlwZSA9PSBcImNoZWNrYm94XCIgfHwgZWxlbWVudC50eXBlID09IFwicmFkaW9cIikpIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlckNoZWNrYm94KGVsZW1lbnQsIGdyb3VwKTtcbiAgICB9XG4gICAgdmFyIHAgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgdmFyIGRvYyA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgICB2YXIgZWwgPSBkb2MuY3JlYXRlRWxlbWVudChLRU5ET19QU0VVRE9fRUxFTUVOVCk7XG4gICAgdmFyIG9wdGlvbjtcbiAgICBlbC5zdHlsZS5jc3NUZXh0ID0gZ2V0Q3NzVGV4dChnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpKTtcbiAgICBpZiAodGFnID09IFwiaW5wdXRcIikge1xuICAgICAgICBlbC5zdHlsZS53aGl0ZVNwYWNlID0gXCJwcmVcIjtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBcInNlbGVjdFwiIHx8IHRhZyA9PSBcInRleHRhcmVhXCIpIHtcbiAgICAgICAgZWwuc3R5bGUub3ZlcmZsb3cgPSBcImF1dG9cIjtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBcInNlbGVjdFwiKSB7XG4gICAgICAgIGlmIChlbGVtZW50Lm11bHRpcGxlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQub3B0aW9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbiA9IGRvYy5jcmVhdGVFbGVtZW50KEtFTkRPX1BTRVVET19FTEVNRU5UKTtcbiAgICAgICAgICAgICAgICBvcHRpb24uc3R5bGUuY3NzVGV4dCA9IGdldENzc1RleHQoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50Lm9wdGlvbnNbaV0pKTtcbiAgICAgICAgICAgICAgICBvcHRpb24uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjsgLy8gSUU5IG1lc3NlcyB1cCB3aXRob3V0IHRoaXNcbiAgICAgICAgICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBlbGVtZW50Lm9wdGlvbnNbaV0udGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbiA9IGdldFNlbGVjdGVkT3B0aW9uKGVsZW1lbnQpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbikge1xuICAgICAgICAgICAgICAgIGVsLnRleHRDb250ZW50ID0gb3B0aW9uLnRleHRDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWwudGV4dENvbnRlbnQgPSBlbGVtZW50LnZhbHVlO1xuICAgIH1cbiAgICBwLmluc2VydEJlZm9yZShlbCwgZWxlbWVudCk7XG4gICAgZWwuc2Nyb2xsTGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICBlbC5zY3JvbGxUb3AgPSBlbGVtZW50LnNjcm9sbFRvcDtcblxuICAgIC8vIG11c3QgdGVtcG9yYXJpbHkgaGlkZSB0aGUgb3JpZ2luYWwgZWxlbWVudCwgb3RoZXJ3aXNlIGl0XG4gICAgLy8gbWF5IGFmZmVjdCBsYXlvdXQgb2YgdGhlIGZha2UgZWxlbWVudCB3ZSB3YW50IHRvIHJlbmRlci5cbiAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgIHJlbmRlckNvbnRlbnRzKGVsLCBncm91cCk7XG4gICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcbiAgICBwLnJlbW92ZUNoaWxkKGVsKTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplU1ZHKGVsZW1lbnQpIHtcbiAgICBjb25zdCBzZXJpYWxpemVyID0gbmV3IHdpbmRvdy5YTUxTZXJpYWxpemVyKCk7XG4gICAgbGV0IHhtbCA9IHNlcmlhbGl6ZXIuc2VyaWFsaXplVG9TdHJpbmcoZWxlbWVudCk7XG5cbiAgICBpZiAoYnJvd3Nlci5tb3ppbGxhICYmICEoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKSAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZShcImhlaWdodFwiKSkpIHtcbiAgICAgICAgY29uc3QgZG9jID0gbmV3IHdpbmRvdy5ET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoeG1sLCBcImltYWdlL3N2Zyt4bWxcIik7XG4gICAgICAgIGNvbnN0IHN2ZyA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGJveCA9IGdldENvbnRlbnRCb3goZWxlbWVudCk7XG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBib3gud2lkdGgpO1xuICAgICAgICBzdmcuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIGJveC5oZWlnaHQpO1xuICAgICAgICB4bWwgPSBzZXJpYWxpemVyLnNlcmlhbGl6ZVRvU3RyaW5nKHN2Zyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHhtbDtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQ29udGVudHMoZWxlbWVudCwgZ3JvdXApIHtcbiAgICBpZiAobm9kZUluZm8uX3N0YWNraW5nQ29udGV4dC5lbGVtZW50ID09PSBlbGVtZW50KSB7XG4gICAgICAgIC8vIHRoZSBncm91cCB0aGF0IHdhcyBzZXQgaW4gcHVzaE5vZGVJbmZvIG1pZ2h0IGhhdmVcbiAgICAgICAgLy8gY2hhbmdlZCBkdWUgdG8gY2xpcHBpbmcvdHJhbnNmb3JtcywgdXBkYXRlIGl0IGhlcmUuXG4gICAgICAgIG5vZGVJbmZvLl9zdGFja2luZ0NvbnRleHQuZ3JvdXAgPSBncm91cDtcbiAgICB9XG4gICAgc3dpdGNoIChlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgY2FzZSBcImltZ1wiOlxuICAgICAgICByZW5kZXJJbWFnZShlbGVtZW50LCBlbGVtZW50LnNyYywgZ3JvdXApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInN2Z1wiOlxuICAgICAgICBsZXQgeG1sID0gc2VyaWFsaXplU1ZHKGVsZW1lbnQpO1xuICAgICAgICBsZXQgZGF0YVVSTCA9IGBkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCR7ZW5jb2RlQmFzZTY0KHhtbCl9YDtcbiAgICAgICAgcmVuZGVySW1hZ2UoZWxlbWVudCwgZGF0YVVSTCwgZ3JvdXApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcImNhbnZhc1wiOlxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVuZGVySW1hZ2UoZWxlbWVudCwgZWxlbWVudC50b0RhdGFVUkwoXCJpbWFnZS9wbmdcIiksIGdyb3VwKTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIC8vIHRhaW50ZWQ7IGNhbid0IGRyYXcgaXQsIGlnbm9yZS5cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgcmVuZGVyRm9ybUZpZWxkKGVsZW1lbnQsIGdyb3VwKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IFtdLCBmbG9hdHMgPSBbXSwgcG9zaXRpb25lZCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gZWxlbWVudC5maXJzdENoaWxkOyBpOyBpID0gaS5uZXh0U2libGluZykge1xuICAgICAgICAgICAgc3dpdGNoIChpLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgMzogICAgICAgICAvLyBUZXh0XG4gICAgICAgICAgICAgICAgaWYgKC9cXFMvLnRlc3QoaS5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJUZXh0KGVsZW1lbnQsIGksIGdyb3VwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTogICAgICAgICAvLyBFbGVtZW50XG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShpKTtcbiAgICAgICAgICAgICAgICB2YXIgZmxvYXRpbmcgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImZsb2F0XCIpO1xuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwicG9zaXRpb25cIik7XG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uICE9IFwic3RhdGljXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25lZC5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChmbG9hdGluZyAhPSBcIm5vbmVcIikge1xuICAgICAgICAgICAgICAgICAgICBmbG9hdHMucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG1lcmdlU29ydChjaGlsZHJlbiwgekluZGV4U29ydCkuZm9yRWFjaChmdW5jdGlvbihlbCl7IHJlbmRlckVsZW1lbnQoZWwsIGdyb3VwKTsgfSk7XG4gICAgICAgIG1lcmdlU29ydChmbG9hdHMsIHpJbmRleFNvcnQpLmZvckVhY2goZnVuY3Rpb24oZWwpeyByZW5kZXJFbGVtZW50KGVsLCBncm91cCk7IH0pO1xuICAgICAgICBtZXJnZVNvcnQocG9zaXRpb25lZCwgekluZGV4U29ydCkuZm9yRWFjaChmdW5jdGlvbihlbCl7IHJlbmRlckVsZW1lbnQoZWwsIGdyb3VwKTsgfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJUZXh0KGVsZW1lbnQsIG5vZGUsIGdyb3VwKSB7XG4gICAgaWYgKGVtcHR5Q2xpcGJveCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcblxuICAgIGlmIChwYXJzZUZsb2F0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwidGV4dC1pbmRlbnRcIikpIDwgLTUwMCkge1xuICAgICAgICAvLyBhc3N1bWUgaXQgc2hvdWxkIG5vdCBiZSBkaXNwbGF5ZWQuICB0aGUgc2xpZGVyJ3NcbiAgICAgICAgLy8gZHJhZ2dhYmxlIGhhbmRsZSBkaXNwbGF5cyBhIERyYWcgdGV4dCBmb3Igc29tZSByZWFzb24sXG4gICAgICAgIC8vIGhhdmluZyB0ZXh0LWluZGVudDogLTMzMzNweC5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0ZXh0ID0gbm9kZS5kYXRhO1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgdmFyIGVuZCA9IHRleHQuc2VhcmNoKC9cXFNcXHMqJC8pICsgMTtcblxuICAgIGlmICghZW5kKSB7XG4gICAgICAgIHJldHVybjsgLy8gd2hpdGVzcGFjZS1vbmx5IG5vZGVcbiAgICB9XG5cbiAgICB2YXIgZm9udFNpemUgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImZvbnQtc2l6ZVwiKTtcbiAgICB2YXIgbGluZUhlaWdodCA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwibGluZS1oZWlnaHRcIik7XG5cbiAgICAvLyBzaW1wbHkgZ2V0UHJvcGVydHlWYWx1ZShcImZvbnRcIikgZG9lc24ndCB3b3JrIGluIEZpcmVmb3ggOi1cXFxuICAgIHZhciBmb250ID0gW1xuICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImZvbnQtc3R5bGVcIiksXG4gICAgICAgIGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiZm9udC12YXJpYW50XCIpLFxuICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImZvbnQtd2VpZ2h0XCIpLFxuICAgICAgICBmb250U2l6ZSwgLy8gbm8gbmVlZCBmb3IgbGluZSBoZWlnaHQgaGVyZTsgaXQgYnJlYWtzIGxheW91dCBpbiBGRlxuICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImZvbnQtZmFtaWx5XCIpXG4gICAgXS5qb2luKFwiIFwiKTtcblxuICAgIGZvbnRTaXplID0gcGFyc2VGbG9hdChmb250U2l6ZSk7XG4gICAgbGluZUhlaWdodCA9IHBhcnNlRmxvYXQobGluZUhlaWdodCk7XG5cbiAgICBpZiAoZm9udFNpemUgPT09IDAgfHwgaXNOYU4oZm9udFNpemUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY29sb3IgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImNvbG9yXCIpO1xuICAgIHZhciByYW5nZSA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHZhciBhbGlnbiA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwidGV4dC1hbGlnblwiKTtcbiAgICB2YXIgaXNKdXN0aWZpZWQgPSBhbGlnbiA9PSBcImp1c3RpZnlcIjtcbiAgICB2YXIgY29sdW1uQ291bnQgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImNvbHVtbi1jb3VudFwiLCAxKTtcbiAgICB2YXIgd2hpdGVTcGFjZSA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwid2hpdGUtc3BhY2VcIik7XG4gICAgdmFyIHRleHRUcmFuc2Zvcm0gPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcInRleHQtdHJhbnNmb3JtXCIpO1xuXG4gICAgLy8gQSBsaW5lIG9mIDUwMHB4LCB3aXRoIGEgZm9udCBvZiAxMnB4LCBjb250YWlucyBhbiBhdmVyYWdlIG9mIDgwIGNoYXJhY3RlcnMsIGJ1dCBzaW5jZSB3ZVxuICAgIC8vIGVyciwgd2UnZCBsaWtlIHRvIGd1ZXNzIGEgYmlnZ2VyIG51bWJlciByYXRoZXIgdGhhbiBhIHNtYWxsZXIgb25lLiAgTXVsdGlwbHlpbmcgYnkgNVxuICAgIC8vIHNlZW1zIHRvIGJlIGEgZ29vZCBvcHRpb24uXG4gICAgdmFyIGVzdGltYXRlTGluZUxlbmd0aCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLyBmb250U2l6ZSAqIDU7XG4gICAgaWYgKGVzdGltYXRlTGluZUxlbmd0aCA9PT0gMCkge1xuICAgICAgICBlc3RpbWF0ZUxpbmVMZW5ndGggPSA1MDA7XG4gICAgfVxuXG4gICAgLy8gd2UnbGwgbWFpbnRhaW4gdGhpcyBzbyB3ZSBjYW4gd29ya2Fyb3VuZCBidWdzIGluIENocm9tZSdzIFJhbmdlLmdldENsaWVudFJlY3RzXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8vaXNzdWVzLzU3NDBcbiAgICB2YXIgcHJldkxpbmVCb3R0b20gPSBudWxsO1xuXG4gICAgdmFyIHVuZGVybGluZSA9IG5vZGVJbmZvW1widW5kZXJsaW5lXCJdO1xuICAgIHZhciBsaW5lVGhyb3VnaCA9IG5vZGVJbmZvW1wibGluZS10aHJvdWdoXCJdO1xuICAgIHZhciBvdmVybGluZSA9IG5vZGVJbmZvW1wib3ZlcmxpbmVcIl07XG4gICAgdmFyIHVuZGVybGluZU9mZnNldCA9IG5vZGVJbmZvW1widW5kZXJsaW5lLW9mZnNldFwiXTtcblxuICAgIGlmICh1bmRlcmxpbmUpIHtcbiAgICAgICAgZm9yRWFjaFJlY3QoZGVjb3JhdGVVbmRlcik7XG4gICAgfVxuXG4gICAgLy8gZG9DaHVuayByZXR1cm5zIHRydWUgd2hlbiBhbGwgdGV4dCBoYXMgYmVlbiByZW5kZXJlZFxuICAgIHdoaWxlICghZG9DaHVuaygpKSB7fVxuXG4gICAgaWYgKGxpbmVUaHJvdWdoIHx8IG92ZXJsaW5lKSB7XG4gICAgICAgIGZvckVhY2hSZWN0KGRlY29yYXRlT3Zlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuOyAgICAgICAgICAgICAgICAgLy8gb25seSBmdW5jdGlvbiBkZWNsYXJhdGlvbnMgYWZ0ZXIgdGhpcyBsaW5lXG5cbiAgICBmdW5jdGlvbiBmb3JFYWNoUmVjdChjYWxsYmFjaykge1xuICAgICAgICByYW5nZS5zZWxlY3ROb2RlKG5vZGUpO1xuICAgICAgICBsZXQgY2xpZW50UmVjdHMgPSBzbGljZShyYW5nZS5nZXRDbGllbnRSZWN0cygpKTtcblxuICAgICAgICBmb3JFYWNoUmVjdCA9IChjYikgPT4gY2xpZW50UmVjdHMuZm9yRWFjaChjYik7XG4gICAgICAgIGZvckVhY2hSZWN0KGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhY3R1YWxseUdldFJhbmdlQm91bmRpbmdSZWN0KHJhbmdlKSB7XG4gICAgICAgIC8vIFhYWDogdG8gYmUgcmV2aXNlZCB3aGVuIHRoaXMgQ2hyb21lIGJ1ZyBpcyBmaXhlZDpcbiAgICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NjEyNDU5XG4gICAgICAgIGlmIChtaWNyb3NvZnQgfHwgYnJvd3Nlci5jaHJvbWUgfHwgYnJvd3Nlci5zYWZhcmkpIHtcbiAgICAgICAgICAgIC8vIFdvcmthcm91bmQgYnJvd3NlciBidWdzOiBJRSBhbmQgQ2hyb21lIHdvdWxkIHNvbWV0aW1lc1xuICAgICAgICAgICAgLy8gcmV0dXJuIDAgb3IgMS13aWR0aCByZWN0YW5nbGVzIGJlZm9yZSBvciBhZnRlciB0aGUgbWFpblxuICAgICAgICAgICAgLy8gb25lLiAgaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8vaXNzdWVzLzQ2NzRcblxuICAgICAgICAgICAgLy8gQWN0dWFsbHkgQ2hyb21lIDUwIGdvdCB3b3JzZSwgc2luY2UgdGhlIHJlY3RhbmdsZXMgY2FuIG5vdyBoYXZlIHRoZSB3aWR0aCBvZiBhXG4gICAgICAgICAgICAvLyBmdWxsIGNoYXJhY3RlciwgbWFraW5nIGl0IGhhcmQgdG8gdGVsbCB3aGV0aGVyIGl0J3MgYSBib2d1cyByZWN0YW5nbGUgb3IgdmFsaWRcbiAgICAgICAgICAgIC8vIHNlbGVjdGlvbiBsb2NhdGlvbi4gIFRoZSB3b3JrYXJvdW5kIGlzIHRvIGlnbm9yZSByZWN0YW5nbGVzIHRoYXQgZmFsbCBvbiB0aGVcbiAgICAgICAgICAgIC8vIHByZXZpb3VzIGxpbmUuICBodHRwczovL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby9pc3N1ZXMvNTc0MFxuICAgICAgICAgICAgdmFyIHJlY3RhbmdsZXMgPSByYW5nZS5nZXRDbGllbnRSZWN0cygpLCBib3ggPSB7XG4gICAgICAgICAgICAgICAgdG9wICAgIDogIEluZmluaXR5LFxuICAgICAgICAgICAgICAgIHJpZ2h0ICA6IC1JbmZpbml0eSxcbiAgICAgICAgICAgICAgICBib3R0b20gOiAtSW5maW5pdHksXG4gICAgICAgICAgICAgICAgbGVmdCAgIDogIEluZmluaXR5XG4gICAgICAgICAgICB9LCBkb25lID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlY3RhbmdsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgYiA9IHJlY3RhbmdsZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGIud2lkdGggPD0gMSB8fCBiLmJvdHRvbSA9PT0gcHJldkxpbmVCb3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7ICAgLy8gYm9ndXMgcmVjdGFuZ2xlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJveC5sZWZ0ICAgPSBNYXRoLm1pbihiLmxlZnQgICAsIGJveC5sZWZ0KTtcbiAgICAgICAgICAgICAgICBib3gudG9wICAgID0gTWF0aC5taW4oYi50b3AgICAgLCBib3gudG9wKTtcbiAgICAgICAgICAgICAgICBib3gucmlnaHQgID0gTWF0aC5tYXgoYi5yaWdodCAgLCBib3gucmlnaHQpO1xuICAgICAgICAgICAgICAgIGJveC5ib3R0b20gPSBNYXRoLm1heChiLmJvdHRvbSAsIGJveC5ib3R0b20pO1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYm94LndpZHRoID0gYm94LnJpZ2h0IC0gYm94LmxlZnQ7XG4gICAgICAgICAgICBib3guaGVpZ2h0ID0gYm94LmJvdHRvbSAtIGJveC50b3A7XG4gICAgICAgICAgICByZXR1cm4gYm94O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByYW5nZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG5cbiAgICAvLyBSZW5kZXIgYSBjaHVuayBvZiB0ZXh0LCB0eXBpY2FsbHkgb25lIGxpbmUgKGJ1dCBmb3IganVzdGlmaWVkIHRleHQgd2UgcmVuZGVyIGVhY2ggd29yZCBhc1xuICAgIC8vIGEgc2VwYXJhdGUgVGV4dCBvYmplY3QsIGJlY2F1c2Ugc3BhY2luZyBpcyB2YXJpYWJsZSkuICBSZXR1cm5zIHRydWUgd2hlbiBpdCBmaW5pc2hlZCB0aGVcbiAgICAvLyBjdXJyZW50IG5vZGUuICBBZnRlciBlYWNoIGNodW5rIGl0IHVwZGF0ZXMgYHN0YXJ0YCB0byBqdXN0IGFmdGVyIHRoZSBsYXN0IHJlbmRlcmVkXG4gICAgLy8gY2hhcmFjdGVyLlxuICAgIGZ1bmN0aW9uIGRvQ2h1bmsoKSB7XG4gICAgICAgIHZhciBvcmlnU3RhcnQgPSBzdGFydDtcbiAgICAgICAgdmFyIGJveCwgcG9zID0gdGV4dC5zdWJzdHIoc3RhcnQpLnNlYXJjaCgvXFxTLyk7XG4gICAgICAgIHN0YXJ0ICs9IHBvcztcbiAgICAgICAgaWYgKHBvcyA8IDAgfHwgc3RhcnQgPj0gZW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlbGVjdCBhIHNpbmdsZSBjaGFyYWN0ZXIgdG8gZGV0ZXJtaW5lIHRoZSBoZWlnaHQgb2YgYSBsaW5lIG9mIHRleHQuICBUaGUgYm94LmJvdHRvbVxuICAgICAgICAvLyB3aWxsIGJlIGVzc2VudGlhbCBmb3IgdXMgdG8gZmlndXJlIG91dCB3aGVyZSB0aGUgbmV4dCBsaW5lIGJlZ2lucy5cbiAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgc3RhcnQpO1xuICAgICAgICByYW5nZS5zZXRFbmQobm9kZSwgc3RhcnQgKyAxKTtcbiAgICAgICAgYm94ID0gYWN0dWFsbHlHZXRSYW5nZUJvdW5kaW5nUmVjdChyYW5nZSk7XG5cbiAgICAgICAgLy8gZm9yIGp1c3RpZmllZCB0ZXh0IHdlIG11c3Qgc3BsaXQgYXQgZWFjaCBzcGFjZSwgYmVjYXVzZSBzcGFjZSBoYXMgdmFyaWFibGUgd2lkdGguXG4gICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgICAgICBpZiAoaXNKdXN0aWZpZWQgfHwgY29sdW1uQ291bnQgPiAxKSB7XG4gICAgICAgICAgICBwb3MgPSB0ZXh0LnN1YnN0cihzdGFydCkuc2VhcmNoKC9cXHMvKTtcbiAgICAgICAgICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgICAgICAgICAgIC8vIHdlIGNhbiBvbmx5IHNwbGl0IHRoZXJlIGlmIGl0J3Mgb24gdGhlIHNhbWUgbGluZSwgb3RoZXJ3aXNlIHdlJ2xsIGZhbGwgYmFja1xuICAgICAgICAgICAgICAgIC8vIHRvIHRoZSBkZWZhdWx0IG1lY2hhbmlzbSAoc2VlIGZpbmRFT0wgYmVsb3cpLlxuICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZChub2RlLCBzdGFydCArIHBvcyk7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSBhY3R1YWxseUdldFJhbmdlQm91bmRpbmdSZWN0KHJhbmdlKTtcbiAgICAgICAgICAgICAgICBpZiAoci5ib3R0b20gPT0gYm94LmJvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICBib3ggPSByO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ICs9IHBvcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGNvZGUgZG9lcyB0aHJlZSB0aGluZ3M6ICgxKSBpdCBzZWxlY3RzIG9uZSBsaW5lIG9mIHRleHQgaW4gYHJhbmdlYCwgKDIpIGl0XG4gICAgICAgICAgICAvLyBsZWF2ZXMgdGhlIGJvdW5kaW5nIHJlY3Qgb2YgdGhhdCBsaW5lIGluIGBib3hgIGFuZCAoMykgaXQgcmV0dXJucyB0aGUgcG9zaXRpb25cbiAgICAgICAgICAgIC8vIGp1c3QgYWZ0ZXIgdGhlIEVPTC4gIFdlIGtub3cgd2hlcmUgdGhlIGxpbmUgc3RhcnRzIChgc3RhcnRgKSBidXQgd2UgZG9uJ3Qga25vd1xuICAgICAgICAgICAgLy8gd2hlcmUgaXQgZW5kcy4gIFRvIGZpZ3VyZSB0aGlzIG91dCwgd2Ugc2VsZWN0IGEgcGllY2Ugb2YgdGV4dCBhbmQgbG9vayBhdCB0aGVcbiAgICAgICAgICAgIC8vIGJvdHRvbSBvZiB0aGUgYm91bmRpbmcgYm94LiAgSWYgaXQgY2hhbmdlcywgd2UgaGF2ZSBtb3JlIHRoYW4gb25lIGxpbmUgc2VsZWN0ZWRcbiAgICAgICAgICAgIC8vIGFuZCBzaG91bGQgcmV0cnkgd2l0aCBhIHNtYWxsZXIgc2VsZWN0aW9uLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFRvIHNwZWVkIHRoaW5ncyB1cCwgd2UgZmlyc3QgdHJ5IHRvIHNlbGVjdCBhbGwgdGV4dCBpbiB0aGUgbm9kZSAoYHN0YXJ0YCAtPlxuICAgICAgICAgICAgLy8gYGVuZGApLiAgSWYgdGhlcmUncyBtb3JlIHRoYW4gb25lIGxpbmUgdGhlcmUsIHRoZW4gc2VsZWN0IG9ubHkgaGFsZiBvZiBpdC4gIEFuZFxuICAgICAgICAgICAgLy8gc28gb24uICBXaGVuIHdlIGZpbmQgYSB2YWx1ZSBmb3IgYGVuZGAgdGhhdCBmaXRzIGluIG9uZSBsaW5lLCB3ZSB0cnkgaW5jcmVhc2luZ1xuICAgICAgICAgICAgLy8gaXQgKGFsc28gaW4gaGFsdmVzKSB1bnRpbCB3ZSBnZXQgdG8gdGhlIG5leHQgbGluZS4gIFRoZSBhbGdvcml0aG0gc3RvcHMgd2hlbiB0aGVcbiAgICAgICAgICAgIC8vIHJpZ2h0IHNpZGUgb2YgdGhlIGJvdW5kaW5nIGJveCBkb2VzIG5vdCBjaGFuZ2UuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gT25lIG1vcmUgdGhpbmcgdG8gbm90ZSBpcyB0aGF0IGV2ZXJ5dGhpbmcgaGFwcGVucyBpbiBhIHNpbmdsZSBUZXh0IERPTSBub2RlLlxuICAgICAgICAgICAgLy8gVGhlcmUncyBubyBvdGhlciB0YWdzIGluc2lkZSBpdCwgdGhlcmVmb3JlIHRoZSBsZWZ0L3RvcCBjb29yZGluYXRlcyBvZiB0aGVcbiAgICAgICAgICAgIC8vIGJvdW5kaW5nIGJveCB3aWxsIG5vdCBjaGFuZ2UuXG4gICAgICAgICAgICBwb3MgPSAoZnVuY3Rpb24gZmluZEVPTChtaW4sIGVvbCwgbWF4KXtcbiAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmQobm9kZSwgZW9sKTtcbiAgICAgICAgICAgICAgICB2YXIgciA9IGFjdHVhbGx5R2V0UmFuZ2VCb3VuZGluZ1JlY3QocmFuZ2UpO1xuICAgICAgICAgICAgICAgIGlmIChyLmJvdHRvbSAhPSBib3guYm90dG9tICYmIG1pbiA8IGVvbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmluZEVPTChtaW4sIChtaW4gKyBlb2wpID4+IDEsIGVvbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyLnJpZ2h0ICE9IGJveC5yaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBib3ggPSByO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW9sIDwgbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmluZEVPTChlb2wsIChlb2wgKyBtYXgpID4+IDEsIG1heCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW9sO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVvbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KShzdGFydCwgTWF0aC5taW4oZW5kLCBzdGFydCArIGVzdGltYXRlTGluZUxlbmd0aCksIGVuZCk7XG5cbiAgICAgICAgICAgIGlmIChwb3MgPT0gc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBFT0wgaXMgYXQgdGhlIHN0YXJ0LCB0aGVuIG5vIG1vcmUgdGV4dCBmaXRzIG9uIHRoaXMgbGluZS4gIFNraXAgdGhlXG4gICAgICAgICAgICAgICAgLy8gcmVtYWluZGVyIG9mIHRoaXMgbm9kZSBlbnRpcmVseSB0byBhdm9pZCBhIHN0YWNrIG92ZXJmbG93LlxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhcnQgPSBwb3M7XG5cbiAgICAgICAgICAgIHBvcyA9IHJhbmdlLnRvU3RyaW5nKCkuc2VhcmNoKC9cXHMrJC8pO1xuICAgICAgICAgICAgaWYgKHBvcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gd2hpdGVzcGFjZSBvbmx5OyB3ZSBzaG91bGQgbm90IGdldCBoZXJlLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBvcyA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBlbGltaW5hdGUgdHJhaWxpbmcgd2hpdGVzcGFjZVxuICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZChub2RlLCByYW5nZS5zdGFydE9mZnNldCArIHBvcyk7XG4gICAgICAgICAgICAgICAgYm94ID0gYWN0dWFsbHlHZXRSYW5nZUJvdW5kaW5nUmVjdChyYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhbm90aGVyIHdvcmthcm91bmQgZm9yIElFOiBpZiB3ZSByZWx5IG9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIHdlJ2xsIG92ZXJsYXAgd2l0aCB0aGUgYnVsbGV0IGZvciBMSVxuICAgICAgICAvLyBlbGVtZW50cy4gIENhbGxpbmcgZ2V0Q2xpZW50UmVjdHMoKSBhbmQgdXNpbmcgdGhlICpmaXJzdCogcmVjdCBhcHBlYXJzIHRvIGdpdmUgdXMgdGhlIGNvcnJlY3QgbG9jYXRpb24uXG4gICAgICAgIC8vIE5vdGU6IG5vdCB0byBiZSB1c2VkIGluIENocm9tZSBhcyBpdCByYW5kb21seSByZXR1cm5zIGEgemVyby13aWR0aCByZWN0YW5nbGUgZnJvbSB0aGUgcHJldmlvdXMgbGluZS5cbiAgICAgICAgaWYgKG1pY3Jvc29mdCkge1xuICAgICAgICAgICAgYm94ID0gcmFuZ2UuZ2V0Q2xpZW50UmVjdHMoKVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdHIgPSByYW5nZS50b1N0cmluZygpO1xuICAgICAgICBpZiAoIS9eKD86cHJlfHByZS13cmFwKSQvaS50ZXN0KHdoaXRlU3BhY2UpKSB7XG4gICAgICAgICAgICAvLyBub2RlIHdpdGggbm9uLXNpZ25pZmljYW50IHNwYWNlIC0tIGNvbGxhcHNlIHdoaXRlc3BhY2UuXG4gICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFxzKy9nLCBcIiBcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoL1xcdC8udGVzdChzdHIpKSB7XG4gICAgICAgICAgICAvLyB3aXRoIHNpZ25pZmljYW50IHdoaXRlc3BhY2Ugd2UgbmVlZCB0byBkbyBzb21ldGhpbmcgYWJvdXQgbGl0ZXJhbCBUQUIgY2hhcmFjdGVycy5cbiAgICAgICAgICAgIC8vIFRoZXJlJ3Mgbm8gVEFCIGdseXBoIGluIGEgZm9udCBzbyB0aGV5IHdvdWxkIGJlIHJlbmRlcmVkIGluIFBERiBhcyBhbiBlbXB0eSBib3gsXG4gICAgICAgICAgICAvLyBhbmQgdGhlIHdob2xlIHRleHQgd2lsbCBzdHJldGNoIHRvIGZpbGwgdGhlIG9yaWdpbmFsIHdpZHRoLiAgVGhlIGNvcmUgUERGIGxpYlxuICAgICAgICAgICAgLy8gZG9lcyBub3QgaGF2ZSBzdWZmaWNpZW50IGNvbnRleHQgdG8gZGVhbCB3aXRoIGl0LlxuXG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIHN0YXJ0aW5nIGNvbHVtbiBoZXJlLCBzaW5jZSB3ZSBpbml0aWFsbHkgZGlzY2FyZGVkIGFueSB3aGl0ZXNwYWNlLlxuICAgICAgICAgICAgdmFyIGNjID0gMDtcbiAgICAgICAgICAgIGZvciAocG9zID0gb3JpZ1N0YXJ0OyBwb3MgPCByYW5nZS5zdGFydE9mZnNldDsgKytwb3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IHRleHQuY2hhckNvZGVBdChwb3MpO1xuICAgICAgICAgICAgICAgIGlmIChjb2RlID09IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB3ZSBtZWV0IGEgVEFCIHdlIG11c3Qgcm91bmQgdXAgdG8gdGhlIG5leHQgdGFiIHN0b3AuXG4gICAgICAgICAgICAgICAgICAgIC8vIGluIGFsbCBicm93c2VycyBUQUJzIHNlZW0gdG8gYmUgOCBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgICAgICAgICBjYyArPSA4IC0gY2MgJSA4O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZSA9PSAxMCB8fCBjb2RlID09IDEzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGp1c3QgaW4gY2FzZSB3ZSBtZWV0IGEgbmV3bGluZSB3ZSBtdXN0IHJlc3RhcnQuXG4gICAgICAgICAgICAgICAgICAgIGNjID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBvcmRpbmFyeSBjaGFyYWN0ZXIgLS0+IGFkdmFuY2Ugb25lIGNvbHVtblxuICAgICAgICAgICAgICAgICAgICBjYysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYmFzZWQgb24gc3RhcnRpbmcgY29sdW1uLCByZXBsYWNlIGFueSBUQUIgY2hhcmFjdGVycyBpbiB0aGUgc3RyaW5nIHdlIGFjdHVhbGx5XG4gICAgICAgICAgICAvLyBoYXZlIHRvIGRpc3BsYXkgd2l0aCBzcGFjZXMgc28gdGhhdCB0aGV5IGFsaWduIHRvIGNvbHVtbnMgbXVsdGlwbGUgb2YgOC5cbiAgICAgICAgICAgIHdoaWxlICgocG9zID0gc3RyLnNlYXJjaChcIlxcdFwiKSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHZhciBpbmRlbnQgPSBcIiAgICAgICAgXCIuc3Vic3RyKDAsIDggLSAoY2MgKyBwb3MpICUgOCk7XG4gICAgICAgICAgICAgICAgc3RyID0gc3RyLnN1YnN0cigwLCBwb3MpICsgaW5kZW50ICsgc3RyLnN1YnN0cihwb3MgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgIHByZXZMaW5lQm90dG9tID0gYm94LmJvdHRvbTtcbiAgICAgICAgfVxuICAgICAgICBkcmF3VGV4dChzdHIsIGJveCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHJhd1RleHQoc3RyLCBib3gpIHtcbiAgICAgICAgLy8gSW4gSUUgdGhlIGJveCBoZWlnaHQgd2lsbCBiZSBhcHByb3hpbWF0ZWx5IGxpbmVIZWlnaHQsIHdoaWxlIGluXG4gICAgICAgIC8vIG90aGVyIGJyb3dzZXJzIGl0J2xsIChjb3JyZWN0bHkpIGJlIHRoZSBoZWlnaHQgb2YgdGhlIGJvdW5kaW5nXG4gICAgICAgIC8vIGJveCBmb3IgdGhlIGN1cnJlbnQgdGV4dC9mb250LiAgV2hpY2ggaXMgdG8gc2F5LCBJRSBzdWNrcyBhZ2Fpbi5cbiAgICAgICAgLy8gVGhlIG9ubHkgZ29vZCBzb2x1dGlvbiBJIGNhbiB0aGluayBvZiBpcyB0byBtZWFzdXJlIHRoZSB0ZXh0XG4gICAgICAgIC8vIG91cnNlbHZlcyBhbmQgY2VudGVyIHRoZSBib3VuZGluZyBib3guXG4gICAgICAgIGlmIChtaWNyb3NvZnQgJiYgIWlzTmFOKGxpbmVIZWlnaHQpKSB7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gZ2V0Rm9udEhlaWdodChmb250KTtcbiAgICAgICAgICAgIHZhciB0b3AgPSAoYm94LnRvcCArIGJveC5ib3R0b20gLSBoZWlnaHQpIC8gMjtcbiAgICAgICAgICAgIGJveCA9IHtcbiAgICAgICAgICAgICAgICB0b3AgICAgOiB0b3AsXG4gICAgICAgICAgICAgICAgcmlnaHQgIDogYm94LnJpZ2h0LFxuICAgICAgICAgICAgICAgIGJvdHRvbSA6IHRvcCArIGhlaWdodCxcbiAgICAgICAgICAgICAgICBsZWZ0ICAgOiBib3gubGVmdCxcbiAgICAgICAgICAgICAgICBoZWlnaHQgOiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgd2lkdGggIDogYm94LnJpZ2h0IC0gYm94LmxlZnRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YXIgcGF0aCA9IG5ldyBQYXRoKHsgc3Ryb2tlOiB7IGNvbG9yOiBcInJlZFwiIH19KTtcbiAgICAgICAgLy8gcGF0aC5tb3ZlVG8oYm94LmxlZnQsIGJveC50b3ApXG4gICAgICAgIC8vICAgICAubGluZVRvKGJveC5yaWdodCwgYm94LnRvcClcbiAgICAgICAgLy8gICAgIC5saW5lVG8oYm94LnJpZ2h0LCBib3guYm90dG9tKVxuICAgICAgICAvLyAgICAgLmxpbmVUbyhib3gubGVmdCwgYm94LmJvdHRvbSlcbiAgICAgICAgLy8gICAgIC5jbG9zZSgpO1xuICAgICAgICAvLyBncm91cC5hcHBlbmQocGF0aCk7XG5cbiAgICAgICAgc3dpdGNoICh0ZXh0VHJhbnNmb3JtKSB7XG4gICAgICAgICAgY2FzZSBcInVwcGVyY2FzZVwiOlxuICAgICAgICAgICAgc3RyID0gc3RyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwibG93ZXJjYXNlXCI6XG4gICAgICAgICAgICBzdHIgPSBzdHIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJjYXBpdGFsaXplXCI6XG4gICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvKD86XnxcXHMpXFxTL2csIGwgPT4gbC50b1VwcGVyQ2FzZSgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRleHQgPSBuZXcgVGV4dFJlY3QoXG4gICAgICAgICAgICBzdHIsIG5ldyBnZW8uUmVjdChbIGJveC5sZWZ0LCBib3gudG9wIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIGJveC53aWR0aCwgYm94LmhlaWdodCBdKSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmb250OiBmb250LFxuICAgICAgICAgICAgICAgIGZpbGw6IHsgY29sb3I6IGNvbG9yIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgZ3JvdXAuYXBwZW5kKHRleHQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRyYXdUZXh0TGluZShsaW5lV2lkdGgsIHRleHRCb3gsIGNvbG9yLCB5cG9zKSB7XG4gICAgICAgIGlmIChjb2xvcikge1xuICAgICAgICAgICAgdmFyIHBhdGggPSBuZXcgUGF0aCh7IHN0cm9rZToge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBsaW5lV2lkdGgsXG4gICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yXG4gICAgICAgICAgICB9fSk7XG5cbiAgICAgICAgICAgIHlwb3MgLT0gbGluZVdpZHRoO1xuICAgICAgICAgICAgcGF0aC5tb3ZlVG8odGV4dEJveC5sZWZ0LCB5cG9zKVxuICAgICAgICAgICAgICAgIC5saW5lVG8odGV4dEJveC5yaWdodCwgeXBvcyk7XG4gICAgICAgICAgICBncm91cC5hcHBlbmQocGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWNvcmF0ZU92ZXIoYm94KSB7XG4gICAgICAgIGxldCB3aWR0aCA9IGZvbnRTaXplIC8gMTI7XG4gICAgICAgIGRyYXdUZXh0TGluZSh3aWR0aCwgYm94LCBsaW5lVGhyb3VnaCwgYm94LmJvdHRvbSAtIGJveC5oZWlnaHQgLyAyLjcpO1xuICAgICAgICBkcmF3VGV4dExpbmUod2lkdGgsIGJveCwgb3ZlcmxpbmUsIGJveC50b3ApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlY29yYXRlVW5kZXIoYm94KSB7XG4gICAgICAgIGxldCB3aWR0aCA9IGZvbnRTaXplIC8gMTI7XG4gICAgICAgIGxldCB1bmRlcmxpbmVQb3MgPSBib3guYm90dG9tO1xuICAgICAgICBpZiAodW5kZXJsaW5lT2Zmc2V0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHVuZGVybGluZVBvcyArPSB1bmRlcmxpbmVPZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bmRlcmxpbmVQb3MgKz0gd2lkdGg7IC8vIGZvciBcImF1dG9cIiBpdCBzZWVtcyBiZXR0ZXIgdG8gYWRkIGxpbmUgd2lkdGhcbiAgICAgICAgfVxuICAgICAgICBkcmF3VGV4dExpbmUod2lkdGgsIGJveCwgdW5kZXJsaW5lLCB1bmRlcmxpbmVQb3MpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ3JvdXBJblN0YWNraW5nQ29udGV4dChlbGVtZW50LCBncm91cCwgekluZGV4KSB7XG4gICAgdmFyIG1haW47XG4gICAgaWYgKHpJbmRleCAhPSBcImF1dG9cIikge1xuICAgICAgICAvLyB1c2UgdGhlIGN1cnJlbnQgc3RhY2tpbmcgY29udGV4dFxuICAgICAgICBtYWluID0gbm9kZUluZm8uX3N0YWNraW5nQ29udGV4dC5ncm91cDtcbiAgICAgICAgekluZGV4ID0gcGFyc2VGbG9hdCh6SW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5vcm1hbCBmbG93IOKAlCB1c2UgZ2l2ZW4gY29udGFpbmVyLiAgd2Ugc3RpbGwgaGF2ZSB0b1xuICAgICAgICAvLyBmaWd1cmUgb3V0IHdoZXJlIHNob3VsZCB3ZSBpbnNlcnQgdGhpcyBlbGVtZW50IHdpdGggdGhlXG4gICAgICAgIC8vIGFzc3VtcHRpb24gdGhhdCBpdHMgei1pbmRleCBpcyB6ZXJvLCBhcyB0aGUgZ3JvdXAgbWlnaHRcbiAgICAgICAgLy8gYWxyZWFkeSBjb250YWluIGVsZW1lbnRzIHdpdGggaGlnaGVyIHotaW5kZXguXG4gICAgICAgIG1haW4gPSBncm91cDtcbiAgICAgICAgekluZGV4ID0gMDtcbiAgICB9XG4gICAgdmFyIGEgPSBtYWluLmNoaWxkcmVuO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoYVtpXS5fZG9tX3pJbmRleCAhPSBudWxsICYmIGFbaV0uX2RvbV96SW5kZXggPiB6SW5kZXgpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHRtcCA9IG5ldyBHcm91cCgpO1xuICAgIG1haW4uaW5zZXJ0KGksIHRtcCk7XG4gICAgdG1wLl9kb21fekluZGV4ID0gekluZGV4O1xuXG4gICAgaWYgKG1haW4gIT09IGdyb3VwKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiUGxhY2luZ1wiLCBlbGVtZW50LCBcImluXCIsIG5vZGVJbmZvLl9zdGFja2luZ0NvbnRleHQuZWxlbWVudCwgXCJhdCBwb3NpdGlvblwiLCBpLCBcIiAvIFwiLCBhLmxlbmd0aCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGEuc2xpY2UoaSsxKSk7XG5cbiAgICAgICAgLy8gaWYgKG5vZGVJbmZvLl9tYXRyaXgpIHtcbiAgICAgICAgLy8gICAgIHRtcC50cmFuc2Zvcm0obm9kZUluZm8uX21hdHJpeCk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgaWYgKG5vZGVJbmZvLl9jbGlwYm94KSB7XG4gICAgICAgICAgICB2YXIgbSA9IG5vZGVJbmZvLl9tYXRyaXguaW52ZXJ0KCk7XG4gICAgICAgICAgICB2YXIgciA9IG5vZGVJbmZvLl9jbGlwYm94LnRyYW5zZm9ybUNvcHkobSk7XG4gICAgICAgICAgICBzZXRDbGlwcGluZyh0bXAsIFBhdGguZnJvbVJlY3QocikpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocik7XG4gICAgICAgICAgICAvLyB0bXAuYXBwZW5kKFBhdGguZnJvbVJlY3QocikpO1xuICAgICAgICAgICAgLy8gdG1wLmFwcGVuZChuZXcgVGV4dChlbGVtZW50LmNsYXNzTmFtZSB8fCBlbGVtZW50LmlkLCByLnRvcExlZnQoKSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRtcDtcbn1cblxuZnVuY3Rpb24gcmVuZGVyRWxlbWVudChlbGVtZW50LCBjb250YWluZXIpIHtcbiAgICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgdXBkYXRlQ291bnRlcnMoc3R5bGUpO1xuXG4gICAgaWYgKC9eKHN0eWxlfHNjcmlwdHxsaW5rfG1ldGF8aWZyYW1lfGNvbHxjb2xncm91cCkkL2kudGVzdChlbGVtZW50LnRhZ05hbWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobm9kZUluZm8uX2NsaXBib3ggPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9wYWNpdHkgPSBwYXJzZUZsb2F0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwib3BhY2l0eVwiKSk7XG4gICAgdmFyIHZpc2liaWxpdHkgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcInZpc2liaWxpdHlcIik7XG4gICAgdmFyIGRpc3BsYXkgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImRpc3BsYXlcIik7XG5cbiAgICBpZiAob3BhY2l0eSA9PT0gMCB8fCB2aXNpYmlsaXR5ID09IFwiaGlkZGVuXCIgfHwgZGlzcGxheSA9PSBcIm5vbmVcIikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRyID0gZ2V0VHJhbnNmb3JtKHN0eWxlKTtcbiAgICB2YXIgZ3JvdXA7XG5cbiAgICB2YXIgekluZGV4ID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJ6LWluZGV4XCIpO1xuICAgIGlmICgodHIgfHwgb3BhY2l0eSA8IDEpICYmIHpJbmRleCA9PSBcImF1dG9cIikge1xuICAgICAgICB6SW5kZXggPSAwO1xuICAgIH1cbiAgICBncm91cCA9IGdyb3VwSW5TdGFja2luZ0NvbnRleHQoZWxlbWVudCwgY29udGFpbmVyLCB6SW5kZXgpO1xuXG4gICAgLy8gWFhYOiByZW1vdmUgYXQgc29tZSBwb2ludFxuICAgIC8vIGdyb3VwLl9wZGZFbGVtZW50ID0gZWxlbWVudDtcbiAgICAvLyBncm91cC5vcHRpb25zLl9wZGZEZWJ1ZyA9IFwiXCI7XG4gICAgLy8gaWYgKGVsZW1lbnQuaWQpIHtcbiAgICAvLyAgICAgZ3JvdXAub3B0aW9ucy5fcGRmRGVidWcgPSBcIiNcIiArIGVsZW1lbnQuaWQ7XG4gICAgLy8gfVxuICAgIC8vIGlmIChlbGVtZW50LmNsYXNzTmFtZSkge1xuICAgIC8vICAgICBncm91cC5vcHRpb25zLl9wZGZEZWJ1ZyArPSBcIi5cIiArIGVsZW1lbnQuY2xhc3NOYW1lLnNwbGl0KFwiIFwiKS5qb2luKFwiLlwiKTtcbiAgICAvLyB9XG5cbiAgICBpZiAob3BhY2l0eSA8IDEpIHtcbiAgICAgICAgZ3JvdXAub3BhY2l0eShvcGFjaXR5ICogZ3JvdXAub3BhY2l0eSgpKTtcbiAgICB9XG5cbiAgICBwdXNoTm9kZUluZm8oZWxlbWVudCwgc3R5bGUsIGdyb3VwKTtcblxuICAgIGlmICghdHIpIHtcbiAgICAgICAgX3JlbmRlcldpdGhQc2V1ZG9FbGVtZW50cyhlbGVtZW50LCBncm91cCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzYXZlU3R5bGUoZWxlbWVudCwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIG11c3QgY2xlYXIgdHJhbnNmb3JtLCBzbyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgcmV0dXJucyBjb3JyZWN0IHZhbHVlcy5cbiAgICAgICAgICAgIHBsZWFzZVNldFByb3BlcnR5VmFsdWUoZWxlbWVudC5zdHlsZSwgXCJ0cmFuc2Zvcm1cIiwgXCJub25lXCIsIFwiaW1wb3J0YW50XCIpO1xuXG4gICAgICAgICAgICAvLyBtdXN0IGFsc28gY2xlYXIgdHJhbnNpdGlvbnMsIHNvIGNvcnJlY3QgdmFsdWVzIGFyZSByZXR1cm5lZCAqaW1tZWRpYXRlbHkqXG4gICAgICAgICAgICBwbGVhc2VTZXRQcm9wZXJ0eVZhbHVlKGVsZW1lbnQuc3R5bGUsIFwidHJhbnNpdGlvblwiLCBcIm5vbmVcIiwgXCJpbXBvcnRhbnRcIik7XG5cbiAgICAgICAgICAgIC8vIHRoZSBwcmVzZW5jZSBvZiBhbnkgdHJhbnNmb3JtIG1ha2VzIGl0IGJlaGF2ZSBsaWtlIGl0IGhhZCBwb3NpdGlvbjogcmVsYXRpdmUsXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHdoeSBub3QuXG4gICAgICAgICAgICAvLyBodHRwOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdGhvdWdodHMvMjAxMS8wOS8xMi91bi1maXhpbmctZml4ZWQtZWxlbWVudHMtd2l0aC1jc3MtdHJhbnNmb3Jtcy9cbiAgICAgICAgICAgIGlmIChnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcInBvc2l0aW9uXCIpID09IFwic3RhdGljXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBidXQgb25seSBpZiBpdCdzIG5vdCBhbHJlYWR5IHBvc2l0aW9uZWQuIDotL1xuICAgICAgICAgICAgICAgIHBsZWFzZVNldFByb3BlcnR5VmFsdWUoZWxlbWVudC5zdHlsZSwgXCJwb3NpdGlvblwiLCBcInJlbGF0aXZlXCIsIFwiaW1wb3J0YW50XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBtdXN0IHRyYW5zbGF0ZSB0byBvcmlnaW4gYmVmb3JlIGFwcGx5aW5nIHRoZSBDU1NcbiAgICAgICAgICAgIC8vIHRyYW5zZm9ybWF0aW9uLCB0aGVuIHRyYW5zbGF0ZSBiYWNrLlxuICAgICAgICAgICAgdmFyIGJib3ggPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdmFyIHggPSBiYm94LmxlZnQgKyB0ci5vcmlnaW5bMF07XG4gICAgICAgICAgICB2YXIgeSA9IGJib3gudG9wICsgdHIub3JpZ2luWzFdO1xuICAgICAgICAgICAgdmFyIG0gPSBbIDEsIDAsIDAsIDEsIC14LCAteSBdO1xuICAgICAgICAgICAgbSA9IG1tdWwobSwgdHIubWF0cml4KTtcbiAgICAgICAgICAgIG0gPSBtbXVsKG0sIFsgMSwgMCwgMCwgMSwgeCwgeSBdKTtcbiAgICAgICAgICAgIG0gPSBzZXRUcmFuc2Zvcm0oZ3JvdXAsIG0pO1xuXG4gICAgICAgICAgICBub2RlSW5mby5fbWF0cml4ID0gbm9kZUluZm8uX21hdHJpeC5tdWx0aXBseUNvcHkobSk7XG5cbiAgICAgICAgICAgIF9yZW5kZXJXaXRoUHNldWRvRWxlbWVudHMoZWxlbWVudCwgZ3JvdXApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwb3BOb2RlSW5mbygpO1xuXG4gICAgLy9kcmF3RGVidWdCb3goZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgY29udGFpbmVyKTtcbn1cblxuLy8gZnVuY3Rpb24gZHJhd0RlYnVnQm94KGJveCwgZ3JvdXAsIGNvbG9yKSB7XG4vLyAgICAgdmFyIHBhdGggPSBQYXRoLmZyb21SZWN0KG5ldyBnZW8uUmVjdChbIGJveC5sZWZ0LCBib3gudG9wIF0sIFsgYm94LndpZHRoLCBib3guaGVpZ2h0IF0pKTtcbi8vICAgICBpZiAoY29sb3IpIHtcbi8vICAgICAgICAgcGF0aC5zdHJva2UoY29sb3IpO1xuLy8gICAgIH1cbi8vICAgICBncm91cC5hcHBlbmQocGF0aCk7XG4vLyB9XG5cbi8vIGZ1bmN0aW9uIGR1bXBUZXh0Tm9kZShub2RlKSB7XG4vLyAgICAgdmFyIHR4dCA9IG5vZGUuZGF0YS5yZXBsYWNlKC9eXFxzKy8sIFwiXCIpO1xuLy8gICAgIGlmICh0eHQubGVuZ3RoIDwgMTAwKSB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKG5vZGUuZGF0YS5sZW5ndGggKyBcIjogfFwiICsgdHh0KTtcbi8vICAgICB9IGVsc2Uge1xuLy8gICAgICAgICBjb25zb2xlLmxvZyhub2RlLmRhdGEubGVuZ3RoICsgXCI6IHxcIiArIHR4dC5zdWJzdHIoMCwgNTApICsgXCJ8Li4ufFwiICsgdHh0LnN1YnN0cigtNTApKTtcbi8vICAgICB9XG4vLyB9XG5cbmZ1bmN0aW9uIG1tdWwoYSwgYikge1xuICAgIHZhciBhMSA9IGFbMF0sIGIxID0gYVsxXSwgYzEgPSBhWzJdLCBkMSA9IGFbM10sIGUxID0gYVs0XSwgZjEgPSBhWzVdO1xuICAgIHZhciBhMiA9IGJbMF0sIGIyID0gYlsxXSwgYzIgPSBiWzJdLCBkMiA9IGJbM10sIGUyID0gYls0XSwgZjIgPSBiWzVdO1xuICAgIHJldHVybiBbXG4gICAgICAgIGExKmEyICsgYjEqYzIsICAgICAgICAgIGExKmIyICsgYjEqZDIsXG4gICAgICAgIGMxKmEyICsgZDEqYzIsICAgICAgICAgIGMxKmIyICsgZDEqZDIsXG4gICAgICAgIGUxKmEyICsgZjEqYzIgKyBlMiwgICAgIGUxKmIyICsgZjEqZDIgKyBmMlxuICAgIF07XG59XG5cbmV4cG9ydCB7IGRyYXdET00sIGRyYXdUZXh0LCBnZXRGb250RmFjZXMgfTtcbiJdLCJuYW1lcyI6WyJzdXBlciIsImNvbnN0IiwibGV0IiwidGhpcyIsImV2ZW50TmFtZSIsImFyZ3VtZW50cyIsImlkeCIsInRlbXBsYXRlIiwiYnJvd3NlciIsImFwcGVuZCIsInNpemUiLCJ0b1N0cmluZyIsInRyYW5zZm9ybSIsIkVsZW1lbnQiLCJjcmVhdGVUcmFuc2Zvcm0iLCJDaXJjbGUiLCJHZW9tZXRyeUNpcmNsZSIsImNsb3NlIiwicG93IiwiQXJjIiwicmFkIiwibnVtYmVyU2lnbiIsInRhbmdlbnQiLCJjb250cm9sUG9pbnRzIiwiU1BBQ0UiLCJwb2ludCIsIkRFRkFVTFRfU1RST0tFIiwiR2VvbWV0cnlBcmMiLCJJbWFnZSIsIkRFRkFVTFRfT1BUSU9OUyIsIlJlY3QiLCJHZW9tZXRyeVJlY3QiLCJwb2ludHMiLCJpbnN0YW5jZSIsIlN1cmZhY2UiLCJyZW5kZXJTVkciLCJCYXNlU3VyZmFjZSIsIk5PREVfTUFQIiwiTm9kZSIsIkdyb3VwTm9kZSIsIlJvb3ROb2RlIiwiUGF0aE5vZGUiLCJBcmNOb2RlIiwiQ2lyY2xlTm9kZSIsIkltYWdlTm9kZSIsIk11bHRpUGF0aE5vZGUiLCJSZWN0Tm9kZSIsIlRleHROb2RlIiwic3VwcG9ydCIsIlNWR1N1cmZhY2UiLCJDYW52YXNTdXJmYWNlIiwiaGFzT3duUHJvcGVydHkiLCJkZWZsYXRlIiwicGFrb0RlZmxhdGUiLCJURVhUX1JFTkRFUklOR19NT0RFIiwiUERGLlRFWFRfUkVOREVSSU5HX01PREUiLCJyZW5kZXIiLCJQREYuY2xlYXJJbWFnZUNhY2hlIiwiUERGLnBhcnNlRm9udERlZiIsIlBERi5nZXRGb250VVJMIiwiUERGLkRvY3VtZW50IiwiZ2VvLk1hdHJpeCIsIlBERi5sb2FkRm9udHMiLCJQREYubG9hZEltYWdlcyIsInNhdmVBcyIsInV0aWxfc2F2ZUFzIiwiZHJhd0ltYWdlIiwicGFyc2VDb2xvciIsInV0aWxzX3BhcnNlQ29sb3IiLCJnZW8uUmVjdCIsInNsaWNlIiwiSU1BR0VfQ0FDSEUiLCJjYW52YXMiLCJQREYuZGVmaW5lRm9udCIsInNldFRyYW5zZm9ybSIsIlBERi5nZXRQYXBlck9wdGlvbnMiLCJjb21waWxlVGVtcGxhdGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZHJhd1RleHQiLCJsYXN0IiwiZ2V0Rm9udFVSTCIsInNldENsaXBwaW5nIiwiZ2VvLkFyYyIsIndyYXAiLCJnZW8udHJhbnNmb3JtIiwiZ2VvLkNpcmNsZSIsInN2ZyIsImFsaWduIiwibW11bCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWUsSUFBTSxLQUFLLEdBQUMscUJBQUEsQUFFMUI7O0FDQUQsSUFBTSxVQUFVLEdBQWM7SUFBQyxtQkFDaEIsR0FBRztRQUNWQSxRQUFLLEtBQUEsQ0FBQyxJQUFBLENBQUMsQ0FBQzs7UUFFUixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztLQUNyQjs7OztrREFBQTs7SUFFRCxxQkFBQSxJQUFJLGtCQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFOzs7O1FBQzNCQyxJQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdkNB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U0FDakIsTUFBTTtZQUNILENBQUMsSUFBSSxFQUFFLENBQUM7O1lBRVJELElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEJBLElBQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEJBLElBQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN0QkEsSUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMxQkEsSUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztZQUVoQyxRQUFRLENBQUM7WUFDVCxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNO1lBQ25DLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU07WUFDbkMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTTtZQUNuQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNO1lBQ25DLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU07WUFDbkMsU0FBUyxDQUFDLEdB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LElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakNBLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7O0lBRS9CQSxJQUFNLEVBQUUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekRBLElBQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztJQUUxREEsSUFBTSxJQUFJLEdBQUcsUUFBUSxLQUFLLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7O0lBRXpDQSxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1QkEsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUJDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFCQSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzs7SUFFMUJBLElBQUksS0FBSyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQzs7SUFFbEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1FBQ1gsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDekMsRUFBRSxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDOztRQUV0QixFQUFFLEdBQUcsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDekI7O0lBRURBLElBQUksTUFBTSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7O0lBRTdGLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ2YsTUFBTSxHQUFHLENBQUMsQ0FBQztLQUNkOztJQUVERCxJQUFNLEdBQUcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3BDQSxJQUFNLEdBQUcsR0FBRyxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7O0lBRXRDQSxJQUFNLEVBQUUsR0FBRyxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JEQSxJQUFNLEVBQUUsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7SUFHckRBLElBQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMzQkEsSUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzNCQSxJQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM1QkEsSUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7O0lBRTVCQSxJQUFNLFVBQVUsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDOztJQUUxRkEsSUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNuSEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7O0lBRTVFLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtRQUNyQixLQUFLLElBQUksR0FBRyxDQUFDO0tBQ2hCOztJQUVELElBQUksS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7UUFDcEIsS0FBSyxJQUFJLEdBQUcsQ0FBQztLQUNoQjtJQUNEQSxJQUFJLFFBQVEsR0FBRyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQ2xDRCxJQUFNLFlBQVksR0FBRyxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM1QyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLFlBQVksQ0FBQzs7SUFFckQsT0FBTztRQUNILE1BQU0sRUFBRSxJQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ3pCLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLE9BQU8sRUFBRSxFQUFFO1FBQ1gsT0FBTyxFQUFFLEVBQUU7UUFDWCxTQUFTLEVBQUUsUUFBUTtLQUN0QixDQUFDO0NBQ0w7O0FBRUQsU0FBUyxjQUFjLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtJQUNsQ0MsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDOztJQUV2QixPQUFPLFVBQVUsR0FBRyxLQUFLLEVBQUU7UUFDdkIsVUFBVSxJQUFJLEVBQUUsQ0FBQztLQUNwQjs7SUFFRCxPQUFPLFVBQVUsQ0FBQztDQUNyQixBQUVELEFBQW1COztBQ2pVbkJELElBQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFDckJBLElBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDbkJBLElBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7QUFDekJBLElBQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7QUFDdkJBLElBQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7QUFDdkJBLElBQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUM7O0FBRTNCLElBQU0sYUFBYSxHQUFxQjtJQUFDLHNCQUMxQixDQUFDLEtBQVUsRUFBRTtxQ0FBUCxHQUFHLEVBQUU7O1FBQ2xCRCxlQUFLLEtBQUEsQ0FBQyxJQUFBLENBQUMsQ0FBQzs7UUFFUixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3hDOzs7O3dEQUFBOztJQUVELHdCQUFBLFFBQVEsc0JBQUMsS0FBSyxFQUFFO1FBQ1osSUFBSSxLQUFLLEVBQUU7WUFDUCxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDOztZQUVwQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDZixPQUFPLElBQUksQ0FBQztTQUNmOztRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN4QixDQUFBOztJQUVELHdCQUFBLElBQUksc0JBQUc7UUFDSEMsSUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzNCQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQzs7UUFFMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7UUFFcEIsT0FBTyxNQUFNLENBQUM7S0FDakIsQ0FBQTs7SUFFRCx3QkFBQSxLQUFLLHVCQUFHO1FBQ0osT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzNCLENBQUE7O0lBRUQsd0JBQUEsR0FBRyxxQkFBRztRQUNGQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzNCQSxJQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDOztRQUUvQixJQUFJLE1BQU0sRUFBRTtZQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQzVCOztRQUVELE9BQU8sTUFBTSxDQUFDO0tBQ2pCLENBQUE7O0lBRUQsd0JBQUEsTUFBTSxzQkFBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO1FBQ25CQSxJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxQ0EsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDOztRQUV0RCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7O1FBRWYsT0FBTyxNQUFNLENBQUM7S0FDakIsQ0FBQTs7SUFFRCx3QkFBQSxLQUFLLHVCQUFHO1FBQ0pBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDM0JBLElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7O1FBRWpDLElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDNUI7O1FBRUQsT0FBTyxNQUFNLENBQUM7S0FDakIsQ0FBQTs7SUFFRCx3QkFBQSxPQUFPLHlCQUFHO1FBQ05BLElBQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUMzQkEsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7O1FBRTdDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7O1FBRXBCLE9BQU8sTUFBTSxDQUFDO0tBQ2pCLENBQUE7O0lBRUQsd0JBQUEsT0FBTyxxQkFBQyxPQUFPLEVBQUU7OztRQUNiQSxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDOztRQUUzQixLQUFLQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNuQyxJQUFJQyxNQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssT0FBTyxFQUFFO2dCQUN2QixPQUFPLEdBQUcsQ0FBQzthQUNkO1NBQ0o7UUFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ2IsQ0FBQTs7SUFFRCx3QkFBQSxPQUFPLHFCQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO1FBQzlCRixJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzs7UUFFdkUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztRQUU1QixPQUFPLE1BQU0sQ0FBQztLQUNqQixDQUFBOztJQUVELHdCQUFBLElBQUksa0JBQUMsUUFBUSxFQUFFO1FBQ1gsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDbEIsQ0FBQTs7SUFFRCx3QkFBQSxPQUFPLHFCQUFDLFFBQVEsRUFBRTtRQUNkLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ2xCLENBQUE7O0lBRUQsd0JBQUEsWUFBWSwwQkFBQyxRQUFRLEVBQUU7OztRQUNuQixLQUFLQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDNUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQ0MsTUFBSSxDQUFDLENBQUM7U0FDbkM7S0FDSixDQUFBOztJQUVELHdCQUFBLGNBQWMsNEJBQUMsUUFBUSxFQUFFOzs7UUFDckIsS0FBS0QsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzVDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUNDLE1BQUksQ0FBQyxDQUFDO1NBQ3RDO0tBQ0osQ0FBQTs7SUFFRCx3QkFBQSxPQUFPLHVCQUFHLEVBQUUsQ0FBQTs7O0VBbEhZLFlBbUgzQixHQUFBLEFBRUQsQUFBNkI7O0FDNUg3QixJQUFNLHFCQUFxQixHQUFzQjtJQUFDOzs7Ozs7OztJQUFBLGdDQUM5QyxPQUFPLHVCQUFHO1FBQ04sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0tBQ3pCLENBQUE7OztFQUgrQixhQUluQyxHQUFBLEFBRUQ7O0FDTGUsU0FBUyxlQUFlLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUU7SUFDbkVGLElBQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hGQSxJQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDVyxXQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQzs7SUFFL0UsT0FBTyxZQUFZLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7OztBQ1B4QixTQUFTLGdCQUFnQixDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO0lBQ3ZEWCxJQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNyQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDMUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7O0FDTDNCLFNBQVMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRTtJQUNyRCxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDdkYsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0tBQ25CLENBQUM7OztBQ0ROLElBQU0sYUFBYSxHQUFjO0lBQUMsc0JBRW5CLENBQUMsSUFBUSxFQUFFLEdBQU8sRUFBRTttQ0FBZixHQUFHLENBQUMsQ0FBSztpQ0FBQSxHQUFHLENBQUM7O1FBQ3pCRCxRQUFLLEtBQUEsQ0FBQyxJQUFBLENBQUMsQ0FBQzs7UUFFUixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztLQUNsQjs7Ozt3REFBQTs7SUFFRCx3QkFBQSxHQUFHLGlCQUFDLE9BQU8sRUFBRTtRQUNULE9BQU8sSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDbEgsQ0FBQTs7SUFFRCx3QkFBQSxXQUFXLHlCQUFDLEtBQUssRUFBRTtRQUNmLE9BQU8sSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3pELENBQUE7O0lBRUQsd0JBQUEsTUFBTSxzQkFBRztRQUNMLE9BQU8sSUFBSSxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ25ELENBQUE7O0lBRUQsd0JBQUEsUUFBUSxzQkFBQyxPQUFPLEVBQUU7UUFDZCxPQUFPLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHO1lBQ3RFLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMxRCxDQUFBOztJQUVELHdCQUFBLGdCQUFnQiw4QkFBQyxLQUFLLEVBQUU7UUFDcEIsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDO0tBQ2pFLENBQUE7O0lBRUQsd0JBQUEsT0FBTyxxQkFBQyxDQUFDLEVBQUU7UUFDUEMsSUFBTW1CLE1BQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDbkIsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEVBLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs7UUFFaEMsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQ21CLE1BQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQ0EsTUFBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDaEYsQ0FBQTs7SUFFRCx3QkFBQSxNQUFNLG9CQUFDLE9BQU8sRUFBRTtRQUNaLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQztLQUNqRSxDQUFBOztJQUVELHdCQUFBLE1BQU0sc0JBQUc7UUFDTCxPQUFPLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0tBQ3pCLENBQUE7OztFQTVDdUIsS0E2QzNCLEdBQUEsQUFFRDs7QUMvQ0EsU0FBU0MsWUFBVSxDQUFDLENBQUMsRUFBRTtJQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3pCOztBQUVELFNBQVMsc0JBQXNCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDckNwQixJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDekQsT0FBTztRQUNILENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzlCLENBQUM7Q0FDTDs7O0FBR0QsQUFBZSxTQUFTLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNuRCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDVCxPQUFPLHNCQUFzQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDMUM7O0lBRURBLElBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlEQSxJQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakdBLElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbERBLElBQU0sQ0FBQyxHQUFHLElBQUksYUFBYSxD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QUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDO1NBQ3JELENBQUM7S0FDTCxDQUFBOztJQUVELGtCQUFBLGNBQWMsNEJBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQzNCQSxJQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNwQ0EsSUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNuQ0EsSUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNsQkEsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUNDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNYQSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7O1FBRVgsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1QsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNULEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3BCO1NBQ0osTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3JCLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzVCLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQy9COztRQUVEQSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFF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QUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7O0lBRTVELElBQVEsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDakQsSUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNqRCxJQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2pELElBQVEsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDakQsSUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNqRCxJQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2pELElBQVEsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDakQsSUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNqRCxJQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2pELElBQVEsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7O0lBRWhELElBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDM0MsSUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN0RCxJQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3pELElBQVEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDekQsSUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7Q0FDNUMsQ0FBQTs7QUFFTCxrQkFBSSxZQUFZLDBCQUFDLEtBQUssRUFBRTtJQUNwQixPQUFXLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0NBQ3pELENBQUE7O0FBRUwsa0JBQUksVUFBVSwwQkFBRztJQUNiLE9BQVcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDNUIsQ0FBQSxBQUdMLEFBQW1COztBQ2xtQ1pGLElBQU1tRCxTQUFPLEdBQUdDLHlCQUFXLENBQUM7O0FBRW5DLEFBQU8sU0FBUyxlQUFlLEdBQUc7SUFDOUIsT0FBTyxJQUFJLENBQUM7Q0FDZjs7QUNORDs7Ozs7QUFLQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFFQXBELElBQU1PLFNBQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQ2hDUCxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7O0FBRWhCLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDOztBQUV6QkEsSUFBTSxVQUFVLEdBQUc7SUFDZixFQUFFLFVBQVUsRUFBRSxPQUFPLEdBQUcsT0FBTyxFQUFFO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE9BQU8sR0FBRyxPQUFPLEVBQUU7SUFDakMsRUFBRSxVQUFVLEVBQUUsT0FBTyxHQUFHLE9BQU8sRUFBRTtJQUNqQyxFQUFFLFVBQVUsRUFBRSxNQUFNLElBQUksT0FBTyxFQUFFO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE1BQU0sSUFBSSxNQUFNLEdBQUc7SUFDakMsRUFBRSxVQUFVLEVBQUUsTUFBTSxJQUFJLE1BQU0sR0FBRztJQUNqQyxFQUFFLFVBQVUsRUFBRSxNQUFNLElBQUksTUFBTSxHQUFHO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE1BQU0sSUFBSSxNQUFNLEdBQUc7SUFDakMsRUFBRSxVQUFVLEVBQUUsTUFBTSxJQUFJLE1BQU0sR0FBRztJQUNqQyxFQUFFLFVBQVUsRUFBRSxNQUFNLElBQUksTUFBTSxHQUFHO0lBQ2pDLEdBQUcsU0FBUyxFQUFFLEtBQUssS0FBSyxNQUFNLEdBQUc7SUFDakMsRUFBRSxVQUFVLEVBQUUsT0FBTyxHQUFHLE9BQU8sRUFBRTtJQUNqQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEdBQUcsT0FBTyxFQUFFO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE9BQU8sR0FBRyxPQUFPLEVBQUU7SUFDakMsRUFBRSxVQUFVLEVBQUUsT0FBTyxHQUFHLE9BQU8sRUFBRTtJQUNqQyxFQUFFLFVBQVUsRUFBRSxNQUFNLElBQUksT0FBTyxFQUFFO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE1BQU0sSUFBSSxNQUFNLEdBQUc7SUFDakMsRUFBRSxVQUFVLEVBQUUsTUFBTSxJQUFJLE1BQU0sR0FBRztJQUNqQyxFQUFFLFVBQVUsRUFBRSxNQUFNLElBQUksTUFBTSxHQUFHO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE1BQU0sSUFBSSxNQUFNLEdBQUc7SUFDakMsRUFBRSxVQUFVLEVBQUUsTUFBTSxJQUFJLE1BQU0sR0FBRztJQUNqQyxHQUFHLFNBQVMsRUFBRSxLQUFLLEtBQUssTUFBTSxHQUFHO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE9BQU8sR0FBRyxPQUFPLEVBQUU7SUFDakMsRUFBRSxVQUFVLEVBQUUsT0FBTyxHQUFHLE9BQU8sRUFBRTtJQUNqQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEdBQUcsT0FBTyxFQUFFO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE1BQU0sSUFBSSxP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QUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7SUFFekQsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUc7UUFDWixHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUN6QixHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUMxQixHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUN6QixHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztLQUM3QixDQUFDOztJQUVGLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNQLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFD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